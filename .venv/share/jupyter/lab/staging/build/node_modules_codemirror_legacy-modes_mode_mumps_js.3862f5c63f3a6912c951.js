"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_mumps_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/mumps.js":
/*!*************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/mumps.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mumps: () => (/* binding */ mumps)
/* harmony export */ });
function wordRegexp(words) {
  return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
}

var singleOperators = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
var doubleOperators = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
var singleDelimiters = new RegExp("^[\\.,:]");
var brackets = new RegExp("[()]");
var identifiers = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
var commandKeywords = ["break","close","do","else","for","goto", "halt", "hang", "if", "job","kill","lock","merge","new","open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b","c","d","e","f","g", "h", "i", "j","k","l","m","n","o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
// The following list includes intrinsic functions _and_ special variables
var intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);
var command = wordRegexp(commandKeywords);

function tokenBase(stream, state) {
  if (stream.sol()) {
    state.label = true;
    state.commandMode = 0;
  }

  // The <space> character has meaning in MUMPS. Ignoring consecutive
  // spaces would interfere with interpreting whether the next non-space
  // character belongs to the command or argument context.

  // Examine each character and update a mode variable whose interpretation is:
  //   >0 => command    0 => argument    <0 => command post-conditional
  var ch = stream.peek();

  if (ch == " " || ch == "\t") { // Pre-process <space>
    state.label = false;
    if (state.commandMode == 0)
      state.commandMode = 1;
    else if ((state.commandMode < 0) || (state.commandMode == 2))
      state.commandMode = 0;
  } else if ((ch != ".") && (state.commandMode > 0)) {
    if (ch == ":")
      state.commandMode = -1;   // SIS - Command post-conditional
    else
      state.commandMode = 2;
  }

  // Do not color parameter list as line tag
  if ((ch === "(") || (ch === "\u0009"))
    state.label = false;

  // MUMPS comment starts with ";"
  if (ch === ";") {
    stream.skipToEnd();
    return "comment";
  }

  // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator
  if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
    return "number";

  // Handle Strings
  if (ch == '"') {
    if (stream.skipTo('"')) {
      stream.next();
      return "string";
    } else {
      stream.skipToEnd();
      return "error";
    }
  }

  // Handle operators and Delimiters
  if (stream.match(doubleOperators) || stream.match(singleOperators))
    return "operator";

  // Prevents leading "." in DO block from falling through to error
  if (stream.match(singleDelimiters))
    return null;

  if (brackets.test(ch)) {
    stream.next();
    return "bracket";
  }

  if (state.commandMode > 0 && stream.match(command))
    return "controlKeyword";

  if (stream.match(intrinsicFuncs))
    return "builtin";

  if (stream.match(identifiers))
    return "variable";

  // Detect dollar-sign when not a documented intrinsic function
  // "^" may introduce a GVN or SSVN - Color same as function
  if (ch === "$" || ch === "^") {
    stream.next();
    return "builtin";
  }

  // MUMPS Indirection
  if (ch === "@") {
    stream.next();
    return "string.special";
  }

  if (/[\w%]/.test(ch)) {
    stream.eatWhile(/[\w%]/);
    return "variable";
  }

  // Handle non-detected items
  stream.next();
  return "error";
}

const mumps = {
  name: "mumps",
  startState: function() {
    return {
      label: false,
      commandMode: 0
    };
  },

  token: function(stream, state) {
    var style = tokenBase(stream, state);
    if (state.label) return "tag";
    return style;
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfbXVtcHNfanMuMzg2MmY1YzYzZjNhNjkxMmM5NTEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGNvZGVtaXJyb3IvbGVnYWN5LW1vZGVzL21vZGUvbXVtcHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd29yZFJlZ2V4cCh3b3Jkcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oKFwiICsgd29yZHMuam9pbihcIil8KFwiKSArIFwiKSlcXFxcYlwiLCBcImlcIik7XG59XG5cbnZhciBzaW5nbGVPcGVyYXRvcnMgPSBuZXcgUmVnRXhwKFwiXltcXFxcK1xcXFwtXFxcXCovJiMhXz9cXFxcXFxcXDw+PVxcXFwnXFxcXFtcXFxcXV1cIik7XG52YXIgZG91YmxlT3BlcmF0b3JzID0gbmV3IFJlZ0V4cChcIl4oKCc9KXwoPD0pfCg+PSl8KCc+KXwoJzwpfChbWyl8KF1dKXwoXiQpKVwiKTtcbnZhciBzaW5nbGVEZWxpbWl0ZXJzID0gbmV3IFJlZ0V4cChcIl5bXFxcXC4sOl1cIik7XG52YXIgYnJhY2tldHMgPSBuZXcgUmVnRXhwKFwiWygpXVwiKTtcbnZhciBpZGVudGlmaWVycyA9IG5ldyBSZWdFeHAoXCJeWyVBLVphLXpdW0EtWmEtejAtOV0qXCIpO1xudmFyIGNvbW1hbmRLZXl3b3JkcyA9IFtcImJyZWFrXCIsXCJjbG9zZVwiLFwiZG9cIixcImVsc2VcIixcImZvclwiLFwiZ290b1wiLCBcImhhbHRcIiwgXCJoYW5nXCIsIFwiaWZcIiwgXCJqb2JcIixcImtpbGxcIixcImxvY2tcIixcIm1lcmdlXCIsXCJuZXdcIixcIm9wZW5cIiwgXCJxdWl0XCIsIFwicmVhZFwiLCBcInNldFwiLCBcInRjb21taXRcIiwgXCJ0cm9sbGJhY2tcIiwgXCJ0c3RhcnRcIiwgXCJ1c2VcIiwgXCJ2aWV3XCIsIFwid3JpdGVcIiwgXCJ4ZWN1dGVcIiwgXCJiXCIsXCJjXCIsXCJkXCIsXCJlXCIsXCJmXCIsXCJnXCIsIFwiaFwiLCBcImlcIiwgXCJqXCIsXCJrXCIsXCJsXCIsXCJtXCIsXCJuXCIsXCJvXCIsIFwicVwiLCBcInJcIiwgXCJzXCIsIFwidGNcIiwgXCJ0cm9cIiwgXCJ0c1wiLCBcInVcIiwgXCJ2XCIsIFwid1wiLCBcInhcIl07XG4vLyBUaGUgZm9sbG93aW5nIGxpc3QgaW5jbHVkZXMgaW50cmluc2ljIGZ1bmN0aW9ucyBfYW5kXyBzcGVjaWFsIHZhcmlhYmxlc1xudmFyIGludHJpbnNpY0Z1bmNzV29yZHMgPSBbXCJcXFxcJGFzY2lpXCIsIFwiXFxcXCRjaGFyXCIsIFwiXFxcXCRkYXRhXCIsIFwiXFxcXCRlY29kZVwiLCBcIlxcXFwkZXN0YWNrXCIsIFwiXFxcXCRldHJhcFwiLCBcIlxcXFwkZXh0cmFjdFwiLCBcIlxcXFwkZmluZFwiLCBcIlxcXFwkZm51bWJlclwiLCBcIlxcXFwkZ2V0XCIsIFwiXFxcXCRob3JvbG9nXCIsIFwiXFxcXCRpb1wiLCBcIlxcXFwkaW5jcmVtZW50XCIsIFwiXFxcXCRqb2JcIiwgXCJcXFxcJGp1c3RpZnlcIiwgXCJcXFxcJGxlbmd0aFwiLCBcIlxcXFwkbmFtZVwiLCBcIlxcXFwkbmV4dFwiLCBcIlxcXFwkb3JkZXJcIiwgXCJcXFxcJHBpZWNlXCIsIFwiXFxcXCRxbGVuZ3RoXCIsIFwiXFxcXCRxc3Vic2NyaXB0XCIsIFwiXFxcXCRxdWVyeVwiLCBcIlxcXFwkcXVpdFwiLCBcIlxcXFwkcmFuZG9tXCIsIFwiXFxcXCRyZXZlcnNlXCIsIFwiXFxcXCRzZWxlY3RcIiwgXCJcXFxcJHN0YWNrXCIsIFwiXFxcXCR0ZXN0XCIsIFwiXFxcXCR0ZXh0XCIsIFwiXFxcXCR0cmFuc2xhdGVcIiwgXCJcXFxcJHZpZXdcIiwgXCJcXFxcJHhcIiwgXCJcXFxcJHlcIiwgXCJcXFxcJGFcIiwgXCJcXFxcJGNcIiwgXCJcXFxcJGRcIiwgXCJcXFxcJGVcIiwgXCJcXFxcJGVjXCIsIFwiXFxcXCRlc1wiLCBcIlxcXFwkZXRcIiwgXCJcXFxcJGZcIiwgXCJcXFxcJGZuXCIsIFwiXFxcXCRnXCIsIFwiXFxcXCRoXCIsIFwiXFxcXCRpXCIsIFwiXFxcXCRqXCIsIFwiXFxcXCRsXCIsIFwiXFxcXCRuXCIsIFwiXFxcXCRuYVwiLCBcIlxcXFwkb1wiLCBcIlxcXFwkcFwiLCBcIlxcXFwkcVwiLCBcIlxcXFwkcWxcIiwgXCJcXFxcJHFzXCIsIFwiXFxcXCRyXCIsIFwiXFxcXCRyZVwiLCBcIlxcXFwkc1wiLCBcIlxcXFwkc3RcIiwgXCJcXFxcJHRcIiwgXCJcXFxcJHRyXCIsIFwiXFxcXCR2XCIsIFwiXFxcXCR6XCJdO1xudmFyIGludHJpbnNpY0Z1bmNzID0gd29yZFJlZ2V4cChpbnRyaW5zaWNGdW5jc1dvcmRzKTtcbnZhciBjb21tYW5kID0gd29yZFJlZ2V4cChjb21tYW5kS2V5d29yZHMpO1xuXG5mdW5jdGlvbiB0b2tlbkJhc2Uoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLnNvbCgpKSB7XG4gICAgc3RhdGUubGFiZWwgPSB0cnVlO1xuICAgIHN0YXRlLmNvbW1hbmRNb2RlID0gMDtcbiAgfVxuXG4gIC8vIFRoZSA8c3BhY2U+IGNoYXJhY3RlciBoYXMgbWVhbmluZyBpbiBNVU1QUy4gSWdub3JpbmcgY29uc2VjdXRpdmVcbiAgLy8gc3BhY2VzIHdvdWxkIGludGVyZmVyZSB3aXRoIGludGVycHJldGluZyB3aGV0aGVyIHRoZSBuZXh0IG5vbi1zcGFjZVxuICAvLyBjaGFyYWN0ZXIgYmVsb25ncyB0byB0aGUgY29tbWFuZCBvciBhcmd1bWVudCBjb250ZXh0LlxuXG4gIC8vIEV4YW1pbmUgZWFjaCBjaGFyYWN0ZXIgYW5kIHVwZGF0ZSBhIG1vZGUgdmFyaWFibGUgd2hvc2UgaW50ZXJwcmV0YXRpb24gaXM6XG4gIC8vICAgPjAgPT4gY29tbWFuZCAgICAwID0+IGFyZ3VtZW50ICAgIDwwID0+IGNvbW1hbmQgcG9zdC1jb25kaXRpb25hbFxuICB2YXIgY2ggPSBzdHJlYW0ucGVlaygpO1xuXG4gIGlmIChjaCA9PSBcIiBcIiB8fCBjaCA9PSBcIlxcdFwiKSB7IC8vIFByZS1wcm9jZXNzIDxzcGFjZT5cbiAgICBzdGF0ZS5sYWJlbCA9IGZhbHNlO1xuICAgIGlmIChzdGF0ZS5jb21tYW5kTW9kZSA9PSAwKVxuICAgICAgc3RhdGUuY29tbWFuZE1vZGUgPSAxO1xuICAgIGVsc2UgaWYgKChzdGF0ZS5jb21tYW5kTW9kZSA8IDApIHx8IChzdGF0ZS5jb21tYW5kTW9kZSA9PSAyKSlcbiAgICAgIHN0YXRlLmNvbW1hbmRNb2RlID0gMDtcbiAgfSBlbHNlIGlmICgoY2ggIT0gXCIuXCIpICYmIChzdGF0ZS5jb21tYW5kTW9kZSA+IDApKSB7XG4gICAgaWYgKGNoID09IFwiOlwiKVxuICAgICAgc3RhdGUuY29tbWFuZE1vZGUgPSAtMTsgICAvLyBTSVMgLSBDb21tYW5kIHBvc3QtY29uZGl0aW9uYWxcbiAgICBlbHNlXG4gICAgICBzdGF0ZS5jb21tYW5kTW9kZSA9IDI7XG4gIH1cblxuICAvLyBEbyBub3QgY29sb3IgcGFyYW1ldGVyIGxpc3QgYXMgbGluZSB0YWdcbiAgaWYgKChjaCA9PT0gXCIoXCIpIHx8IChjaCA9PT0gXCJcXHUwMDA5XCIpKVxuICAgIHN0YXRlLmxhYmVsID0gZmFsc2U7XG5cbiAgLy8gTVVNUFMgY29tbWVudCBzdGFydHMgd2l0aCBcIjtcIlxuICBpZiAoY2ggPT09IFwiO1wiKSB7XG4gICAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICAgIHJldHVybiBcImNvbW1lbnRcIjtcbiAgfVxuXG4gIC8vIE51bWJlciBMaXRlcmFscyAvLyBTSVMvUkxNIC0gTVVNUFMgcGVybWl0cyBjYW5vbmljIG51bWJlciBmb2xsb3dlZCBieSBjb25jYXRlbmF0ZSBvcGVyYXRvclxuICBpZiAoc3RyZWFtLm1hdGNoKC9eWy0rXT9cXGQrKFxcLlxcZCspPyhbZUVdWy0rXT9cXGQrKT8vKSlcbiAgICByZXR1cm4gXCJudW1iZXJcIjtcblxuICAvLyBIYW5kbGUgU3RyaW5nc1xuICBpZiAoY2ggPT0gJ1wiJykge1xuICAgIGlmIChzdHJlYW0uc2tpcFRvKCdcIicpKSB7XG4gICAgICBzdHJlYW0ubmV4dCgpO1xuICAgICAgcmV0dXJuIFwic3RyaW5nXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICAgfVxuICB9XG5cbiAgLy8gSGFuZGxlIG9wZXJhdG9ycyBhbmQgRGVsaW1pdGVyc1xuICBpZiAoc3RyZWFtLm1hdGNoKGRvdWJsZU9wZXJhdG9ycykgfHwgc3RyZWFtLm1hdGNoKHNpbmdsZU9wZXJhdG9ycykpXG4gICAgcmV0dXJuIFwib3BlcmF0b3JcIjtcblxuICAvLyBQcmV2ZW50cyBsZWFkaW5nIFwiLlwiIGluIERPIGJsb2NrIGZyb20gZmFsbGluZyB0aHJvdWdoIHRvIGVycm9yXG4gIGlmIChzdHJlYW0ubWF0Y2goc2luZ2xlRGVsaW1pdGVycykpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgaWYgKGJyYWNrZXRzLnRlc3QoY2gpKSB7XG4gICAgc3RyZWFtLm5leHQoKTtcbiAgICByZXR1cm4gXCJicmFja2V0XCI7XG4gIH1cblxuICBpZiAoc3RhdGUuY29tbWFuZE1vZGUgPiAwICYmIHN0cmVhbS5tYXRjaChjb21tYW5kKSlcbiAgICByZXR1cm4gXCJjb250cm9sS2V5d29yZFwiO1xuXG4gIGlmIChzdHJlYW0ubWF0Y2goaW50cmluc2ljRnVuY3MpKVxuICAgIHJldHVybiBcImJ1aWx0aW5cIjtcblxuICBpZiAoc3RyZWFtLm1hdGNoKGlkZW50aWZpZXJzKSlcbiAgICByZXR1cm4gXCJ2YXJpYWJsZVwiO1xuXG4gIC8vIERldGVjdCBkb2xsYXItc2lnbiB3aGVuIG5vdCBhIGRvY3VtZW50ZWQgaW50cmluc2ljIGZ1bmN0aW9uXG4gIC8vIFwiXlwiIG1heSBpbnRyb2R1Y2UgYSBHVk4gb3IgU1NWTiAtIENvbG9yIHNhbWUgYXMgZnVuY3Rpb25cbiAgaWYgKGNoID09PSBcIiRcIiB8fCBjaCA9PT0gXCJeXCIpIHtcbiAgICBzdHJlYW0ubmV4dCgpO1xuICAgIHJldHVybiBcImJ1aWx0aW5cIjtcbiAgfVxuXG4gIC8vIE1VTVBTIEluZGlyZWN0aW9uXG4gIGlmIChjaCA9PT0gXCJAXCIpIHtcbiAgICBzdHJlYW0ubmV4dCgpO1xuICAgIHJldHVybiBcInN0cmluZy5zcGVjaWFsXCI7XG4gIH1cblxuICBpZiAoL1tcXHclXS8udGVzdChjaCkpIHtcbiAgICBzdHJlYW0uZWF0V2hpbGUoL1tcXHclXS8pO1xuICAgIHJldHVybiBcInZhcmlhYmxlXCI7XG4gIH1cblxuICAvLyBIYW5kbGUgbm9uLWRldGVjdGVkIGl0ZW1zXG4gIHN0cmVhbS5uZXh0KCk7XG4gIHJldHVybiBcImVycm9yXCI7XG59XG5cbmV4cG9ydCBjb25zdCBtdW1wcyA9IHtcbiAgbmFtZTogXCJtdW1wc1wiLFxuICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGZhbHNlLFxuICAgICAgY29tbWFuZE1vZGU6IDBcbiAgICB9O1xuICB9LFxuXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIHN0eWxlID0gdG9rZW5CYXNlKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5sYWJlbCkgcmV0dXJuIFwidGFnXCI7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9