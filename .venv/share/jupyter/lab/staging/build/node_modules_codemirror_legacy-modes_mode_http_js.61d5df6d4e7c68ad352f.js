"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_http_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/http.js":
/*!************************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/http.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   http: () => (/* binding */ http)
/* harmony export */ });
function failFirstLine(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return "error";
}

function start(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d/)) {
    state.cur = responseStatusCode;
    return "keyword";
  } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
    state.cur = requestPath;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}

function responseStatusCode(stream, state) {
  var code = stream.match(/^\d+/);
  if (!code) return failFirstLine(stream, state);

  state.cur = responseStatusText;
  var status = Number(code[0]);
  if (status >= 100 && status < 400) {
    return "atom";
  } else {
    return "error";
  }
}

function responseStatusText(stream, state) {
  stream.skipToEnd();
  state.cur = header;
  return null;
}

function requestPath(stream, state) {
  stream.eatWhile(/\S/);
  state.cur = requestProtocol;
  return "string.special";
}

function requestProtocol(stream, state) {
  if (stream.match(/^HTTP\/\d\.\d$/)) {
    state.cur = header;
    return "keyword";
  } else {
    return failFirstLine(stream, state);
  }
}

function header(stream) {
  if (stream.sol() && !stream.eat(/[ \t]/)) {
    if (stream.match(/^.*?:/)) {
      return "atom";
    } else {
      stream.skipToEnd();
      return "error";
    }
  } else {
    stream.skipToEnd();
    return "string";
  }
}

function body(stream) {
  stream.skipToEnd();
  return null;
}

const http = {
  name: "http",
  token: function(stream, state) {
    var cur = state.cur;
    if (cur != header && cur != body && stream.eatSpace()) return null;
    return cur(stream, state);
  },

  blankLine: function(state) {
    state.cur = body;
  },

  startState: function() {
    return {cur: start};
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfaHR0cF9qcy42MWQ1ZGY2ZDRlN2M2OGFkMzUyZi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxZQUFZO0FBQ1o7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9odHRwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGZhaWxGaXJzdExpbmUoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gIHN0YXRlLmN1ciA9IGhlYWRlcjtcbiAgcmV0dXJuIFwiZXJyb3JcIjtcbn1cblxuZnVuY3Rpb24gc3RhcnQoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLm1hdGNoKC9eSFRUUFxcL1xcZFxcLlxcZC8pKSB7XG4gICAgc3RhdGUuY3VyID0gcmVzcG9uc2VTdGF0dXNDb2RlO1xuICAgIHJldHVybiBcImtleXdvcmRcIjtcbiAgfSBlbHNlIGlmIChzdHJlYW0ubWF0Y2goL15bQS1aXSsvKSAmJiAvWyBcXHRdLy50ZXN0KHN0cmVhbS5wZWVrKCkpKSB7XG4gICAgc3RhdGUuY3VyID0gcmVxdWVzdFBhdGg7XG4gICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWlsRmlyc3RMaW5lKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3BvbnNlU3RhdHVzQ29kZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBjb2RlID0gc3RyZWFtLm1hdGNoKC9eXFxkKy8pO1xuICBpZiAoIWNvZGUpIHJldHVybiBmYWlsRmlyc3RMaW5lKHN0cmVhbSwgc3RhdGUpO1xuXG4gIHN0YXRlLmN1ciA9IHJlc3BvbnNlU3RhdHVzVGV4dDtcbiAgdmFyIHN0YXR1cyA9IE51bWJlcihjb2RlWzBdKTtcbiAgaWYgKHN0YXR1cyA+PSAxMDAgJiYgc3RhdHVzIDwgNDAwKSB7XG4gICAgcmV0dXJuIFwiYXRvbVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImVycm9yXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzcG9uc2VTdGF0dXNUZXh0KHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLnNraXBUb0VuZCgpO1xuICBzdGF0ZS5jdXIgPSBoZWFkZXI7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0UGF0aChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5lYXRXaGlsZSgvXFxTLyk7XG4gIHN0YXRlLmN1ciA9IHJlcXVlc3RQcm90b2NvbDtcbiAgcmV0dXJuIFwic3RyaW5nLnNwZWNpYWxcIjtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdFByb3RvY29sKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0cmVhbS5tYXRjaCgvXkhUVFBcXC9cXGRcXC5cXGQkLykpIHtcbiAgICBzdGF0ZS5jdXIgPSBoZWFkZXI7XG4gICAgcmV0dXJuIFwia2V5d29yZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWlsRmlyc3RMaW5lKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhlYWRlcihzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbS5zb2woKSAmJiAhc3RyZWFtLmVhdCgvWyBcXHRdLykpIHtcbiAgICBpZiAoc3RyZWFtLm1hdGNoKC9eLio/Oi8pKSB7XG4gICAgICByZXR1cm4gXCJhdG9tXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0cmVhbS5za2lwVG9FbmQoKTtcbiAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBib2R5KHN0cmVhbSkge1xuICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgY29uc3QgaHR0cCA9IHtcbiAgbmFtZTogXCJodHRwXCIsXG4gIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGN1ciA9IHN0YXRlLmN1cjtcbiAgICBpZiAoY3VyICE9IGhlYWRlciAmJiBjdXIgIT0gYm9keSAmJiBzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGN1cihzdHJlYW0sIHN0YXRlKTtcbiAgfSxcblxuICBibGFua0xpbmU6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgc3RhdGUuY3VyID0gYm9keTtcbiAgfSxcblxuICBzdGFydFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge2N1cjogc3RhcnR9O1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9