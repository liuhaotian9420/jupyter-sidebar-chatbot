(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["vendors-node_modules_mermaid_dist_mermaid_core_mjs"],{

/***/ "./node_modules/@braintree/sanitize-url/dist/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/@braintree/sanitize-url/dist/constants.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BLANK_URL = exports.relativeFirstCharacters = exports.whitespaceEscapeCharsRegex = exports.urlSchemeRegex = exports.ctrlCharactersRegex = exports.htmlCtrlEntityRegex = exports.htmlEntitiesRegex = exports.invalidProtocolRegex = void 0;
exports.invalidProtocolRegex = /^([^\w]*)(javascript|data|vbscript)/im;
exports.htmlEntitiesRegex = /&#(\w+)(^\w|;)?/g;
exports.htmlCtrlEntityRegex = /&(newline|tab);/gi;
exports.ctrlCharactersRegex = /[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim;
exports.urlSchemeRegex = /^.+(:|&colon;)/gim;
exports.whitespaceEscapeCharsRegex = /(\\|%5[cC])((%(6[eE]|72|74))|[nrt])/g;
exports.relativeFirstCharacters = [".", "/"];
exports.BLANK_URL = "about:blank";


/***/ }),

/***/ "./node_modules/@braintree/sanitize-url/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@braintree/sanitize-url/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.sanitizeUrl = void 0;
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@braintree/sanitize-url/dist/constants.js");
function isRelativeUrlWithoutProtocol(url) {
    return constants_1.relativeFirstCharacters.indexOf(url[0]) > -1;
}
function decodeHtmlCharacters(str) {
    var removedNullByte = str.replace(constants_1.ctrlCharactersRegex, "");
    return removedNullByte.replace(constants_1.htmlEntitiesRegex, function (match, dec) {
        return String.fromCharCode(dec);
    });
}
function isValidUrl(url) {
    return URL.canParse(url);
}
function decodeURI(uri) {
    try {
        return decodeURIComponent(uri);
    }
    catch (e) {
        // Ignoring error
        // It is possible that the URI contains a `%` not associated
        // with URI/URL-encoding.
        return uri;
    }
}
function sanitizeUrl(url) {
    if (!url) {
        return constants_1.BLANK_URL;
    }
    var charsToDecode;
    var decodedUrl = decodeURI(url.trim());
    do {
        decodedUrl = decodeHtmlCharacters(decodedUrl)
            .replace(constants_1.htmlCtrlEntityRegex, "")
            .replace(constants_1.ctrlCharactersRegex, "")
            .replace(constants_1.whitespaceEscapeCharsRegex, "")
            .trim();
        decodedUrl = decodeURI(decodedUrl);
        charsToDecode =
            decodedUrl.match(constants_1.ctrlCharactersRegex) ||
                decodedUrl.match(constants_1.htmlEntitiesRegex) ||
                decodedUrl.match(constants_1.htmlCtrlEntityRegex) ||
                decodedUrl.match(constants_1.whitespaceEscapeCharsRegex);
    } while (charsToDecode && charsToDecode.length > 0);
    var sanitizedUrl = decodedUrl;
    if (!sanitizedUrl) {
        return constants_1.BLANK_URL;
    }
    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {
        return sanitizedUrl;
    }
    // Remove any leading whitespace before checking the URL scheme
    var trimmedUrl = sanitizedUrl.trimStart();
    var urlSchemeParseResults = trimmedUrl.match(constants_1.urlSchemeRegex);
    if (!urlSchemeParseResults) {
        return sanitizedUrl;
    }
    var urlScheme = urlSchemeParseResults[0].toLowerCase().trim();
    if (constants_1.invalidProtocolRegex.test(urlScheme)) {
        return constants_1.BLANK_URL;
    }
    var backSanitized = trimmedUrl.replace(/\\/g, "/");
    // Handle special cases for mailto: and custom deep-link protocols
    if (urlScheme === "mailto:" || urlScheme.includes("://")) {
        return backSanitized;
    }
    // For http and https URLs, perform additional validation
    if (urlScheme === "http:" || urlScheme === "https:") {
        if (!isValidUrl(backSanitized)) {
            return constants_1.BLANK_URL;
        }
        var url_1 = new URL(backSanitized);
        url_1.protocol = url_1.protocol.toLowerCase();
        url_1.hostname = url_1.hostname.toLowerCase();
        return url_1.toString();
    }
    return backSanitized;
}
exports.sanitizeUrl = sanitizeUrl;


/***/ }),

/***/ "./node_modules/@iconify/utils/lib/customisations/defaults.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/customisations/defaults.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultIconCustomisations: () => (/* binding */ defaultIconCustomisations),
/* harmony export */   defaultIconSizeCustomisations: () => (/* binding */ defaultIconSizeCustomisations)
/* harmony export */ });
/* harmony import */ var _icon_defaults_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../icon/defaults.mjs */ "./node_modules/@iconify/utils/lib/icon/defaults.mjs");


const defaultIconSizeCustomisations = Object.freeze({
  width: null,
  height: null
});
const defaultIconCustomisations = Object.freeze({
  // Dimensions
  ...defaultIconSizeCustomisations,
  // Transformations
  ..._icon_defaults_mjs__WEBPACK_IMPORTED_MODULE_0__.defaultIconTransformations
});




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/icon-set/get-icon.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/icon-set/get-icon.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getIconData: () => (/* binding */ getIconData),
/* harmony export */   internalGetIconData: () => (/* binding */ internalGetIconData)
/* harmony export */ });
/* harmony import */ var _icon_merge_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../icon/merge.mjs */ "./node_modules/@iconify/utils/lib/icon/merge.mjs");
/* harmony import */ var _tree_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tree.mjs */ "./node_modules/@iconify/utils/lib/icon-set/tree.mjs");





function internalGetIconData(data, name, tree) {
  const icons = data.icons;
  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
  let currentProps = {};
  function parse(name2) {
    currentProps = (0,_icon_merge_mjs__WEBPACK_IMPORTED_MODULE_0__.mergeIconData)(
      icons[name2] || aliases[name2],
      currentProps
    );
  }
  parse(name);
  tree.forEach(parse);
  return (0,_icon_merge_mjs__WEBPACK_IMPORTED_MODULE_0__.mergeIconData)(data, currentProps);
}
function getIconData(data, name) {
  if (data.icons[name]) {
    return internalGetIconData(data, name, []);
  }
  const tree = (0,_tree_mjs__WEBPACK_IMPORTED_MODULE_1__.getIconsTree)(data, [name])[name];
  return tree ? internalGetIconData(data, name, tree) : null;
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/icon-set/tree.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/icon-set/tree.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getIconsTree: () => (/* binding */ getIconsTree)
/* harmony export */ });
function getIconsTree(data, names) {
  const icons = data.icons;
  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);
  const resolved = /* @__PURE__ */ Object.create(null);
  function resolve(name) {
    if (icons[name]) {
      return resolved[name] = [];
    }
    if (!(name in resolved)) {
      resolved[name] = null;
      const parent = aliases[name] && aliases[name].parent;
      const value = parent && resolve(parent);
      if (value) {
        resolved[name] = [parent].concat(value);
      }
    }
    return resolved[name];
  }
  (names || Object.keys(icons).concat(Object.keys(aliases))).forEach(resolve);
  return resolved;
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/icon/defaults.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/icon/defaults.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   defaultExtendedIconProps: () => (/* binding */ defaultExtendedIconProps),
/* harmony export */   defaultIconDimensions: () => (/* binding */ defaultIconDimensions),
/* harmony export */   defaultIconProps: () => (/* binding */ defaultIconProps),
/* harmony export */   defaultIconTransformations: () => (/* binding */ defaultIconTransformations)
/* harmony export */ });
const defaultIconDimensions = Object.freeze(
  {
    left: 0,
    top: 0,
    width: 16,
    height: 16
  }
);
const defaultIconTransformations = Object.freeze({
  rotate: 0,
  vFlip: false,
  hFlip: false
});
const defaultIconProps = Object.freeze({
  ...defaultIconDimensions,
  ...defaultIconTransformations
});
const defaultExtendedIconProps = Object.freeze({
  ...defaultIconProps,
  body: "",
  hidden: false
});




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/icon/merge.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/icon/merge.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeIconData: () => (/* binding */ mergeIconData)
/* harmony export */ });
/* harmony import */ var _defaults_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaults.mjs */ "./node_modules/@iconify/utils/lib/icon/defaults.mjs");
/* harmony import */ var _transformations_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformations.mjs */ "./node_modules/@iconify/utils/lib/icon/transformations.mjs");



function mergeIconData(parent, child) {
  const result = (0,_transformations_mjs__WEBPACK_IMPORTED_MODULE_0__.mergeIconTransformations)(parent, child);
  for (const key in _defaults_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultExtendedIconProps) {
    if (key in _defaults_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultIconTransformations) {
      if (key in parent && !(key in result)) {
        result[key] = _defaults_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultIconTransformations[key];
      }
    } else if (key in child) {
      result[key] = child[key];
    } else if (key in parent) {
      result[key] = parent[key];
    }
  }
  return result;
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/icon/name.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/icon/name.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   matchIconName: () => (/* binding */ matchIconName),
/* harmony export */   stringToIcon: () => (/* binding */ stringToIcon),
/* harmony export */   validateIconName: () => (/* binding */ validateIconName)
/* harmony export */ });
const matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;
const stringToIcon = (value, validate, allowSimpleName, provider = "") => {
  const colonSeparated = value.split(":");
  if (value.slice(0, 1) === "@") {
    if (colonSeparated.length < 2 || colonSeparated.length > 3) {
      return null;
    }
    provider = colonSeparated.shift().slice(1);
  }
  if (colonSeparated.length > 3 || !colonSeparated.length) {
    return null;
  }
  if (colonSeparated.length > 1) {
    const name2 = colonSeparated.pop();
    const prefix = colonSeparated.pop();
    const result = {
      // Allow provider without '@': "provider:prefix:name"
      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,
      prefix,
      name: name2
    };
    return validate && !validateIconName(result) ? null : result;
  }
  const name = colonSeparated[0];
  const dashSeparated = name.split("-");
  if (dashSeparated.length > 1) {
    const result = {
      provider,
      prefix: dashSeparated.shift(),
      name: dashSeparated.join("-")
    };
    return validate && !validateIconName(result) ? null : result;
  }
  if (allowSimpleName && provider === "") {
    const result = {
      provider,
      prefix: "",
      name
    };
    return validate && !validateIconName(result, allowSimpleName) ? null : result;
  }
  return null;
};
const validateIconName = (icon, allowSimpleName) => {
  if (!icon) {
    return false;
  }
  return !!// Check prefix: cannot be empty, unless allowSimpleName is enabled
  // Check name: cannot be empty
  ((allowSimpleName && icon.prefix === "" || !!icon.prefix) && !!icon.name);
};




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/icon/transformations.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/icon/transformations.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeIconTransformations: () => (/* binding */ mergeIconTransformations)
/* harmony export */ });
function mergeIconTransformations(obj1, obj2) {
  const result = {};
  if (!obj1.hFlip !== !obj2.hFlip) {
    result.hFlip = true;
  }
  if (!obj1.vFlip !== !obj2.vFlip) {
    result.vFlip = true;
  }
  const rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;
  if (rotate) {
    result.rotate = rotate;
  }
  return result;
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/svg/build.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/svg/build.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   iconToSVG: () => (/* binding */ iconToSVG),
/* harmony export */   isUnsetKeyword: () => (/* binding */ isUnsetKeyword)
/* harmony export */ });
/* harmony import */ var _icon_defaults_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../icon/defaults.mjs */ "./node_modules/@iconify/utils/lib/icon/defaults.mjs");
/* harmony import */ var _customisations_defaults_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../customisations/defaults.mjs */ "./node_modules/@iconify/utils/lib/customisations/defaults.mjs");
/* harmony import */ var _size_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./size.mjs */ "./node_modules/@iconify/utils/lib/svg/size.mjs");
/* harmony import */ var _defs_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defs.mjs */ "./node_modules/@iconify/utils/lib/svg/defs.mjs");





const isUnsetKeyword = (value) => value === "unset" || value === "undefined" || value === "none";
function iconToSVG(icon, customisations) {
  const fullIcon = {
    ..._icon_defaults_mjs__WEBPACK_IMPORTED_MODULE_0__.defaultIconProps,
    ...icon
  };
  const fullCustomisations = {
    ..._customisations_defaults_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultIconCustomisations,
    ...customisations
  };
  const box = {
    left: fullIcon.left,
    top: fullIcon.top,
    width: fullIcon.width,
    height: fullIcon.height
  };
  let body = fullIcon.body;
  [fullIcon, fullCustomisations].forEach((props) => {
    const transformations = [];
    const hFlip = props.hFlip;
    const vFlip = props.vFlip;
    let rotation = props.rotate;
    if (hFlip) {
      if (vFlip) {
        rotation += 2;
      } else {
        transformations.push(
          "translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"
        );
        transformations.push("scale(-1 1)");
        box.top = box.left = 0;
      }
    } else if (vFlip) {
      transformations.push(
        "translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"
      );
      transformations.push("scale(1 -1)");
      box.top = box.left = 0;
    }
    let tempValue;
    if (rotation < 0) {
      rotation -= Math.floor(rotation / 4) * 4;
    }
    rotation = rotation % 4;
    switch (rotation) {
      case 1:
        tempValue = box.height / 2 + box.top;
        transformations.unshift(
          "rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
      case 2:
        transformations.unshift(
          "rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")"
        );
        break;
      case 3:
        tempValue = box.width / 2 + box.left;
        transformations.unshift(
          "rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")"
        );
        break;
    }
    if (rotation % 2 === 1) {
      if (box.left !== box.top) {
        tempValue = box.left;
        box.left = box.top;
        box.top = tempValue;
      }
      if (box.width !== box.height) {
        tempValue = box.width;
        box.width = box.height;
        box.height = tempValue;
      }
    }
    if (transformations.length) {
      body = (0,_defs_mjs__WEBPACK_IMPORTED_MODULE_2__.wrapSVGContent)(
        body,
        '<g transform="' + transformations.join(" ") + '">',
        "</g>"
      );
    }
  });
  const customisationsWidth = fullCustomisations.width;
  const customisationsHeight = fullCustomisations.height;
  const boxWidth = box.width;
  const boxHeight = box.height;
  let width;
  let height;
  if (customisationsWidth === null) {
    height = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
    width = (0,_size_mjs__WEBPACK_IMPORTED_MODULE_3__.calculateSize)(height, boxWidth / boxHeight);
  } else {
    width = customisationsWidth === "auto" ? boxWidth : customisationsWidth;
    height = customisationsHeight === null ? (0,_size_mjs__WEBPACK_IMPORTED_MODULE_3__.calculateSize)(width, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;
  }
  const attributes = {};
  const setAttr = (prop, value) => {
    if (!isUnsetKeyword(value)) {
      attributes[prop] = value.toString();
    }
  };
  setAttr("width", width);
  setAttr("height", height);
  const viewBox = [box.left, box.top, boxWidth, boxHeight];
  attributes.viewBox = viewBox.join(" ");
  return {
    attributes,
    viewBox,
    body
  };
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/svg/defs.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/svg/defs.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeDefsAndContent: () => (/* binding */ mergeDefsAndContent),
/* harmony export */   splitSVGDefs: () => (/* binding */ splitSVGDefs),
/* harmony export */   wrapSVGContent: () => (/* binding */ wrapSVGContent)
/* harmony export */ });
function splitSVGDefs(content, tag = "defs") {
  let defs = "";
  const index = content.indexOf("<" + tag);
  while (index >= 0) {
    const start = content.indexOf(">", index);
    const end = content.indexOf("</" + tag);
    if (start === -1 || end === -1) {
      break;
    }
    const endEnd = content.indexOf(">", end);
    if (endEnd === -1) {
      break;
    }
    defs += content.slice(start + 1, end).trim();
    content = content.slice(0, index).trim() + content.slice(endEnd + 1);
  }
  return {
    defs,
    content
  };
}
function mergeDefsAndContent(defs, content) {
  return defs ? "<defs>" + defs + "</defs>" + content : content;
}
function wrapSVGContent(body, start, end) {
  const split = splitSVGDefs(body);
  return mergeDefsAndContent(split.defs, start + split.content + end);
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/svg/html.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/svg/html.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   iconToHTML: () => (/* binding */ iconToHTML)
/* harmony export */ });
function iconToHTML(body, attributes) {
  let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';
  for (const attr in attributes) {
    renderAttribsHTML += " " + attr + '="' + attributes[attr] + '"';
  }
  return '<svg xmlns="http://www.w3.org/2000/svg"' + renderAttribsHTML + ">" + body + "</svg>";
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/svg/id.mjs":
/*!****************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/svg/id.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   replaceIDs: () => (/* binding */ replaceIDs)
/* harmony export */ });
const regex = /\sid="(\S+)"/g;
const randomPrefix = "IconifyId" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);
let counter = 0;
function replaceIDs(body, prefix = randomPrefix) {
  const ids = [];
  let match;
  while (match = regex.exec(body)) {
    ids.push(match[1]);
  }
  if (!ids.length) {
    return body;
  }
  const suffix = "suffix" + (Math.random() * 16777216 | Date.now()).toString(16);
  ids.forEach((id) => {
    const newID = typeof prefix === "function" ? prefix(id) : prefix + (counter++).toString();
    const escapedID = id.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    body = body.replace(
      // Allowed characters before id: [#;"]
      // Allowed characters after id: [)"], .[a-z]
      new RegExp('([#;"])(' + escapedID + ')([")]|\\.[a-z])', "g"),
      "$1" + newID + suffix + "$3"
    );
  });
  body = body.replace(new RegExp(suffix, "g"), "");
  return body;
}




/***/ }),

/***/ "./node_modules/@iconify/utils/lib/svg/size.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@iconify/utils/lib/svg/size.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calculateSize: () => (/* binding */ calculateSize)
/* harmony export */ });
const unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;
const unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;
function calculateSize(size, ratio, precision) {
  if (ratio === 1) {
    return size;
  }
  precision = precision || 100;
  if (typeof size === "number") {
    return Math.ceil(size * ratio * precision) / precision;
  }
  if (typeof size !== "string") {
    return size;
  }
  const oldParts = size.split(unitsSplit);
  if (oldParts === null || !oldParts.length) {
    return size;
  }
  const newParts = [];
  let code = oldParts.shift();
  let isNumber = unitsTest.test(code);
  while (true) {
    if (isNumber) {
      const num = parseFloat(code);
      if (isNaN(num)) {
        newParts.push(code);
      } else {
        newParts.push(Math.ceil(num * ratio * precision) / precision);
      }
    } else {
      newParts.push(code);
    }
    code = oldParts.shift();
    if (code === void 0) {
      return newParts.join("");
    }
    isNumber = !isNumber;
  }
}




/***/ }),

/***/ "./node_modules/dayjs/dayjs.min.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",c="month",f="quarter",h="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p="$isDayjsObject",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f="set"+(this.$u?"UTC":""),l=(n={},n[a]=f+"Date",n[d]=f+"Date",n[c]=f+"Month",n[h]=f+"FullYear",n[u]=f+"Hours",n[s]=f+"Minutes",n[i]=f+"Seconds",n[r]=f+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,"0")},$=f||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return b.s(e.$y,4,"0");case"M":return a+1;case"MM":return b.s(a+1,2,"0");case"MMM":return h(n.monthsShort,a,c,3);case"MMMM":return h(c,a);case"D":return e.$D;case"DD":return b.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(n.weekdaysMin,e.$W,o,2);case"ddd":return h(n.weekdaysShort,e.$W,o,3);case"dddd":return o[e.$W];case"H":return String(s);case"HH":return b.s(s,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return $(s,u,!0);case"A":return $(s,u,!1);case"m":return String(u);case"mm":return b.s(u,2,"0");case"s":return String(e.$s);case"ss":return b.s(e.$s,2,"0");case"SSS":return b.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",c],["$y",h],["$D",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));

/***/ }),

/***/ "./node_modules/dompurify/dist/purify.es.mjs":
/*!***************************************************!*\
  !*** ./node_modules/dompurify/dist/purify.es.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ purify)
/* harmony export */ });
/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */

const {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
let {
  freeze,
  seal,
  create
} = Object; // eslint-disable-line import/no-mutable-exports
let {
  apply,
  construct
} = typeof Reflect !== 'undefined' && Reflect;
if (!freeze) {
  freeze = function freeze(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct(Func, args) {
    return new Func(...args);
  };
}
const arrayForEach = unapply(Array.prototype.forEach);
const arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);
const arrayPop = unapply(Array.prototype.pop);
const arrayPush = unapply(Array.prototype.push);
const arraySplice = unapply(Array.prototype.splice);
const stringToLowerCase = unapply(String.prototype.toLowerCase);
const stringToString = unapply(String.prototype.toString);
const stringMatch = unapply(String.prototype.match);
const stringReplace = unapply(String.prototype.replace);
const stringIndexOf = unapply(String.prototype.indexOf);
const stringTrim = unapply(String.prototype.trim);
const objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
const regExpTest = unapply(RegExp.prototype.test);
const typeErrorCreate = unconstruct(TypeError);
/**
 * Creates a new function that calls the given function with a specified thisArg and arguments.
 *
 * @param func - The function to be wrapped and called.
 * @returns A new function that calls the given function with a specified thisArg and arguments.
 */
function unapply(func) {
  return function (thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
/**
 * Creates a new function that constructs an instance of the given constructor function with the provided arguments.
 *
 * @param func - The constructor function to be wrapped and called.
 * @returns A new function that constructs an instance of the given constructor function with the provided arguments.
 */
function unconstruct(func) {
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
/**
 * Add properties to a lookup table
 *
 * @param set - The set to which elements will be added.
 * @param array - The array containing elements to be added to the set.
 * @param transformCaseFunc - An optional function to transform the case of each element before adding to the set.
 * @returns The modified set with added elements.
 */
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    // Make 'in' and truthy checks like Boolean(set.constructor)
    // independent of any properties defined on Object.prototype.
    // Prevent prototype setters from intercepting set as a this value.
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === 'string') {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        // Config presets (e.g. tags.js, attrs.js) are immutable.
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
/**
 * Clean up an array to harden against CSPP
 *
 * @param array - The array to be cleaned.
 * @returns The cleaned version of the array
 */
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
/**
 * Shallow clone an object
 *
 * @param object - The object to be cloned.
 * @returns A new object that copies the original.
 */
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === 'object' && value.constructor === Object) {
        newObject[property] = clone(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
/**
 * This method automatically checks if the prop is function or getter and behaves accordingly.
 *
 * @param object - The object to look up the getter function in its prototype chain.
 * @param prop - The property name for which to find the getter function.
 * @returns The getter function found in the prototype chain or a fallback function.
 */
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === 'function') {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}

const html$1 = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dialog', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']);
const svg$1 = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'view', 'vkern']);
const svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);
// List of SVG elements that are disallowed by default.
// We still need to know them so that we can do namespace
// checks properly in case one wants to add them to
// allow-list.
const svgDisallowed = freeze(['animate', 'color-profile', 'cursor', 'discard', 'font-face', 'font-face-format', 'font-face-name', 'font-face-src', 'font-face-uri', 'foreignobject', 'hatch', 'hatchpath', 'mesh', 'meshgradient', 'meshpatch', 'meshrow', 'missing-glyph', 'script', 'set', 'solidcolor', 'unknown', 'use']);
const mathMl$1 = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover', 'mprescripts']);
// Similarly to SVG, we want to know all MathML elements,
// even those that we disallow by default.
const mathMlDisallowed = freeze(['maction', 'maligngroup', 'malignmark', 'mlongdiv', 'mscarries', 'mscarry', 'msgroup', 'mstack', 'msline', 'msrow', 'semantics', 'annotation', 'annotation-xml', 'mprescripts', 'none']);
const text = freeze(['#text']);

const html = freeze(['accept', 'action', 'align', 'alt', 'autocapitalize', 'autocomplete', 'autopictureinpicture', 'autoplay', 'background', 'bgcolor', 'border', 'capture', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'controlslist', 'coords', 'crossorigin', 'datetime', 'decoding', 'default', 'dir', 'disabled', 'disablepictureinpicture', 'disableremoteplayback', 'download', 'draggable', 'enctype', 'enterkeyhint', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'inputmode', 'integrity', 'ismap', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'muted', 'name', 'nonce', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'playsinline', 'popover', 'popovertarget', 'popovertargetaction', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'translate', 'type', 'usemap', 'valign', 'value', 'width', 'wrap', 'xmlns', 'slot']);
const svg = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'amplitude', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clippathunits', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'exponent', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'slope', 'specularconstant', 'specularexponent', 'spreadmethod', 'startoffset', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'systemlanguage', 'tabindex', 'tablevalues', 'targetx', 'targety', 'transform', 'transform-origin', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);
const mathMl = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);
const xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);

// eslint-disable-next-line unicorn/better-regex
const MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode
const ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
const TMPLIT_EXPR = seal(/\$\{[\w\W]*/gm); // eslint-disable-line unicorn/better-regex
const DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/); // eslint-disable-line no-useless-escape
const ARIA_ATTR = seal(/^aria-[\-\w]+$/); // eslint-disable-line no-useless-escape
const IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i // eslint-disable-line no-useless-escape
);
const IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
const ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g // eslint-disable-line no-control-regex
);
const DOCTYPE_NAME = seal(/^html$/i);
const CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);

var EXPRESSIONS = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ARIA_ATTR: ARIA_ATTR,
  ATTR_WHITESPACE: ATTR_WHITESPACE,
  CUSTOM_ELEMENT: CUSTOM_ELEMENT,
  DATA_ATTR: DATA_ATTR,
  DOCTYPE_NAME: DOCTYPE_NAME,
  ERB_EXPR: ERB_EXPR,
  IS_ALLOWED_URI: IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA,
  MUSTACHE_EXPR: MUSTACHE_EXPR,
  TMPLIT_EXPR: TMPLIT_EXPR
});

/* eslint-disable @typescript-eslint/indent */
// https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
const NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12 // Deprecated
};
const getGlobal = function getGlobal() {
  return typeof window === 'undefined' ? null : window;
};
/**
 * Creates a no-op policy for internal use only.
 * Don't export this function outside this module!
 * @param trustedTypes The policy factory.
 * @param purifyHostElement The Script element used to load DOMPurify (to determine policy name suffix).
 * @return The policy created (or null, if Trusted Types
 * are not supported or creating the policy failed).
 */
const _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== 'object' || typeof trustedTypes.createPolicy !== 'function') {
    return null;
  }
  // Allow the callers to control the unique policy name
  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.
  // Policy creation with duplicate names throws in Trusted Types.
  let suffix = null;
  const ATTR_NAME = 'data-tt-policy-suffix';
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html) {
        return html;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    // Policy creation failed (most likely another DOMPurify script has
    // already run). Skip creating the policy, as this will only cause errors
    // if TT are enforced.
    console.warn('TrustedTypes policy ' + policyName + ' could not be created.');
    return null;
  }
};
const _createHooksMap = function _createHooksMap() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function createDOMPurify() {
  let window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();
  const DOMPurify = root => createDOMPurify(root);
  DOMPurify.version = '3.2.4';
  DOMPurify.removed = [];
  if (!window || !window.document || window.document.nodeType !== NODE_TYPE.document || !window.Element) {
    // Not running in a browser, provide a factory function
    // so that you can pass your own Window
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document
  } = window;
  const originalDocument = document;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node,
    Element,
    NodeFilter,
    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, 'cloneNode');
  const remove = lookupGetter(ElementPrototype, 'remove');
  const getNextSibling = lookupGetter(ElementPrototype, 'nextSibling');
  const getChildNodes = lookupGetter(ElementPrototype, 'childNodes');
  const getParentNode = lookupGetter(ElementPrototype, 'parentNode');
  // As per issue #47, the web-components registry is inherited by a
  // new document created via createHTMLDocument. As per the spec
  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)
  // a new empty registry is used when creating a template contents owner
  // document, so we use that as our parent document to ensure nothing
  // is inherited.
  if (typeof HTMLTemplateElement === 'function') {
    const template = document.createElement('template');
    if (template.content && template.content.ownerDocument) {
      document = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = '';
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document;
  const {
    importNode
  } = originalDocument;
  let hooks = _createHooksMap();
  /**
   * Expose whether this browser supports running the full DOMPurify.
   */
  DOMPurify.isSupported = typeof entries === 'function' && typeof getParentNode === 'function' && implementation && implementation.createHTMLDocument !== undefined;
  const {
    MUSTACHE_EXPR,
    ERB_EXPR,
    TMPLIT_EXPR,
    DATA_ATTR,
    ARIA_ATTR,
    IS_SCRIPT_OR_DATA,
    ATTR_WHITESPACE,
    CUSTOM_ELEMENT
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  /**
   * We consider the elements and attributes below to be safe. Ideally
   * don't add any new ones but feel free to remove unwanted ones.
   */
  /* allowed element names */
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  /* Allowed attribute names */
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  /*
   * Configure how DOMPurify should handle custom elements and their attributes as well as customized built-in elements.
   * @property {RegExp|Function|null} tagNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any custom elements)
   * @property {RegExp|Function|null} attributeNameCheck one of [null, regexPattern, predicate]. Default: `null` (disallow any attributes not on the allow list)
   * @property {boolean} allowCustomizedBuiltInElements allow custom elements derived from built-ins if they pass CUSTOM_ELEMENT_HANDLING.tagNameCheck. Default: `false`.
   */
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */
  let FORBID_TAGS = null;
  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */
  let FORBID_ATTR = null;
  /* Decide if ARIA attributes are okay */
  let ALLOW_ARIA_ATTR = true;
  /* Decide if custom data attributes are okay */
  let ALLOW_DATA_ATTR = true;
  /* Decide if unknown protocols are okay */
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  /* Decide if self-closing tags in attributes are allowed.
   * Usually removed due to a mXSS issue in jQuery 3.0 */
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  /* Output should be safe for common template engines.
   * This means, DOMPurify removes data attributes, mustaches and ERB
   */
  let SAFE_FOR_TEMPLATES = false;
  /* Output should be safe even for XML used within HTML and alike.
   * This means, DOMPurify removes comments when containing risky content.
   */
  let SAFE_FOR_XML = true;
  /* Decide if document with <html>... should be returned */
  let WHOLE_DOCUMENT = false;
  /* Track whether config is already set on this instance of DOMPurify. */
  let SET_CONFIG = false;
  /* Decide if all elements (e.g. style, script) must be children of
   * document.body. By default, browsers might move them to document.head */
  let FORCE_BODY = false;
  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html
   * string (or a TrustedHTML object if Trusted Types are supported).
   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead
   */
  let RETURN_DOM = false;
  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html
   * string  (or a TrustedHTML object if Trusted Types are supported) */
  let RETURN_DOM_FRAGMENT = false;
  /* Try to return a Trusted Type object instead of a string, return a string in
   * case Trusted Types are not supported  */
  let RETURN_TRUSTED_TYPE = false;
  /* Output should be free from DOM clobbering attacks?
   * This sanitizes markups named with colliding, clobberable built-in DOM APIs.
   */
  let SANITIZE_DOM = true;
  /* Achieve full DOM Clobbering protection by isolating the namespace of named
   * properties and JS variables, mitigating attacks that abuse the HTML/DOM spec rules.
   *
   * HTML/DOM spec rules that enable DOM Clobbering:
   *   - Named Access on Window (§7.3.3)
   *   - DOM Tree Accessors (§3.1.5)
   *   - Form Element Parent-Child Relations (§4.10.3)
   *   - Iframe srcdoc / Nested WindowProxies (§4.8.5)
   *   - HTMLCollection (§4.2.10.2)
   *
   * Namespace isolation is implemented by prefixing `id` and `name` attributes
   * with a constant string, i.e., `user-content-`
   */
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = 'user-content-';
  /* Keep element content when removing element? */
  let KEEP_CONTENT = true;
  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead
   * of importing it into a new Document and returning a sanitized copy */
  let IN_PLACE = false;
  /* Allow usage of profiles like html, svg and mathMl */
  let USE_PROFILES = {};
  /* Tags to ignore content of when KEEP_CONTENT is true */
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'noscript', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);
  /* Tags that are safe for data: URIs */
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image', 'track']);
  /* Attributes safe for values like "javascript:" */
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'role', 'summary', 'title', 'value', 'style', 'xmlns']);
  const MATHML_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
  const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
  const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
  /* Document namespace */
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  /* Allowed XHTML+XML namespaces */
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ['mi', 'mo', 'mn', 'ms', 'mtext']);
  let HTML_INTEGRATION_POINTS = addToSet({}, ['annotation-xml']);
  // Certain elements are allowed in both SVG and HTML
  // namespace. We need to specify them explicitly
  // so that they don't get erroneously deleted from
  // HTML namespace.
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ['title', 'style', 'font', 'a', 'script']);
  /* Parsing of strict XHTML documents */
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ['application/xhtml+xml', 'text/html'];
  const DEFAULT_PARSER_MEDIA_TYPE = 'text/html';
  let transformCaseFunc = null;
  /* Keep a reference to config to pass to hooks */
  let CONFIG = null;
  /* Ideally, do not touch anything below this line */
  /* ______________________________________________ */
  const formElement = document.createElement('form');
  const isRegexOrFunction = function isRegexOrFunction(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  /**
   * _parseConfig
   *
   * @param cfg optional config literal
   */
  // eslint-disable-next-line complexity
  const _parseConfig = function _parseConfig() {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    /* Shield configuration object from tampering */
    if (!cfg || typeof cfg !== 'object') {
      cfg = {};
    }
    /* Shield configuration object from prototype pollution */
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE =
    // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    // HTML tags and attributes are not case-sensitive, converting to lowercase. Keeping XHTML as is.
    transformCaseFunc = PARSER_MEDIA_TYPE === 'application/xhtml+xml' ? stringToString : stringToLowerCase;
    /* Set configuration parameters */
    ALLOWED_TAGS = objectHasOwnProperty(cfg, 'ALLOWED_TAGS') ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, 'ALLOWED_ATTR') ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, 'ALLOWED_NAMESPACES') ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, 'ADD_URI_SAFE_ATTR') ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, 'ADD_DATA_URI_TAGS') ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, 'FORBID_CONTENTS') ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, 'FORBID_TAGS') ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = objectHasOwnProperty(cfg, 'FORBID_ATTR') ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = objectHasOwnProperty(cfg, 'USE_PROFILES') ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false; // Default true
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false; // Default true
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false
    RETURN_DOM = cfg.RETURN_DOM || false; // Default false
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false
    FORCE_BODY = cfg.FORCE_BODY || false; // Default false
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false; // Default false
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true
    IN_PLACE = cfg.IN_PLACE || false; // Default false
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;
    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === 'boolean') {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    /* Parse profile info */
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    /* Merge configuration parameters */
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    /* Add #text in case KEEP_CONTENT is set to true */
    if (KEEP_CONTENT) {
      ALLOWED_TAGS['#text'] = true;
    }
    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);
    }
    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ['tbody']);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== 'function') {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      // Overwrite existing TrustedTypes policy.
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      // Sign local variables required by `sanitize`.
      emptyHTML = trustedTypesPolicy.createHTML('');
    } else {
      // Uninitialized policy, attempt to initialize the internal dompurify policy.
      if (trustedTypesPolicy === undefined) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      // If creating the internal policy succeeded sign internal variables.
      if (trustedTypesPolicy !== null && typeof emptyHTML === 'string') {
        emptyHTML = trustedTypesPolicy.createHTML('');
      }
    }
    // Prevent further manipulation of configuration.
    // Not available in IE8, Safari 5, etc.
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  /* Keep track of all possible SVG and MathML tags
   * so that we can perform the namespace checks
   * correctly. */
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  /**
   * @param element a DOM element whose namespace is being checked
   * @returns Return false if the element has a
   *  namespace that a spec-compliant parser would never
   *  return. Return true otherwise.
   */
  const _checkValidNamespace = function _checkValidNamespace(element) {
    let parent = getParentNode(element);
    // In JSDOM, if we're inside shadow DOM, then parentNode
    // can be null. We just simulate parent in this case.
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: 'template'
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      // The only way to switch from HTML namespace to SVG
      // is via <svg>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'svg';
      }
      // The only way to switch from MathML to SVG is via`
      // svg if parent is either <annotation-xml> or MathML
      // text integration points.
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === 'svg' && (parentTagName === 'annotation-xml' || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      // We only allow elements that are defined in SVG
      // spec. All others are disallowed in SVG namespace.
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      // The only way to switch from HTML namespace to MathML
      // is via <math>. If it happens via any other tag, then
      // it should be killed.
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === 'math';
      }
      // The only way to switch from SVG to MathML is via
      // <math> and HTML integration points
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === 'math' && HTML_INTEGRATION_POINTS[parentTagName];
      }
      // We only allow elements that are defined in MathML
      // spec. All others are disallowed in MathML namespace.
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      // The only way to switch from SVG to HTML is via
      // HTML integration points, and from MathML to HTML
      // is via MathML text integration points
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      // We disallow tags that are specific for MathML
      // or SVG and should never appear in HTML namespace
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    // For XHTML and XML documents that support custom namespaces
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    // The code should never reach this place (this means
    // that the element somehow got namespace that is not
    // HTML, SVG, MathML or allowed via ALLOWED_NAMESPACES).
    // Return false just in case.
    return false;
  };
  /**
   * _forceRemove
   *
   * @param node a DOM node
   */
  const _forceRemove = function _forceRemove(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      // eslint-disable-next-line unicorn/prefer-dom-node-remove
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  /**
   * _removeAttribute
   *
   * @param name an Attribute name
   * @param element a DOM node
   */
  const _removeAttribute = function _removeAttribute(name, element) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: element.getAttributeNode(name),
        from: element
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: element
      });
    }
    element.removeAttribute(name);
    // We void attribute values for unremovable "is" attributes
    if (name === 'is') {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(element);
        } catch (_) {}
      } else {
        try {
          element.setAttribute(name, '');
        } catch (_) {}
      }
    }
  };
  /**
   * _initDocument
   *
   * @param dirty - a string of dirty markup
   * @return a DOM, filled with the dirty markup
   */
  const _initDocument = function _initDocument(dirty) {
    /* Create a HTML document */
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = '<remove></remove>' + dirty;
    } else {
      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === 'application/xhtml+xml' && NAMESPACE === HTML_NAMESPACE) {
      // Root of XHTML doc must contain xmlns declaration (see https://www.w3.org/TR/xhtml1/normative.html#strict)
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + '</body></html>';
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    /*
     * Use the DOMParser API by default, fallback later if needs be
     * DOMParser not work for svg when has multiple root element.
     */
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {}
    }
    /* Use createHTMLDocument in case DOMParser is not available */
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, 'template', null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
        // Syntax error if dirtyPayload is invalid xml
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    /* Work on whole document or just its body */
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  /**
   * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
   *
   * @param root The root element or node to start traversing on.
   * @return The created NodeIterator
   */
  const _createNodeIterator = function _createNodeIterator(root) {
    return createNodeIterator.call(root.ownerDocument || root, root,
    // eslint-disable-next-line no-bitwise
    NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION, null);
  };
  /**
   * _isClobbered
   *
   * @param element element to check for clobbering attacks
   * @return true if clobbered, false if safe
   */
  const _isClobbered = function _isClobbered(element) {
    return element instanceof HTMLFormElement && (typeof element.nodeName !== 'string' || typeof element.textContent !== 'string' || typeof element.removeChild !== 'function' || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== 'function' || typeof element.setAttribute !== 'function' || typeof element.namespaceURI !== 'string' || typeof element.insertBefore !== 'function' || typeof element.hasChildNodes !== 'function');
  };
  /**
   * Checks whether the given object is a DOM node.
   *
   * @param value object to check whether it's a DOM node
   * @return true is object is a DOM node
   */
  const _isNode = function _isNode(value) {
    return typeof Node === 'function' && value instanceof Node;
  };
  function _executeHooks(hooks, currentNode, data) {
    arrayForEach(hooks, hook => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  }
  /**
   * _sanitizeElements
   *
   * @protect nodeName
   * @protect textContent
   * @protect removeChild
   * @param currentNode to check for permission to exist
   * @return true if node was killed, false if left alive
   */
  const _sanitizeElements = function _sanitizeElements(currentNode) {
    let content = null;
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);
    /* Check if element is clobbered or can clobber */
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Now let's check the element's type and name */
    const tagName = transformCaseFunc(currentNode.nodeName);
    /* Execute a hook if present */
    _executeHooks(hooks.uponSanitizeElement, currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    /* Detect mXSS attempts abusing namespace confusion */
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any occurrence of processing instructions */
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove any kind of possibly harmful comments */
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Remove element if anything forbids its presence */
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      /* Check if we have a custom element to handle */
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      /* Keep content except for bad-listed elements */
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    /* Check whether element has a valid namespace */
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Make sure that older browsers don't get fallback-tag mXSS */
    if ((tagName === 'noscript' || tagName === 'noembed' || tagName === 'noframes') && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    /* Sanitize element content to be template-safe */
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      /* Get the element's text content */
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        content = stringReplace(content, expr, ' ');
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeElements, currentNode, null);
    return false;
  };
  /**
   * _isValidAttribute
   *
   * @param lcTag Lowercase tag name of containing element.
   * @param lcName Lowercase attribute name.
   * @param value Attribute value.
   * @return Returns true if `value` is valid, otherwise false.
   */
  // eslint-disable-next-line complexity
  const _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {
    /* Make sure attribute cannot clobber */
    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {
      return false;
    }
    /* Allow valid data-* attributes: At least one character after "-"
        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)
        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)
        We don't need to check the value; it's always URI safe. */
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR, lcName)) ; else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) ; else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
      // First condition does a very basic check if a) it's basically a valid custom element tagname AND
      // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
      _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) ||
      // Alternative, second condition checks if it's an `is`-attribute, AND
      // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
      lcName === 'is' && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))) ; else {
        return false;
      }
      /* Check value is safe. First, is attr inert? If so, is safe */
    } else if (URI_SAFE_ATTRIBUTES[lcName]) ; else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) ; else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))) ; else if (value) {
      return false;
    } else ;
    return true;
  };
  /**
   * _isBasicCustomElement
   * checks if at least one dash is included in tagName, and it's not the first char
   * for more sophisticated checking see https://github.com/sindresorhus/validate-element-name
   *
   * @param tagName name of the tag of the node to sanitize
   * @returns Returns true if the tag name meets the basic criteria for a custom element, otherwise false.
   */
  const _isBasicCustomElement = function _isBasicCustomElement(tagName) {
    return tagName !== 'annotation-xml' && stringMatch(tagName, CUSTOM_ELEMENT);
  };
  /**
   * _sanitizeAttributes
   *
   * @protect attributes
   * @protect nodeName
   * @protect removeAttribute
   * @protect setAttribute
   *
   * @param currentNode to sanitize
   */
  const _sanitizeAttributes = function _sanitizeAttributes(currentNode) {
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);
    const {
      attributes
    } = currentNode;
    /* Check if we have attributes; if not we might have a text node */
    if (!attributes || _isClobbered(currentNode)) {
      return;
    }
    const hookEvent = {
      attrName: '',
      attrValue: '',
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR,
      forceKeepAttr: undefined
    };
    let l = attributes.length;
    /* Go backwards over all attributes; safely remove bad ones */
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === 'value' ? attrValue : stringTrim(attrValue);
      /* Execute a hook if present */
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set
      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);
      value = hookEvent.attrValue;
      /* Full DOM Clobbering protection via namespace isolation,
       * Prefix id and name attributes with `user-content-`
       */
      if (SANITIZE_NAMED_PROPS && (lcName === 'id' || lcName === 'name')) {
        // Remove the attribute with this value
        _removeAttribute(name, currentNode);
        // Prefix the value and later re-create the attribute with the sanitized value
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      /* Work around a security issue with comments inside attributes */
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Did the hooks approve of the attribute? */
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      /* Remove attribute */
      _removeAttribute(name, currentNode);
      /* Did the hooks approve of the attribute? */
      if (!hookEvent.keepAttr) {
        continue;
      }
      /* Work around a security issue in jQuery 3.0 */
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      /* Sanitize attribute content to be template-safe */
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
          value = stringReplace(value, expr, ' ');
        });
      }
      /* Is `value` valid for this attribute? */
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      /* Handle attributes that require Trusted Types */
      if (trustedTypesPolicy && typeof trustedTypes === 'object' && typeof trustedTypes.getAttributeType === 'function') {
        if (namespaceURI) ; else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case 'TrustedHTML':
              {
                value = trustedTypesPolicy.createHTML(value);
                break;
              }
            case 'TrustedScriptURL':
              {
                value = trustedTypesPolicy.createScriptURL(value);
                break;
              }
          }
        }
      }
      /* Handle invalid data-* attribute set by try-catching it */
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. "x-schema". */
          currentNode.setAttribute(name, value);
        }
        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);
        } else {
          arrayPop(DOMPurify.removed);
        }
      } catch (_) {}
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);
  };
  /**
   * _sanitizeShadowDOM
   *
   * @param fragment to iterate over recursively
   */
  const _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    /* Execute a hook if present */
    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      /* Execute a hook if present */
      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);
      /* Sanitize tags and elements */
      _sanitizeElements(shadowNode);
      /* Check attributes next */
      _sanitizeAttributes(shadowNode);
      /* Deep shadow DOM detected */
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(shadowNode.content);
      }
    }
    /* Execute a hook if present */
    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);
  };
  // eslint-disable-next-line complexity
  DOMPurify.sanitize = function (dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    /* Make sure we have a string to sanitize.
      DO NOT return early, as this will return the wrong type if
      the user has requested a DOM object rather than a string */
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = '<!-->';
    }
    /* Stringify, in case dirty is an object */
    if (typeof dirty !== 'string' && !_isNode(dirty)) {
      if (typeof dirty.toString === 'function') {
        dirty = dirty.toString();
        if (typeof dirty !== 'string') {
          throw typeErrorCreate('dirty is not a string, aborting');
        }
      } else {
        throw typeErrorCreate('toString is not a function');
      }
    }
    /* Return dirty HTML if DOMPurify cannot run */
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    /* Assign config vars */
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    /* Clean up removed elements */
    DOMPurify.removed = [];
    /* Check if dirty is correctly typed for IN_PLACE */
    if (typeof dirty === 'string') {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      /* Do some early pre-sanitization to avoid unsafe root nodes */
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate('root node is forbidden and cannot be sanitized in-place');
        }
      }
    } else if (dirty instanceof Node) {
      /* If dirty is a DOM element, append to an empty document to avoid
         elements being stripped by the parser */
      body = _initDocument('<!---->');
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === 'BODY') {
        /* Node is already a body, use as is */
        body = importedNode;
      } else if (importedNode.nodeName === 'HTML') {
        body = importedNode;
      } else {
        // eslint-disable-next-line unicorn/prefer-dom-node-append
        body.appendChild(importedNode);
      }
    } else {
      /* Exit directly if we have nothing to do */
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT &&
      // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf('<') === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      /* Initialize the document to work on */
      body = _initDocument(dirty);
      /* Check we have a DOM node from the data */
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : '';
      }
    }
    /* Remove first element node (ours) if FORCE_BODY is set */
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    /* Get node iterator */
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    /* Now start iterating over the created document */
    while (currentNode = nodeIterator.nextNode()) {
      /* Sanitize tags and elements */
      _sanitizeElements(currentNode);
      /* Check attributes next */
      _sanitizeAttributes(currentNode);
      /* Shadow DOM detected, sanitize it */
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
    }
    /* If we sanitized `dirty` in-place, return it. */
    if (IN_PLACE) {
      return dirty;
    }
    /* Return sanitized string or DOM */
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          // eslint-disable-next-line unicorn/prefer-dom-node-append
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        /*
          AdoptNode() is not used because internal state is not reset
          (e.g. the past names map of a HTMLFormElement), this is safe
          in theory but we would rather not risk another attack vector.
          The state that is cloned by importNode() is explicitly defined
          by the specs.
        */
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    /* Serialize doctype if allowed */
    if (WHOLE_DOCUMENT && ALLOWED_TAGS['!doctype'] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = '<!DOCTYPE ' + body.ownerDocument.doctype.name + '>\n' + serializedHTML;
    }
    /* Sanitize final string template-safe */
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR, ERB_EXPR, TMPLIT_EXPR], expr => {
        serializedHTML = stringReplace(serializedHTML, expr, ' ');
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function () {
    let cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function () {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function (tag, attr, value) {
    /* Initialize shared config vars if necessary. */
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function (entryPoint, hookFunction) {
    if (typeof hookFunction !== 'function') {
      return;
    }
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function (entryPoint, hookFunction) {
    if (hookFunction !== undefined) {
      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);
      return index === -1 ? undefined : arraySplice(hooks[entryPoint], index, 1)[0];
    }
    return arrayPop(hooks[entryPoint]);
  };
  DOMPurify.removeHooks = function (entryPoint) {
    hooks[entryPoint] = [];
  };
  DOMPurify.removeAllHooks = function () {
    hooks = _createHooksMap();
  };
  return DOMPurify;
}
var purify = createDOMPurify();


//# sourceMappingURL=purify.es.mjs.map


/***/ }),

/***/ "./node_modules/khroma/dist/channels/index.js":
/*!****************************************************!*\
  !*** ./node_modules/khroma/dist/channels/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./type.js */ "./node_modules/khroma/dist/channels/type.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/khroma/dist/constants.js");
/* IMPORT */



/* MAIN */
class Channels {
    /* CONSTRUCTOR */
    constructor(data, color) {
        this.color = color;
        this.changed = false;
        this.data = data; //TSC
        this.type = new _type_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
    }
    /* API */
    set(data, color) {
        this.color = color;
        this.changed = false;
        this.data = data; //TSC
        this.type.type = _constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.ALL;
        return this;
    }
    /* HELPERS */
    _ensureHSL() {
        const data = this.data;
        const { h, s, l } = data;
        if (h === undefined)
            data.h = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.rgb2hsl(data, 'h');
        if (s === undefined)
            data.s = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.rgb2hsl(data, 's');
        if (l === undefined)
            data.l = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.rgb2hsl(data, 'l');
    }
    _ensureRGB() {
        const data = this.data;
        const { r, g, b } = data;
        if (r === undefined)
            data.r = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.hsl2rgb(data, 'r');
        if (g === undefined)
            data.g = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.hsl2rgb(data, 'g');
        if (b === undefined)
            data.b = _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.hsl2rgb(data, 'b');
    }
    /* GETTERS */
    get r() {
        const data = this.data;
        const r = data.r;
        if (!this.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.HSL) && r !== undefined)
            return r;
        this._ensureHSL();
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.hsl2rgb(data, 'r');
    }
    get g() {
        const data = this.data;
        const g = data.g;
        if (!this.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.HSL) && g !== undefined)
            return g;
        this._ensureHSL();
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.hsl2rgb(data, 'g');
    }
    get b() {
        const data = this.data;
        const b = data.b;
        if (!this.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.HSL) && b !== undefined)
            return b;
        this._ensureHSL();
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.hsl2rgb(data, 'b');
    }
    get h() {
        const data = this.data;
        const h = data.h;
        if (!this.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.RGB) && h !== undefined)
            return h;
        this._ensureRGB();
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.rgb2hsl(data, 'h');
    }
    get s() {
        const data = this.data;
        const s = data.s;
        if (!this.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.RGB) && s !== undefined)
            return s;
        this._ensureRGB();
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.rgb2hsl(data, 's');
    }
    get l() {
        const data = this.data;
        const l = data.l;
        if (!this.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.RGB) && l !== undefined)
            return l;
        this._ensureRGB();
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.rgb2hsl(data, 'l');
    }
    get a() {
        return this.data.a;
    }
    /* SETTERS */
    set r(r) {
        this.type.set(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.RGB);
        this.changed = true;
        this.data.r = r;
    }
    set g(g) {
        this.type.set(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.RGB);
        this.changed = true;
        this.data.g = g;
    }
    set b(b) {
        this.type.set(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.RGB);
        this.changed = true;
        this.data.b = b;
    }
    set h(h) {
        this.type.set(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.HSL);
        this.changed = true;
        this.data.h = h;
    }
    set s(s) {
        this.type.set(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.HSL);
        this.changed = true;
        this.data.s = s;
    }
    set l(l) {
        this.type.set(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TYPE.HSL);
        this.changed = true;
        this.data.l = l;
    }
    set a(a) {
        this.changed = true;
        this.data.a = a;
    }
}
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Channels);


/***/ }),

/***/ "./node_modules/khroma/dist/channels/reusable.js":
/*!*******************************************************!*\
  !*** ./node_modules/khroma/dist/channels/reusable.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .//index.js */ "./node_modules/khroma/dist/channels/index.js");
/* IMPORT */

/* MAIN */
const channels = new _index_js__WEBPACK_IMPORTED_MODULE_0__["default"]({ r: 0, g: 0, b: 0, a: 0 }, 'transparent');
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (channels);


/***/ }),

/***/ "./node_modules/khroma/dist/channels/type.js":
/*!***************************************************!*\
  !*** ./node_modules/khroma/dist/channels/type.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/khroma/dist/constants.js");
/* IMPORT */

/* MAIN */
class Type {
    constructor() {
        /* VARIABLES */
        this.type = _constants_js__WEBPACK_IMPORTED_MODULE_0__.TYPE.ALL;
    }
    /* API */
    get() {
        return this.type;
    }
    set(type) {
        if (this.type && this.type !== type)
            throw new Error('Cannot change both RGB and HSL channels at the same time');
        this.type = type;
    }
    reset() {
        this.type = _constants_js__WEBPACK_IMPORTED_MODULE_0__.TYPE.ALL;
    }
    is(type) {
        return this.type === type;
    }
}
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Type);


/***/ }),

/***/ "./node_modules/khroma/dist/color/hex.js":
/*!***********************************************!*\
  !*** ./node_modules/khroma/dist/color/hex.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _channels_reusable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../channels/reusable.js */ "./node_modules/khroma/dist/channels/reusable.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/khroma/dist/constants.js");
/* IMPORT */



/* MAIN */
const Hex = {
    /* VARIABLES */
    re: /^#((?:[a-f0-9]{2}){2,4}|[a-f0-9]{3})$/i,
    /* API */
    parse: (color) => {
        if (color.charCodeAt(0) !== 35)
            return; // '#'
        const match = color.match(Hex.re);
        if (!match)
            return;
        const hex = match[1];
        const dec = parseInt(hex, 16);
        const length = hex.length;
        const hasAlpha = length % 4 === 0;
        const isFullLength = length > 4;
        const multiplier = isFullLength ? 1 : 17;
        const bits = isFullLength ? 8 : 4;
        const bitsOffset = hasAlpha ? 0 : -1;
        const mask = isFullLength ? 255 : 15;
        return _channels_reusable_js__WEBPACK_IMPORTED_MODULE_0__["default"].set({
            r: ((dec >> (bits * (bitsOffset + 3))) & mask) * multiplier,
            g: ((dec >> (bits * (bitsOffset + 2))) & mask) * multiplier,
            b: ((dec >> (bits * (bitsOffset + 1))) & mask) * multiplier,
            a: hasAlpha ? (dec & mask) * multiplier / 255 : 1
        }, color);
    },
    stringify: (channels) => {
        const { r, g, b, a } = channels;
        if (a < 1) { // #RRGGBBAA
            return `#${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(r)]}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(g)]}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(b)]}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(a * 255)]}`;
        }
        else { // #RRGGBB
            return `#${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(r)]}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(g)]}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.DEC2HEX[Math.round(b)]}`;
        }
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Hex);


/***/ }),

/***/ "./node_modules/khroma/dist/color/hsl.js":
/*!***********************************************!*\
  !*** ./node_modules/khroma/dist/color/hsl.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _channels_reusable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../channels/reusable.js */ "./node_modules/khroma/dist/channels/reusable.js");
/* IMPORT */


/* MAIN */
const HSL = {
    /* VARIABLES */
    re: /^hsla?\(\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?(?:deg|grad|rad|turn)?)\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?%)\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?%)(?:\s*?(?:,|\/)\s*?\+?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e-?\d+)?(%)?))?\s*?\)$/i,
    hueRe: /^(.+?)(deg|grad|rad|turn)$/i,
    /* HELPERS */
    _hue2deg: (hue) => {
        const match = hue.match(HSL.hueRe);
        if (match) {
            const [, number, unit] = match;
            switch (unit) {
                case 'grad': return _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.h(parseFloat(number) * .9);
                case 'rad': return _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.h(parseFloat(number) * 180 / Math.PI);
                case 'turn': return _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.h(parseFloat(number) * 360);
            }
        }
        return _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.h(parseFloat(hue));
    },
    /* API */
    parse: (color) => {
        const charCode = color.charCodeAt(0);
        if (charCode !== 104 && charCode !== 72)
            return; // 'h'/'H'
        const match = color.match(HSL.re);
        if (!match)
            return;
        const [, h, s, l, a, isAlphaPercentage] = match;
        return _channels_reusable_js__WEBPACK_IMPORTED_MODULE_1__["default"].set({
            h: HSL._hue2deg(h),
            s: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.s(parseFloat(s)),
            l: _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.l(parseFloat(l)),
            a: a ? _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1
        }, color);
    },
    stringify: (channels) => {
        const { h, s, l, a } = channels;
        if (a < 1) { // HSLA
            return `hsla(${_utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].lang.round(h)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].lang.round(s)}%, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].lang.round(l)}%, ${a})`;
        }
        else { // HSL
            return `hsl(${_utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].lang.round(h)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].lang.round(s)}%, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].lang.round(l)}%)`;
        }
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HSL);


/***/ }),

/***/ "./node_modules/khroma/dist/color/index.js":
/*!*************************************************!*\
  !*** ./node_modules/khroma/dist/color/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hex.js */ "./node_modules/khroma/dist/color/hex.js");
/* harmony import */ var _hsl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./hsl.js */ "./node_modules/khroma/dist/color/hsl.js");
/* harmony import */ var _keyword_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyword.js */ "./node_modules/khroma/dist/color/keyword.js");
/* harmony import */ var _rgb_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rgb.js */ "./node_modules/khroma/dist/color/rgb.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../constants.js */ "./node_modules/khroma/dist/constants.js");
/* IMPORT */






/* MAIN */
const Color = {
    /* VARIABLES */
    format: {
        keyword: _keyword_js__WEBPACK_IMPORTED_MODULE_0__["default"],
        hex: _hex_js__WEBPACK_IMPORTED_MODULE_1__["default"],
        rgb: _rgb_js__WEBPACK_IMPORTED_MODULE_2__["default"],
        rgba: _rgb_js__WEBPACK_IMPORTED_MODULE_2__["default"],
        hsl: _hsl_js__WEBPACK_IMPORTED_MODULE_3__["default"],
        hsla: _hsl_js__WEBPACK_IMPORTED_MODULE_3__["default"]
    },
    /* API */
    parse: (color) => {
        if (typeof color !== 'string')
            return color;
        const channels = _hex_js__WEBPACK_IMPORTED_MODULE_1__["default"].parse(color) || _rgb_js__WEBPACK_IMPORTED_MODULE_2__["default"].parse(color) || _hsl_js__WEBPACK_IMPORTED_MODULE_3__["default"].parse(color) || _keyword_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color); // Color providers ordered with performance in mind
        if (channels)
            return channels;
        throw new Error(`Unsupported color format: "${color}"`);
    },
    stringify: (channels) => {
        // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value
        if (!channels.changed && channels.color)
            return channels.color;
        if (channels.type.is(_constants_js__WEBPACK_IMPORTED_MODULE_4__.TYPE.HSL) || channels.data.r === undefined) {
            return _hsl_js__WEBPACK_IMPORTED_MODULE_3__["default"].stringify(channels);
        }
        else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {
            return _rgb_js__WEBPACK_IMPORTED_MODULE_2__["default"].stringify(channels);
        }
        else {
            return _hex_js__WEBPACK_IMPORTED_MODULE_1__["default"].stringify(channels);
        }
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Color);


/***/ }),

/***/ "./node_modules/khroma/dist/color/keyword.js":
/*!***************************************************!*\
  !*** ./node_modules/khroma/dist/color/keyword.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _hex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hex.js */ "./node_modules/khroma/dist/color/hex.js");
/* IMPORT */

/* MAIN */
const Keyword = {
    /* VARIABLES */
    colors: {
        aliceblue: '#f0f8ff',
        antiquewhite: '#faebd7',
        aqua: '#00ffff',
        aquamarine: '#7fffd4',
        azure: '#f0ffff',
        beige: '#f5f5dc',
        bisque: '#ffe4c4',
        black: '#000000',
        blanchedalmond: '#ffebcd',
        blue: '#0000ff',
        blueviolet: '#8a2be2',
        brown: '#a52a2a',
        burlywood: '#deb887',
        cadetblue: '#5f9ea0',
        chartreuse: '#7fff00',
        chocolate: '#d2691e',
        coral: '#ff7f50',
        cornflowerblue: '#6495ed',
        cornsilk: '#fff8dc',
        crimson: '#dc143c',
        cyanaqua: '#00ffff',
        darkblue: '#00008b',
        darkcyan: '#008b8b',
        darkgoldenrod: '#b8860b',
        darkgray: '#a9a9a9',
        darkgreen: '#006400',
        darkgrey: '#a9a9a9',
        darkkhaki: '#bdb76b',
        darkmagenta: '#8b008b',
        darkolivegreen: '#556b2f',
        darkorange: '#ff8c00',
        darkorchid: '#9932cc',
        darkred: '#8b0000',
        darksalmon: '#e9967a',
        darkseagreen: '#8fbc8f',
        darkslateblue: '#483d8b',
        darkslategray: '#2f4f4f',
        darkslategrey: '#2f4f4f',
        darkturquoise: '#00ced1',
        darkviolet: '#9400d3',
        deeppink: '#ff1493',
        deepskyblue: '#00bfff',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1e90ff',
        firebrick: '#b22222',
        floralwhite: '#fffaf0',
        forestgreen: '#228b22',
        fuchsia: '#ff00ff',
        gainsboro: '#dcdcdc',
        ghostwhite: '#f8f8ff',
        gold: '#ffd700',
        goldenrod: '#daa520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#adff2f',
        grey: '#808080',
        honeydew: '#f0fff0',
        hotpink: '#ff69b4',
        indianred: '#cd5c5c',
        indigo: '#4b0082',
        ivory: '#fffff0',
        khaki: '#f0e68c',
        lavender: '#e6e6fa',
        lavenderblush: '#fff0f5',
        lawngreen: '#7cfc00',
        lemonchiffon: '#fffacd',
        lightblue: '#add8e6',
        lightcoral: '#f08080',
        lightcyan: '#e0ffff',
        lightgoldenrodyellow: '#fafad2',
        lightgray: '#d3d3d3',
        lightgreen: '#90ee90',
        lightgrey: '#d3d3d3',
        lightpink: '#ffb6c1',
        lightsalmon: '#ffa07a',
        lightseagreen: '#20b2aa',
        lightskyblue: '#87cefa',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#b0c4de',
        lightyellow: '#ffffe0',
        lime: '#00ff00',
        limegreen: '#32cd32',
        linen: '#faf0e6',
        magenta: '#ff00ff',
        maroon: '#800000',
        mediumaquamarine: '#66cdaa',
        mediumblue: '#0000cd',
        mediumorchid: '#ba55d3',
        mediumpurple: '#9370db',
        mediumseagreen: '#3cb371',
        mediumslateblue: '#7b68ee',
        mediumspringgreen: '#00fa9a',
        mediumturquoise: '#48d1cc',
        mediumvioletred: '#c71585',
        midnightblue: '#191970',
        mintcream: '#f5fffa',
        mistyrose: '#ffe4e1',
        moccasin: '#ffe4b5',
        navajowhite: '#ffdead',
        navy: '#000080',
        oldlace: '#fdf5e6',
        olive: '#808000',
        olivedrab: '#6b8e23',
        orange: '#ffa500',
        orangered: '#ff4500',
        orchid: '#da70d6',
        palegoldenrod: '#eee8aa',
        palegreen: '#98fb98',
        paleturquoise: '#afeeee',
        palevioletred: '#db7093',
        papayawhip: '#ffefd5',
        peachpuff: '#ffdab9',
        peru: '#cd853f',
        pink: '#ffc0cb',
        plum: '#dda0dd',
        powderblue: '#b0e0e6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#ff0000',
        rosybrown: '#bc8f8f',
        royalblue: '#4169e1',
        saddlebrown: '#8b4513',
        salmon: '#fa8072',
        sandybrown: '#f4a460',
        seagreen: '#2e8b57',
        seashell: '#fff5ee',
        sienna: '#a0522d',
        silver: '#c0c0c0',
        skyblue: '#87ceeb',
        slateblue: '#6a5acd',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#fffafa',
        springgreen: '#00ff7f',
        tan: '#d2b48c',
        teal: '#008080',
        thistle: '#d8bfd8',
        transparent: '#00000000',
        turquoise: '#40e0d0',
        violet: '#ee82ee',
        wheat: '#f5deb3',
        white: '#ffffff',
        whitesmoke: '#f5f5f5',
        yellow: '#ffff00',
        yellowgreen: '#9acd32'
    },
    /* API */
    parse: (color) => {
        color = color.toLowerCase();
        const hex = Keyword.colors[color];
        if (!hex)
            return;
        return _hex_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(hex);
    },
    stringify: (channels) => {
        const hex = _hex_js__WEBPACK_IMPORTED_MODULE_0__["default"].stringify(channels);
        for (const name in Keyword.colors) {
            if (Keyword.colors[name] === hex)
                return name;
        }
        return;
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Keyword);


/***/ }),

/***/ "./node_modules/khroma/dist/color/rgb.js":
/*!***********************************************!*\
  !*** ./node_modules/khroma/dist/color/rgb.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _channels_reusable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../channels/reusable.js */ "./node_modules/khroma/dist/channels/reusable.js");
/* IMPORT */


/* MAIN */
const RGB = {
    /* VARIABLES */
    re: /^rgba?\(\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?))\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?))\s*?(?:,|\s)\s*?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?))(?:\s*?(?:,|\/)\s*?\+?(-?(?:\d+(?:\.\d+)?|(?:\.\d+))(?:e\d+)?(%?)))?\s*?\)$/i,
    /* API */
    parse: (color) => {
        const charCode = color.charCodeAt(0);
        if (charCode !== 114 && charCode !== 82)
            return; // 'r'/'R'
        const match = color.match(RGB.re);
        if (!match)
            return;
        const [, r, isRedPercentage, g, isGreenPercentage, b, isBluePercentage, a, isAlphaPercentage] = match;
        return _channels_reusable_js__WEBPACK_IMPORTED_MODULE_0__["default"].set({
            r: _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.clamp.r(isRedPercentage ? parseFloat(r) * 2.55 : parseFloat(r)),
            g: _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.clamp.g(isGreenPercentage ? parseFloat(g) * 2.55 : parseFloat(g)),
            b: _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.clamp.b(isBluePercentage ? parseFloat(b) * 2.55 : parseFloat(b)),
            a: a ? _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.clamp.a(isAlphaPercentage ? parseFloat(a) / 100 : parseFloat(a)) : 1
        }, color);
    },
    stringify: (channels) => {
        const { r, g, b, a } = channels;
        if (a < 1) { // RGBA
            return `rgba(${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(r)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(g)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(b)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(a)})`;
        }
        else { // RGB
            return `rgb(${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(r)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(g)}, ${_utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(b)})`;
        }
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RGB);


/***/ }),

/***/ "./node_modules/khroma/dist/constants.js":
/*!***********************************************!*\
  !*** ./node_modules/khroma/dist/constants.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DEC2HEX: () => (/* binding */ DEC2HEX),
/* harmony export */   TYPE: () => (/* binding */ TYPE)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* IMPORT */

/* MAIN */
const DEC2HEX = {};
for (let i = 0; i <= 255; i++)
    DEC2HEX[i] = _utils_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].unit.dec2hex(i); // Populating dynamically, striking a balance between code size and performance
const TYPE = {
    ALL: 0,
    RGB: 1,
    HSL: 2
};
/* EXPORT */



/***/ }),

/***/ "./node_modules/khroma/dist/methods/adjust.js":
/*!****************************************************!*\
  !*** ./node_modules/khroma/dist/methods/adjust.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* harmony import */ var _change_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./change.js */ "./node_modules/khroma/dist/methods/change.js");
/* IMPORT */


/* MAIN */
const adjust = (color, channels) => {
    const ch = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color);
    const changes = {};
    for (const c in channels) {
        if (!channels[c])
            continue;
        changes[c] = ch[c] + channels[c];
    }
    return (0,_change_js__WEBPACK_IMPORTED_MODULE_1__["default"])(color, changes);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (adjust);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/adjust_channel.js":
/*!************************************************************!*\
  !*** ./node_modules/khroma/dist/methods/adjust_channel.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* IMPORT */


/* MAIN */
const adjustChannel = (color, channel, amount) => {
    const channels = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color);
    const amountCurrent = channels[channel];
    const amountNext = _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.clamp[channel](amountCurrent + amount);
    if (amountCurrent !== amountNext)
        channels[channel] = amountNext;
    return _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].stringify(channels);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (adjustChannel);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/change.js":
/*!****************************************************!*\
  !*** ./node_modules/khroma/dist/methods/change.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* IMPORT */


/* MAIN */
const change = (color, channels) => {
    const ch = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color);
    for (const c in channels) {
        ch[c] = _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.clamp[c](channels[c]);
    }
    return _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].stringify(ch);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (change);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/darken.js":
/*!****************************************************!*\
  !*** ./node_modules/khroma/dist/methods/darken.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _adjust_channel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adjust_channel.js */ "./node_modules/khroma/dist/methods/adjust_channel.js");
/* IMPORT */

/* MAIN */
const darken = (color, amount) => {
    return (0,_adjust_channel_js__WEBPACK_IMPORTED_MODULE_0__["default"])(color, 'l', -amount);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (darken);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/invert.js":
/*!****************************************************!*\
  !*** ./node_modules/khroma/dist/methods/invert.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* harmony import */ var _mix_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mix.js */ "./node_modules/khroma/dist/methods/mix.js");
/* IMPORT */


/* MAIN */
const invert = (color, weight = 100) => {
    const inverse = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color);
    inverse.r = 255 - inverse.r;
    inverse.g = 255 - inverse.g;
    inverse.b = 255 - inverse.b;
    return (0,_mix_js__WEBPACK_IMPORTED_MODULE_1__["default"])(inverse, color, weight);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (invert);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/is_dark.js":
/*!*****************************************************!*\
  !*** ./node_modules/khroma/dist/methods/is_dark.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _is_light_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is_light.js */ "./node_modules/khroma/dist/methods/is_light.js");
/* IMPORT */

/* MAIN */
const isDark = (color) => {
    return !(0,_is_light_js__WEBPACK_IMPORTED_MODULE_0__["default"])(color);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isDark);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/is_light.js":
/*!******************************************************!*\
  !*** ./node_modules/khroma/dist/methods/is_light.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _luminance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./luminance.js */ "./node_modules/khroma/dist/methods/luminance.js");
/* IMPORT */

/* MAIN */
const isLight = (color) => {
    return (0,_luminance_js__WEBPACK_IMPORTED_MODULE_0__["default"])(color) >= .5;
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLight);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/lighten.js":
/*!*****************************************************!*\
  !*** ./node_modules/khroma/dist/methods/lighten.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _adjust_channel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./adjust_channel.js */ "./node_modules/khroma/dist/methods/adjust_channel.js");
/* IMPORT */

/* MAIN */
const lighten = (color, amount) => {
    return (0,_adjust_channel_js__WEBPACK_IMPORTED_MODULE_0__["default"])(color, 'l', amount);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lighten);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/luminance.js":
/*!*******************************************************!*\
  !*** ./node_modules/khroma/dist/methods/luminance.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* IMPORT */


/* MAIN */
//SOURCE: https://planetcalc.com/7779
const luminance = (color) => {
    const { r, g, b } = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color);
    const luminance = .2126 * _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.toLinear(r) + .7152 * _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.toLinear(g) + .0722 * _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].channel.toLinear(b);
    return _utils_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].lang.round(luminance);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (luminance);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/mix.js":
/*!*************************************************!*\
  !*** ./node_modules/khroma/dist/methods/mix.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* harmony import */ var _rgba_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rgba.js */ "./node_modules/khroma/dist/methods/rgba.js");
/* IMPORT */


/* MAIN */
//SOURCE: https://github.com/sass/dart-sass/blob/7457d2e9e7e623d9844ffd037a070cf32d39c348/lib/src/functions/color.dart#L718-L756
const mix = (color1, color2, weight = 50) => {
    const { r: r1, g: g1, b: b1, a: a1 } = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color1);
    const { r: r2, g: g2, b: b2, a: a2 } = _color_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].parse(color2);
    const weightScale = weight / 100;
    const weightNormalized = (weightScale * 2) - 1;
    const alphaDelta = a1 - a2;
    const weight1combined = ((weightNormalized * alphaDelta) === -1) ? weightNormalized : (weightNormalized + alphaDelta) / (1 + weightNormalized * alphaDelta);
    const weight1 = (weight1combined + 1) / 2;
    const weight2 = 1 - weight1;
    const r = (r1 * weight1) + (r2 * weight2);
    const g = (g1 * weight1) + (g2 * weight2);
    const b = (b1 * weight1) + (b2 * weight2);
    const a = (a1 * weightScale) + (a2 * (1 - weightScale));
    return (0,_rgba_js__WEBPACK_IMPORTED_MODULE_1__["default"])(r, g, b, a);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mix);


/***/ }),

/***/ "./node_modules/khroma/dist/methods/rgba.js":
/*!**************************************************!*\
  !*** ./node_modules/khroma/dist/methods/rgba.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/index.js */ "./node_modules/khroma/dist/utils/index.js");
/* harmony import */ var _channels_reusable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../channels/reusable.js */ "./node_modules/khroma/dist/channels/reusable.js");
/* harmony import */ var _color_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../color/index.js */ "./node_modules/khroma/dist/color/index.js");
/* harmony import */ var _change_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./change.js */ "./node_modules/khroma/dist/methods/change.js");
/* IMPORT */




/* MAIN */
const rgba = (r, g, b = 0, a = 1) => {
    if (typeof r !== 'number')
        return (0,_change_js__WEBPACK_IMPORTED_MODULE_0__["default"])(r, { a: g });
    const channels = _channels_reusable_js__WEBPACK_IMPORTED_MODULE_1__["default"].set({
        r: _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.clamp.r(r),
        g: _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.clamp.g(g),
        b: _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.clamp.b(b),
        a: _utils_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].channel.clamp.a(a)
    });
    return _color_index_js__WEBPACK_IMPORTED_MODULE_3__["default"].stringify(channels);
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (rgba);


/***/ }),

/***/ "./node_modules/khroma/dist/utils/channel.js":
/*!***************************************************!*\
  !*** ./node_modules/khroma/dist/utils/channel.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* IMPORT */
/* MAIN */
const Channel = {
    /* CLAMP */
    min: {
        r: 0,
        g: 0,
        b: 0,
        s: 0,
        l: 0,
        a: 0
    },
    max: {
        r: 255,
        g: 255,
        b: 255,
        h: 360,
        s: 100,
        l: 100,
        a: 1
    },
    clamp: {
        r: (r) => r >= 255 ? 255 : (r < 0 ? 0 : r),
        g: (g) => g >= 255 ? 255 : (g < 0 ? 0 : g),
        b: (b) => b >= 255 ? 255 : (b < 0 ? 0 : b),
        h: (h) => h % 360,
        s: (s) => s >= 100 ? 100 : (s < 0 ? 0 : s),
        l: (l) => l >= 100 ? 100 : (l < 0 ? 0 : l),
        a: (a) => a >= 1 ? 1 : (a < 0 ? 0 : a)
    },
    /* CONVERSION */
    //SOURCE: https://planetcalc.com/7779
    toLinear: (c) => {
        const n = c / 255;
        return c > .03928 ? Math.pow(((n + .055) / 1.055), 2.4) : n / 12.92;
    },
    //SOURCE: https://gist.github.com/mjackson/5311256
    hue2rgb: (p, q, t) => {
        if (t < 0)
            t += 1;
        if (t > 1)
            t -= 1;
        if (t < 1 / 6)
            return p + (q - p) * 6 * t;
        if (t < 1 / 2)
            return q;
        if (t < 2 / 3)
            return p + (q - p) * (2 / 3 - t) * 6;
        return p;
    },
    hsl2rgb: ({ h, s, l }, channel) => {
        if (!s)
            return l * 2.55; // Achromatic
        h /= 360;
        s /= 100;
        l /= 100;
        const q = (l < .5) ? l * (1 + s) : (l + s) - (l * s);
        const p = 2 * l - q;
        switch (channel) {
            case 'r': return Channel.hue2rgb(p, q, h + 1 / 3) * 255;
            case 'g': return Channel.hue2rgb(p, q, h) * 255;
            case 'b': return Channel.hue2rgb(p, q, h - 1 / 3) * 255;
        }
    },
    rgb2hsl: ({ r, g, b }, channel) => {
        r /= 255;
        g /= 255;
        b /= 255;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        const l = (max + min) / 2;
        if (channel === 'l')
            return l * 100;
        if (max === min)
            return 0; // Achromatic
        const d = max - min;
        const s = (l > .5) ? d / (2 - max - min) : d / (max + min);
        if (channel === 's')
            return s * 100;
        switch (max) {
            case r: return ((g - b) / d + (g < b ? 6 : 0)) * 60;
            case g: return ((b - r) / d + 2) * 60;
            case b: return ((r - g) / d + 4) * 60;
            default: return -1; //TSC: TypeScript is stupid and complains if there isn't this useless default statement
        }
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Channel);


/***/ }),

/***/ "./node_modules/khroma/dist/utils/index.js":
/*!*************************************************!*\
  !*** ./node_modules/khroma/dist/utils/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _channel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel.js */ "./node_modules/khroma/dist/utils/channel.js");
/* harmony import */ var _lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lang.js */ "./node_modules/khroma/dist/utils/lang.js");
/* harmony import */ var _unit_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unit.js */ "./node_modules/khroma/dist/utils/unit.js");
/* IMPORT */



/* MAIN */
const Utils = {
    channel: _channel_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    lang: _lang_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    unit: _unit_js__WEBPACK_IMPORTED_MODULE_2__["default"]
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Utils);


/***/ }),

/***/ "./node_modules/khroma/dist/utils/lang.js":
/*!************************************************!*\
  !*** ./node_modules/khroma/dist/utils/lang.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* MAIN */
const Lang = {
    /* API */
    clamp: (number, lower, upper) => {
        if (lower > upper)
            return Math.min(lower, Math.max(upper, number));
        return Math.min(upper, Math.max(lower, number));
    },
    round: (number) => {
        return Math.round(number * 10000000000) / 10000000000;
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Lang);


/***/ }),

/***/ "./node_modules/khroma/dist/utils/unit.js":
/*!************************************************!*\
  !*** ./node_modules/khroma/dist/utils/unit.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* MAIN */
const Unit = {
    /* API */
    dec2hex: (dec) => {
        const hex = Math.round(dec).toString(16);
        return hex.length > 1 ? hex : `0${hex}`;
    }
};
/* EXPORT */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Unit);


/***/ }),

/***/ "./node_modules/lodash-es/_DataView.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_DataView.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var DataView = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'DataView');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataView);


/***/ }),

/***/ "./node_modules/lodash-es/_Hash.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_Hash.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _hashClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_hashClear.js */ "./node_modules/lodash-es/_hashClear.js");
/* harmony import */ var _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_hashDelete.js */ "./node_modules/lodash-es/_hashDelete.js");
/* harmony import */ var _hashGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_hashGet.js */ "./node_modules/lodash-es/_hashGet.js");
/* harmony import */ var _hashHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_hashHas.js */ "./node_modules/lodash-es/_hashHas.js");
/* harmony import */ var _hashSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_hashSet.js */ "./node_modules/lodash-es/_hashSet.js");






/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];
Hash.prototype['delete'] = _hashDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];
Hash.prototype.get = _hashGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];
Hash.prototype.has = _hashHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];
Hash.prototype.set = _hashSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Hash);


/***/ }),

/***/ "./node_modules/lodash-es/_ListCache.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_ListCache.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_listCacheClear.js */ "./node_modules/lodash-es/_listCacheClear.js");
/* harmony import */ var _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_listCacheDelete.js */ "./node_modules/lodash-es/_listCacheDelete.js");
/* harmony import */ var _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_listCacheGet.js */ "./node_modules/lodash-es/_listCacheGet.js");
/* harmony import */ var _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_listCacheHas.js */ "./node_modules/lodash-es/_listCacheHas.js");
/* harmony import */ var _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_listCacheSet.js */ "./node_modules/lodash-es/_listCacheSet.js");






/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];
ListCache.prototype['delete'] = _listCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];
ListCache.prototype.get = _listCacheGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];
ListCache.prototype.has = _listCacheHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];
ListCache.prototype.set = _listCacheSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ListCache);


/***/ }),

/***/ "./node_modules/lodash-es/_Map.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/_Map.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var Map = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'Map');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Map);


/***/ }),

/***/ "./node_modules/lodash-es/_MapCache.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_MapCache.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_mapCacheClear.js */ "./node_modules/lodash-es/_mapCacheClear.js");
/* harmony import */ var _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_mapCacheDelete.js */ "./node_modules/lodash-es/_mapCacheDelete.js");
/* harmony import */ var _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_mapCacheGet.js */ "./node_modules/lodash-es/_mapCacheGet.js");
/* harmony import */ var _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_mapCacheHas.js */ "./node_modules/lodash-es/_mapCacheHas.js");
/* harmony import */ var _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_mapCacheSet.js */ "./node_modules/lodash-es/_mapCacheSet.js");






/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear_js__WEBPACK_IMPORTED_MODULE_0__["default"];
MapCache.prototype['delete'] = _mapCacheDelete_js__WEBPACK_IMPORTED_MODULE_1__["default"];
MapCache.prototype.get = _mapCacheGet_js__WEBPACK_IMPORTED_MODULE_2__["default"];
MapCache.prototype.has = _mapCacheHas_js__WEBPACK_IMPORTED_MODULE_3__["default"];
MapCache.prototype.set = _mapCacheSet_js__WEBPACK_IMPORTED_MODULE_4__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MapCache);


/***/ }),

/***/ "./node_modules/lodash-es/_Promise.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_Promise.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var Promise = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'Promise');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Promise);


/***/ }),

/***/ "./node_modules/lodash-es/_Set.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/_Set.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var Set = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'Set');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Set);


/***/ }),

/***/ "./node_modules/lodash-es/_Stack.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_Stack.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");
/* harmony import */ var _stackClear_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_stackClear.js */ "./node_modules/lodash-es/_stackClear.js");
/* harmony import */ var _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_stackDelete.js */ "./node_modules/lodash-es/_stackDelete.js");
/* harmony import */ var _stackGet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_stackGet.js */ "./node_modules/lodash-es/_stackGet.js");
/* harmony import */ var _stackHas_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_stackHas.js */ "./node_modules/lodash-es/_stackHas.js");
/* harmony import */ var _stackSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_stackSet.js */ "./node_modules/lodash-es/_stackSet.js");







/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"](entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = _stackClear_js__WEBPACK_IMPORTED_MODULE_1__["default"];
Stack.prototype['delete'] = _stackDelete_js__WEBPACK_IMPORTED_MODULE_2__["default"];
Stack.prototype.get = _stackGet_js__WEBPACK_IMPORTED_MODULE_3__["default"];
Stack.prototype.has = _stackHas_js__WEBPACK_IMPORTED_MODULE_4__["default"];
Stack.prototype.set = _stackSet_js__WEBPACK_IMPORTED_MODULE_5__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Stack);


/***/ }),

/***/ "./node_modules/lodash-es/_Symbol.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_Symbol.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Built-in value references. */
var Symbol = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Symbol;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Symbol);


/***/ }),

/***/ "./node_modules/lodash-es/_Uint8Array.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_Uint8Array.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Built-in value references. */
var Uint8Array = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Uint8Array;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Uint8Array);


/***/ }),

/***/ "./node_modules/lodash-es/_WeakMap.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_WeakMap.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");



/* Built-in method references that are verified to be native. */
var WeakMap = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_root_js__WEBPACK_IMPORTED_MODULE_1__["default"], 'WeakMap');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WeakMap);


/***/ }),

/***/ "./node_modules/lodash-es/_apply.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_apply.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (apply);


/***/ }),

/***/ "./node_modules/lodash-es/_arrayLikeKeys.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_arrayLikeKeys.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseTimes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_baseTimes.js */ "./node_modules/lodash-es/_baseTimes.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");







/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value),
      isArg = !isArr && (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value),
      isBuff = !isArr && !isArg && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value),
      isType = !isArr && !isArg && !isBuff && (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? (0,_baseTimes_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_5__["default"])(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (arrayLikeKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_assignMergeValue.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_assignMergeValue.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");



/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !(0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object[key], value)) ||
      (value === undefined && !(key in object))) {
    (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, value);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assignMergeValue);


/***/ }),

/***/ "./node_modules/lodash-es/_assignValue.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_assignValue.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && (0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(objValue, value)) ||
      (value === undefined && !(key in object))) {
    (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, value);
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assignValue);


/***/ }),

/***/ "./node_modules/lodash-es/_assocIndexOf.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_assocIndexOf.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");


/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if ((0,_eq_js__WEBPACK_IMPORTED_MODULE_0__["default"])(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (assocIndexOf);


/***/ }),

/***/ "./node_modules/lodash-es/_baseAssignValue.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseAssignValue.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_defineProperty.js */ "./node_modules/lodash-es/_defineProperty.js");


/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseAssignValue);


/***/ }),

/***/ "./node_modules/lodash-es/_baseCreate.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseCreate.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");


/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseCreate);


/***/ }),

/***/ "./node_modules/lodash-es/_baseFor.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_baseFor.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _createBaseFor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createBaseFor.js */ "./node_modules/lodash-es/_createBaseFor.js");


/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = (0,_createBaseFor_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseFor);


/***/ }),

/***/ "./node_modules/lodash-es/_baseGetTag.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseGetTag.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");
/* harmony import */ var _getRawTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_getRawTag.js */ "./node_modules/lodash-es/_getRawTag.js");
/* harmony import */ var _objectToString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_objectToString.js */ "./node_modules/lodash-es/_objectToString.js");




/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? (0,_getRawTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)
    : (0,_objectToString_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseGetTag);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsArguments.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsArguments.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) == argsTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsArguments);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsNative.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsNative.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _isMasked_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isMasked.js */ "./node_modules/lodash-es/_isMasked.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js");





/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) || (0,_isMasked_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value)) {
    return false;
  }
  var pattern = (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) ? reIsNative : reIsHostCtor;
  return pattern.test((0,_toSource_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsNative);


/***/ }),

/***/ "./node_modules/lodash-es/_baseIsTypedArray.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsTypedArray.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");




/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) &&
    (0,_isLength_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value.length) && !!typedArrayTags[(0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value)];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseIsTypedArray);


/***/ }),

/***/ "./node_modules/lodash-es/_baseKeys.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeys.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");
/* harmony import */ var _nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_nativeKeys.js */ "./node_modules/lodash-es/_nativeKeys.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!(0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return (0,_nativeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_baseKeysIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeysIn.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");
/* harmony import */ var _nativeKeysIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_nativeKeysIn.js */ "./node_modules/lodash-es/_nativeKeysIn.js");




/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return (0,_nativeKeysIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object);
  }
  var isProto = (0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseKeysIn);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMerge.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseMerge.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Stack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Stack.js */ "./node_modules/lodash-es/_Stack.js");
/* harmony import */ var _assignMergeValue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_assignMergeValue.js */ "./node_modules/lodash-es/_assignMergeValue.js");
/* harmony import */ var _baseFor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseFor.js */ "./node_modules/lodash-es/_baseFor.js");
/* harmony import */ var _baseMergeDeep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_baseMergeDeep.js */ "./node_modules/lodash-es/_baseMergeDeep.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");
/* harmony import */ var _safeGet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_safeGet.js */ "./node_modules/lodash-es/_safeGet.js");








/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  (0,_baseFor_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, function(srcValue, key) {
    stack || (stack = new _Stack_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
    if ((0,_isObject_js__WEBPACK_IMPORTED_MODULE_2__["default"])(srcValue)) {
      (0,_baseMergeDeep_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer((0,_safeGet_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      (0,_assignMergeValue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(object, key, newValue);
    }
  }, _keysIn_js__WEBPACK_IMPORTED_MODULE_6__["default"]);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMerge);


/***/ }),

/***/ "./node_modules/lodash-es/_baseMergeDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_baseMergeDeep.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assignMergeValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assignMergeValue.js */ "./node_modules/lodash-es/_assignMergeValue.js");
/* harmony import */ var _cloneBuffer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_cloneBuffer.js */ "./node_modules/lodash-es/_cloneBuffer.js");
/* harmony import */ var _cloneTypedArray_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_cloneTypedArray.js */ "./node_modules/lodash-es/_cloneTypedArray.js");
/* harmony import */ var _copyArray_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_copyArray.js */ "./node_modules/lodash-es/_copyArray.js");
/* harmony import */ var _initCloneObject_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./_initCloneObject.js */ "./node_modules/lodash-es/_initCloneObject.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isArrayLikeObject.js */ "./node_modules/lodash-es/isArrayLikeObject.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");
/* harmony import */ var _isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./isPlainObject.js */ "./node_modules/lodash-es/isPlainObject.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");
/* harmony import */ var _safeGet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_safeGet.js */ "./node_modules/lodash-es/_safeGet.js");
/* harmony import */ var _toPlainObject_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./toPlainObject.js */ "./node_modules/lodash-es/toPlainObject.js");
















/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = (0,_safeGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key),
      srcValue = (0,_safeGet_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    (0,_assignMergeValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = (0,_isArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(srcValue),
        isBuff = !isArr && (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(srcValue),
        isTyped = !isArr && !isBuff && (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_4__["default"])(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(objValue)) {
        newValue = objValue;
      }
      else if ((0,_isArrayLikeObject_js__WEBPACK_IMPORTED_MODULE_5__["default"])(objValue)) {
        newValue = (0,_copyArray_js__WEBPACK_IMPORTED_MODULE_6__["default"])(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = (0,_cloneBuffer_js__WEBPACK_IMPORTED_MODULE_7__["default"])(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = (0,_cloneTypedArray_js__WEBPACK_IMPORTED_MODULE_8__["default"])(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if ((0,_isPlainObject_js__WEBPACK_IMPORTED_MODULE_9__["default"])(srcValue) || (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_10__["default"])(srcValue)) {
      newValue = objValue;
      if ((0,_isArguments_js__WEBPACK_IMPORTED_MODULE_10__["default"])(objValue)) {
        newValue = (0,_toPlainObject_js__WEBPACK_IMPORTED_MODULE_11__["default"])(objValue);
      }
      else if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_12__["default"])(objValue) || (0,_isFunction_js__WEBPACK_IMPORTED_MODULE_13__["default"])(objValue)) {
        newValue = (0,_initCloneObject_js__WEBPACK_IMPORTED_MODULE_14__["default"])(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  (0,_assignMergeValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, newValue);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseMergeDeep);


/***/ }),

/***/ "./node_modules/lodash-es/_baseRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseRest.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");
/* harmony import */ var _overRest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_overRest.js */ "./node_modules/lodash-es/_overRest.js");
/* harmony import */ var _setToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_setToString.js */ "./node_modules/lodash-es/_setToString.js");




/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return (0,_setToString_js__WEBPACK_IMPORTED_MODULE_0__["default"])((0,_overRest_js__WEBPACK_IMPORTED_MODULE_1__["default"])(func, start, _identity_js__WEBPACK_IMPORTED_MODULE_2__["default"]), func + '');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseRest);


/***/ }),

/***/ "./node_modules/lodash-es/_baseSetToString.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseSetToString.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constant_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constant.js */ "./node_modules/lodash-es/constant.js");
/* harmony import */ var _defineProperty_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_defineProperty.js */ "./node_modules/lodash-es/_defineProperty.js");
/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js");




/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _identity_js__WEBPACK_IMPORTED_MODULE_1__["default"] : function(func, string) {
  return (0,_defineProperty_js__WEBPACK_IMPORTED_MODULE_0__["default"])(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': (0,_constant_js__WEBPACK_IMPORTED_MODULE_2__["default"])(string),
    'writable': true
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseSetToString);


/***/ }),

/***/ "./node_modules/lodash-es/_baseTimes.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseTimes.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseTimes);


/***/ }),

/***/ "./node_modules/lodash-es/_baseUnary.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseUnary.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (baseUnary);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneArrayBuffer.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_cloneArrayBuffer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Uint8Array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Uint8Array.js */ "./node_modules/lodash-es/_Uint8Array.js");


/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_0__["default"](result).set(new _Uint8Array_js__WEBPACK_IMPORTED_MODULE_0__["default"](arrayBuffer));
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneArrayBuffer);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneBuffer.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_cloneBuffer.js ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");
/* module decorator */ module = __webpack_require__.hmd(module);


/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneBuffer);


/***/ }),

/***/ "./node_modules/lodash-es/_cloneTypedArray.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_cloneTypedArray.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_cloneArrayBuffer.js */ "./node_modules/lodash-es/_cloneArrayBuffer.js");


/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? (0,_cloneArrayBuffer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cloneTypedArray);


/***/ }),

/***/ "./node_modules/lodash-es/_copyArray.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_copyArray.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (copyArray);


/***/ }),

/***/ "./node_modules/lodash-es/_copyObject.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_copyObject.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assignValue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assignValue.js */ "./node_modules/lodash-es/_assignValue.js");
/* harmony import */ var _baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js");



/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      (0,_baseAssignValue_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key, newValue);
    } else {
      (0,_assignValue_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, key, newValue);
    }
  }
  return object;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (copyObject);


/***/ }),

/***/ "./node_modules/lodash-es/_coreJsData.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_coreJsData.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");


/** Used to detect overreaching core-js shims. */
var coreJsData = _root_js__WEBPACK_IMPORTED_MODULE_0__["default"]['__core-js_shared__'];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (coreJsData);


/***/ }),

/***/ "./node_modules/lodash-es/_createAssigner.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_createAssigner.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseRest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js");
/* harmony import */ var _isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js");



/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return (0,_baseRest_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && (0,_isIterateeCall_js__WEBPACK_IMPORTED_MODULE_1__["default"])(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createAssigner);


/***/ }),

/***/ "./node_modules/lodash-es/_createBaseFor.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_createBaseFor.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createBaseFor);


/***/ }),

/***/ "./node_modules/lodash-es/_defineProperty.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_defineProperty.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");


var defineProperty = (function() {
  try {
    var func = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defineProperty);


/***/ }),

/***/ "./node_modules/lodash-es/_freeGlobal.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_freeGlobal.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (freeGlobal);


/***/ }),

/***/ "./node_modules/lodash-es/_getMapData.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_getMapData.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isKeyable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isKeyable.js */ "./node_modules/lodash-es/_isKeyable.js");


/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return (0,_isKeyable_js__WEBPACK_IMPORTED_MODULE_0__["default"])(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getMapData);


/***/ }),

/***/ "./node_modules/lodash-es/_getNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getNative.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseIsNative.js */ "./node_modules/lodash-es/_baseIsNative.js");
/* harmony import */ var _getValue_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getValue.js */ "./node_modules/lodash-es/_getValue.js");



/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = (0,_getValue_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object, key);
  return (0,_baseIsNative_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) ? value : undefined;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getNative);


/***/ }),

/***/ "./node_modules/lodash-es/_getPrototype.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getPrototype.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js");


/** Built-in value references. */
var getPrototype = (0,_overArg_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.getPrototypeOf, Object);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getPrototype);


/***/ }),

/***/ "./node_modules/lodash-es/_getRawTag.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getRawTag.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js");


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? _Symbol_js__WEBPACK_IMPORTED_MODULE_0__["default"].toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getRawTag);


/***/ }),

/***/ "./node_modules/lodash-es/_getTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_getTag.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _DataView_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_DataView.js */ "./node_modules/lodash-es/_DataView.js");
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");
/* harmony import */ var _Promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_Promise.js */ "./node_modules/lodash-es/_Promise.js");
/* harmony import */ var _Set_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_Set.js */ "./node_modules/lodash-es/_Set.js");
/* harmony import */ var _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_WeakMap.js */ "./node_modules/lodash-es/_WeakMap.js");
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _toSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js");








/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
    mapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Map_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
    promiseCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
    setCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_Set_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
    weakMapCtorString = (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"]);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = _baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__["default"];

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((_DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"] && getTag(new _DataView_js__WEBPACK_IMPORTED_MODULE_1__["default"](new ArrayBuffer(1))) != dataViewTag) ||
    (_Map_js__WEBPACK_IMPORTED_MODULE_2__["default"] && getTag(new _Map_js__WEBPACK_IMPORTED_MODULE_2__["default"]) != mapTag) ||
    (_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"] && getTag(_Promise_js__WEBPACK_IMPORTED_MODULE_3__["default"].resolve()) != promiseTag) ||
    (_Set_js__WEBPACK_IMPORTED_MODULE_4__["default"] && getTag(new _Set_js__WEBPACK_IMPORTED_MODULE_4__["default"]) != setTag) ||
    (_WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"] && getTag(new _WeakMap_js__WEBPACK_IMPORTED_MODULE_5__["default"]) != weakMapTag)) {
  getTag = function(value) {
    var result = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_6__["default"])(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? (0,_toSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getTag);


/***/ }),

/***/ "./node_modules/lodash-es/_getValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_getValue.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getValue);


/***/ }),

/***/ "./node_modules/lodash-es/_hashClear.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_hashClear.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? (0,_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(null) : {};
  this.size = 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashClear);


/***/ }),

/***/ "./node_modules/lodash-es/_hashDelete.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_hashDelete.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_hashGet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashGet.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashGet);


/***/ }),

/***/ "./node_modules/lodash-es/_hashHas.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashHas.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashHas);


/***/ }),

/***/ "./node_modules/lodash-es/_hashSet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_hashSet.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nativeCreate.js */ "./node_modules/lodash-es/_nativeCreate.js");


/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate_js__WEBPACK_IMPORTED_MODULE_0__["default"] && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (hashSet);


/***/ }),

/***/ "./node_modules/lodash-es/_initCloneObject.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_initCloneObject.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseCreate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseCreate.js */ "./node_modules/lodash-es/_baseCreate.js");
/* harmony import */ var _getPrototype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getPrototype.js */ "./node_modules/lodash-es/_getPrototype.js");
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");




/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !(0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object))
    ? (0,_baseCreate_js__WEBPACK_IMPORTED_MODULE_1__["default"])((0,_getPrototype_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object))
    : {};
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initCloneObject);


/***/ }),

/***/ "./node_modules/lodash-es/_isIndex.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_isIndex.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isIndex);


/***/ }),

/***/ "./node_modules/lodash-es/_isIterateeCall.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_isIterateeCall.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _eq_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");
/* harmony import */ var _isIndex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");





/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? ((0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object) && (0,_isIndex_js__WEBPACK_IMPORTED_MODULE_2__["default"])(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return (0,_eq_js__WEBPACK_IMPORTED_MODULE_3__["default"])(object[index], value);
  }
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isIterateeCall);


/***/ }),

/***/ "./node_modules/lodash-es/_isKeyable.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_isKeyable.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isKeyable);


/***/ }),

/***/ "./node_modules/lodash-es/_isMasked.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_isMasked.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_coreJsData.js */ "./node_modules/lodash-es/_coreJsData.js");


/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"].keys && _coreJsData_js__WEBPACK_IMPORTED_MODULE_0__["default"].keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isMasked);


/***/ }),

/***/ "./node_modules/lodash-es/_isPrototype.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_isPrototype.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isPrototype);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheClear.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheClear.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheClear);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheDelete.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheDelete.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheGet.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheGet.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);

  return index < 0 ? undefined : data[index][1];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheGet);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheHas.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheHas.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this.__data__, key) > -1;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheHas);


/***/ }),

/***/ "./node_modules/lodash-es/_listCacheSet.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_listCacheSet.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assocIndexOf.js */ "./node_modules/lodash-es/_assocIndexOf.js");


/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = (0,_assocIndexOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listCacheSet);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheClear.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheClear.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Hash.js */ "./node_modules/lodash-es/_Hash.js");
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");




/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    'map': new (_Map_js__WEBPACK_IMPORTED_MODULE_1__["default"] || _ListCache_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
    'string': new _Hash_js__WEBPACK_IMPORTED_MODULE_0__["default"]
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheClear);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheDelete.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheDelete.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheGet.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheGet.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key).get(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheGet);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheHas.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheHas.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key).has(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheHas);


/***/ }),

/***/ "./node_modules/lodash-es/_mapCacheSet.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_mapCacheSet.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getMapData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getMapData.js */ "./node_modules/lodash-es/_getMapData.js");


/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = (0,_getMapData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mapCacheSet);


/***/ }),

/***/ "./node_modules/lodash-es/_nativeCreate.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_nativeCreate.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getNative_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js");


/* Built-in method references that are verified to be native. */
var nativeCreate = (0,_getNative_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object, 'create');

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeCreate);


/***/ }),

/***/ "./node_modules/lodash-es/_nativeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeys.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _overArg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js");


/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = (0,_overArg_js__WEBPACK_IMPORTED_MODULE_0__["default"])(Object.keys, Object);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeKeys);


/***/ }),

/***/ "./node_modules/lodash-es/_nativeKeysIn.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeysIn.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nativeKeysIn);


/***/ }),

/***/ "./node_modules/lodash-es/_nodeUtil.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_nodeUtil.js ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js");
/* module decorator */ module = __webpack_require__.hmd(module);


/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__["default"].process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nodeUtil);


/***/ }),

/***/ "./node_modules/lodash-es/_objectToString.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_objectToString.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (objectToString);


/***/ }),

/***/ "./node_modules/lodash-es/_overArg.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_overArg.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (overArg);


/***/ }),

/***/ "./node_modules/lodash-es/_overRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_overRest.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _apply_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_apply.js */ "./node_modules/lodash-es/_apply.js");


/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return (0,_apply_js__WEBPACK_IMPORTED_MODULE_0__["default"])(func, this, otherArgs);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (overRest);


/***/ }),

/***/ "./node_modules/lodash-es/_root.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_root.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js");


/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__["default"] || freeSelf || Function('return this')();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (root);


/***/ }),

/***/ "./node_modules/lodash-es/_safeGet.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_safeGet.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (safeGet);


/***/ }),

/***/ "./node_modules/lodash-es/_setToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setToString.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseSetToString_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseSetToString.js */ "./node_modules/lodash-es/_baseSetToString.js");
/* harmony import */ var _shortOut_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shortOut.js */ "./node_modules/lodash-es/_shortOut.js");



/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = (0,_shortOut_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_baseSetToString_js__WEBPACK_IMPORTED_MODULE_1__["default"]);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (setToString);


/***/ }),

/***/ "./node_modules/lodash-es/_shortOut.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_shortOut.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (shortOut);


/***/ }),

/***/ "./node_modules/lodash-es/_stackClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_stackClear.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");


/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];
  this.size = 0;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackClear);


/***/ }),

/***/ "./node_modules/lodash-es/_stackDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_stackDelete.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackDelete);


/***/ }),

/***/ "./node_modules/lodash-es/_stackGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackGet.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackGet);


/***/ }),

/***/ "./node_modules/lodash-es/_stackHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackHas.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackHas);


/***/ }),

/***/ "./node_modules/lodash-es/_stackSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_stackSet.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ListCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_ListCache.js */ "./node_modules/lodash-es/_ListCache.js");
/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Map.js */ "./node_modules/lodash-es/_Map.js");
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");




/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof _ListCache_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
    var pairs = data.__data__;
    if (!_Map_js__WEBPACK_IMPORTED_MODULE_1__["default"] || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache_js__WEBPACK_IMPORTED_MODULE_2__["default"](pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackSet);


/***/ }),

/***/ "./node_modules/lodash-es/_toSource.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_toSource.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toSource);


/***/ }),

/***/ "./node_modules/lodash-es/constant.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/constant.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constant);


/***/ }),

/***/ "./node_modules/lodash-es/eq.js":
/*!**************************************!*\
  !*** ./node_modules/lodash-es/eq.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (eq);


/***/ }),

/***/ "./node_modules/lodash-es/identity.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/identity.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (identity);


/***/ }),

/***/ "./node_modules/lodash-es/isArguments.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArguments.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseIsArguments.js */ "./node_modules/lodash-es/_baseIsArguments.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = (0,_baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function() { return arguments; }()) ? _baseIsArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"] : function(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArguments);


/***/ }),

/***/ "./node_modules/lodash-es/isArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isArray.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArray);


/***/ }),

/***/ "./node_modules/lodash-es/isArrayLike.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArrayLike.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isFunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js");
/* harmony import */ var _isLength_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js");



/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && (0,_isLength_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value.length) && !(0,_isFunction_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArrayLike);


/***/ }),

/***/ "./node_modules/lodash-es/isArrayLikeObject.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/isArrayLikeObject.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");



/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return (0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) && (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isArrayLikeObject);


/***/ }),

/***/ "./node_modules/lodash-es/isBuffer.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isBuffer.js ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js");
/* harmony import */ var _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stubFalse.js */ "./node_modules/lodash-es/stubFalse.js");
/* module decorator */ module = __webpack_require__.hmd(module);



/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root_js__WEBPACK_IMPORTED_MODULE_0__["default"].Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || _stubFalse_js__WEBPACK_IMPORTED_MODULE_1__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isBuffer);


/***/ }),

/***/ "./node_modules/lodash-es/isEmpty.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isEmpty.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseKeys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_baseKeys.js */ "./node_modules/lodash-es/_baseKeys.js");
/* harmony import */ var _getTag_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_getTag.js */ "./node_modules/lodash-es/_getTag.js");
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js");
/* harmony import */ var _isArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");
/* harmony import */ var _isBuffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js");
/* harmony import */ var _isPrototype_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js");
/* harmony import */ var _isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js");









/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if ((0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) &&
      ((0,_isArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        (0,_isBuffer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value) || (0,_isTypedArray_js__WEBPACK_IMPORTED_MODULE_3__["default"])(value) || (0,_isArguments_js__WEBPACK_IMPORTED_MODULE_4__["default"])(value))) {
    return !value.length;
  }
  var tag = (0,_getTag_js__WEBPACK_IMPORTED_MODULE_5__["default"])(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if ((0,_isPrototype_js__WEBPACK_IMPORTED_MODULE_6__["default"])(value)) {
    return !(0,_baseKeys_js__WEBPACK_IMPORTED_MODULE_7__["default"])(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isEmpty);


/***/ }),

/***/ "./node_modules/lodash-es/isFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/isFunction.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _isObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js");



/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!(0,_isObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isFunction);


/***/ }),

/***/ "./node_modules/lodash-es/isLength.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isLength.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLength);


/***/ }),

/***/ "./node_modules/lodash-es/isObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isObject.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObject);


/***/ }),

/***/ "./node_modules/lodash-es/isObjectLike.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isObjectLike.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObjectLike);


/***/ }),

/***/ "./node_modules/lodash-es/isPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/isPlainObject.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js");
/* harmony import */ var _getPrototype_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_getPrototype.js */ "./node_modules/lodash-es/_getPrototype.js");
/* harmony import */ var _isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js");




/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!(0,_isObjectLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value) || (0,_baseGetTag_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value) != objectTag) {
    return false;
  }
  var proto = (0,_getPrototype_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isPlainObject);


/***/ }),

/***/ "./node_modules/lodash-es/isTypedArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isTypedArray.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseIsTypedArray.js */ "./node_modules/lodash-es/_baseIsTypedArray.js");
/* harmony import */ var _baseUnary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js");
/* harmony import */ var _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js");




/* Node.js helper references. */
var nodeIsTypedArray = _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"] && _nodeUtil_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? (0,_baseUnary_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nodeIsTypedArray) : _baseIsTypedArray_js__WEBPACK_IMPORTED_MODULE_2__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isTypedArray);


/***/ }),

/***/ "./node_modules/lodash-es/keysIn.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/keysIn.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_arrayLikeKeys.js */ "./node_modules/lodash-es/_arrayLikeKeys.js");
/* harmony import */ var _baseKeysIn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_baseKeysIn.js */ "./node_modules/lodash-es/_baseKeysIn.js");
/* harmony import */ var _isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js");




/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return (0,_isArrayLike_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object) ? (0,_arrayLikeKeys_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, true) : (0,_baseKeysIn_js__WEBPACK_IMPORTED_MODULE_2__["default"])(object);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (keysIn);


/***/ }),

/***/ "./node_modules/lodash-es/memoize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/memoize.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _MapCache_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_MapCache.js */ "./node_modules/lodash-es/_MapCache.js");


/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache_js__WEBPACK_IMPORTED_MODULE_0__["default"]);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = _MapCache_js__WEBPACK_IMPORTED_MODULE_0__["default"];

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (memoize);


/***/ }),

/***/ "./node_modules/lodash-es/merge.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/merge.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseMerge_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_baseMerge.js */ "./node_modules/lodash-es/_baseMerge.js");
/* harmony import */ var _createAssigner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_createAssigner.js */ "./node_modules/lodash-es/_createAssigner.js");



/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = (0,_createAssigner_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function(object, source, srcIndex) {
  (0,_baseMerge_js__WEBPACK_IMPORTED_MODULE_1__["default"])(object, source, srcIndex);
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (merge);


/***/ }),

/***/ "./node_modules/lodash-es/stubFalse.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/stubFalse.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stubFalse);


/***/ }),

/***/ "./node_modules/lodash-es/toPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/toPlainObject.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _copyObject_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js");
/* harmony import */ var _keysIn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js");



/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return (0,_copyObject_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, (0,_keysIn_js__WEBPACK_IMPORTED_MODULE_1__["default"])(value));
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toPlainObject);


/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-5NNNAHNI.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-5NNNAHNI.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   package_default: () => (/* binding */ package_default)
/* harmony export */ });
// package.json
var package_default = {
  name: "mermaid",
  version: "11.6.0",
  description: "Markdown-ish syntax for generating flowcharts, mindmaps, sequence diagrams, class diagrams, gantt charts, git graphs and more.",
  type: "module",
  module: "./dist/mermaid.core.mjs",
  types: "./dist/mermaid.d.ts",
  exports: {
    ".": {
      types: "./dist/mermaid.d.ts",
      import: "./dist/mermaid.core.mjs",
      default: "./dist/mermaid.core.mjs"
    },
    "./*": "./*"
  },
  keywords: [
    "diagram",
    "markdown",
    "flowchart",
    "sequence diagram",
    "gantt",
    "class diagram",
    "git graph",
    "mindmap",
    "packet diagram",
    "c4 diagram",
    "er diagram",
    "pie chart",
    "pie diagram",
    "quadrant chart",
    "requirement diagram",
    "graph"
  ],
  scripts: {
    clean: "rimraf dist",
    dev: "pnpm -w dev",
    "docs:code": "typedoc src/defaultConfig.ts src/config.ts src/mermaid.ts && prettier --write ./src/docs/config/setup",
    "docs:build": "rimraf ../../docs && pnpm docs:code && pnpm docs:spellcheck && tsx scripts/docs.cli.mts",
    "docs:verify": "pnpm docs:code && pnpm docs:spellcheck && tsx scripts/docs.cli.mts --verify",
    "docs:pre:vitepress": "pnpm --filter ./src/docs prefetch && rimraf src/vitepress && pnpm docs:code && tsx scripts/docs.cli.mts --vitepress && pnpm --filter ./src/vitepress install --no-frozen-lockfile --ignore-scripts",
    "docs:build:vitepress": "pnpm docs:pre:vitepress && (cd src/vitepress && pnpm run build) && cpy --flat src/docs/landing/ ./src/vitepress/.vitepress/dist/landing",
    "docs:dev": 'pnpm docs:pre:vitepress && concurrently "pnpm --filter ./src/vitepress dev" "tsx scripts/docs.cli.mts --watch --vitepress"',
    "docs:dev:docker": 'pnpm docs:pre:vitepress && concurrently "pnpm --filter ./src/vitepress dev:docker" "tsx scripts/docs.cli.mts --watch --vitepress"',
    "docs:serve": "pnpm docs:build:vitepress && vitepress serve src/vitepress",
    "docs:spellcheck": 'cspell "src/docs/**/*.md"',
    "docs:release-version": "tsx scripts/update-release-version.mts",
    "docs:verify-version": "tsx scripts/update-release-version.mts --verify",
    "types:build-config": "tsx scripts/create-types-from-json-schema.mts",
    "types:verify-config": "tsx scripts/create-types-from-json-schema.mts --verify",
    checkCircle: "npx madge --circular ./src",
    prepublishOnly: "pnpm docs:verify-version"
  },
  repository: {
    type: "git",
    url: "https://github.com/mermaid-js/mermaid"
  },
  author: "Knut Sveidqvist",
  license: "MIT",
  standard: {
    ignore: [
      "**/parser/*.js",
      "dist/**/*.js",
      "cypress/**/*.js"
    ],
    globals: [
      "page"
    ]
  },
  dependencies: {
    "@braintree/sanitize-url": "^7.0.4",
    "@iconify/utils": "^2.1.33",
    "@mermaid-js/parser": "workspace:^",
    "@types/d3": "^7.4.3",
    cytoscape: "^3.29.3",
    "cytoscape-cose-bilkent": "^4.1.0",
    "cytoscape-fcose": "^2.2.0",
    d3: "^7.9.0",
    "d3-sankey": "^0.12.3",
    "dagre-d3-es": "7.0.11",
    dayjs: "^1.11.13",
    dompurify: "^3.2.4",
    katex: "^0.16.9",
    khroma: "^2.1.0",
    "lodash-es": "^4.17.21",
    marked: "^15.0.7",
    roughjs: "^4.6.6",
    stylis: "^4.3.6",
    "ts-dedent": "^2.2.0",
    uuid: "^11.1.0"
  },
  devDependencies: {
    "@adobe/jsonschema2md": "^8.0.2",
    "@iconify/types": "^2.0.0",
    "@types/cytoscape": "^3.21.9",
    "@types/cytoscape-fcose": "^2.2.4",
    "@types/d3-sankey": "^0.12.4",
    "@types/d3-scale": "^4.0.9",
    "@types/d3-scale-chromatic": "^3.1.0",
    "@types/d3-selection": "^3.0.11",
    "@types/d3-shape": "^3.1.7",
    "@types/jsdom": "^21.1.7",
    "@types/katex": "^0.16.7",
    "@types/lodash-es": "^4.17.12",
    "@types/micromatch": "^4.0.9",
    "@types/stylis": "^4.2.7",
    "@types/uuid": "^10.0.0",
    ajv: "^8.17.1",
    chokidar: "^4.0.3",
    concurrently: "^9.1.2",
    "csstree-validator": "^4.0.1",
    globby: "^14.0.2",
    jison: "^0.4.18",
    "js-base64": "^3.7.7",
    jsdom: "^26.0.0",
    "json-schema-to-typescript": "^15.0.4",
    micromatch: "^4.0.8",
    "path-browserify": "^1.0.1",
    prettier: "^3.5.2",
    remark: "^15.0.1",
    "remark-frontmatter": "^5.0.0",
    "remark-gfm": "^4.0.1",
    rimraf: "^6.0.1",
    "start-server-and-test": "^2.0.10",
    "type-fest": "^4.35.0",
    typedoc: "^0.27.8",
    "typedoc-plugin-markdown": "^4.4.2",
    typescript: "~5.7.3",
    "unist-util-flatmap": "^1.0.0",
    "unist-util-visit": "^5.0.0",
    vitepress: "^1.0.2",
    "vitepress-plugin-search": "1.0.4-alpha.22"
  },
  files: [
    "dist/",
    "README.md"
  ],
  publishConfig: {
    access: "public"
  }
};




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6JRP7KZX.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6JRP7KZX.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   JSON_SCHEMA: () => (/* binding */ JSON_SCHEMA),
/* harmony export */   load: () => (/* binding */ load)
/* harmony export */ });
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");


// ../../node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/dist/js-yaml.mjs
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isNothing, "isNothing");
function isObject(subject) {
  return typeof subject === "object" && subject !== null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isObject, "isObject");
function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];
  return [sequence];
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(toArray, "toArray");
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(extend, "extend");
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(repeat, "repeat");
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isNegativeZero, "isNegativeZero");
var isNothing_1 = isNothing;
var isObject_1 = isObject;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};
function formatError(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark) return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(formatError, "formatError");
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(YAMLException$1, "YAMLException$1");
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function toString(compact) {
  return this.name + ": " + formatError(this, compact);
}, "toString");
var exception = YAMLException$1;
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
    // relative position
  };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(getLine, "getLine");
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(padStart, "padStart");
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer) return null;
  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent !== "number") options.indent = 1;
  if (typeof options.linesBefore !== "number") options.linesBefore = 3;
  if (typeof options.linesAfter !== "number") options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(makeSnippet, "makeSnippet");
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(compileStyleAliases, "compileStyleAliases");
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(Type$1, "Type$1");
var type = Type$1;
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(compileList, "compileList");
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(collectType, "collectType");
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(compileMap, "compileMap");
function Schema$1(definition) {
  return this.extend(definition);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(Schema$1, "Schema$1");
Schema$1.prototype.extend = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function extend2(definition) {
  var implicit = [];
  var explicit = [];
  if (definition instanceof type) {
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);
  } else {
    throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
  }
  implicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    if (type$1.loadKind && type$1.loadKind !== "scalar") {
      throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
    if (type$1.multi) {
      throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
    }
  });
  explicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, "implicit");
  result.compiledExplicit = compileList(result, "explicit");
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
}, "extend");
var schema = Schema$1;
var str = new type("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(data) {
    return data !== null ? data : "";
  }, "construct")
});
var seq = new type("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(data) {
    return data !== null ? data : [];
  }, "construct")
});
var map = new type("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(data) {
    return data !== null ? data : {};
  }, "construct")
});
var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});
function resolveYamlNull(data) {
  if (data === null) return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlNull, "resolveYamlNull");
function constructYamlNull() {
  return null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlNull, "constructYamlNull");
function isNull(object) {
  return object === null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isNull, "isNull");
var _null = new type("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function() {
      return "~";
    }, "canonical"),
    lowercase: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function() {
      return "null";
    }, "lowercase"),
    uppercase: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function() {
      return "NULL";
    }, "uppercase"),
    camelcase: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function() {
      return "Null";
    }, "camelcase"),
    empty: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function() {
      return "";
    }, "empty")
  },
  defaultStyle: "lowercase"
});
function resolveYamlBoolean(data) {
  if (data === null) return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlBoolean, "resolveYamlBoolean");
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlBoolean, "constructYamlBoolean");
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isBoolean, "isBoolean");
var bool = new type("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(object) {
      return object ? "true" : "false";
    }, "lowercase"),
    uppercase: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(object) {
      return object ? "TRUE" : "FALSE";
    }, "uppercase"),
    camelcase: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(object) {
      return object ? "True" : "False";
    }, "camelcase")
  },
  defaultStyle: "lowercase"
});
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isHexCode, "isHexCode");
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isOctCode, "isOctCode");
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isDecCode, "isDecCode");
function resolveYamlInteger(data) {
  if (data === null) return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max) return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max) return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (ch !== "0" && ch !== "1") return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_") continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_") return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_") continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_") return false;
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlInteger, "resolveYamlInteger");
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-") sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0") return 0;
  if (ch === "0") {
    if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x") return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o") return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlInteger, "constructYamlInteger");
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isInteger, "isInteger");
var int = new type("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    }, "binary"),
    octal: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(obj) {
      return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
    }, "octal"),
    decimal: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(obj) {
      return obj.toString(10);
    }, "decimal"),
    /* eslint-disable max-len */
    hexadecimal: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }, "hexadecimal")
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"
);
function resolveYamlFloat(data) {
  if (data === null) return false;
  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlFloat, "resolveYamlFloat");
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlFloat, "constructYamlFloat");
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(representYamlFloat, "representYamlFloat");
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isFloat, "isFloat");
var float = new type("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"
);
var YAML_TIMESTAMP_REGEXP = new RegExp(
  "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"
);
function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlTimestamp, "resolveYamlTimestamp");
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-") delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlTimestamp, "constructYamlTimestamp");
function representYamlTimestamp(object) {
  return object.toISOString();
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(representYamlTimestamp, "representYamlTimestamp");
var timestamp = new type("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlMerge, "resolveYamlMerge");
var merge = new type("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null) return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64) continue;
    if (code < 0) return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlBinary, "resolveYamlBinary");
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlBinary, "constructYamlBinary");
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(representYamlBinary, "representYamlBinary");
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isBinary, "isBinary");
var binary = new type("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null) return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]") return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }
    if (!pairHasKey) return false;
    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlOmap, "resolveYamlOmap");
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlOmap, "constructYamlOmap");
var omap = new type("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null) return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]") return false;
    keys = Object.keys(pair);
    if (keys.length !== 1) return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlPairs, "resolveYamlPairs");
function constructYamlPairs(data) {
  if (data === null) return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlPairs, "constructYamlPairs");
var pairs = new type("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null) return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(resolveYamlSet, "resolveYamlSet");
function constructYamlSet(data) {
  return data !== null ? data : {};
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(constructYamlSet, "constructYamlSet");
var set = new type("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(_class, "_class");
function is_EOL(c) {
  return c === 10 || c === 13;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(is_EOL, "is_EOL");
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(is_WHITE_SPACE, "is_WHITE_SPACE");
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(is_WS_OR_EOL, "is_WS_OR_EOL");
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(is_FLOW_INDICATOR, "is_FLOW_INDICATOR");
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(fromHexCode, "fromHexCode");
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(escapedHexLen, "escapedHexLen");
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(fromDecimalCode, "fromDecimalCode");
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(simpleEscapeSequence, "simpleEscapeSequence");
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode(
    (c - 65536 >> 10) + 55296,
    (c - 65536 & 1023) + 56320
  );
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(charFromCodepoint, "charFromCodepoint");
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
var i;
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(State$1, "State$1");
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    // omit trailing \0
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(generateError, "generateError");
function throwError(state, message) {
  throw generateError(state, message);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(throwError, "throwError");
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(throwWarning, "throwWarning");
var directiveHandlers = {
  YAML: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  }, "handleYamlDirective"),
  TAG: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, "tag prefix is malformed: " + prefix);
    }
    state.tagMap[handle] = prefix;
  }, "handleTagDirective")
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(captureSegment, "captureSegment");
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(mergeMappings, "mergeMappings");
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(storeMappingPair, "storeMappingPair");
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readLineBreak, "readLineBreak");
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(skipSeparationSpace, "skipSeparationSpace");
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(testDocumentSeparator, "testDocumentSeparator");
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeFoldedLines, "writeFoldedLines");
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readPlainScalar, "readPlainScalar");
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readSingleQuotedScalar, "readSingleQuotedScalar");
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readDoubleQuotedScalar, "readDoubleQuotedScalar");
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readFlowCollection, "readFlowCollection");
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readBlockScalar, "readBlockScalar");
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readBlockSequence, "readBlockSequence");
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1) return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readBlockMapping, "readBlockMapping");
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33) return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readTagProperty, "readTagProperty");
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38) return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readAnchorProperty, "readAnchorProperty");
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42) return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readAlias, "readAlias");
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(composeNode, "composeNode");
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch)) break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0) readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(readDocument, "readDocument");
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(loadDocuments, "loadDocuments");
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(loadAll$1, "loadAll$1");
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(load$1, "load$1");
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null) return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(compileStyleMap, "compileStyleMap");
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(encodeHex, "encodeHex");
var QUOTING_TYPE_SINGLE = 1;
var QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(State, "State");
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf("\n", position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n") result += ind;
    result += line;
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(indentString, "indentString");
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(generateNextLine, "generateNextLine");
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(testImplicitResolving, "testImplicitResolving");
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isWhitespace, "isWhitespace");
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isPrintable, "isPrintable");
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isNsCharOrWhitespace, "isNsCharOrWhitespace");
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    (inblock ? (
      // c = flow-in
      cIsNsCharOrWhitespace
    ) : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar
  );
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isPlainSafe, "isPlainSafe");
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isPlainSafeFirst, "isPlainSafeFirst");
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isPlainSafeLast, "isPlainSafeLast");
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(codePointAt, "codePointAt");
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(needIndentIndicator, "needIndentIndicator");
var STYLE_PLAIN = 1;
var STYLE_SINGLE = 2;
var STYLE_LITERAL = 3;
var STYLE_FOLDED = 4;
var STYLE_DOUBLE = 5;
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.
          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(chooseScalarStyle, "chooseScalarStyle");
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(testAmbiguity, "testAmbiguity");
    switch (chooseScalarStyle(
      string,
      singleLineOnly,
      state.indent,
      lineWidth,
      testAmbiguity,
      state.quotingType,
      state.forceQuotes && !iskey,
      inblock
    )) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeScalar, "writeScalar");
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === "\n";
  var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(blockHeader, "blockHeader");
function dropEndingNewline(string) {
  return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(dropEndingNewline, "dropEndingNewline");
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === "\n" || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(foldString, "foldString");
function foldLine(line, width) {
  if (line === "" || line[0] === " ") return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(foldLine, "foldLine");
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(escapeString, "escapeString");
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "") _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeFlowSequence, "writeFlowSequence");
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeBlockSequence, "writeBlockSequence");
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "") pairBuffer += ", ";
    if (state.condenseFlow) pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024) pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeFlowMapping, "writeFlowMapping");
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeBlockMapping, "writeBlockMapping");
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(detectType, "detectType");
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block;
  var tagStr;
  if (block) {
    block = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(
        state.tag[0] === "!" ? state.tag.slice(1) : state.tag
      ).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(writeNode, "writeNode");
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(getDuplicateReferences, "getDuplicateReferences");
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(inspectNode, "inspectNode");
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs) getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true)) return state.dump + "\n";
  return "";
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(dump$1, "dump$1");
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from, to) {
  return function() {
    throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(renamed, "renamed");
var JSON_SCHEMA = json;
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var safeLoad = renamed("safeLoad", "load");
var safeLoadAll = renamed("safeLoadAll", "loadAll");
var safeDump = renamed("safeDump", "dump");


/*! Bundled license information:

js-yaml/dist/js-yaml.mjs:
  (*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT *)
*/


/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-7B677QYD.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-7B677QYD.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   selectSvgElement: () => (/* binding */ selectSvgElement)
/* harmony export */ });
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");


// src/rendering-util/selectSvgElement.ts

var selectSvgElement = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((id) => {
  const { securityLevel } = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.getConfig2)();
  let root = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)("body");
  if (securityLevel === "sandbox") {
    const sandboxElement = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(`#i${id}`);
    const doc = sandboxElement.node()?.contentDocument ?? document;
    root = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(doc.body);
  }
  const svg = root.select(`#${id}`);
  return svg;
}, "selectSvgElement");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-C3MQ5ANM.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-C3MQ5ANM.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   computeDimensionOfText: () => (/* binding */ computeDimensionOfText),
/* harmony export */   createText: () => (/* binding */ createText),
/* harmony export */   replaceIconSubstring: () => (/* binding */ replaceIconSubstring)
/* harmony export */ });
/* harmony import */ var _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-O4NI6UNU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs");
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! marked */ "webpack/sharing/consume/default/marked/marked");
/* harmony import */ var marked__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(marked__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ts-dedent */ "./node_modules/ts-dedent/esm/index.js");



// src/rendering-util/createText.ts


// src/rendering-util/handle-markdown-text.ts


function preprocessMarkdown(markdown, { markdownAutoWrap }) {
  const withoutBR = markdown.replace(/<br\/>/g, "\n");
  const withoutMultipleNewlines = withoutBR.replace(/\n{2,}/g, "\n");
  const withoutExtraSpaces = (0,ts_dedent__WEBPACK_IMPORTED_MODULE_4__.dedent)(withoutMultipleNewlines);
  if (markdownAutoWrap === false) {
    return withoutExtraSpaces.replace(/ /g, "&nbsp;");
  }
  return withoutExtraSpaces;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(preprocessMarkdown, "preprocessMarkdown");
function markdownToLines(markdown, config = {}) {
  const preprocessedMarkdown = preprocessMarkdown(markdown, config);
  const nodes = marked__WEBPACK_IMPORTED_MODULE_3__.marked.lexer(preprocessedMarkdown);
  const lines = [[]];
  let currentLine = 0;
  function processNode(node, parentType = "normal") {
    if (node.type === "text") {
      const textLines = node.text.split("\n");
      textLines.forEach((textLine, index) => {
        if (index !== 0) {
          currentLine++;
          lines.push([]);
        }
        textLine.split(" ").forEach((word) => {
          word = word.replace(/&#39;/g, `'`);
          if (word) {
            lines[currentLine].push({ content: word, type: parentType });
          }
        });
      });
    } else if (node.type === "strong" || node.type === "em") {
      node.tokens.forEach((contentNode) => {
        processNode(contentNode, node.type);
      });
    } else if (node.type === "html") {
      lines[currentLine].push({ content: node.text, type: "normal" });
    }
  }
  (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(processNode, "processNode");
  nodes.forEach((treeNode) => {
    if (treeNode.type === "paragraph") {
      treeNode.tokens?.forEach((contentNode) => {
        processNode(contentNode);
      });
    } else if (treeNode.type === "html") {
      lines[currentLine].push({ content: treeNode.text, type: "normal" });
    }
  });
  return lines;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(markdownToLines, "markdownToLines");
function markdownToHTML(markdown, { markdownAutoWrap } = {}) {
  const nodes = marked__WEBPACK_IMPORTED_MODULE_3__.marked.lexer(markdown);
  function output(node) {
    if (node.type === "text") {
      if (markdownAutoWrap === false) {
        return node.text.replace(/\n */g, "<br/>").replace(/ /g, "&nbsp;");
      }
      return node.text.replace(/\n */g, "<br/>");
    } else if (node.type === "strong") {
      return `<strong>${node.tokens?.map(output).join("")}</strong>`;
    } else if (node.type === "em") {
      return `<em>${node.tokens?.map(output).join("")}</em>`;
    } else if (node.type === "paragraph") {
      return `<p>${node.tokens?.map(output).join("")}</p>`;
    } else if (node.type === "space") {
      return "";
    } else if (node.type === "html") {
      return `${node.text}`;
    } else if (node.type === "escape") {
      return node.text;
    }
    return `Unsupported markdown: ${node.type}`;
  }
  (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(output, "output");
  return nodes.map(output).join("");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(markdownToHTML, "markdownToHTML");

// src/rendering-util/splitText.ts
function splitTextToChars(text) {
  if (Intl.Segmenter) {
    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);
  }
  return [...text];
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(splitTextToChars, "splitTextToChars");
function splitWordToFitWidth(checkFit, word) {
  const characters = splitTextToChars(word.content);
  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(splitWordToFitWidth, "splitWordToFitWidth");
function splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {
  if (remainingChars.length === 0) {
    return [
      { content: usedChars.join(""), type },
      { content: "", type }
    ];
  }
  const [nextChar, ...rest] = remainingChars;
  const newWord = [...usedChars, nextChar];
  if (checkFit([{ content: newWord.join(""), type }])) {
    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);
  }
  if (usedChars.length === 0 && nextChar) {
    usedChars.push(nextChar);
    remainingChars.shift();
  }
  return [
    { content: usedChars.join(""), type },
    { content: remainingChars.join(""), type }
  ];
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(splitWordToFitWidthRecursion, "splitWordToFitWidthRecursion");
function splitLineToFitWidth(line, checkFit) {
  if (line.some(({ content }) => content.includes("\n"))) {
    throw new Error("splitLineToFitWidth does not support newlines in the line");
  }
  return splitLineToFitWidthRecursion(line, checkFit);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(splitLineToFitWidth, "splitLineToFitWidth");
function splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {
  if (words.length === 0) {
    if (newLine.length > 0) {
      lines.push(newLine);
    }
    return lines.length > 0 ? lines : [];
  }
  let joiner = "";
  if (words[0].content === " ") {
    joiner = " ";
    words.shift();
  }
  const nextWord = words.shift() ?? { content: " ", type: "normal" };
  const lineWithNextWord = [...newLine];
  if (joiner !== "") {
    lineWithNextWord.push({ content: joiner, type: "normal" });
  }
  lineWithNextWord.push(nextWord);
  if (checkFit(lineWithNextWord)) {
    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);
  }
  if (newLine.length > 0) {
    lines.push(newLine);
    words.unshift(nextWord);
  } else if (nextWord.content) {
    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);
    lines.push([line]);
    if (rest.content) {
      words.unshift(rest);
    }
  }
  return splitLineToFitWidthRecursion(words, checkFit, lines);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(splitLineToFitWidthRecursion, "splitLineToFitWidthRecursion");

// src/rendering-util/createText.ts
function applyStyle(dom, styleFn) {
  if (styleFn) {
    dom.attr("style", styleFn);
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(applyStyle, "applyStyle");
async function addHtmlSpan(element, node, width, classes, addBackground = false) {
  const fo = element.append("foreignObject");
  fo.attr("width", `${10 * width}px`);
  fo.attr("height", `${10 * width}px`);
  const div = fo.append("xhtml:div");
  let label = node.label;
  if (node.label && (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.hasKatex)(node.label)) {
    label = await (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.renderKatex)(node.label.replace(_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.common_default.lineBreakRegex, "\n"), (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.getConfig2)());
  }
  const labelClass = node.isNode ? "nodeLabel" : "edgeLabel";
  const span = div.append("span");
  span.html(label);
  applyStyle(span, node.labelStyle);
  span.attr("class", `${labelClass} ${classes}`);
  applyStyle(div, node.labelStyle);
  div.style("display", "table-cell");
  div.style("white-space", "nowrap");
  div.style("line-height", "1.5");
  div.style("max-width", width + "px");
  div.style("text-align", "center");
  div.attr("xmlns", "http://www.w3.org/1999/xhtml");
  if (addBackground) {
    div.attr("class", "labelBkg");
  }
  let bbox = div.node().getBoundingClientRect();
  if (bbox.width === width) {
    div.style("display", "table");
    div.style("white-space", "break-spaces");
    div.style("width", width + "px");
    bbox = div.node().getBoundingClientRect();
  }
  return fo.node();
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(addHtmlSpan, "addHtmlSpan");
function createTspan(textElement, lineIndex, lineHeight) {
  return textElement.append("tspan").attr("class", "text-outer-tspan").attr("x", 0).attr("y", lineIndex * lineHeight - 0.1 + "em").attr("dy", lineHeight + "em");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(createTspan, "createTspan");
function computeWidthOfText(parentNode, lineHeight, line) {
  const testElement = parentNode.append("text");
  const testSpan = createTspan(testElement, 1, lineHeight);
  updateTextContentAndStyles(testSpan, line);
  const textLength = testSpan.node().getComputedTextLength();
  testElement.remove();
  return textLength;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(computeWidthOfText, "computeWidthOfText");
function computeDimensionOfText(parentNode, lineHeight, text) {
  const testElement = parentNode.append("text");
  const testSpan = createTspan(testElement, 1, lineHeight);
  updateTextContentAndStyles(testSpan, [{ content: text, type: "normal" }]);
  const textDimension = testSpan.node()?.getBoundingClientRect();
  if (textDimension) {
    testElement.remove();
  }
  return textDimension;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(computeDimensionOfText, "computeDimensionOfText");
function createFormattedText(width, g, structuredText, addBackground = false) {
  const lineHeight = 1.1;
  const labelGroup = g.append("g");
  const bkg = labelGroup.insert("rect").attr("class", "background").attr("style", "stroke: none");
  const textElement = labelGroup.append("text").attr("y", "-10.1");
  let lineIndex = 0;
  for (const line of structuredText) {
    const checkWidth = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)((line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width, "checkWidth");
    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);
    for (const preparedLine of linesUnderWidth) {
      const tspan = createTspan(textElement, lineIndex, lineHeight);
      updateTextContentAndStyles(tspan, preparedLine);
      lineIndex++;
    }
  }
  if (addBackground) {
    const bbox = textElement.node().getBBox();
    const padding = 2;
    bkg.attr("x", bbox.x - padding).attr("y", bbox.y - padding).attr("width", bbox.width + 2 * padding).attr("height", bbox.height + 2 * padding);
    return labelGroup.node();
  } else {
    return textElement.node();
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(createFormattedText, "createFormattedText");
function updateTextContentAndStyles(tspan, wrappedLine) {
  tspan.text("");
  wrappedLine.forEach((word, index) => {
    const innerTspan = tspan.append("tspan").attr("font-style", word.type === "em" ? "italic" : "normal").attr("class", "text-inner-tspan").attr("font-weight", word.type === "strong" ? "bold" : "normal");
    if (index === 0) {
      innerTspan.text(word.content);
    } else {
      innerTspan.text(" " + word.content);
    }
  });
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(updateTextContentAndStyles, "updateTextContentAndStyles");
function replaceIconSubstring(text) {
  return text.replace(
    /fa[bklrs]?:fa-[\w-]+/g,
    // cspell: disable-line
    (s) => `<i class='${s.replace(":", " ")}'></i>`
  );
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(replaceIconSubstring, "replaceIconSubstring");
var createText = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.__name)(async (el, text = "", {
  style = "",
  isTitle = false,
  classes = "",
  useHtmlLabels = true,
  isNode = true,
  width = 200,
  addSvgBackground = false
} = {}, config) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.log.debug(
    "XYZ createText",
    text,
    style,
    isTitle,
    classes,
    useHtmlLabels,
    isNode,
    "addSvgBackground: ",
    addSvgBackground
  );
  if (useHtmlLabels) {
    const htmlText = markdownToHTML(text, config);
    const decodedReplacedText = replaceIconSubstring((0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_0__.decodeEntities)(htmlText));
    const inputForKatex = text.replace(/\\\\/g, "\\");
    const node = {
      isNode,
      label: (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_1__.hasKatex)(text) ? inputForKatex : decodedReplacedText,
      labelStyle: style.replace("fill:", "color:")
    };
    const vertexNode = await addHtmlSpan(el, node, width, classes, addSvgBackground);
    return vertexNode;
  } else {
    const sanitizeBR = text.replace(/<br\s*\/?>/g, "<br/>");
    const structuredText = markdownToLines(sanitizeBR.replace("<br>", "<br/>"), config);
    const svgLabel = createFormattedText(
      width,
      el,
      structuredText,
      text ? addSvgBackground : false
    );
    if (isNode) {
      if (/stroke:/.exec(style)) {
        style = style.replace("stroke:", "lineColor:");
      }
      const nodeLabelTextStyle = style.replace(/stroke:[^;]+;?/g, "").replace(/stroke-width:[^;]+;?/g, "").replace(/fill:[^;]+;?/g, "").replace(/color:/g, "fill:");
      (0,d3__WEBPACK_IMPORTED_MODULE_2__.select)(svgLabel).attr("style", nodeLabelTextStyle);
    } else {
      const edgeLabelRectStyle = style.replace(/stroke:[^;]+;?/g, "").replace(/stroke-width:[^;]+;?/g, "").replace(/fill:[^;]+;?/g, "").replace(/background:/g, "fill:");
      (0,d3__WEBPACK_IMPORTED_MODULE_2__.select)(svgLabel).select("rect").attr("style", edgeLabelRectStyle.replace(/background:/g, "fill:"));
      const edgeLabelTextStyle = style.replace(/stroke:[^;]+;?/g, "").replace(/stroke-width:[^;]+;?/g, "").replace(/fill:[^;]+;?/g, "").replace(/color:/g, "fill:");
      (0,d3__WEBPACK_IMPORTED_MODULE_2__.select)(svgLabel).select("text").attr("style", edgeLabelTextStyle);
    }
    return svgLabel;
  }
}, "createText");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-H2D2JQ3I.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-H2D2JQ3I.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getIconSVG: () => (/* binding */ getIconSVG),
/* harmony export */   registerIconPacks: () => (/* binding */ registerIconPacks),
/* harmony export */   unknownIcon: () => (/* binding */ unknownIcon)
/* harmony export */ });
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var _iconify_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @iconify/utils */ "./node_modules/@iconify/utils/lib/icon/name.mjs");
/* harmony import */ var _iconify_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @iconify/utils */ "./node_modules/@iconify/utils/lib/icon-set/get-icon.mjs");
/* harmony import */ var _iconify_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @iconify/utils */ "./node_modules/@iconify/utils/lib/svg/build.mjs");
/* harmony import */ var _iconify_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @iconify/utils */ "./node_modules/@iconify/utils/lib/svg/html.mjs");
/* harmony import */ var _iconify_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @iconify/utils */ "./node_modules/@iconify/utils/lib/svg/id.mjs");


// src/rendering-util/icons.ts

var unknownIcon = {
  body: '<g><rect width="80" height="80" style="fill: #087ebf; stroke-width: 0px;"/><text transform="translate(21.16 64.67)" style="fill: #fff; font-family: ArialMT, Arial; font-size: 67.75px;"><tspan x="0" y="0">?</tspan></text></g>',
  height: 80,
  width: 80
};
var iconsStore = /* @__PURE__ */ new Map();
var loaderStore = /* @__PURE__ */ new Map();
var registerIconPacks = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((iconLoaders) => {
  for (const iconLoader of iconLoaders) {
    if (!iconLoader.name) {
      throw new Error(
        'Invalid icon loader. Must have a "name" property with non-empty string value.'
      );
    }
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.debug("Registering icon pack:", iconLoader.name);
    if ("loader" in iconLoader) {
      loaderStore.set(iconLoader.name, iconLoader.loader);
    } else if ("icons" in iconLoader) {
      iconsStore.set(iconLoader.name, iconLoader.icons);
    } else {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.error("Invalid icon loader:", iconLoader);
      throw new Error('Invalid icon loader. Must have either "icons" or "loader" property.');
    }
  }
}, "registerIconPacks");
var getRegisteredIconData = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(async (iconName, fallbackPrefix) => {
  const data = (0,_iconify_utils__WEBPACK_IMPORTED_MODULE_1__.stringToIcon)(iconName, true, fallbackPrefix !== void 0);
  if (!data) {
    throw new Error(`Invalid icon name: ${iconName}`);
  }
  const prefix = data.prefix || fallbackPrefix;
  if (!prefix) {
    throw new Error(`Icon name must contain a prefix: ${iconName}`);
  }
  let icons = iconsStore.get(prefix);
  if (!icons) {
    const loader = loaderStore.get(prefix);
    if (!loader) {
      throw new Error(`Icon set not found: ${data.prefix}`);
    }
    try {
      const loaded = await loader();
      icons = { ...loaded, prefix };
      iconsStore.set(prefix, icons);
    } catch (e) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.error(e);
      throw new Error(`Failed to load icon set: ${data.prefix}`);
    }
  }
  const iconData = (0,_iconify_utils__WEBPACK_IMPORTED_MODULE_2__.getIconData)(icons, data.name);
  if (!iconData) {
    throw new Error(`Icon not found: ${iconName}`);
  }
  return iconData;
}, "getRegisteredIconData");
var getIconSVG = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(async (iconName, customisations) => {
  let iconData;
  try {
    iconData = await getRegisteredIconData(iconName, customisations?.fallbackPrefix);
  } catch (e) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.error(e);
    iconData = unknownIcon;
  }
  const renderData = (0,_iconify_utils__WEBPACK_IMPORTED_MODULE_3__.iconToSVG)(iconData, customisations);
  const svg = (0,_iconify_utils__WEBPACK_IMPORTED_MODULE_4__.iconToHTML)((0,_iconify_utils__WEBPACK_IMPORTED_MODULE_5__.replaceIDs)(renderData.body), renderData.attributes);
  return svg;
}, "getIconSVG");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HRU6DDCH.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HRU6DDCH.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   clear2: () => (/* binding */ clear2),
/* harmony export */   createLabel_default: () => (/* binding */ createLabel_default),
/* harmony export */   insertCluster: () => (/* binding */ insertCluster),
/* harmony export */   insertNode: () => (/* binding */ insertNode),
/* harmony export */   isLabelStyle: () => (/* binding */ isLabelStyle),
/* harmony export */   isValidShape: () => (/* binding */ isValidShape),
/* harmony export */   labelHelper: () => (/* binding */ labelHelper),
/* harmony export */   positionNode: () => (/* binding */ positionNode),
/* harmony export */   setNodeElem: () => (/* binding */ setNodeElem),
/* harmony export */   updateNodeBounds: () => (/* binding */ updateNodeBounds)
/* harmony export */ });
/* harmony import */ var _chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-K557N5IZ.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-K557N5IZ.mjs");
/* harmony import */ var _chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-H2D2JQ3I.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-H2D2JQ3I.mjs");
/* harmony import */ var _chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-C3MQ5ANM.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-C3MQ5ANM.mjs");
/* harmony import */ var _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-O4NI6UNU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs");
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var roughjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! roughjs */ "./node_modules/roughjs/bundled/rough.esm.js");






// src/rendering-util/rendering-elements/shapes/util.ts

var labelHelper = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (parent, node, _classes) => {
  let cssClasses;
  const useHtmlLabels = node.useHtmlLabels || (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()?.htmlLabels);
  if (!_classes) {
    cssClasses = "node default";
  } else {
    cssClasses = _classes;
  }
  const shapeSvg = parent.insert("g").attr("class", cssClasses).attr("id", node.domId || node.id);
  const labelEl = shapeSvg.insert("g").attr("class", "label").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(node.labelStyle));
  let label;
  if (node.label === void 0) {
    label = "";
  } else {
    label = typeof node.label === "string" ? node.label : node.label[0];
  }
  const text2 = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(labelEl, (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeText)((0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.decodeEntities)(label), (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()), {
    useHtmlLabels,
    width: node.width || (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)().flowchart?.wrappingWidth,
    // @ts-expect-error -- This is currently not used. Should this be `classes` instead?
    cssClasses: "markdown-node-label",
    style: node.labelStyle,
    addSvgBackground: !!node.icon || !!node.img
  });
  let bbox = text2.getBBox();
  const halfPadding = (node?.padding ?? 0) / 2;
  if (useHtmlLabels) {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    const images = div.getElementsByTagName("img");
    if (images) {
      const noImgText = label.replace(/<img[^>]*>/g, "").trim() === "";
      await Promise.all(
        [...images].map(
          (img) => new Promise((res) => {
            function setupImage() {
              img.style.display = "flex";
              img.style.flexDirection = "column";
              if (noImgText) {
                const bodyFontSize = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)().fontSize ? (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)().fontSize : window.getComputedStyle(document.body).fontSize;
                const enlargingFactor = 5;
                const [parsedBodyFontSize = _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.defaultConfig_default.fontSize] = (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.parseFontSize)(bodyFontSize);
                const width = parsedBodyFontSize * enlargingFactor + "px";
                img.style.minWidth = width;
                img.style.maxWidth = width;
              } else {
                img.style.width = "100%";
              }
              res(img);
            }
            (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(setupImage, "setupImage");
            setTimeout(() => {
              if (img.complete) {
                setupImage();
              }
            });
            img.addEventListener("error", setupImage);
            img.addEventListener("load", setupImage);
          })
        )
      );
    }
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  if (useHtmlLabels) {
    labelEl.attr("transform", "translate(" + -bbox.width / 2 + ", " + -bbox.height / 2 + ")");
  } else {
    labelEl.attr("transform", "translate(0, " + -bbox.height / 2 + ")");
  }
  if (node.centerLabel) {
    labelEl.attr("transform", "translate(" + -bbox.width / 2 + ", " + -bbox.height / 2 + ")");
  }
  labelEl.insert("rect", ":first-child");
  return { shapeSvg, bbox, halfPadding, label: labelEl };
}, "labelHelper");
var insertLabel = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (parent, label, options) => {
  const useHtmlLabels = options.useHtmlLabels || (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()?.flowchart?.htmlLabels);
  const labelEl = parent.insert("g").attr("class", "label").attr("style", options.labelStyle || "");
  const text2 = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(labelEl, (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeText)((0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.decodeEntities)(label), (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()), {
    useHtmlLabels,
    width: options.width || (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()?.flowchart?.wrappingWidth,
    style: options.labelStyle,
    addSvgBackground: !!options.icon || !!options.img
  });
  let bbox = text2.getBBox();
  const halfPadding = options.padding / 2;
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()?.flowchart?.htmlLabels)) {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  if (useHtmlLabels) {
    labelEl.attr("transform", "translate(" + -bbox.width / 2 + ", " + -bbox.height / 2 + ")");
  } else {
    labelEl.attr("transform", "translate(0, " + -bbox.height / 2 + ")");
  }
  if (options.centerLabel) {
    labelEl.attr("transform", "translate(" + -bbox.width / 2 + ", " + -bbox.height / 2 + ")");
  }
  labelEl.insert("rect", ":first-child");
  return { shapeSvg: parent, bbox, halfPadding, label: labelEl };
}, "insertLabel");
var updateNodeBounds = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node, element) => {
  const bbox = element.node().getBBox();
  node.width = bbox.width;
  node.height = bbox.height;
}, "updateNodeBounds");
var getNodeClasses = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node, extra) => (node.look === "handDrawn" ? "rough-node" : "node") + " " + node.cssClasses + " " + (extra || ""), "getNodeClasses");
function createPathFromPoints(points) {
  const pointStrings = points.map((p, i) => `${i === 0 ? "M" : "L"}${p.x},${p.y}`);
  pointStrings.push("Z");
  return pointStrings.join(" ");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(createPathFromPoints, "createPathFromPoints");
function generateFullSineWavePoints(x1, y1, x2, y2, amplitude, numCycles) {
  const points = [];
  const steps = 50;
  const deltaX = x2 - x1;
  const deltaY = y2 - y1;
  const cycleLength = deltaX / numCycles;
  const frequency = 2 * Math.PI / cycleLength;
  const midY = y1 + deltaY / 2;
  for (let i = 0; i <= steps; i++) {
    const t = i / steps;
    const x = x1 + t * deltaX;
    const y = midY + amplitude * Math.sin(frequency * (x - x1));
    points.push({ x, y });
  }
  return points;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(generateFullSineWavePoints, "generateFullSineWavePoints");
function generateCirclePoints(centerX, centerY, radius, numPoints, startAngle, endAngle) {
  const points = [];
  const startAngleRad = startAngle * Math.PI / 180;
  const endAngleRad = endAngle * Math.PI / 180;
  const angleRange = endAngleRad - startAngleRad;
  const angleStep = angleRange / (numPoints - 1);
  for (let i = 0; i < numPoints; i++) {
    const angle = startAngleRad + i * angleStep;
    const x = centerX + radius * Math.cos(angle);
    const y = centerY + radius * Math.sin(angle);
    points.push({ x: -x, y: -y });
  }
  return points;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(generateCirclePoints, "generateCirclePoints");

// src/rendering-util/rendering-elements/clusters.js



// src/rendering-util/rendering-elements/intersect/intersect-rect.js
var intersectRect = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node, point) => {
  var x = node.x;
  var y = node.y;
  var dx = point.x - x;
  var dy = point.y - y;
  var w = node.width / 2;
  var h = node.height / 2;
  var sx, sy;
  if (Math.abs(dy) * w > Math.abs(dx) * h) {
    if (dy < 0) {
      h = -h;
    }
    sx = dy === 0 ? 0 : h * dx / dy;
    sy = h;
  } else {
    if (dx < 0) {
      w = -w;
    }
    sx = w;
    sy = dx === 0 ? 0 : w * dy / dx;
  }
  return { x: x + sx, y: y + sy };
}, "intersectRect");
var intersect_rect_default = intersectRect;

// src/rendering-util/rendering-elements/createLabel.js

function applyStyle(dom, styleFn) {
  if (styleFn) {
    dom.attr("style", styleFn);
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(applyStyle, "applyStyle");
async function addHtmlLabel(node) {
  const fo = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(document.createElementNS("http://www.w3.org/2000/svg", "foreignObject"));
  const div = fo.append("xhtml:div");
  let label = node.label;
  if (node.label && (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.hasKatex)(node.label)) {
    label = await (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.renderKatex)(node.label.replace(_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.common_default.lineBreakRegex, "\n"), (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)());
  }
  const labelClass = node.isNode ? "nodeLabel" : "edgeLabel";
  div.html(
    '<span class="' + labelClass + '" ' + (node.labelStyle ? 'style="' + node.labelStyle + '"' : "") + // codeql [js/html-constructed-from-input] : false positive
    ">" + label + "</span>"
  );
  applyStyle(div, node.labelStyle);
  div.style("display", "inline-block");
  div.style("padding-right", "1px");
  div.style("white-space", "nowrap");
  div.attr("xmlns", "http://www.w3.org/1999/xhtml");
  return fo.node();
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(addHtmlLabel, "addHtmlLabel");
var createLabel = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (_vertexText, style, isTitle, isNode) => {
  let vertexText = _vertexText || "";
  if (typeof vertexText === "object") {
    vertexText = vertexText[0];
  }
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)().flowchart.htmlLabels)) {
    vertexText = vertexText.replace(/\\n|\n/g, "<br />");
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("vertexText" + vertexText);
    const node = {
      isNode,
      label: (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.decodeEntities)(vertexText).replace(
        /fa[blrs]?:fa-[\w-]+/g,
        (s) => `<i class='${s.replace(":", " ")}'></i>`
      ),
      labelStyle: style ? style.replace("fill:", "color:") : style
    };
    let vertexNode = await addHtmlLabel(node);
    return vertexNode;
  } else {
    const svgLabel = document.createElementNS("http://www.w3.org/2000/svg", "text");
    svgLabel.setAttribute("style", style.replace("color:", "fill:"));
    let rows = [];
    if (typeof vertexText === "string") {
      rows = vertexText.split(/\\n|\n|<br\s*\/?>/gi);
    } else if (Array.isArray(vertexText)) {
      rows = vertexText;
    } else {
      rows = [];
    }
    for (const row of rows) {
      const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
      tspan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
      tspan.setAttribute("dy", "1em");
      tspan.setAttribute("x", "0");
      if (isTitle) {
        tspan.setAttribute("class", "title-row");
      } else {
        tspan.setAttribute("class", "row");
      }
      tspan.textContent = row.trim();
      svgLabel.appendChild(tspan);
    }
    return svgLabel;
  }
}, "createLabel");
var createLabel_default = createLabel;

// src/rendering-util/rendering-elements/shapes/roundedRectPath.ts
var createRoundedRectPathD = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, totalWidth, totalHeight, radius) => [
  "M",
  x + radius,
  y,
  // Move to the first point
  "H",
  x + totalWidth - radius,
  // Draw horizontal line to the beginning of the right corner
  "A",
  radius,
  radius,
  0,
  0,
  1,
  x + totalWidth,
  y + radius,
  // Draw arc to the right top corner
  "V",
  y + totalHeight - radius,
  // Draw vertical line down to the beginning of the right bottom corner
  "A",
  radius,
  radius,
  0,
  0,
  1,
  x + totalWidth - radius,
  y + totalHeight,
  // Draw arc to the right bottom corner
  "H",
  x + radius,
  // Draw horizontal line to the beginning of the left bottom corner
  "A",
  radius,
  radius,
  0,
  0,
  1,
  x,
  y + totalHeight - radius,
  // Draw arc to the left bottom corner
  "V",
  y + radius,
  // Draw vertical line up to the beginning of the left top corner
  "A",
  radius,
  radius,
  0,
  0,
  1,
  x + radius,
  y,
  // Draw arc to the left top corner
  "Z"
  // Close the path
].join(" "), "createRoundedRectPathD");

// src/rendering-util/rendering-elements/shapes/handDrawnShapeStyles.ts
var solidStateFill = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((color) => {
  const { handDrawnSeed } = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  return {
    fill: color,
    hachureAngle: 120,
    // angle of hachure,
    hachureGap: 4,
    fillWeight: 2,
    roughness: 0.7,
    stroke: color,
    seed: handDrawnSeed
  };
}, "solidStateFill");
var compileStyles = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node) => {
  const stylesMap = styles2Map([...node.cssCompiledStyles || [], ...node.cssStyles || []]);
  return { stylesMap, stylesArray: [...stylesMap] };
}, "compileStyles");
var styles2Map = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((styles) => {
  const styleMap = /* @__PURE__ */ new Map();
  styles.forEach((style) => {
    const [key, value] = style.split(":");
    styleMap.set(key.trim(), value?.trim());
  });
  return styleMap;
}, "styles2Map");
var isLabelStyle = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((key) => {
  return key === "color" || key === "font-size" || key === "font-family" || key === "font-weight" || key === "font-style" || key === "text-decoration" || key === "text-align" || key === "text-transform" || key === "line-height" || key === "letter-spacing" || key === "word-spacing" || key === "text-shadow" || key === "text-overflow" || key === "white-space" || key === "word-wrap" || key === "word-break" || key === "overflow-wrap" || key === "hyphens";
}, "isLabelStyle");
var styles2String = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node) => {
  const { stylesArray } = compileStyles(node);
  const labelStyles = [];
  const nodeStyles = [];
  const borderStyles = [];
  const backgroundStyles = [];
  stylesArray.forEach((style) => {
    const key = style[0];
    if (isLabelStyle(key)) {
      labelStyles.push(style.join(":") + " !important");
    } else {
      nodeStyles.push(style.join(":") + " !important");
      if (key.includes("stroke")) {
        borderStyles.push(style.join(":") + " !important");
      }
      if (key === "fill") {
        backgroundStyles.push(style.join(":") + " !important");
      }
    }
  });
  return {
    labelStyles: labelStyles.join(";"),
    nodeStyles: nodeStyles.join(";"),
    stylesArray,
    borderStyles,
    backgroundStyles
  };
}, "styles2String");
var userNodeOverrides = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node, options) => {
  const { themeVariables, handDrawnSeed } = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const { nodeBorder, mainBkg } = themeVariables;
  const { stylesMap } = compileStyles(node);
  const result = Object.assign(
    {
      roughness: 0.7,
      fill: stylesMap.get("fill") || mainBkg,
      fillStyle: "hachure",
      // solid fill
      fillWeight: 4,
      hachureGap: 5.2,
      stroke: stylesMap.get("stroke") || nodeBorder,
      seed: handDrawnSeed,
      strokeWidth: stylesMap.get("stroke-width")?.replace("px", "") || 1.3,
      fillLineDash: [0, 0]
    },
    options
  );
  return result;
}, "userNodeOverrides");

// src/rendering-util/rendering-elements/clusters.js
var rect = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (parent, node) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Creating subgraph rect for ", node.id, node);
  const siteConfig = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const { themeVariables, handDrawnSeed } = siteConfig;
  const { clusterBkg, clusterBorder } = themeVariables;
  const { labelStyles, nodeStyles, borderStyles, backgroundStyles } = styles2String(node);
  const shapeSvg = parent.insert("g").attr("class", "cluster " + node.cssClasses).attr("id", node.id).attr("data-look", node.look);
  const useHtmlLabels = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(siteConfig.flowchart.htmlLabels);
  const labelEl = shapeSvg.insert("g").attr("class", "cluster-label ");
  const text2 = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(labelEl, node.label, {
    style: node.labelStyle,
    useHtmlLabels,
    isNode: true
  });
  let bbox = text2.getBBox();
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(siteConfig.flowchart.htmlLabels)) {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;
  if (node.width <= bbox.width + node.padding) {
    node.diff = (width - node.width) / 2 - node.padding;
  } else {
    node.diff = -node.padding;
  }
  const height = node.height;
  const x = node.x - width / 2;
  const y = node.y - height / 2;
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.trace("Data ", node, JSON.stringify(node));
  let rect2;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {
      roughness: 0.7,
      fill: clusterBkg,
      // fill: 'red',
      stroke: clusterBorder,
      fillWeight: 3,
      seed: handDrawnSeed
    });
    const roughNode = rc.path(createRoundedRectPathD(x, y, width, height, 0), options);
    rect2 = shapeSvg.insert(() => {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.debug("Rough node insert CXC", roughNode);
      return roughNode;
    }, ":first-child");
    rect2.select("path:nth-child(2)").attr("style", borderStyles.join(";"));
    rect2.select("path").attr("style", backgroundStyles.join(";").replace("fill", "stroke"));
  } else {
    rect2 = shapeSvg.insert("rect", ":first-child");
    rect2.attr("style", nodeStyles).attr("rx", node.rx).attr("ry", node.ry).attr("x", x).attr("y", y).attr("width", width).attr("height", height);
  }
  const { subGraphTitleTopMargin } = (0,_chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_0__.getSubGraphTitleMargins)(siteConfig);
  labelEl.attr(
    "transform",
    // This puts the label on top of the box instead of inside it
    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`
  );
  if (labelStyles) {
    const span = labelEl.select("span");
    if (span) {
      span.attr("style", labelStyles);
    }
  }
  const rectBox = rect2.node().getBBox();
  node.offsetX = 0;
  node.width = rectBox.width;
  node.height = rectBox.height;
  node.offsetY = bbox.height - node.padding / 2;
  node.intersect = function(point) {
    return intersect_rect_default(node, point);
  };
  return { cluster: shapeSvg, labelBBox: bbox };
}, "rect");
var noteGroup = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((parent, node) => {
  const shapeSvg = parent.insert("g").attr("class", "note-cluster").attr("id", node.id);
  const rect2 = shapeSvg.insert("rect", ":first-child");
  const padding = 0 * node.padding;
  const halfPadding = padding / 2;
  rect2.attr("rx", node.rx).attr("ry", node.ry).attr("x", node.x - node.width / 2 - halfPadding).attr("y", node.y - node.height / 2 - halfPadding).attr("width", node.width + padding).attr("height", node.height + padding).attr("fill", "none");
  const rectBox = rect2.node().getBBox();
  node.width = rectBox.width;
  node.height = rectBox.height;
  node.intersect = function(point) {
    return intersect_rect_default(node, point);
  };
  return { cluster: shapeSvg, labelBBox: { width: 0, height: 0 } };
}, "noteGroup");
var roundedWithTitle = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (parent, node) => {
  const siteConfig = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const { themeVariables, handDrawnSeed } = siteConfig;
  const { altBackground, compositeBackground, compositeTitleBackground, nodeBorder } = themeVariables;
  const shapeSvg = parent.insert("g").attr("class", node.cssClasses).attr("id", node.id).attr("data-id", node.id).attr("data-look", node.look);
  const outerRectG = shapeSvg.insert("g", ":first-child");
  const label = shapeSvg.insert("g").attr("class", "cluster-label");
  let innerRect = shapeSvg.append("rect");
  const text2 = label.node().appendChild(await createLabel_default(node.label, node.labelStyle, void 0, true));
  let bbox = text2.getBBox();
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(siteConfig.flowchart.htmlLabels)) {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  const padding = 0 * node.padding;
  const halfPadding = padding / 2;
  const width = (node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width) + padding;
  if (node.width <= bbox.width + node.padding) {
    node.diff = (width - node.width) / 2 - node.padding;
  } else {
    node.diff = -node.padding;
  }
  const height = node.height + padding;
  const innerHeight = node.height + padding - bbox.height - 6;
  const x = node.x - width / 2;
  const y = node.y - height / 2;
  node.width = width;
  const innerY = node.y - node.height / 2 - halfPadding + bbox.height + 2;
  let rect2;
  if (node.look === "handDrawn") {
    const isAlt = node.cssClasses.includes("statediagram-cluster-alt");
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const roughOuterNode = node.rx || node.ry ? rc.path(createRoundedRectPathD(x, y, width, height, 10), {
      roughness: 0.7,
      fill: compositeTitleBackground,
      fillStyle: "solid",
      stroke: nodeBorder,
      seed: handDrawnSeed
    }) : rc.rectangle(x, y, width, height, { seed: handDrawnSeed });
    rect2 = shapeSvg.insert(() => roughOuterNode, ":first-child");
    const roughInnerNode = rc.rectangle(x, innerY, width, innerHeight, {
      fill: isAlt ? altBackground : compositeBackground,
      fillStyle: isAlt ? "hachure" : "solid",
      stroke: nodeBorder,
      seed: handDrawnSeed
    });
    rect2 = shapeSvg.insert(() => roughOuterNode, ":first-child");
    innerRect = shapeSvg.insert(() => roughInnerNode);
  } else {
    rect2 = outerRectG.insert("rect", ":first-child");
    const outerRectClass = "outer";
    rect2.attr("class", outerRectClass).attr("x", x).attr("y", y).attr("width", width).attr("height", height).attr("data-look", node.look);
    innerRect.attr("class", "inner").attr("x", x).attr("y", innerY).attr("width", width).attr("height", innerHeight);
  }
  label.attr(
    "transform",
    `translate(${node.x - bbox.width / 2}, ${y + 1 - ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(siteConfig.flowchart.htmlLabels) ? 0 : 3)})`
  );
  const rectBox = rect2.node().getBBox();
  node.height = rectBox.height;
  node.offsetX = 0;
  node.offsetY = bbox.height - node.padding / 2;
  node.labelBBox = bbox;
  node.intersect = function(point) {
    return intersect_rect_default(node, point);
  };
  return { cluster: shapeSvg, labelBBox: bbox };
}, "roundedWithTitle");
var kanbanSection = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (parent, node) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Creating subgraph rect for ", node.id, node);
  const siteConfig = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const { themeVariables, handDrawnSeed } = siteConfig;
  const { clusterBkg, clusterBorder } = themeVariables;
  const { labelStyles, nodeStyles, borderStyles, backgroundStyles } = styles2String(node);
  const shapeSvg = parent.insert("g").attr("class", "cluster " + node.cssClasses).attr("id", node.id).attr("data-look", node.look);
  const useHtmlLabels = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(siteConfig.flowchart.htmlLabels);
  const labelEl = shapeSvg.insert("g").attr("class", "cluster-label ");
  const text2 = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(labelEl, node.label, {
    style: node.labelStyle,
    useHtmlLabels,
    isNode: true,
    width: node.width
  });
  let bbox = text2.getBBox();
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(siteConfig.flowchart.htmlLabels)) {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;
  if (node.width <= bbox.width + node.padding) {
    node.diff = (width - node.width) / 2 - node.padding;
  } else {
    node.diff = -node.padding;
  }
  const height = node.height;
  const x = node.x - width / 2;
  const y = node.y - height / 2;
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.trace("Data ", node, JSON.stringify(node));
  let rect2;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {
      roughness: 0.7,
      fill: clusterBkg,
      // fill: 'red',
      stroke: clusterBorder,
      fillWeight: 4,
      seed: handDrawnSeed
    });
    const roughNode = rc.path(createRoundedRectPathD(x, y, width, height, node.rx), options);
    rect2 = shapeSvg.insert(() => {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.debug("Rough node insert CXC", roughNode);
      return roughNode;
    }, ":first-child");
    rect2.select("path:nth-child(2)").attr("style", borderStyles.join(";"));
    rect2.select("path").attr("style", backgroundStyles.join(";").replace("fill", "stroke"));
  } else {
    rect2 = shapeSvg.insert("rect", ":first-child");
    rect2.attr("style", nodeStyles).attr("rx", node.rx).attr("ry", node.ry).attr("x", x).attr("y", y).attr("width", width).attr("height", height);
  }
  const { subGraphTitleTopMargin } = (0,_chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_0__.getSubGraphTitleMargins)(siteConfig);
  labelEl.attr(
    "transform",
    // This puts the label on top of the box instead of inside it
    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`
  );
  if (labelStyles) {
    const span = labelEl.select("span");
    if (span) {
      span.attr("style", labelStyles);
    }
  }
  const rectBox = rect2.node().getBBox();
  node.offsetX = 0;
  node.width = rectBox.width;
  node.height = rectBox.height;
  node.offsetY = bbox.height - node.padding / 2;
  node.intersect = function(point) {
    return intersect_rect_default(node, point);
  };
  return { cluster: shapeSvg, labelBBox: bbox };
}, "kanbanSection");
var divider = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((parent, node) => {
  const siteConfig = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const { themeVariables, handDrawnSeed } = siteConfig;
  const { nodeBorder } = themeVariables;
  const shapeSvg = parent.insert("g").attr("class", node.cssClasses).attr("id", node.id).attr("data-look", node.look);
  const outerRectG = shapeSvg.insert("g", ":first-child");
  const padding = 0 * node.padding;
  const width = node.width + padding;
  node.diff = -node.padding;
  const height = node.height + padding;
  const x = node.x - width / 2;
  const y = node.y - height / 2;
  node.width = width;
  let rect2;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const roughOuterNode = rc.rectangle(x, y, width, height, {
      fill: "lightgrey",
      roughness: 0.5,
      strokeLineDash: [5],
      stroke: nodeBorder,
      seed: handDrawnSeed
    });
    rect2 = shapeSvg.insert(() => roughOuterNode, ":first-child");
  } else {
    rect2 = outerRectG.insert("rect", ":first-child");
    const outerRectClass = "divider";
    rect2.attr("class", outerRectClass).attr("x", x).attr("y", y).attr("width", width).attr("height", height).attr("data-look", node.look);
  }
  const rectBox = rect2.node().getBBox();
  node.height = rectBox.height;
  node.offsetX = 0;
  node.offsetY = 0;
  node.intersect = function(point) {
    return intersect_rect_default(node, point);
  };
  return { cluster: shapeSvg, labelBBox: {} };
}, "divider");
var squareRect = rect;
var shapes = {
  rect,
  squareRect,
  roundedWithTitle,
  noteGroup,
  divider,
  kanbanSection
};
var clusterElems = /* @__PURE__ */ new Map();
var insertCluster = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(async (elem, node) => {
  const shape = node.shape || "rect";
  const cluster = await shapes[shape](elem, node);
  clusterElems.set(node.id, cluster);
  return cluster;
}, "insertCluster");
var clear = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(() => {
  clusterElems = /* @__PURE__ */ new Map();
}, "clear");

// src/rendering-util/rendering-elements/intersect/intersect-node.js
function intersectNode(node, point) {
  return node.intersect(point);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(intersectNode, "intersectNode");
var intersect_node_default = intersectNode;

// src/rendering-util/rendering-elements/intersect/intersect-ellipse.js
function intersectEllipse(node, rx, ry, point) {
  var cx = node.x;
  var cy = node.y;
  var px = cx - point.x;
  var py = cy - point.y;
  var det = Math.sqrt(rx * rx * py * py + ry * ry * px * px);
  var dx = Math.abs(rx * ry * px / det);
  if (point.x < cx) {
    dx = -dx;
  }
  var dy = Math.abs(rx * ry * py / det);
  if (point.y < cy) {
    dy = -dy;
  }
  return { x: cx + dx, y: cy + dy };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(intersectEllipse, "intersectEllipse");
var intersect_ellipse_default = intersectEllipse;

// src/rendering-util/rendering-elements/intersect/intersect-circle.js
function intersectCircle(node, rx, point) {
  return intersect_ellipse_default(node, rx, rx, point);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(intersectCircle, "intersectCircle");
var intersect_circle_default = intersectCircle;

// src/rendering-util/rendering-elements/intersect/intersect-line.js
function intersectLine(p1, p2, q1, q2) {
  var a1, a2, b1, b2, c1, c2;
  var r1, r2, r3, r4;
  var denom, offset, num;
  var x, y;
  a1 = p2.y - p1.y;
  b1 = p1.x - p2.x;
  c1 = p2.x * p1.y - p1.x * p2.y;
  r3 = a1 * q1.x + b1 * q1.y + c1;
  r4 = a1 * q2.x + b1 * q2.y + c1;
  if (r3 !== 0 && r4 !== 0 && sameSign(r3, r4)) {
    return;
  }
  a2 = q2.y - q1.y;
  b2 = q1.x - q2.x;
  c2 = q2.x * q1.y - q1.x * q2.y;
  r1 = a2 * p1.x + b2 * p1.y + c2;
  r2 = a2 * p2.x + b2 * p2.y + c2;
  if (r1 !== 0 && r2 !== 0 && sameSign(r1, r2)) {
    return;
  }
  denom = a1 * b2 - a2 * b1;
  if (denom === 0) {
    return;
  }
  offset = Math.abs(denom / 2);
  num = b1 * c2 - b2 * c1;
  x = num < 0 ? (num - offset) / denom : (num + offset) / denom;
  num = a2 * c1 - a1 * c2;
  y = num < 0 ? (num - offset) / denom : (num + offset) / denom;
  return { x, y };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(intersectLine, "intersectLine");
function sameSign(r1, r2) {
  return r1 * r2 > 0;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(sameSign, "sameSign");
var intersect_line_default = intersectLine;

// src/rendering-util/rendering-elements/intersect/intersect-polygon.js
function intersectPolygon(node, polyPoints, point) {
  let x1 = node.x;
  let y1 = node.y;
  let intersections = [];
  let minX = Number.POSITIVE_INFINITY;
  let minY = Number.POSITIVE_INFINITY;
  if (typeof polyPoints.forEach === "function") {
    polyPoints.forEach(function(entry) {
      minX = Math.min(minX, entry.x);
      minY = Math.min(minY, entry.y);
    });
  } else {
    minX = Math.min(minX, polyPoints.x);
    minY = Math.min(minY, polyPoints.y);
  }
  let left = x1 - node.width / 2 - minX;
  let top = y1 - node.height / 2 - minY;
  for (let i = 0; i < polyPoints.length; i++) {
    let p1 = polyPoints[i];
    let p2 = polyPoints[i < polyPoints.length - 1 ? i + 1 : 0];
    let intersect = intersect_line_default(
      node,
      point,
      { x: left + p1.x, y: top + p1.y },
      { x: left + p2.x, y: top + p2.y }
    );
    if (intersect) {
      intersections.push(intersect);
    }
  }
  if (!intersections.length) {
    return node;
  }
  if (intersections.length > 1) {
    intersections.sort(function(p, q) {
      let pdx = p.x - point.x;
      let pdy = p.y - point.y;
      let distp = Math.sqrt(pdx * pdx + pdy * pdy);
      let qdx = q.x - point.x;
      let qdy = q.y - point.y;
      let distq = Math.sqrt(qdx * qdx + qdy * qdy);
      return distp < distq ? -1 : distp === distq ? 0 : 1;
    });
  }
  return intersections[0];
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(intersectPolygon, "intersectPolygon");
var intersect_polygon_default = intersectPolygon;

// src/rendering-util/rendering-elements/intersect/index.js
var intersect_default = {
  node: intersect_node_default,
  circle: intersect_circle_default,
  ellipse: intersect_ellipse_default,
  polygon: intersect_polygon_default,
  rect: intersect_rect_default
};

// src/rendering-util/rendering-elements/shapes/anchor.ts

function anchor(parent, node) {
  const { labelStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const classes = getNodeClasses(node);
  let cssClasses = classes;
  if (!classes) {
    cssClasses = "anchor";
  }
  const shapeSvg = parent.insert("g").attr("class", cssClasses).attr("id", node.domId || node.id);
  const radius = 1;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, { fill: "black", stroke: "none", fillStyle: "solid" });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
  }
  const roughNode = rc.circle(0, 0, radius * 2, options);
  const circleElem = shapeSvg.insert(() => roughNode, ":first-child");
  circleElem.attr("class", "anchor").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
  updateNodeBounds(node, circleElem);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Circle intersect", node, radius, point);
    return intersect_default.circle(node, radius, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(anchor, "anchor");

// src/rendering-util/rendering-elements/shapes/bowTieRect.ts

function generateArcPoints(x1, y1, x2, y2, rx, ry, clockwise) {
  const numPoints = 20;
  const midX = (x1 + x2) / 2;
  const midY = (y1 + y2) / 2;
  const angle = Math.atan2(y2 - y1, x2 - x1);
  const dx = (x2 - x1) / 2;
  const dy = (y2 - y1) / 2;
  const transformedX = dx / rx;
  const transformedY = dy / ry;
  const distance = Math.sqrt(transformedX ** 2 + transformedY ** 2);
  if (distance > 1) {
    throw new Error("The given radii are too small to create an arc between the points.");
  }
  const scaledCenterDistance = Math.sqrt(1 - distance ** 2);
  const centerX = midX + scaledCenterDistance * ry * Math.sin(angle) * (clockwise ? -1 : 1);
  const centerY = midY - scaledCenterDistance * rx * Math.cos(angle) * (clockwise ? -1 : 1);
  const startAngle = Math.atan2((y1 - centerY) / ry, (x1 - centerX) / rx);
  const endAngle = Math.atan2((y2 - centerY) / ry, (x2 - centerX) / rx);
  let angleRange = endAngle - startAngle;
  if (clockwise && angleRange < 0) {
    angleRange += 2 * Math.PI;
  }
  if (!clockwise && angleRange > 0) {
    angleRange -= 2 * Math.PI;
  }
  const points = [];
  for (let i = 0; i < numPoints; i++) {
    const t = i / (numPoints - 1);
    const angle2 = startAngle + t * angleRange;
    const x = centerX + rx * Math.cos(angle2);
    const y = centerY + ry * Math.sin(angle2);
    points.push({ x, y });
  }
  return points;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(generateArcPoints, "generateArcPoints");
async function bowTieRect(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + node.padding + 20;
  const h = bbox.height + node.padding;
  const ry = h / 2;
  const rx = ry / (2.5 + h / 50);
  const { cssStyles } = node;
  const points = [
    { x: w / 2, y: -h / 2 },
    { x: -w / 2, y: -h / 2 },
    ...generateArcPoints(-w / 2, -h / 2, -w / 2, h / 2, rx, ry, false),
    { x: w / 2, y: h / 2 },
    ...generateArcPoints(w / 2, h / 2, w / 2, -h / 2, rx, ry, true)
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const bowTieRectPath = createPathFromPoints(points);
  const bowTieRectShapePath = rc.path(bowTieRectPath, options);
  const bowTieRectShape = shapeSvg.insert(() => bowTieRectShapePath, ":first-child");
  bowTieRectShape.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    bowTieRectShape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    bowTieRectShape.selectAll("path").attr("style", nodeStyles);
  }
  bowTieRectShape.attr("transform", `translate(${rx / 2}, 0)`);
  updateNodeBounds(node, bowTieRectShape);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(bowTieRect, "bowTieRect");

// src/rendering-util/rendering-elements/shapes/card.ts


// src/rendering-util/rendering-elements/shapes/insertPolygonShape.ts
function insertPolygonShape(parent, w, h, points) {
  return parent.insert("polygon", ":first-child").attr(
    "points",
    points.map(function(d) {
      return d.x + "," + d.y;
    }).join(" ")
  ).attr("class", "label-container").attr("transform", "translate(" + -w / 2 + "," + h / 2 + ")");
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(insertPolygonShape, "insertPolygonShape");

// src/rendering-util/rendering-elements/shapes/card.ts
async function card(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const h = bbox.height + node.padding;
  const padding = 12;
  const w = bbox.width + node.padding + padding;
  const left = 0;
  const right = w;
  const top = -h;
  const bottom = 0;
  const points = [
    { x: left + padding, y: top },
    { x: right, y: top },
    { x: right, y: bottom },
    { x: left, y: bottom },
    { x: left, y: top + padding },
    { x: left + padding, y: top }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createPathFromPoints(points);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-w / 2}, ${h / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, w, h, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(card, "card");

// src/rendering-util/rendering-elements/shapes/choice.ts

function choice(parent, node) {
  const { nodeStyles } = styles2String(node);
  node.label = "";
  const shapeSvg = parent.insert("g").attr("class", getNodeClasses(node)).attr("id", node.domId ?? node.id);
  const { cssStyles } = node;
  const s = Math.max(28, node.width ?? 0);
  const points = [
    { x: 0, y: s / 2 },
    { x: s / 2, y: 0 },
    { x: 0, y: -s / 2 },
    { x: -s / 2, y: 0 }
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const choicePath = createPathFromPoints(points);
  const roughNode = rc.path(choicePath, options);
  const choiceShape = shapeSvg.insert(() => roughNode, ":first-child");
  if (cssStyles && node.look !== "handDrawn") {
    choiceShape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    choiceShape.selectAll("path").attr("style", nodeStyles);
  }
  node.width = 28;
  node.height = 28;
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(choice, "choice");

// src/rendering-util/rendering-elements/shapes/circle.ts

async function circle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, halfPadding } = await labelHelper(parent, node, getNodeClasses(node));
  const radius = bbox.width / 2 + halfPadding;
  let circleElem;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const roughNode = rc.circle(0, 0, radius * 2, options);
    circleElem = shapeSvg.insert(() => roughNode, ":first-child");
    circleElem.attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
  } else {
    circleElem = shapeSvg.insert("circle", ":first-child").attr("class", "basic label-container").attr("style", nodeStyles).attr("r", radius).attr("cx", 0).attr("cy", 0);
  }
  updateNodeBounds(node, circleElem);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Circle intersect", node, radius, point);
    return intersect_default.circle(node, radius, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(circle, "circle");

// src/rendering-util/rendering-elements/shapes/crossedCircle.ts

function createLine(r) {
  const xAxis45 = Math.cos(Math.PI / 4);
  const yAxis45 = Math.sin(Math.PI / 4);
  const lineLength = r * 2;
  const pointQ1 = { x: lineLength / 2 * xAxis45, y: lineLength / 2 * yAxis45 };
  const pointQ2 = { x: -(lineLength / 2) * xAxis45, y: lineLength / 2 * yAxis45 };
  const pointQ3 = { x: -(lineLength / 2) * xAxis45, y: -(lineLength / 2) * yAxis45 };
  const pointQ4 = { x: lineLength / 2 * xAxis45, y: -(lineLength / 2) * yAxis45 };
  return `M ${pointQ2.x},${pointQ2.y} L ${pointQ4.x},${pointQ4.y}
                   M ${pointQ1.x},${pointQ1.y} L ${pointQ3.x},${pointQ3.y}`;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(createLine, "createLine");
function crossedCircle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  node.label = "";
  const shapeSvg = parent.insert("g").attr("class", getNodeClasses(node)).attr("id", node.domId ?? node.id);
  const radius = Math.max(30, node?.width ?? 0);
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const circleNode = rc.circle(0, 0, radius * 2, options);
  const linePath = createLine(radius);
  const lineNode = rc.path(linePath, options);
  const crossedCircle2 = shapeSvg.insert(() => circleNode, ":first-child");
  crossedCircle2.insert(() => lineNode);
  if (cssStyles && node.look !== "handDrawn") {
    crossedCircle2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    crossedCircle2.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, crossedCircle2);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("crossedCircle intersect", node, { radius, point });
    const pos = intersect_default.circle(node, radius, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(crossedCircle, "crossedCircle");

// src/rendering-util/rendering-elements/shapes/curlyBraceLeft.ts

function generateCirclePoints2(centerX, centerY, radius, numPoints = 100, startAngle = 0, endAngle = 180) {
  const points = [];
  const startAngleRad = startAngle * Math.PI / 180;
  const endAngleRad = endAngle * Math.PI / 180;
  const angleRange = endAngleRad - startAngleRad;
  const angleStep = angleRange / (numPoints - 1);
  for (let i = 0; i < numPoints; i++) {
    const angle = startAngleRad + i * angleStep;
    const x = centerX + radius * Math.cos(angle);
    const y = centerY + radius * Math.sin(angle);
    points.push({ x: -x, y: -y });
  }
  return points;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(generateCirclePoints2, "generateCirclePoints");
async function curlyBraceLeft(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + (node.padding ?? 0);
  const h = bbox.height + (node.padding ?? 0);
  const radius = Math.max(5, h * 0.1);
  const { cssStyles } = node;
  const points = [
    ...generateCirclePoints2(w / 2, -h / 2, radius, 30, -90, 0),
    { x: -w / 2 - radius, y: radius },
    ...generateCirclePoints2(w / 2 + radius * 2, -radius, radius, 20, -180, -270),
    ...generateCirclePoints2(w / 2 + radius * 2, radius, radius, 20, -90, -180),
    { x: -w / 2 - radius, y: -h / 2 },
    ...generateCirclePoints2(w / 2, h / 2, radius, 20, 0, 90)
  ];
  const rectPoints = [
    { x: w / 2, y: -h / 2 - radius },
    { x: -w / 2, y: -h / 2 - radius },
    ...generateCirclePoints2(w / 2, -h / 2, radius, 20, -90, 0),
    { x: -w / 2 - radius, y: -radius },
    ...generateCirclePoints2(w / 2 + w * 0.1, -radius, radius, 20, -180, -270),
    ...generateCirclePoints2(w / 2 + w * 0.1, radius, radius, 20, -90, -180),
    { x: -w / 2 - radius, y: h / 2 },
    ...generateCirclePoints2(w / 2, h / 2, radius, 20, 0, 90),
    { x: -w / 2, y: h / 2 + radius },
    { x: w / 2, y: h / 2 + radius }
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, { fill: "none" });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const curlyBraceLeftPath = createPathFromPoints(points);
  const newCurlyBracePath = curlyBraceLeftPath.replace("Z", "");
  const curlyBraceLeftNode = rc.path(newCurlyBracePath, options);
  const rectPath = createPathFromPoints(rectPoints);
  const rectShape = rc.path(rectPath, { ...options });
  const curlyBraceLeftShape = shapeSvg.insert("g", ":first-child");
  curlyBraceLeftShape.insert(() => rectShape, ":first-child").attr("stroke-opacity", 0);
  curlyBraceLeftShape.insert(() => curlyBraceLeftNode, ":first-child");
  curlyBraceLeftShape.attr("class", "text");
  if (cssStyles && node.look !== "handDrawn") {
    curlyBraceLeftShape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    curlyBraceLeftShape.selectAll("path").attr("style", nodeStyles);
  }
  curlyBraceLeftShape.attr("transform", `translate(${radius}, 0)`);
  label.attr(
    "transform",
    `translate(${-w / 2 + radius - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, curlyBraceLeftShape);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, rectPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(curlyBraceLeft, "curlyBraceLeft");

// src/rendering-util/rendering-elements/shapes/curlyBraceRight.ts

function generateCirclePoints3(centerX, centerY, radius, numPoints = 100, startAngle = 0, endAngle = 180) {
  const points = [];
  const startAngleRad = startAngle * Math.PI / 180;
  const endAngleRad = endAngle * Math.PI / 180;
  const angleRange = endAngleRad - startAngleRad;
  const angleStep = angleRange / (numPoints - 1);
  for (let i = 0; i < numPoints; i++) {
    const angle = startAngleRad + i * angleStep;
    const x = centerX + radius * Math.cos(angle);
    const y = centerY + radius * Math.sin(angle);
    points.push({ x, y });
  }
  return points;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(generateCirclePoints3, "generateCirclePoints");
async function curlyBraceRight(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + (node.padding ?? 0);
  const h = bbox.height + (node.padding ?? 0);
  const radius = Math.max(5, h * 0.1);
  const { cssStyles } = node;
  const points = [
    ...generateCirclePoints3(w / 2, -h / 2, radius, 20, -90, 0),
    { x: w / 2 + radius, y: -radius },
    ...generateCirclePoints3(w / 2 + radius * 2, -radius, radius, 20, -180, -270),
    ...generateCirclePoints3(w / 2 + radius * 2, radius, radius, 20, -90, -180),
    { x: w / 2 + radius, y: h / 2 },
    ...generateCirclePoints3(w / 2, h / 2, radius, 20, 0, 90)
  ];
  const rectPoints = [
    { x: -w / 2, y: -h / 2 - radius },
    { x: w / 2, y: -h / 2 - radius },
    ...generateCirclePoints3(w / 2, -h / 2, radius, 20, -90, 0),
    { x: w / 2 + radius, y: -radius },
    ...generateCirclePoints3(w / 2 + radius * 2, -radius, radius, 20, -180, -270),
    ...generateCirclePoints3(w / 2 + radius * 2, radius, radius, 20, -90, -180),
    { x: w / 2 + radius, y: h / 2 },
    ...generateCirclePoints3(w / 2, h / 2, radius, 20, 0, 90),
    { x: w / 2, y: h / 2 + radius },
    { x: -w / 2, y: h / 2 + radius }
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, { fill: "none" });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const curlyBraceRightPath = createPathFromPoints(points);
  const newCurlyBracePath = curlyBraceRightPath.replace("Z", "");
  const curlyBraceRightNode = rc.path(newCurlyBracePath, options);
  const rectPath = createPathFromPoints(rectPoints);
  const rectShape = rc.path(rectPath, { ...options });
  const curlyBraceRightShape = shapeSvg.insert("g", ":first-child");
  curlyBraceRightShape.insert(() => rectShape, ":first-child").attr("stroke-opacity", 0);
  curlyBraceRightShape.insert(() => curlyBraceRightNode, ":first-child");
  curlyBraceRightShape.attr("class", "text");
  if (cssStyles && node.look !== "handDrawn") {
    curlyBraceRightShape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    curlyBraceRightShape.selectAll("path").attr("style", nodeStyles);
  }
  curlyBraceRightShape.attr("transform", `translate(${-radius}, 0)`);
  label.attr(
    "transform",
    `translate(${-w / 2 + (node.padding ?? 0) / 2 - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, curlyBraceRightShape);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, rectPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(curlyBraceRight, "curlyBraceRight");

// src/rendering-util/rendering-elements/shapes/curlyBraces.ts

function generateCirclePoints4(centerX, centerY, radius, numPoints = 100, startAngle = 0, endAngle = 180) {
  const points = [];
  const startAngleRad = startAngle * Math.PI / 180;
  const endAngleRad = endAngle * Math.PI / 180;
  const angleRange = endAngleRad - startAngleRad;
  const angleStep = angleRange / (numPoints - 1);
  for (let i = 0; i < numPoints; i++) {
    const angle = startAngleRad + i * angleStep;
    const x = centerX + radius * Math.cos(angle);
    const y = centerY + radius * Math.sin(angle);
    points.push({ x: -x, y: -y });
  }
  return points;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(generateCirclePoints4, "generateCirclePoints");
async function curlyBraces(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + (node.padding ?? 0);
  const h = bbox.height + (node.padding ?? 0);
  const radius = Math.max(5, h * 0.1);
  const { cssStyles } = node;
  const leftCurlyBracePoints = [
    ...generateCirclePoints4(w / 2, -h / 2, radius, 30, -90, 0),
    { x: -w / 2 - radius, y: radius },
    ...generateCirclePoints4(w / 2 + radius * 2, -radius, radius, 20, -180, -270),
    ...generateCirclePoints4(w / 2 + radius * 2, radius, radius, 20, -90, -180),
    { x: -w / 2 - radius, y: -h / 2 },
    ...generateCirclePoints4(w / 2, h / 2, radius, 20, 0, 90)
  ];
  const rightCurlyBracePoints = [
    ...generateCirclePoints4(-w / 2 + radius + radius / 2, -h / 2, radius, 20, -90, -180),
    { x: w / 2 - radius / 2, y: radius },
    ...generateCirclePoints4(-w / 2 - radius / 2, -radius, radius, 20, 0, 90),
    ...generateCirclePoints4(-w / 2 - radius / 2, radius, radius, 20, -90, 0),
    { x: w / 2 - radius / 2, y: -radius },
    ...generateCirclePoints4(-w / 2 + radius + radius / 2, h / 2, radius, 30, -180, -270)
  ];
  const rectPoints = [
    { x: w / 2, y: -h / 2 - radius },
    { x: -w / 2, y: -h / 2 - radius },
    ...generateCirclePoints4(w / 2, -h / 2, radius, 20, -90, 0),
    { x: -w / 2 - radius, y: -radius },
    ...generateCirclePoints4(w / 2 + radius * 2, -radius, radius, 20, -180, -270),
    ...generateCirclePoints4(w / 2 + radius * 2, radius, radius, 20, -90, -180),
    { x: -w / 2 - radius, y: h / 2 },
    ...generateCirclePoints4(w / 2, h / 2, radius, 20, 0, 90),
    { x: -w / 2, y: h / 2 + radius },
    { x: w / 2 - radius - radius / 2, y: h / 2 + radius },
    ...generateCirclePoints4(-w / 2 + radius + radius / 2, -h / 2, radius, 20, -90, -180),
    { x: w / 2 - radius / 2, y: radius },
    ...generateCirclePoints4(-w / 2 - radius / 2, -radius, radius, 20, 0, 90),
    ...generateCirclePoints4(-w / 2 - radius / 2, radius, radius, 20, -90, 0),
    { x: w / 2 - radius / 2, y: -radius },
    ...generateCirclePoints4(-w / 2 + radius + radius / 2, h / 2, radius, 30, -180, -270)
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, { fill: "none" });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const leftCurlyBracePath = createPathFromPoints(leftCurlyBracePoints);
  const newLeftCurlyBracePath = leftCurlyBracePath.replace("Z", "");
  const leftCurlyBraceNode = rc.path(newLeftCurlyBracePath, options);
  const rightCurlyBracePath = createPathFromPoints(rightCurlyBracePoints);
  const newRightCurlyBracePath = rightCurlyBracePath.replace("Z", "");
  const rightCurlyBraceNode = rc.path(newRightCurlyBracePath, options);
  const rectPath = createPathFromPoints(rectPoints);
  const rectShape = rc.path(rectPath, { ...options });
  const curlyBracesShape = shapeSvg.insert("g", ":first-child");
  curlyBracesShape.insert(() => rectShape, ":first-child").attr("stroke-opacity", 0);
  curlyBracesShape.insert(() => leftCurlyBraceNode, ":first-child");
  curlyBracesShape.insert(() => rightCurlyBraceNode, ":first-child");
  curlyBracesShape.attr("class", "text");
  if (cssStyles && node.look !== "handDrawn") {
    curlyBracesShape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    curlyBracesShape.selectAll("path").attr("style", nodeStyles);
  }
  curlyBracesShape.attr("transform", `translate(${radius - radius / 4}, 0)`);
  label.attr(
    "transform",
    `translate(${-w / 2 + (node.padding ?? 0) / 2 - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, curlyBracesShape);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, rectPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(curlyBraces, "curlyBraces");

// src/rendering-util/rendering-elements/shapes/curvedTrapezoid.ts

async function curvedTrapezoid(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const minWidth = 80, minHeight = 20;
  const w = Math.max(minWidth, (bbox.width + (node.padding ?? 0) * 2) * 1.25, node?.width ?? 0);
  const h = Math.max(minHeight, bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const radius = h / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const totalWidth = w, totalHeight = h;
  const rw = totalWidth - radius;
  const tw = totalHeight / 4;
  const points = [
    { x: rw, y: 0 },
    { x: tw, y: 0 },
    { x: 0, y: totalHeight / 2 },
    { x: tw, y: totalHeight },
    { x: rw, y: totalHeight },
    ...generateCirclePoints(-rw, -totalHeight / 2, radius, 50, 270, 90)
  ];
  const pathData = createPathFromPoints(points);
  const shapeNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => shapeNode, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", nodeStyles);
  }
  polygon.attr("transform", `translate(${-w / 2}, ${-h / 2})`);
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(curvedTrapezoid, "curvedTrapezoid");

// src/rendering-util/rendering-elements/shapes/cylinder.ts

var createCylinderPathD = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return [
    `M${x},${y + ry}`,
    `a${rx},${ry} 0,0,0 ${width},0`,
    `a${rx},${ry} 0,0,0 ${-width},0`,
    `l0,${height}`,
    `a${rx},${ry} 0,0,0 ${width},0`,
    `l0,${-height}`
  ].join(" ");
}, "createCylinderPathD");
var createOuterCylinderPathD = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return [
    `M${x},${y + ry}`,
    `M${x + width},${y + ry}`,
    `a${rx},${ry} 0,0,0 ${-width},0`,
    `l0,${height}`,
    `a${rx},${ry} 0,0,0 ${width},0`,
    `l0,${-height}`
  ].join(" ");
}, "createOuterCylinderPathD");
var createInnerCylinderPathD = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return [`M${x - width / 2},${-height / 2}`, `a${rx},${ry} 0,0,0 ${width},0`].join(" ");
}, "createInnerCylinderPathD");
async function cylinder(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + node.padding, node.width ?? 0);
  const rx = w / 2;
  const ry = rx / (2.5 + w / 50);
  const h = Math.max(bbox.height + ry + node.padding, node.height ?? 0);
  let cylinder2;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const outerPathData = createOuterCylinderPathD(0, 0, w, h, rx, ry);
    const innerPathData = createInnerCylinderPathD(0, ry, w, h, rx, ry);
    const outerNode = rc.path(outerPathData, userNodeOverrides(node, {}));
    const innerLine = rc.path(innerPathData, userNodeOverrides(node, { fill: "none" }));
    cylinder2 = shapeSvg.insert(() => innerLine, ":first-child");
    cylinder2 = shapeSvg.insert(() => outerNode, ":first-child");
    cylinder2.attr("class", "basic label-container");
    if (cssStyles) {
      cylinder2.attr("style", cssStyles);
    }
  } else {
    const pathData = createCylinderPathD(0, 0, w, h, rx, ry);
    cylinder2 = shapeSvg.insert("path", ":first-child").attr("d", pathData).attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles)).attr("style", nodeStyles);
  }
  cylinder2.attr("label-offset-y", ry);
  cylinder2.attr("transform", `translate(${-w / 2}, ${-(h / 2 + ry)})`);
  updateNodeBounds(node, cylinder2);
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + (node.padding ?? 0) / 1.5 - (bbox.y - (bbox.top ?? 0))})`
  );
  node.intersect = function(point) {
    const pos = intersect_default.rect(node, point);
    const x = pos.x - (node.x ?? 0);
    if (rx != 0 && (Math.abs(x) < (node.width ?? 0) / 2 || Math.abs(x) == (node.width ?? 0) / 2 && Math.abs(pos.y - (node.y ?? 0)) > (node.height ?? 0) / 2 - ry)) {
      let y = ry * ry * (1 - x * x / (rx * rx));
      if (y > 0) {
        y = Math.sqrt(y);
      }
      y = ry - y;
      if (point.y - (node.y ?? 0) > 0) {
        y = -y;
      }
      pos.y += y;
    }
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(cylinder, "cylinder");

// src/rendering-util/rendering-elements/shapes/dividedRect.ts

async function dividedRectangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + node.padding;
  const h = bbox.height + node.padding;
  const rectOffset = h * 0.2;
  const x = -w / 2;
  const y = -h / 2 - rectOffset / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const pts = [
    { x, y: y + rectOffset },
    { x: -x, y: y + rectOffset },
    { x: -x, y: -y },
    { x, y: -y },
    { x, y },
    { x: -x, y },
    { x: -x, y: y + rectOffset }
  ];
  const poly = rc.polygon(
    pts.map((p) => [p.x, p.y]),
    options
  );
  const polygon = shapeSvg.insert(() => poly, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectAll("path").attr("style", nodeStyles);
  }
  label.attr(
    "transform",
    `translate(${x + (node.padding ?? 0) / 2 - (bbox.x - (bbox.left ?? 0))}, ${y + rectOffset + (node.padding ?? 0) / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    const pos = intersect_default.rect(node, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(dividedRectangle, "dividedRectangle");

// src/rendering-util/rendering-elements/shapes/doubleCircle.ts

async function doublecircle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, halfPadding } = await labelHelper(parent, node, getNodeClasses(node));
  const gap = 5;
  const outerRadius = bbox.width / 2 + halfPadding + gap;
  const innerRadius = bbox.width / 2 + halfPadding;
  let circleGroup;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const outerOptions = userNodeOverrides(node, { roughness: 0.2, strokeWidth: 2.5 });
    const innerOptions = userNodeOverrides(node, { roughness: 0.2, strokeWidth: 1.5 });
    const outerRoughNode = rc.circle(0, 0, outerRadius * 2, outerOptions);
    const innerRoughNode = rc.circle(0, 0, innerRadius * 2, innerOptions);
    circleGroup = shapeSvg.insert("g", ":first-child");
    circleGroup.attr("class", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(node.cssClasses)).attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
    circleGroup.node()?.appendChild(outerRoughNode);
    circleGroup.node()?.appendChild(innerRoughNode);
  } else {
    circleGroup = shapeSvg.insert("g", ":first-child");
    const outerCircle = circleGroup.insert("circle", ":first-child");
    const innerCircle = circleGroup.insert("circle");
    circleGroup.attr("class", "basic label-container").attr("style", nodeStyles);
    outerCircle.attr("class", "outer-circle").attr("style", nodeStyles).attr("r", outerRadius).attr("cx", 0).attr("cy", 0);
    innerCircle.attr("class", "inner-circle").attr("style", nodeStyles).attr("r", innerRadius).attr("cx", 0).attr("cy", 0);
  }
  updateNodeBounds(node, circleGroup);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("DoubleCircle intersect", node, outerRadius, point);
    return intersect_default.circle(node, outerRadius, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(doublecircle, "doublecircle");

// src/rendering-util/rendering-elements/shapes/filledCircle.ts

function filledCircle(parent, node, { config: { themeVariables } }) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.label = "";
  node.labelStyle = labelStyles;
  const shapeSvg = parent.insert("g").attr("class", getNodeClasses(node)).attr("id", node.domId ?? node.id);
  const radius = 7;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const { nodeBorder } = themeVariables;
  const options = userNodeOverrides(node, { fillStyle: "solid" });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
  }
  const circleNode = rc.circle(0, 0, radius * 2, options);
  const filledCircle2 = shapeSvg.insert(() => circleNode, ":first-child");
  filledCircle2.selectAll("path").attr("style", `fill: ${nodeBorder} !important;`);
  if (cssStyles && cssStyles.length > 0 && node.look !== "handDrawn") {
    filledCircle2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    filledCircle2.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, filledCircle2);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("filledCircle intersect", node, { radius, point });
    const pos = intersect_default.circle(node, radius, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(filledCircle, "filledCircle");

// src/rendering-util/rendering-elements/shapes/flippedTriangle.ts

async function flippedTriangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + (node.padding ?? 0);
  const h = w + bbox.height;
  const tw = w + bbox.height;
  const points = [
    { x: 0, y: -h },
    { x: tw, y: -h },
    { x: tw / 2, y: 0 }
  ];
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const pathData = createPathFromPoints(points);
  const roughNode = rc.path(pathData, options);
  const flippedTriangle2 = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-h / 2}, ${h / 2})`);
  if (cssStyles && node.look !== "handDrawn") {
    flippedTriangle2.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    flippedTriangle2.selectChildren("path").attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, flippedTriangle2);
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))}, ${-h / 2 + (node.padding ?? 0) / 2 + (bbox.y - (bbox.top ?? 0))})`
  );
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Triangle intersect", node, points, point);
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(flippedTriangle, "flippedTriangle");

// src/rendering-util/rendering-elements/shapes/forkJoin.ts

function forkJoin(parent, node, { dir, config: { state: state2, themeVariables } }) {
  const { nodeStyles } = styles2String(node);
  node.label = "";
  const shapeSvg = parent.insert("g").attr("class", getNodeClasses(node)).attr("id", node.domId ?? node.id);
  const { cssStyles } = node;
  let width = Math.max(70, node?.width ?? 0);
  let height = Math.max(10, node?.height ?? 0);
  if (dir === "LR") {
    width = Math.max(10, node?.width ?? 0);
    height = Math.max(70, node?.height ?? 0);
  }
  const x = -1 * width / 2;
  const y = -1 * height / 2;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {
    stroke: themeVariables.lineColor,
    fill: themeVariables.lineColor
  });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const roughNode = rc.rectangle(x, y, width, height, options);
  const shape = shapeSvg.insert(() => roughNode, ":first-child");
  if (cssStyles && node.look !== "handDrawn") {
    shape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    shape.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, shape);
  const padding = state2?.padding ?? 0;
  if (node.width && node.height) {
    node.width += padding / 2 || 0;
    node.height += padding / 2 || 0;
  }
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(forkJoin, "forkJoin");

// src/rendering-util/rendering-elements/shapes/halfRoundedRectangle.ts

async function halfRoundedRectangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const minWidth = 80, minHeight = 50;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(minWidth, bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(minHeight, bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const radius = h / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: -w / 2, y: -h / 2 },
    { x: w / 2 - radius, y: -h / 2 },
    ...generateCirclePoints(-w / 2 + radius, 0, radius, 50, 90, 270),
    { x: w / 2 - radius, y: h / 2 },
    { x: -w / 2, y: h / 2 }
  ];
  const pathData = createPathFromPoints(points);
  const shapeNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => shapeNode, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Pill intersect", node, { radius, point });
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(halfRoundedRectangle, "halfRoundedRectangle");

// src/rendering-util/rendering-elements/shapes/hexagon.ts

var createHexagonPathD = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, m) => {
  return [
    `M${x + m},${y}`,
    `L${x + width - m},${y}`,
    `L${x + width},${y - height / 2}`,
    `L${x + width - m},${y - height}`,
    `L${x + m},${y - height}`,
    `L${x},${y - height / 2}`,
    "Z"
  ].join(" ");
}, "createHexagonPathD");
async function hexagon(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const f = 4;
  const h = bbox.height + node.padding;
  const m = h / f;
  const w = bbox.width + 2 * m + node.padding;
  const points = [
    { x: m, y: 0 },
    { x: w - m, y: 0 },
    { x: w, y: -h / 2 },
    { x: w - m, y: -h },
    { x: m, y: -h },
    { x: 0, y: -h / 2 }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createHexagonPathD(0, 0, w, h, m);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-w / 2}, ${h / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, w, h, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(hexagon, "hexagon");

// src/rendering-util/rendering-elements/shapes/hourglass.ts

async function hourglass(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.label = "";
  node.labelStyle = labelStyles;
  const { shapeSvg } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(30, node?.width ?? 0);
  const h = Math.max(30, node?.height ?? 0);
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: 0, y: 0 },
    { x: w, y: 0 },
    { x: 0, y: h },
    { x: w, y: h }
  ];
  const pathData = createPathFromPoints(points);
  const shapeNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => shapeNode, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", nodeStyles);
  }
  polygon.attr("transform", `translate(${-w / 2}, ${-h / 2})`);
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Pill intersect", node, { points });
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(hourglass, "hourglass");

// src/rendering-util/rendering-elements/shapes/icon.ts

async function icon(parent, node, { config: { themeVariables, flowchart } }) {
  const { labelStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const assetHeight = node.assetHeight ?? 48;
  const assetWidth = node.assetWidth ?? 48;
  const iconSize = Math.max(assetHeight, assetWidth);
  const defaultWidth = flowchart?.wrappingWidth;
  node.width = Math.max(iconSize, defaultWidth ?? 0);
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, "icon-shape default");
  const topLabel = node.pos === "t";
  const height = iconSize;
  const width = iconSize;
  const { nodeBorder } = themeVariables;
  const { stylesMap } = compileStyles(node);
  const x = -width / 2;
  const y = -height / 2;
  const labelPadding = node.label ? 8 : 0;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, { stroke: "none", fill: "none" });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const iconNode = rc.rectangle(x, y, width, height, options);
  const outerWidth = Math.max(width, bbox.width);
  const outerHeight = height + bbox.height + labelPadding;
  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {
    ...options,
    fill: "transparent",
    stroke: "none"
  });
  const iconShape = shapeSvg.insert(() => iconNode, ":first-child");
  const outerShape = shapeSvg.insert(() => outerNode);
  if (node.icon) {
    const iconElem = shapeSvg.append("g");
    iconElem.html(
      `<g>${await (0,_chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_1__.getIconSVG)(node.icon, {
        height: iconSize,
        width: iconSize,
        fallbackPrefix: ""
      })}</g>`
    );
    const iconBBox = iconElem.node().getBBox();
    const iconWidth = iconBBox.width;
    const iconHeight = iconBBox.height;
    const iconX = iconBBox.x;
    const iconY = iconBBox.y;
    iconElem.attr(
      "transform",
      `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`
    );
    iconElem.attr("style", `color: ${stylesMap.get("stroke") ?? nodeBorder};`);
  }
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`
  );
  iconShape.attr(
    "transform",
    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`
  );
  updateNodeBounds(node, outerShape);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("iconSquare intersect", node, point);
    if (!node.label) {
      return intersect_default.rect(node, point);
    }
    const dx = node.x ?? 0;
    const dy = node.y ?? 0;
    const nodeHeight = node.height ?? 0;
    let points = [];
    if (topLabel) {
      points = [
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + width / 2, y: dy + nodeHeight / 2 },
        { x: dx - width / 2, y: dy + nodeHeight / 2 },
        { x: dx - width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }
      ];
    } else {
      points = [
        { x: dx - width / 2, y: dy - nodeHeight / 2 },
        { x: dx + width / 2, y: dy - nodeHeight / 2 },
        { x: dx + width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx - width / 2, y: dy - nodeHeight / 2 + height }
      ];
    }
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(icon, "icon");

// src/rendering-util/rendering-elements/shapes/iconCircle.ts

async function iconCircle(parent, node, { config: { themeVariables, flowchart } }) {
  const { labelStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const assetHeight = node.assetHeight ?? 48;
  const assetWidth = node.assetWidth ?? 48;
  const iconSize = Math.max(assetHeight, assetWidth);
  const defaultWidth = flowchart?.wrappingWidth;
  node.width = Math.max(iconSize, defaultWidth ?? 0);
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, "icon-shape default");
  const padding = 20;
  const labelPadding = node.label ? 8 : 0;
  const topLabel = node.pos === "t";
  const { nodeBorder, mainBkg } = themeVariables;
  const { stylesMap } = compileStyles(node);
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const fill = stylesMap.get("fill");
  options.stroke = fill ?? mainBkg;
  const iconElem = shapeSvg.append("g");
  if (node.icon) {
    iconElem.html(
      `<g>${await (0,_chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_1__.getIconSVG)(node.icon, {
        height: iconSize,
        width: iconSize,
        fallbackPrefix: ""
      })}</g>`
    );
  }
  const iconBBox = iconElem.node().getBBox();
  const iconWidth = iconBBox.width;
  const iconHeight = iconBBox.height;
  const iconX = iconBBox.x;
  const iconY = iconBBox.y;
  const diameter = Math.max(iconWidth, iconHeight) * Math.SQRT2 + padding * 2;
  const iconNode = rc.circle(0, 0, diameter, options);
  const outerWidth = Math.max(diameter, bbox.width);
  const outerHeight = diameter + bbox.height + labelPadding;
  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {
    ...options,
    fill: "transparent",
    stroke: "none"
  });
  const iconShape = shapeSvg.insert(() => iconNode, ":first-child");
  const outerShape = shapeSvg.insert(() => outerNode);
  iconElem.attr(
    "transform",
    `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`
  );
  iconElem.attr("style", `color: ${stylesMap.get("stroke") ?? nodeBorder};`);
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`
  );
  iconShape.attr(
    "transform",
    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`
  );
  updateNodeBounds(node, outerShape);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("iconSquare intersect", node, point);
    const pos = intersect_default.rect(node, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(iconCircle, "iconCircle");

// src/rendering-util/rendering-elements/shapes/iconRounded.ts

async function iconRounded(parent, node, { config: { themeVariables, flowchart } }) {
  const { labelStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const assetHeight = node.assetHeight ?? 48;
  const assetWidth = node.assetWidth ?? 48;
  const iconSize = Math.max(assetHeight, assetWidth);
  const defaultWidth = flowchart?.wrappingWidth;
  node.width = Math.max(iconSize, defaultWidth ?? 0);
  const { shapeSvg, bbox, halfPadding, label } = await labelHelper(
    parent,
    node,
    "icon-shape default"
  );
  const topLabel = node.pos === "t";
  const height = iconSize + halfPadding * 2;
  const width = iconSize + halfPadding * 2;
  const { nodeBorder, mainBkg } = themeVariables;
  const { stylesMap } = compileStyles(node);
  const x = -width / 2;
  const y = -height / 2;
  const labelPadding = node.label ? 8 : 0;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const fill = stylesMap.get("fill");
  options.stroke = fill ?? mainBkg;
  const iconNode = rc.path(createRoundedRectPathD(x, y, width, height, 5), options);
  const outerWidth = Math.max(width, bbox.width);
  const outerHeight = height + bbox.height + labelPadding;
  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {
    ...options,
    fill: "transparent",
    stroke: "none"
  });
  const iconShape = shapeSvg.insert(() => iconNode, ":first-child").attr("class", "icon-shape2");
  const outerShape = shapeSvg.insert(() => outerNode);
  if (node.icon) {
    const iconElem = shapeSvg.append("g");
    iconElem.html(
      `<g>${await (0,_chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_1__.getIconSVG)(node.icon, {
        height: iconSize,
        width: iconSize,
        fallbackPrefix: ""
      })}</g>`
    );
    const iconBBox = iconElem.node().getBBox();
    const iconWidth = iconBBox.width;
    const iconHeight = iconBBox.height;
    const iconX = iconBBox.x;
    const iconY = iconBBox.y;
    iconElem.attr(
      "transform",
      `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`
    );
    iconElem.attr("style", `color: ${stylesMap.get("stroke") ?? nodeBorder};`);
  }
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`
  );
  iconShape.attr(
    "transform",
    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`
  );
  updateNodeBounds(node, outerShape);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("iconSquare intersect", node, point);
    if (!node.label) {
      return intersect_default.rect(node, point);
    }
    const dx = node.x ?? 0;
    const dy = node.y ?? 0;
    const nodeHeight = node.height ?? 0;
    let points = [];
    if (topLabel) {
      points = [
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + width / 2, y: dy + nodeHeight / 2 },
        { x: dx - width / 2, y: dy + nodeHeight / 2 },
        { x: dx - width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }
      ];
    } else {
      points = [
        { x: dx - width / 2, y: dy - nodeHeight / 2 },
        { x: dx + width / 2, y: dy - nodeHeight / 2 },
        { x: dx + width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx - width / 2, y: dy - nodeHeight / 2 + height }
      ];
    }
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(iconRounded, "iconRounded");

// src/rendering-util/rendering-elements/shapes/iconSquare.ts

async function iconSquare(parent, node, { config: { themeVariables, flowchart } }) {
  const { labelStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const assetHeight = node.assetHeight ?? 48;
  const assetWidth = node.assetWidth ?? 48;
  const iconSize = Math.max(assetHeight, assetWidth);
  const defaultWidth = flowchart?.wrappingWidth;
  node.width = Math.max(iconSize, defaultWidth ?? 0);
  const { shapeSvg, bbox, halfPadding, label } = await labelHelper(
    parent,
    node,
    "icon-shape default"
  );
  const topLabel = node.pos === "t";
  const height = iconSize + halfPadding * 2;
  const width = iconSize + halfPadding * 2;
  const { nodeBorder, mainBkg } = themeVariables;
  const { stylesMap } = compileStyles(node);
  const x = -width / 2;
  const y = -height / 2;
  const labelPadding = node.label ? 8 : 0;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const fill = stylesMap.get("fill");
  options.stroke = fill ?? mainBkg;
  const iconNode = rc.path(createRoundedRectPathD(x, y, width, height, 0.1), options);
  const outerWidth = Math.max(width, bbox.width);
  const outerHeight = height + bbox.height + labelPadding;
  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {
    ...options,
    fill: "transparent",
    stroke: "none"
  });
  const iconShape = shapeSvg.insert(() => iconNode, ":first-child");
  const outerShape = shapeSvg.insert(() => outerNode);
  if (node.icon) {
    const iconElem = shapeSvg.append("g");
    iconElem.html(
      `<g>${await (0,_chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_1__.getIconSVG)(node.icon, {
        height: iconSize,
        width: iconSize,
        fallbackPrefix: ""
      })}</g>`
    );
    const iconBBox = iconElem.node().getBBox();
    const iconWidth = iconBBox.width;
    const iconHeight = iconBBox.height;
    const iconX = iconBBox.x;
    const iconY = iconBBox.y;
    iconElem.attr(
      "transform",
      `translate(${-iconWidth / 2 - iconX},${topLabel ? bbox.height / 2 + labelPadding / 2 - iconHeight / 2 - iconY : -bbox.height / 2 - labelPadding / 2 - iconHeight / 2 - iconY})`
    );
    iconElem.attr("style", `color: ${stylesMap.get("stroke") ?? nodeBorder};`);
  }
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -outerHeight / 2 : outerHeight / 2 - bbox.height})`
  );
  iconShape.attr(
    "transform",
    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`
  );
  updateNodeBounds(node, outerShape);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("iconSquare intersect", node, point);
    if (!node.label) {
      return intersect_default.rect(node, point);
    }
    const dx = node.x ?? 0;
    const dy = node.y ?? 0;
    const nodeHeight = node.height ?? 0;
    let points = [];
    if (topLabel) {
      points = [
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + width / 2, y: dy + nodeHeight / 2 },
        { x: dx - width / 2, y: dy + nodeHeight / 2 },
        { x: dx - width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }
      ];
    } else {
      points = [
        { x: dx - width / 2, y: dy - nodeHeight / 2 },
        { x: dx + width / 2, y: dy - nodeHeight / 2 },
        { x: dx + width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + height },
        { x: dx - width / 2, y: dy - nodeHeight / 2 + height }
      ];
    }
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(iconSquare, "iconSquare");

// src/rendering-util/rendering-elements/shapes/imageSquare.ts

async function imageSquare(parent, node, { config: { flowchart } }) {
  const img = new Image();
  img.src = node?.img ?? "";
  await img.decode();
  const imageNaturalWidth = Number(img.naturalWidth.toString().replace("px", ""));
  const imageNaturalHeight = Number(img.naturalHeight.toString().replace("px", ""));
  node.imageAspectRatio = imageNaturalWidth / imageNaturalHeight;
  const { labelStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const defaultWidth = flowchart?.wrappingWidth;
  node.defaultWidth = flowchart?.wrappingWidth;
  const imageRawWidth = Math.max(
    node.label ? defaultWidth ?? 0 : 0,
    node?.assetWidth ?? imageNaturalWidth
  );
  const imageWidth = node.constraint === "on" ? node?.assetHeight ? node.assetHeight * node.imageAspectRatio : imageRawWidth : imageRawWidth;
  const imageHeight = node.constraint === "on" ? imageWidth / node.imageAspectRatio : node?.assetHeight ?? imageNaturalHeight;
  node.width = Math.max(imageWidth, defaultWidth ?? 0);
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, "image-shape default");
  const topLabel = node.pos === "t";
  const x = -imageWidth / 2;
  const y = -imageHeight / 2;
  const labelPadding = node.label ? 8 : 0;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const imageNode = rc.rectangle(x, y, imageWidth, imageHeight, options);
  const outerWidth = Math.max(imageWidth, bbox.width);
  const outerHeight = imageHeight + bbox.height + labelPadding;
  const outerNode = rc.rectangle(-outerWidth / 2, -outerHeight / 2, outerWidth, outerHeight, {
    ...options,
    fill: "none",
    stroke: "none"
  });
  const iconShape = shapeSvg.insert(() => imageNode, ":first-child");
  const outerShape = shapeSvg.insert(() => outerNode);
  if (node.img) {
    const image = shapeSvg.append("image");
    image.attr("href", node.img);
    image.attr("width", imageWidth);
    image.attr("height", imageHeight);
    image.attr("preserveAspectRatio", "none");
    image.attr(
      "transform",
      `translate(${-imageWidth / 2},${topLabel ? outerHeight / 2 - imageHeight : -outerHeight / 2})`
    );
  }
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))},${topLabel ? -imageHeight / 2 - bbox.height / 2 - labelPadding / 2 : imageHeight / 2 - bbox.height / 2 + labelPadding / 2})`
  );
  iconShape.attr(
    "transform",
    `translate(${0},${topLabel ? bbox.height / 2 + labelPadding / 2 : -bbox.height / 2 - labelPadding / 2})`
  );
  updateNodeBounds(node, outerShape);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("iconSquare intersect", node, point);
    if (!node.label) {
      return intersect_default.rect(node, point);
    }
    const dx = node.x ?? 0;
    const dy = node.y ?? 0;
    const nodeHeight = node.height ?? 0;
    let points = [];
    if (topLabel) {
      points = [
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + imageWidth / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx + imageWidth / 2, y: dy + nodeHeight / 2 },
        { x: dx - imageWidth / 2, y: dy + nodeHeight / 2 },
        { x: dx - imageWidth / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + bbox.height + labelPadding }
      ];
    } else {
      points = [
        { x: dx - imageWidth / 2, y: dy - nodeHeight / 2 },
        { x: dx + imageWidth / 2, y: dy - nodeHeight / 2 },
        { x: dx + imageWidth / 2, y: dy - nodeHeight / 2 + imageHeight },
        { x: dx + bbox.width / 2, y: dy - nodeHeight / 2 + imageHeight },
        { x: dx + bbox.width / 2 / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy + nodeHeight / 2 },
        { x: dx - bbox.width / 2, y: dy - nodeHeight / 2 + imageHeight },
        { x: dx - imageWidth / 2, y: dy - nodeHeight / 2 + imageHeight }
      ];
    }
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(imageSquare, "imageSquare");

// src/rendering-util/rendering-elements/shapes/invertedTrapezoid.ts

async function inv_trapezoid(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const points = [
    { x: 0, y: 0 },
    { x: w, y: 0 },
    { x: w + 3 * h / 6, y: -h },
    { x: -3 * h / 6, y: -h }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createPathFromPoints(points);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-w / 2}, ${h / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, w, h, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(inv_trapezoid, "inv_trapezoid");

// src/rendering-util/rendering-elements/shapes/drawRect.ts

async function drawRect(parent, node, options) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const totalWidth = Math.max(bbox.width + options.labelPaddingX * 2, node?.width || 0);
  const totalHeight = Math.max(bbox.height + options.labelPaddingY * 2, node?.height || 0);
  const x = -totalWidth / 2;
  const y = -totalHeight / 2;
  let rect2;
  let { rx, ry } = node;
  const { cssStyles } = node;
  if (options?.rx && options.ry) {
    rx = options.rx;
    ry = options.ry;
  }
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options2 = userNodeOverrides(node, {});
    const roughNode = rx || ry ? rc.path(createRoundedRectPathD(x, y, totalWidth, totalHeight, rx || 0), options2) : rc.rectangle(x, y, totalWidth, totalHeight, options2);
    rect2 = shapeSvg.insert(() => roughNode, ":first-child");
    rect2.attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
  } else {
    rect2 = shapeSvg.insert("rect", ":first-child");
    rect2.attr("class", "basic label-container").attr("style", nodeStyles).attr("rx", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(rx)).attr("ry", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(ry)).attr("x", x).attr("y", y).attr("width", totalWidth).attr("height", totalHeight);
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(drawRect, "drawRect");

// src/rendering-util/rendering-elements/shapes/labelRect.ts
async function labelRect(parent, node) {
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, "label");
  const rect2 = shapeSvg.insert("rect", ":first-child");
  const totalWidth = 0.1;
  const totalHeight = 0.1;
  rect2.attr("width", totalWidth).attr("height", totalHeight);
  shapeSvg.attr("class", "label edgeLabel");
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(labelRect, "labelRect");

// src/rendering-util/rendering-elements/shapes/leanLeft.ts

async function lean_left(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0), node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0), node?.height ?? 0);
  const points = [
    { x: 0, y: 0 },
    { x: w + 3 * h / 6, y: 0 },
    { x: w, y: -h },
    { x: -(3 * h) / 6, y: -h }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createPathFromPoints(points);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-w / 2}, ${h / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, w, h, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(lean_left, "lean_left");

// src/rendering-util/rendering-elements/shapes/leanRight.ts

async function lean_right(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0), node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0), node?.height ?? 0);
  const points = [
    { x: -3 * h / 6, y: 0 },
    { x: w, y: 0 },
    { x: w + 3 * h / 6, y: -h },
    { x: 0, y: -h }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createPathFromPoints(points);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-w / 2}, ${h / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, w, h, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(lean_right, "lean_right");

// src/rendering-util/rendering-elements/shapes/lightningBolt.ts

function lightningBolt(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.label = "";
  node.labelStyle = labelStyles;
  const shapeSvg = parent.insert("g").attr("class", getNodeClasses(node)).attr("id", node.domId ?? node.id);
  const { cssStyles } = node;
  const width = Math.max(35, node?.width ?? 0);
  const height = Math.max(35, node?.height ?? 0);
  const gap = 7;
  const points = [
    { x: width, y: 0 },
    { x: 0, y: height + gap / 2 },
    { x: width - 2 * gap, y: height + gap / 2 },
    { x: 0, y: 2 * height },
    { x: width, y: height - gap / 2 },
    { x: 2 * gap, y: height - gap / 2 }
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const linePath = createPathFromPoints(points);
  const lineNode = rc.path(linePath, options);
  const lightningBolt2 = shapeSvg.insert(() => lineNode, ":first-child");
  if (cssStyles && node.look !== "handDrawn") {
    lightningBolt2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    lightningBolt2.selectAll("path").attr("style", nodeStyles);
  }
  lightningBolt2.attr("transform", `translate(-${width / 2},${-height})`);
  updateNodeBounds(node, lightningBolt2);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("lightningBolt intersect", node, point);
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(lightningBolt, "lightningBolt");

// src/rendering-util/rendering-elements/shapes/linedCylinder.ts

var createCylinderPathD2 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry, outerOffset) => {
  return [
    `M${x},${y + ry}`,
    `a${rx},${ry} 0,0,0 ${width},0`,
    `a${rx},${ry} 0,0,0 ${-width},0`,
    `l0,${height}`,
    `a${rx},${ry} 0,0,0 ${width},0`,
    `l0,${-height}`,
    `M${x},${y + ry + outerOffset}`,
    `a${rx},${ry} 0,0,0 ${width},0`
  ].join(" ");
}, "createCylinderPathD");
var createOuterCylinderPathD2 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry, outerOffset) => {
  return [
    `M${x},${y + ry}`,
    `M${x + width},${y + ry}`,
    `a${rx},${ry} 0,0,0 ${-width},0`,
    `l0,${height}`,
    `a${rx},${ry} 0,0,0 ${width},0`,
    `l0,${-height}`,
    `M${x},${y + ry + outerOffset}`,
    `a${rx},${ry} 0,0,0 ${width},0`
  ].join(" ");
}, "createOuterCylinderPathD");
var createInnerCylinderPathD2 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return [`M${x - width / 2},${-height / 2}`, `a${rx},${ry} 0,0,0 ${width},0`].join(" ");
}, "createInnerCylinderPathD");
async function linedCylinder(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0), node.width ?? 0);
  const rx = w / 2;
  const ry = rx / (2.5 + w / 50);
  const h = Math.max(bbox.height + ry + (node.padding ?? 0), node.height ?? 0);
  const outerOffset = h * 0.1;
  let cylinder2;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const outerPathData = createOuterCylinderPathD2(0, 0, w, h, rx, ry, outerOffset);
    const innerPathData = createInnerCylinderPathD2(0, ry, w, h, rx, ry);
    const options = userNodeOverrides(node, {});
    const outerNode = rc.path(outerPathData, options);
    const innerLine = rc.path(innerPathData, options);
    const innerLineEl = shapeSvg.insert(() => innerLine, ":first-child");
    innerLineEl.attr("class", "line");
    cylinder2 = shapeSvg.insert(() => outerNode, ":first-child");
    cylinder2.attr("class", "basic label-container");
    if (cssStyles) {
      cylinder2.attr("style", cssStyles);
    }
  } else {
    const pathData = createCylinderPathD2(0, 0, w, h, rx, ry, outerOffset);
    cylinder2 = shapeSvg.insert("path", ":first-child").attr("d", pathData).attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles)).attr("style", nodeStyles);
  }
  cylinder2.attr("label-offset-y", ry);
  cylinder2.attr("transform", `translate(${-w / 2}, ${-(h / 2 + ry)})`);
  updateNodeBounds(node, cylinder2);
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + ry - (bbox.y - (bbox.top ?? 0))})`
  );
  node.intersect = function(point) {
    const pos = intersect_default.rect(node, point);
    const x = pos.x - (node.x ?? 0);
    if (rx != 0 && (Math.abs(x) < (node.width ?? 0) / 2 || Math.abs(x) == (node.width ?? 0) / 2 && Math.abs(pos.y - (node.y ?? 0)) > (node.height ?? 0) / 2 - ry)) {
      let y = ry * ry * (1 - x * x / (rx * rx));
      if (y > 0) {
        y = Math.sqrt(y);
      }
      y = ry - y;
      if (point.y - (node.y ?? 0) > 0) {
        y = -y;
      }
      pos.y += y;
    }
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(linedCylinder, "linedCylinder");

// src/rendering-util/rendering-elements/shapes/linedWaveEdgedRect.ts

async function linedWaveEdgedRect(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const waveAmplitude = h / 4;
  const finalH = h + waveAmplitude;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: -w / 2 - w / 2 * 0.1, y: -finalH / 2 },
    { x: -w / 2 - w / 2 * 0.1, y: finalH / 2 },
    ...generateFullSineWavePoints(
      -w / 2 - w / 2 * 0.1,
      finalH / 2,
      w / 2 + w / 2 * 0.1,
      finalH / 2,
      waveAmplitude,
      0.8
    ),
    { x: w / 2 + w / 2 * 0.1, y: -finalH / 2 },
    { x: -w / 2 - w / 2 * 0.1, y: -finalH / 2 },
    { x: -w / 2, y: -finalH / 2 },
    { x: -w / 2, y: finalH / 2 * 1.1 },
    { x: -w / 2, y: -finalH / 2 }
  ];
  const poly = rc.polygon(
    points.map((p) => [p.x, p.y]),
    options
  );
  const waveEdgeRect = shapeSvg.insert(() => poly, ":first-child");
  waveEdgeRect.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    waveEdgeRect.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    waveEdgeRect.selectAll("path").attr("style", nodeStyles);
  }
  waveEdgeRect.attr("transform", `translate(0,${-waveAmplitude / 2})`);
  label.attr(
    "transform",
    `translate(${-w / 2 + (node.padding ?? 0) + w / 2 * 0.1 / 2 - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) - waveAmplitude / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, waveEdgeRect);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(linedWaveEdgedRect, "linedWaveEdgedRect");

// src/rendering-util/rendering-elements/shapes/multiRect.ts

async function multiRect(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const rectOffset = 5;
  const x = -w / 2;
  const y = -h / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  const outerPathPoints = [
    { x: x - rectOffset, y: y + rectOffset },
    { x: x - rectOffset, y: y + h + rectOffset },
    { x: x + w - rectOffset, y: y + h + rectOffset },
    { x: x + w - rectOffset, y: y + h },
    { x: x + w, y: y + h },
    { x: x + w, y: y + h - rectOffset },
    { x: x + w + rectOffset, y: y + h - rectOffset },
    { x: x + w + rectOffset, y: y - rectOffset },
    { x: x + rectOffset, y: y - rectOffset },
    { x: x + rectOffset, y },
    { x, y },
    { x, y: y + rectOffset }
  ];
  const innerPathPoints = [
    { x, y: y + rectOffset },
    { x: x + w - rectOffset, y: y + rectOffset },
    { x: x + w - rectOffset, y: y + h },
    { x: x + w, y: y + h },
    { x: x + w, y },
    { x, y }
  ];
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const outerPath = createPathFromPoints(outerPathPoints);
  const outerNode = rc.path(outerPath, options);
  const innerPath = createPathFromPoints(innerPathPoints);
  const innerNode = rc.path(innerPath, { ...options, fill: "none" });
  const multiRect2 = shapeSvg.insert(() => innerNode, ":first-child");
  multiRect2.insert(() => outerNode, ":first-child");
  multiRect2.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    multiRect2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    multiRect2.selectAll("path").attr("style", nodeStyles);
  }
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) - rectOffset - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + rectOffset - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, multiRect2);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, outerPathPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(multiRect, "multiRect");

// src/rendering-util/rendering-elements/shapes/multiWaveEdgedRectangle.ts

async function multiWaveEdgedRectangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const waveAmplitude = h / 4;
  const finalH = h + waveAmplitude;
  const x = -w / 2;
  const y = -finalH / 2;
  const rectOffset = 5;
  const { cssStyles } = node;
  const wavePoints = generateFullSineWavePoints(
    x - rectOffset,
    y + finalH + rectOffset,
    x + w - rectOffset,
    y + finalH + rectOffset,
    waveAmplitude,
    0.8
  );
  const lastWavePoint = wavePoints?.[wavePoints.length - 1];
  const outerPathPoints = [
    { x: x - rectOffset, y: y + rectOffset },
    { x: x - rectOffset, y: y + finalH + rectOffset },
    ...wavePoints,
    { x: x + w - rectOffset, y: lastWavePoint.y - rectOffset },
    { x: x + w, y: lastWavePoint.y - rectOffset },
    { x: x + w, y: lastWavePoint.y - 2 * rectOffset },
    { x: x + w + rectOffset, y: lastWavePoint.y - 2 * rectOffset },
    { x: x + w + rectOffset, y: y - rectOffset },
    { x: x + rectOffset, y: y - rectOffset },
    { x: x + rectOffset, y },
    { x, y },
    { x, y: y + rectOffset }
  ];
  const innerPathPoints = [
    { x, y: y + rectOffset },
    { x: x + w - rectOffset, y: y + rectOffset },
    { x: x + w - rectOffset, y: lastWavePoint.y - rectOffset },
    { x: x + w, y: lastWavePoint.y - rectOffset },
    { x: x + w, y },
    { x, y }
  ];
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const outerPath = createPathFromPoints(outerPathPoints);
  const outerNode = rc.path(outerPath, options);
  const innerPath = createPathFromPoints(innerPathPoints);
  const innerNode = rc.path(innerPath, options);
  const shape = shapeSvg.insert(() => outerNode, ":first-child");
  shape.insert(() => innerNode);
  shape.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    shape.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    shape.selectAll("path").attr("style", nodeStyles);
  }
  shape.attr("transform", `translate(0,${-waveAmplitude / 2})`);
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) - rectOffset - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + rectOffset - waveAmplitude / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, shape);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, outerPathPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(multiWaveEdgedRectangle, "multiWaveEdgedRectangle");

// src/rendering-util/rendering-elements/shapes/note.ts

async function note(parent, node, { config: { themeVariables } }) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const useHtmlLabels = node.useHtmlLabels || (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig)().flowchart?.htmlLabels !== false;
  if (!useHtmlLabels) {
    node.centerLabel = true;
  }
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const totalWidth = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const totalHeight = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const x = -totalWidth / 2;
  const y = -totalHeight / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {
    fill: themeVariables.noteBkgColor,
    stroke: themeVariables.noteBorderColor
  });
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const noteShapeNode = rc.rectangle(x, y, totalWidth, totalHeight, options);
  const rect2 = shapeSvg.insert(() => noteShapeNode, ":first-child");
  rect2.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    rect2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    rect2.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(note, "note");

// src/rendering-util/rendering-elements/shapes/question.ts

var createDecisionBoxPathD = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, size) => {
  return [
    `M${x + size / 2},${y}`,
    `L${x + size},${y - size / 2}`,
    `L${x + size / 2},${y - size}`,
    `L${x},${y - size / 2}`,
    "Z"
  ].join(" ");
}, "createDecisionBoxPathD");
async function question(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + node.padding;
  const h = bbox.height + node.padding;
  const s = w + h;
  const points = [
    { x: s / 2, y: 0 },
    { x: s, y: -s / 2 },
    { x: s / 2, y: -s },
    { x: 0, y: -s / 2 }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createDecisionBoxPathD(0, 0, s);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-s / 2}, ${s / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, s, s, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.debug(
      "APA12 Intersect called SPLIT\npoint:",
      point,
      "\nnode:\n",
      node,
      "\nres:",
      intersect_default.polygon(node, points, point)
    );
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(question, "question");

// src/rendering-util/rendering-elements/shapes/rectLeftInvArrow.ts

async function rect_left_inv_arrow(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0), node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0), node?.height ?? 0);
  const x = -w / 2;
  const y = -h / 2;
  const notch = y / 2;
  const points = [
    { x: x + notch, y },
    { x, y: 0 },
    { x: x + notch, y: -y },
    { x: -x, y: -y },
    { x: -x, y }
  ];
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const pathData = createPathFromPoints(points);
  const roughNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => roughNode, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectAll("path").attr("style", nodeStyles);
  }
  polygon.attr("transform", `translate(${-notch / 2},0)`);
  label.attr(
    "transform",
    `translate(${-notch / 2 - bbox.width / 2 - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(rect_left_inv_arrow, "rect_left_inv_arrow");

// src/rendering-util/rendering-elements/shapes/rectWithTitle.ts


async function rectWithTitle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  let classes;
  if (!node.cssClasses) {
    classes = "node default";
  } else {
    classes = "node " + node.cssClasses;
  }
  const shapeSvg = parent.insert("g").attr("class", classes).attr("id", node.domId || node.id);
  const g = shapeSvg.insert("g");
  const label = shapeSvg.insert("g").attr("class", "label").attr("style", nodeStyles);
  const description = node.description;
  const title = node.label;
  const text2 = label.node().appendChild(await createLabel_default(title, node.labelStyle, true, true));
  let bbox = { width: 0, height: 0 };
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)()?.flowchart?.htmlLabels)) {
    const div2 = text2.children[0];
    const dv2 = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div2.getBoundingClientRect();
    dv2.attr("width", bbox.width);
    dv2.attr("height", bbox.height);
  }
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Text 2", description);
  const textRows = description || [];
  const titleBox = text2.getBBox();
  const descr = label.node().appendChild(
    await createLabel_default(
      textRows.join ? textRows.join("<br/>") : textRows,
      node.labelStyle,
      true,
      true
    )
  );
  const div = descr.children[0];
  const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(descr);
  bbox = div.getBoundingClientRect();
  dv.attr("width", bbox.width);
  dv.attr("height", bbox.height);
  const halfPadding = (node.padding || 0) / 2;
  (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(descr).attr(
    "transform",
    "translate( " + (bbox.width > titleBox.width ? 0 : (titleBox.width - bbox.width) / 2) + ", " + (titleBox.height + halfPadding + 5) + ")"
  );
  (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2).attr(
    "transform",
    "translate( " + (bbox.width < titleBox.width ? 0 : -(titleBox.width - bbox.width) / 2) + ", 0)"
  );
  bbox = label.node().getBBox();
  label.attr(
    "transform",
    "translate(" + -bbox.width / 2 + ", " + (-bbox.height / 2 - halfPadding + 3) + ")"
  );
  const totalWidth = bbox.width + (node.padding || 0);
  const totalHeight = bbox.height + (node.padding || 0);
  const x = -bbox.width / 2 - halfPadding;
  const y = -bbox.height / 2 - halfPadding;
  let rect2;
  let innerLine;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const roughNode = rc.path(
      createRoundedRectPathD(x, y, totalWidth, totalHeight, node.rx || 0),
      options
    );
    const roughLine = rc.line(
      -bbox.width / 2 - halfPadding,
      -bbox.height / 2 - halfPadding + titleBox.height + halfPadding,
      bbox.width / 2 + halfPadding,
      -bbox.height / 2 - halfPadding + titleBox.height + halfPadding,
      options
    );
    innerLine = shapeSvg.insert(() => {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.debug("Rough node insert CXC", roughNode);
      return roughLine;
    }, ":first-child");
    rect2 = shapeSvg.insert(() => {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.debug("Rough node insert CXC", roughNode);
      return roughNode;
    }, ":first-child");
  } else {
    rect2 = g.insert("rect", ":first-child");
    innerLine = g.insert("line");
    rect2.attr("class", "outer title-state").attr("style", nodeStyles).attr("x", -bbox.width / 2 - halfPadding).attr("y", -bbox.height / 2 - halfPadding).attr("width", bbox.width + (node.padding || 0)).attr("height", bbox.height + (node.padding || 0));
    innerLine.attr("class", "divider").attr("x1", -bbox.width / 2 - halfPadding).attr("x2", bbox.width / 2 + halfPadding).attr("y1", -bbox.height / 2 - halfPadding + titleBox.height + halfPadding).attr("y2", -bbox.height / 2 - halfPadding + titleBox.height + halfPadding);
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(rectWithTitle, "rectWithTitle");

// src/rendering-util/rendering-elements/shapes/roundedRect.ts
async function roundedRect(parent, node) {
  const options = {
    rx: 5,
    ry: 5,
    classes: "",
    labelPaddingX: (node?.padding || 0) * 1,
    labelPaddingY: (node?.padding || 0) * 1
  };
  return drawRect(parent, node, options);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(roundedRect, "roundedRect");

// src/rendering-util/rendering-elements/shapes/shadedProcess.ts

async function shadedProcess(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const halfPadding = node?.padding ?? 0;
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const x = -bbox.width / 2 - halfPadding;
  const y = -bbox.height / 2 - halfPadding;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x, y },
    { x: x + w + 8, y },
    { x: x + w + 8, y: y + h },
    { x: x - 8, y: y + h },
    { x: x - 8, y },
    { x, y },
    { x, y: y + h }
  ];
  const roughNode = rc.polygon(
    points.map((p) => [p.x, p.y]),
    options
  );
  const rect2 = shapeSvg.insert(() => roughNode, ":first-child");
  rect2.attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
  if (nodeStyles && node.look !== "handDrawn") {
    rect2.selectAll("path").attr("style", nodeStyles);
  }
  if (cssStyles && node.look !== "handDrawn") {
    rect2.selectAll("path").attr("style", nodeStyles);
  }
  label.attr(
    "transform",
    `translate(${-w / 2 + 4 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(shadedProcess, "shadedProcess");

// src/rendering-util/rendering-elements/shapes/slopedRect.ts

async function slopedRect(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const x = -w / 2;
  const y = -h / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x, y },
    { x, y: y + h },
    { x: x + w, y: y + h },
    { x: x + w, y: y - h / 2 }
  ];
  const pathData = createPathFromPoints(points);
  const shapeNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => shapeNode, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", nodeStyles);
  }
  polygon.attr("transform", `translate(0, ${h / 4})`);
  label.attr(
    "transform",
    `translate(${-w / 2 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))}, ${-h / 4 + (node.padding ?? 0) - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(slopedRect, "slopedRect");

// src/rendering-util/rendering-elements/shapes/squareRect.ts
async function squareRect2(parent, node) {
  const options = {
    rx: 0,
    ry: 0,
    classes: "",
    labelPaddingX: (node?.padding || 0) * 2,
    labelPaddingY: (node?.padding || 0) * 1
  };
  return drawRect(parent, node, options);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(squareRect2, "squareRect");

// src/rendering-util/rendering-elements/shapes/stadium.ts

async function stadium(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const h = bbox.height + node.padding;
  const w = bbox.width + h / 4 + node.padding;
  let rect2;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createRoundedRectPathD(-w / 2, -h / 2, w, h, h / 2);
    const roughNode = rc.path(pathData, options);
    rect2 = shapeSvg.insert(() => roughNode, ":first-child");
    rect2.attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
  } else {
    rect2 = shapeSvg.insert("rect", ":first-child");
    rect2.attr("class", "basic label-container").attr("style", nodeStyles).attr("rx", h / 2).attr("ry", h / 2).attr("x", -w / 2).attr("y", -h / 2).attr("width", w).attr("height", h);
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(stadium, "stadium");

// src/rendering-util/rendering-elements/shapes/state.ts
async function state(parent, node) {
  const options = {
    rx: 5,
    ry: 5,
    classes: "flowchart-node"
  };
  return drawRect(parent, node, options);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(state, "state");

// src/rendering-util/rendering-elements/shapes/stateEnd.ts

function stateEnd(parent, node, { config: { themeVariables } }) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { cssStyles } = node;
  const { lineColor, stateBorder, nodeBorder } = themeVariables;
  const shapeSvg = parent.insert("g").attr("class", "node default").attr("id", node.domId || node.id);
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const roughNode = rc.circle(0, 0, 14, {
    ...options,
    stroke: lineColor,
    strokeWidth: 2
  });
  const innerFill = stateBorder ?? nodeBorder;
  const roughInnerNode = rc.circle(0, 0, 5, {
    ...options,
    fill: innerFill,
    stroke: innerFill,
    strokeWidth: 2,
    fillStyle: "solid"
  });
  const circle2 = shapeSvg.insert(() => roughNode, ":first-child");
  circle2.insert(() => roughInnerNode);
  if (cssStyles) {
    circle2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles) {
    circle2.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, circle2);
  node.intersect = function(point) {
    return intersect_default.circle(node, 7, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(stateEnd, "stateEnd");

// src/rendering-util/rendering-elements/shapes/stateStart.ts

function stateStart(parent, node, { config: { themeVariables } }) {
  const { lineColor } = themeVariables;
  const shapeSvg = parent.insert("g").attr("class", "node default").attr("id", node.domId || node.id);
  let circle2;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const roughNode = rc.circle(0, 0, 14, solidStateFill(lineColor));
    circle2 = shapeSvg.insert(() => roughNode);
    circle2.attr("class", "state-start").attr("r", 7).attr("width", 14).attr("height", 14);
  } else {
    circle2 = shapeSvg.insert("circle", ":first-child");
    circle2.attr("class", "state-start").attr("r", 7).attr("width", 14).attr("height", 14);
  }
  updateNodeBounds(node, circle2);
  node.intersect = function(point) {
    return intersect_default.circle(node, 7, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(stateStart, "stateStart");

// src/rendering-util/rendering-elements/shapes/subroutine.ts

async function subroutine(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const halfPadding = (node?.padding || 0) / 2;
  const w = bbox.width + node.padding;
  const h = bbox.height + node.padding;
  const x = -bbox.width / 2 - halfPadding;
  const y = -bbox.height / 2 - halfPadding;
  const points = [
    { x: 0, y: 0 },
    { x: w, y: 0 },
    { x: w, y: -h },
    { x: 0, y: -h },
    { x: 0, y: 0 },
    { x: -8, y: 0 },
    { x: w + 8, y: 0 },
    { x: w + 8, y: -h },
    { x: -8, y: -h },
    { x: -8, y: 0 }
  ];
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const roughNode = rc.rectangle(x - 8, y, w + 16, h, options);
    const l1 = rc.line(x, y, x, y + h, options);
    const l2 = rc.line(x + w, y, x + w, y + h, options);
    shapeSvg.insert(() => l1, ":first-child");
    shapeSvg.insert(() => l2, ":first-child");
    const rect2 = shapeSvg.insert(() => roughNode, ":first-child");
    const { cssStyles } = node;
    rect2.attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles));
    updateNodeBounds(node, rect2);
  } else {
    const el = insertPolygonShape(shapeSvg, w, h, points);
    if (nodeStyles) {
      el.attr("style", nodeStyles);
    }
    updateNodeBounds(node, el);
  }
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(subroutine, "subroutine");

// src/rendering-util/rendering-elements/shapes/taggedRect.ts

async function taggedRect(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const x = -w / 2;
  const y = -h / 2;
  const tagWidth = 0.2 * h;
  const tagHeight = 0.2 * h;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  const rectPoints = [
    { x: x - tagWidth / 2, y },
    { x: x + w + tagWidth / 2, y },
    { x: x + w + tagWidth / 2, y: y + h },
    { x: x - tagWidth / 2, y: y + h }
  ];
  const tagPoints = [
    { x: x + w - tagWidth / 2, y: y + h },
    { x: x + w + tagWidth / 2, y: y + h },
    { x: x + w + tagWidth / 2, y: y + h - tagHeight }
  ];
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const rectPath = createPathFromPoints(rectPoints);
  const rectNode = rc.path(rectPath, options);
  const tagPath = createPathFromPoints(tagPoints);
  const tagNode = rc.path(tagPath, { ...options, fillStyle: "solid" });
  const taggedRect2 = shapeSvg.insert(() => tagNode, ":first-child");
  taggedRect2.insert(() => rectNode, ":first-child");
  taggedRect2.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    taggedRect2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    taggedRect2.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, taggedRect2);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, rectPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(taggedRect, "taggedRect");

// src/rendering-util/rendering-elements/shapes/taggedWaveEdgedRectangle.ts

async function taggedWaveEdgedRectangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const waveAmplitude = h / 4;
  const tagWidth = 0.2 * w;
  const tagHeight = 0.2 * h;
  const finalH = h + waveAmplitude;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: -w / 2 - w / 2 * 0.1, y: finalH / 2 },
    ...generateFullSineWavePoints(
      -w / 2 - w / 2 * 0.1,
      finalH / 2,
      w / 2 + w / 2 * 0.1,
      finalH / 2,
      waveAmplitude,
      0.8
    ),
    { x: w / 2 + w / 2 * 0.1, y: -finalH / 2 },
    { x: -w / 2 - w / 2 * 0.1, y: -finalH / 2 }
  ];
  const x = -w / 2 + w / 2 * 0.1;
  const y = -finalH / 2 - tagHeight * 0.4;
  const tagPoints = [
    { x: x + w - tagWidth, y: (y + h) * 1.4 },
    { x: x + w, y: y + h - tagHeight },
    { x: x + w, y: (y + h) * 0.9 },
    ...generateFullSineWavePoints(
      x + w,
      (y + h) * 1.3,
      x + w - tagWidth,
      (y + h) * 1.5,
      -h * 0.03,
      0.5
    )
  ];
  const waveEdgeRectPath = createPathFromPoints(points);
  const waveEdgeRectNode = rc.path(waveEdgeRectPath, options);
  const taggedWaveEdgeRectPath = createPathFromPoints(tagPoints);
  const taggedWaveEdgeRectNode = rc.path(taggedWaveEdgeRectPath, {
    ...options,
    fillStyle: "solid"
  });
  const waveEdgeRect = shapeSvg.insert(() => taggedWaveEdgeRectNode, ":first-child");
  waveEdgeRect.insert(() => waveEdgeRectNode, ":first-child");
  waveEdgeRect.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    waveEdgeRect.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    waveEdgeRect.selectAll("path").attr("style", nodeStyles);
  }
  waveEdgeRect.attr("transform", `translate(0,${-waveAmplitude / 2})`);
  label.attr(
    "transform",
    `translate(${-w / 2 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) - waveAmplitude / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, waveEdgeRect);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(taggedWaveEdgedRectangle, "taggedWaveEdgedRectangle");

// src/rendering-util/rendering-elements/shapes/text.ts
async function text(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const totalWidth = Math.max(bbox.width + node.padding, node?.width || 0);
  const totalHeight = Math.max(bbox.height + node.padding, node?.height || 0);
  const x = -totalWidth / 2;
  const y = -totalHeight / 2;
  const rect2 = shapeSvg.insert("rect", ":first-child");
  rect2.attr("class", "text").attr("style", nodeStyles).attr("rx", 0).attr("ry", 0).attr("x", x).attr("y", y).attr("width", totalWidth).attr("height", totalHeight);
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(text, "text");

// src/rendering-util/rendering-elements/shapes/tiltedCylinder.ts

var createCylinderPathD3 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return `M${x},${y}
    a${rx},${ry} 0,0,1 ${0},${-height}
    l${width},${0}
    a${rx},${ry} 0,0,1 ${0},${height}
    M${width},${-height}
    a${rx},${ry} 0,0,0 ${0},${height}
    l${-width},${0}`;
}, "createCylinderPathD");
var createOuterCylinderPathD3 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return [
    `M${x},${y}`,
    `M${x + width},${y}`,
    `a${rx},${ry} 0,0,0 ${0},${-height}`,
    `l${-width},0`,
    `a${rx},${ry} 0,0,0 ${0},${height}`,
    `l${width},0`
  ].join(" ");
}, "createOuterCylinderPathD");
var createInnerCylinderPathD3 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((x, y, width, height, rx, ry) => {
  return [`M${x + width / 2},${-height / 2}`, `a${rx},${ry} 0,0,0 0,${height}`].join(" ");
}, "createInnerCylinderPathD");
async function tiltedCylinder(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label, halfPadding } = await labelHelper(
    parent,
    node,
    getNodeClasses(node)
  );
  const labelPadding = node.look === "neo" ? halfPadding * 2 : halfPadding;
  const h = bbox.height + labelPadding;
  const ry = h / 2;
  const rx = ry / (2.5 + h / 50);
  const w = bbox.width + rx + labelPadding;
  const { cssStyles } = node;
  let cylinder2;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const outerPathData = createOuterCylinderPathD3(0, 0, w, h, rx, ry);
    const innerPathData = createInnerCylinderPathD3(0, 0, w, h, rx, ry);
    const outerNode = rc.path(outerPathData, userNodeOverrides(node, {}));
    const innerLine = rc.path(innerPathData, userNodeOverrides(node, { fill: "none" }));
    cylinder2 = shapeSvg.insert(() => innerLine, ":first-child");
    cylinder2 = shapeSvg.insert(() => outerNode, ":first-child");
    cylinder2.attr("class", "basic label-container");
    if (cssStyles) {
      cylinder2.attr("style", cssStyles);
    }
  } else {
    const pathData = createCylinderPathD3(0, 0, w, h, rx, ry);
    cylinder2 = shapeSvg.insert("path", ":first-child").attr("d", pathData).attr("class", "basic label-container").attr("style", (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.handleUndefinedAttr)(cssStyles)).attr("style", nodeStyles);
    cylinder2.attr("class", "basic label-container");
    if (cssStyles) {
      cylinder2.selectAll("path").attr("style", cssStyles);
    }
    if (nodeStyles) {
      cylinder2.selectAll("path").attr("style", nodeStyles);
    }
  }
  cylinder2.attr("label-offset-x", rx);
  cylinder2.attr("transform", `translate(${-w / 2}, ${h / 2} )`);
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) - rx - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, cylinder2);
  node.intersect = function(point) {
    const pos = intersect_default.rect(node, point);
    const y = pos.y - (node.y ?? 0);
    if (ry != 0 && (Math.abs(y) < (node.height ?? 0) / 2 || Math.abs(y) == (node.height ?? 0) / 2 && Math.abs(pos.x - (node.x ?? 0)) > (node.width ?? 0) / 2 - rx)) {
      let x = rx * rx * (1 - y * y / (ry * ry));
      if (x != 0) {
        x = Math.sqrt(Math.abs(x));
      }
      x = rx - x;
      if (point.x - (node.x ?? 0) > 0) {
        x = -x;
      }
      pos.x += x;
    }
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(tiltedCylinder, "tiltedCylinder");

// src/rendering-util/rendering-elements/shapes/trapezoid.ts

async function trapezoid(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const w = bbox.width + node.padding;
  const h = bbox.height + node.padding;
  const points = [
    { x: -3 * h / 6, y: 0 },
    { x: w + 3 * h / 6, y: 0 },
    { x: w, y: -h },
    { x: 0, y: -h }
  ];
  let polygon;
  const { cssStyles } = node;
  if (node.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options = userNodeOverrides(node, {});
    const pathData = createPathFromPoints(points);
    const roughNode = rc.path(pathData, options);
    polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-w / 2}, ${h / 2})`);
    if (cssStyles) {
      polygon.attr("style", cssStyles);
    }
  } else {
    polygon = insertPolygonShape(shapeSvg, w, h, points);
  }
  if (nodeStyles) {
    polygon.attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(trapezoid, "trapezoid");

// src/rendering-util/rendering-elements/shapes/trapezoidalPentagon.ts

async function trapezoidalPentagon(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const minWidth = 60, minHeight = 20;
  const w = Math.max(minWidth, bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(minHeight, bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: -w / 2 * 0.8, y: -h / 2 },
    { x: w / 2 * 0.8, y: -h / 2 },
    { x: w / 2, y: -h / 2 * 0.6 },
    { x: w / 2, y: h / 2 },
    { x: -w / 2, y: h / 2 },
    { x: -w / 2, y: -h / 2 * 0.6 }
  ];
  const pathData = createPathFromPoints(points);
  const shapeNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => shapeNode, ":first-child");
  polygon.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, polygon);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(trapezoidalPentagon, "trapezoidalPentagon");

// src/rendering-util/rendering-elements/shapes/triangle.ts

async function triangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const useHtmlLabels = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)().flowchart?.htmlLabels);
  const w = bbox.width + (node.padding ?? 0);
  const h = w + bbox.height;
  const tw = w + bbox.height;
  const points = [
    { x: 0, y: 0 },
    { x: tw, y: 0 },
    { x: tw / 2, y: -h }
  ];
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const pathData = createPathFromPoints(points);
  const roughNode = rc.path(pathData, options);
  const polygon = shapeSvg.insert(() => roughNode, ":first-child").attr("transform", `translate(${-h / 2}, ${h / 2})`);
  if (cssStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    polygon.selectChildren("path").attr("style", nodeStyles);
  }
  node.width = w;
  node.height = h;
  updateNodeBounds(node, polygon);
  label.attr(
    "transform",
    `translate(${-bbox.width / 2 - (bbox.x - (bbox.left ?? 0))}, ${h / 2 - (bbox.height + (node.padding ?? 0) / (useHtmlLabels ? 2 : 1) - (bbox.y - (bbox.top ?? 0)))})`
  );
  node.intersect = function(point) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.info("Triangle intersect", node, points, point);
    return intersect_default.polygon(node, points, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(triangle, "triangle");

// src/rendering-util/rendering-elements/shapes/waveEdgedRectangle.ts

async function waveEdgedRectangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const waveAmplitude = h / 8;
  const finalH = h + waveAmplitude;
  const { cssStyles } = node;
  const minWidth = 70;
  const widthDif = minWidth - w;
  const extraW = widthDif > 0 ? widthDif / 2 : 0;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: -w / 2 - extraW, y: finalH / 2 },
    ...generateFullSineWavePoints(
      -w / 2 - extraW,
      finalH / 2,
      w / 2 + extraW,
      finalH / 2,
      waveAmplitude,
      0.8
    ),
    { x: w / 2 + extraW, y: -finalH / 2 },
    { x: -w / 2 - extraW, y: -finalH / 2 }
  ];
  const waveEdgeRectPath = createPathFromPoints(points);
  const waveEdgeRectNode = rc.path(waveEdgeRectPath, options);
  const waveEdgeRect = shapeSvg.insert(() => waveEdgeRectNode, ":first-child");
  waveEdgeRect.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    waveEdgeRect.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    waveEdgeRect.selectAll("path").attr("style", nodeStyles);
  }
  waveEdgeRect.attr("transform", `translate(0,${-waveAmplitude / 2})`);
  label.attr(
    "transform",
    `translate(${-w / 2 + (node.padding ?? 0) - (bbox.x - (bbox.left ?? 0))},${-h / 2 + (node.padding ?? 0) - waveAmplitude - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, waveEdgeRect);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(waveEdgedRectangle, "waveEdgedRectangle");

// src/rendering-util/rendering-elements/shapes/waveRectangle.ts

async function waveRectangle(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox } = await labelHelper(parent, node, getNodeClasses(node));
  const minWidth = 100;
  const minHeight = 50;
  const baseWidth = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const baseHeight = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const aspectRatio = baseWidth / baseHeight;
  let w = baseWidth;
  let h = baseHeight;
  if (w > h * aspectRatio) {
    h = w / aspectRatio;
  } else {
    w = h * aspectRatio;
  }
  w = Math.max(w, minWidth);
  h = Math.max(h, minHeight);
  const waveAmplitude = Math.min(h * 0.2, h / 4);
  const finalH = h + waveAmplitude * 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const points = [
    { x: -w / 2, y: finalH / 2 },
    ...generateFullSineWavePoints(-w / 2, finalH / 2, w / 2, finalH / 2, waveAmplitude, 1),
    { x: w / 2, y: -finalH / 2 },
    ...generateFullSineWavePoints(w / 2, -finalH / 2, -w / 2, -finalH / 2, waveAmplitude, -1)
  ];
  const waveRectPath = createPathFromPoints(points);
  const waveRectNode = rc.path(waveRectPath, options);
  const waveRect = shapeSvg.insert(() => waveRectNode, ":first-child");
  waveRect.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    waveRect.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    waveRect.selectAll("path").attr("style", nodeStyles);
  }
  updateNodeBounds(node, waveRect);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, points, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(waveRectangle, "waveRectangle");

// src/rendering-util/rendering-elements/shapes/windowPane.ts

async function windowPane(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const { shapeSvg, bbox, label } = await labelHelper(parent, node, getNodeClasses(node));
  const w = Math.max(bbox.width + (node.padding ?? 0) * 2, node?.width ?? 0);
  const h = Math.max(bbox.height + (node.padding ?? 0) * 2, node?.height ?? 0);
  const rectOffset = 5;
  const x = -w / 2;
  const y = -h / 2;
  const { cssStyles } = node;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  const outerPathPoints = [
    { x: x - rectOffset, y: y - rectOffset },
    { x: x - rectOffset, y: y + h },
    { x: x + w, y: y + h },
    { x: x + w, y: y - rectOffset }
  ];
  const path = `M${x - rectOffset},${y - rectOffset} L${x + w},${y - rectOffset} L${x + w},${y + h} L${x - rectOffset},${y + h} L${x - rectOffset},${y - rectOffset}
                M${x - rectOffset},${y} L${x + w},${y}
                M${x},${y - rectOffset} L${x},${y + h}`;
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const no = rc.path(path, options);
  const windowPane2 = shapeSvg.insert(() => no, ":first-child");
  windowPane2.attr("transform", `translate(${rectOffset / 2}, ${rectOffset / 2})`);
  windowPane2.attr("class", "basic label-container");
  if (cssStyles && node.look !== "handDrawn") {
    windowPane2.selectAll("path").attr("style", cssStyles);
  }
  if (nodeStyles && node.look !== "handDrawn") {
    windowPane2.selectAll("path").attr("style", nodeStyles);
  }
  label.attr(
    "transform",
    `translate(${-(bbox.width / 2) + rectOffset / 2 - (bbox.x - (bbox.left ?? 0))}, ${-(bbox.height / 2) + rectOffset / 2 - (bbox.y - (bbox.top ?? 0))})`
  );
  updateNodeBounds(node, windowPane2);
  node.intersect = function(point) {
    const pos = intersect_default.polygon(node, outerPathPoints, point);
    return pos;
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(windowPane, "windowPane");

// src/rendering-util/rendering-elements/shapes/erBox.ts


async function erBox(parent, node) {
  const entityNode = node;
  if (entityNode.alias) {
    node.label = entityNode.alias;
  }
  if (node.look === "handDrawn") {
    const { themeVariables: themeVariables2 } = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig)();
    const { background } = themeVariables2;
    const backgroundNode = {
      ...node,
      id: node.id + "-background",
      look: "default",
      cssStyles: ["stroke: none", `fill: ${background}`]
    };
    await erBox(parent, backgroundNode);
  }
  const config = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig)();
  node.useHtmlLabels = config.htmlLabels;
  let PADDING = config.er?.diagramPadding ?? 10;
  let TEXT_PADDING = config.er?.entityPadding ?? 6;
  const { cssStyles } = node;
  const { labelStyles } = styles2String(node);
  if (entityNode.attributes.length === 0 && node.label) {
    const options2 = {
      rx: 0,
      ry: 0,
      labelPaddingX: PADDING,
      labelPaddingY: PADDING * 1.5,
      classes: ""
    };
    if ((0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.calculateTextWidth)(node.label, config) + options2.labelPaddingX * 2 < config.er.minEntityWidth) {
      node.width = config.er.minEntityWidth;
    }
    const shapeSvg2 = await drawRect(parent, node, options2);
    if (!(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(config.htmlLabels)) {
      const textElement = shapeSvg2.select("text");
      const bbox = textElement.node()?.getBBox();
      textElement.attr("transform", `translate(${-bbox.width / 2}, 0)`);
    }
    return shapeSvg2;
  }
  if (!config.htmlLabels) {
    PADDING *= 1.25;
    TEXT_PADDING *= 1.25;
  }
  let cssClasses = getNodeClasses(node);
  if (!cssClasses) {
    cssClasses = "node default";
  }
  const shapeSvg = parent.insert("g").attr("class", cssClasses).attr("id", node.domId || node.id);
  const nameBBox = await addText(shapeSvg, node.label ?? "", config, 0, 0, ["name"], labelStyles);
  nameBBox.height += TEXT_PADDING;
  let yOffset = 0;
  const yOffsets = [];
  let maxTypeWidth = 0;
  let maxNameWidth = 0;
  let maxKeysWidth = 0;
  let maxCommentWidth = 0;
  let keysPresent = true;
  let commentPresent = true;
  for (const attribute of entityNode.attributes) {
    const typeBBox = await addText(
      shapeSvg,
      attribute.type,
      config,
      0,
      yOffset,
      ["attribute-type"],
      labelStyles
    );
    maxTypeWidth = Math.max(maxTypeWidth, typeBBox.width + PADDING);
    const nameBBox2 = await addText(
      shapeSvg,
      attribute.name,
      config,
      0,
      yOffset,
      ["attribute-name"],
      labelStyles
    );
    maxNameWidth = Math.max(maxNameWidth, nameBBox2.width + PADDING);
    const keysBBox = await addText(
      shapeSvg,
      attribute.keys.join(),
      config,
      0,
      yOffset,
      ["attribute-keys"],
      labelStyles
    );
    maxKeysWidth = Math.max(maxKeysWidth, keysBBox.width + PADDING);
    const commentBBox = await addText(
      shapeSvg,
      attribute.comment,
      config,
      0,
      yOffset,
      ["attribute-comment"],
      labelStyles
    );
    maxCommentWidth = Math.max(maxCommentWidth, commentBBox.width + PADDING);
    yOffset += Math.max(typeBBox.height, nameBBox2.height, keysBBox.height, commentBBox.height) + TEXT_PADDING;
    yOffsets.push(yOffset);
  }
  yOffsets.pop();
  let totalWidthSections = 4;
  if (maxKeysWidth <= PADDING) {
    keysPresent = false;
    maxKeysWidth = 0;
    totalWidthSections--;
  }
  if (maxCommentWidth <= PADDING) {
    commentPresent = false;
    maxCommentWidth = 0;
    totalWidthSections--;
  }
  const shapeBBox = shapeSvg.node().getBBox();
  if (nameBBox.width + PADDING * 2 - (maxTypeWidth + maxNameWidth + maxKeysWidth + maxCommentWidth) > 0) {
    const difference = nameBBox.width + PADDING * 2 - (maxTypeWidth + maxNameWidth + maxKeysWidth + maxCommentWidth);
    maxTypeWidth += difference / totalWidthSections;
    maxNameWidth += difference / totalWidthSections;
    if (maxKeysWidth > 0) {
      maxKeysWidth += difference / totalWidthSections;
    }
    if (maxCommentWidth > 0) {
      maxCommentWidth += difference / totalWidthSections;
    }
  }
  const maxWidth = maxTypeWidth + maxNameWidth + maxKeysWidth + maxCommentWidth;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const w = Math.max(shapeBBox.width + PADDING * 2, node?.width || 0, maxWidth);
  const h = Math.max(shapeBBox.height + (yOffsets[0] || yOffset) + TEXT_PADDING, node?.height || 0);
  const x = -w / 2;
  const y = -h / 2;
  shapeSvg.selectAll("g:not(:first-child)").each((_, i, nodes) => {
    const text2 = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(nodes[i]);
    const transform = text2.attr("transform");
    let translateX = 0;
    let translateY = 0;
    if (transform) {
      const regex = RegExp(/translate\(([^,]+),([^)]+)\)/);
      const translate = regex.exec(transform);
      if (translate) {
        translateX = parseFloat(translate[1]);
        translateY = parseFloat(translate[2]);
        if (text2.attr("class").includes("attribute-name")) {
          translateX += maxTypeWidth;
        } else if (text2.attr("class").includes("attribute-keys")) {
          translateX += maxTypeWidth + maxNameWidth;
        } else if (text2.attr("class").includes("attribute-comment")) {
          translateX += maxTypeWidth + maxNameWidth + maxKeysWidth;
        }
      }
    }
    text2.attr(
      "transform",
      `translate(${x + PADDING / 2 + translateX}, ${translateY + y + nameBBox.height + TEXT_PADDING / 2})`
    );
  });
  shapeSvg.select(".name").attr("transform", "translate(" + -nameBBox.width / 2 + ", " + (y + TEXT_PADDING / 2) + ")");
  const roughRect = rc.rectangle(x, y, w, h, options);
  const rect2 = shapeSvg.insert(() => roughRect, ":first-child").attr("style", cssStyles.join(""));
  const { themeVariables } = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig)();
  const { rowEven, rowOdd, nodeBorder } = themeVariables;
  yOffsets.push(0);
  for (const [i, yOffset2] of yOffsets.entries()) {
    if (i === 0 && yOffsets.length > 1) {
      continue;
    }
    const isEven = i % 2 === 0 && yOffset2 !== 0;
    const roughRect2 = rc.rectangle(x, nameBBox.height + y + yOffset2, w, nameBBox.height, {
      ...options,
      fill: isEven ? rowEven : rowOdd,
      stroke: nodeBorder
    });
    shapeSvg.insert(() => roughRect2, "g.label").attr("style", cssStyles.join("")).attr("class", `row-rect-${i % 2 === 0 ? "even" : "odd"}`);
  }
  let roughLine = rc.line(x, nameBBox.height + y, w + x, nameBBox.height + y, options);
  shapeSvg.insert(() => roughLine).attr("class", "divider");
  roughLine = rc.line(maxTypeWidth + x, nameBBox.height + y, maxTypeWidth + x, h + y, options);
  shapeSvg.insert(() => roughLine).attr("class", "divider");
  if (keysPresent) {
    roughLine = rc.line(
      maxTypeWidth + maxNameWidth + x,
      nameBBox.height + y,
      maxTypeWidth + maxNameWidth + x,
      h + y,
      options
    );
    shapeSvg.insert(() => roughLine).attr("class", "divider");
  }
  if (commentPresent) {
    roughLine = rc.line(
      maxTypeWidth + maxNameWidth + maxKeysWidth + x,
      nameBBox.height + y,
      maxTypeWidth + maxNameWidth + maxKeysWidth + x,
      h + y,
      options
    );
    shapeSvg.insert(() => roughLine).attr("class", "divider");
  }
  for (const yOffset2 of yOffsets) {
    roughLine = rc.line(
      x,
      nameBBox.height + y + yOffset2,
      w + x,
      nameBBox.height + y + yOffset2,
      options
    );
    shapeSvg.insert(() => roughLine).attr("class", "divider");
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(erBox, "erBox");
async function addText(shapeSvg, labelText, config, translateX = 0, translateY = 0, classes = [], style = "") {
  const label = shapeSvg.insert("g").attr("class", `label ${classes.join(" ")}`).attr("transform", `translate(${translateX}, ${translateY})`).attr("style", style);
  if (labelText !== (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.parseGenericTypes)(labelText)) {
    labelText = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.parseGenericTypes)(labelText);
    labelText = labelText.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
  }
  const text2 = label.node().appendChild(
    await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(
      label,
      labelText,
      {
        width: (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.calculateTextWidth)(labelText, config) + 100,
        style,
        useHtmlLabels: config.htmlLabels
      },
      config
    )
  );
  if (labelText.includes("&lt;") || labelText.includes("&gt;")) {
    let child = text2.children[0];
    child.textContent = child.textContent.replaceAll("&lt;", "<").replaceAll("&gt;", ">");
    while (child.childNodes[0]) {
      child = child.childNodes[0];
      child.textContent = child.textContent.replaceAll("&lt;", "<").replaceAll("&gt;", ">");
    }
  }
  let bbox = text2.getBBox();
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(config.htmlLabels)) {
    const div = text2.children[0];
    div.style.textAlign = "start";
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  return bbox;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(addText, "addText");

// src/rendering-util/rendering-elements/shapes/classBox.ts



// src/diagrams/class/shapeUtil.ts

async function textHelper(parent, node, config, useHtmlLabels, GAP = config.class.padding ?? 12) {
  const TEXT_PADDING = !useHtmlLabels ? 3 : 0;
  const shapeSvg = parent.insert("g").attr("class", getNodeClasses(node)).attr("id", node.domId || node.id);
  let annotationGroup = null;
  let labelGroup = null;
  let membersGroup = null;
  let methodsGroup = null;
  let annotationGroupHeight = 0;
  let labelGroupHeight = 0;
  let membersGroupHeight = 0;
  annotationGroup = shapeSvg.insert("g").attr("class", "annotation-group text");
  if (node.annotations.length > 0) {
    const annotation = node.annotations[0];
    await addText2(annotationGroup, { text: `\xAB${annotation}\xBB` }, 0);
    const annotationGroupBBox = annotationGroup.node().getBBox();
    annotationGroupHeight = annotationGroupBBox.height;
  }
  labelGroup = shapeSvg.insert("g").attr("class", "label-group text");
  await addText2(labelGroup, node, 0, ["font-weight: bolder"]);
  const labelGroupBBox = labelGroup.node().getBBox();
  labelGroupHeight = labelGroupBBox.height;
  membersGroup = shapeSvg.insert("g").attr("class", "members-group text");
  let yOffset = 0;
  for (const member of node.members) {
    const height = await addText2(membersGroup, member, yOffset, [member.parseClassifier()]);
    yOffset += height + TEXT_PADDING;
  }
  membersGroupHeight = membersGroup.node().getBBox().height;
  if (membersGroupHeight <= 0) {
    membersGroupHeight = GAP / 2;
  }
  methodsGroup = shapeSvg.insert("g").attr("class", "methods-group text");
  let methodsYOffset = 0;
  for (const method of node.methods) {
    const height = await addText2(methodsGroup, method, methodsYOffset, [method.parseClassifier()]);
    methodsYOffset += height + TEXT_PADDING;
  }
  let bbox = shapeSvg.node().getBBox();
  if (annotationGroup !== null) {
    const annotationGroupBBox = annotationGroup.node().getBBox();
    annotationGroup.attr("transform", `translate(${-annotationGroupBBox.width / 2})`);
  }
  labelGroup.attr("transform", `translate(${-labelGroupBBox.width / 2}, ${annotationGroupHeight})`);
  bbox = shapeSvg.node().getBBox();
  membersGroup.attr(
    "transform",
    `translate(${0}, ${annotationGroupHeight + labelGroupHeight + GAP * 2})`
  );
  bbox = shapeSvg.node().getBBox();
  methodsGroup.attr(
    "transform",
    `translate(${0}, ${annotationGroupHeight + labelGroupHeight + (membersGroupHeight ? membersGroupHeight + GAP * 4 : GAP * 2)})`
  );
  bbox = shapeSvg.node().getBBox();
  return { shapeSvg, bbox };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(textHelper, "textHelper");
async function addText2(parentGroup, node, yOffset, styles = []) {
  const textEl = parentGroup.insert("g").attr("class", "label").attr("style", styles.join("; "));
  const config = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig)();
  let useHtmlLabels = "useHtmlLabels" in node ? node.useHtmlLabels : (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(config.htmlLabels) ?? true;
  let textContent = "";
  if ("text" in node) {
    textContent = node.text;
  } else {
    textContent = node.label;
  }
  if (!useHtmlLabels && textContent.startsWith("\\")) {
    textContent = textContent.substring(1);
  }
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.hasKatex)(textContent)) {
    useHtmlLabels = true;
  }
  const text2 = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(
    textEl,
    (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeText2)((0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.decodeEntities)(textContent)),
    {
      width: (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.calculateTextWidth)(textContent, config) + 50,
      // Add room for error when splitting text into multiple lines
      classes: "markdown-node-label",
      useHtmlLabels
    },
    config
  );
  let bbox;
  let numberOfLines = 1;
  if (!useHtmlLabels) {
    if (styles.includes("font-weight: bolder")) {
      (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2).selectAll("tspan").attr("font-weight", "");
    }
    numberOfLines = text2.children.length;
    const textChild = text2.children[0];
    if (text2.textContent === "" || text2.textContent.includes("&gt")) {
      textChild.textContent = textContent[0] + textContent.substring(1).replaceAll("&gt;", ">").replaceAll("&lt;", "<").trim();
      const preserveSpace = textContent[1] === " ";
      if (preserveSpace) {
        textChild.textContent = textChild.textContent[0] + " " + textChild.textContent.substring(1);
      }
    }
    if (textChild.textContent === "undefined") {
      textChild.textContent = "";
    }
    bbox = text2.getBBox();
  } else {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    numberOfLines = div.innerHTML.split("<br>").length;
    if (div.innerHTML.includes("</math>")) {
      numberOfLines += div.innerHTML.split("<mrow>").length - 1;
    }
    const images = div.getElementsByTagName("img");
    if (images) {
      const noImgText = textContent.replace(/<img[^>]*>/g, "").trim() === "";
      await Promise.all(
        [...images].map(
          (img) => new Promise((res) => {
            function setupImage() {
              img.style.display = "flex";
              img.style.flexDirection = "column";
              if (noImgText) {
                const bodyFontSize = config.fontSize?.toString() ?? window.getComputedStyle(document.body).fontSize;
                const enlargingFactor = 5;
                const width = parseInt(bodyFontSize, 10) * enlargingFactor + "px";
                img.style.minWidth = width;
                img.style.maxWidth = width;
              } else {
                img.style.width = "100%";
              }
              res(img);
            }
            (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(setupImage, "setupImage");
            setTimeout(() => {
              if (img.complete) {
                setupImage();
              }
            });
            img.addEventListener("error", setupImage);
            img.addEventListener("load", setupImage);
          })
        )
      );
    }
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  textEl.attr("transform", "translate(0," + (-bbox.height / (2 * numberOfLines) + yOffset) + ")");
  return bbox.height;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(addText2, "addText");

// src/rendering-util/rendering-elements/shapes/classBox.ts
async function classBox(parent, node) {
  const config = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const PADDING = config.class.padding ?? 12;
  const GAP = PADDING;
  const useHtmlLabels = node.useHtmlLabels ?? (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.evaluate)(config.htmlLabels) ?? true;
  const classNode = node;
  classNode.annotations = classNode.annotations ?? [];
  classNode.members = classNode.members ?? [];
  classNode.methods = classNode.methods ?? [];
  const { shapeSvg, bbox } = await textHelper(parent, node, config, useHtmlLabels, GAP);
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  node.cssStyles = classNode.styles || "";
  const styles = classNode.styles?.join(";") || nodeStyles || "";
  if (!node.cssStyles) {
    node.cssStyles = styles.replaceAll("!important", "").split(";");
  }
  const renderExtraBox = classNode.members.length === 0 && classNode.methods.length === 0 && !config.class?.hideEmptyMembersBox;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const w = bbox.width;
  let h = bbox.height;
  if (classNode.members.length === 0 && classNode.methods.length === 0) {
    h += GAP;
  } else if (classNode.members.length > 0 && classNode.methods.length === 0) {
    h += GAP * 2;
  }
  const x = -w / 2;
  const y = -h / 2;
  const roughRect = rc.rectangle(
    x - PADDING,
    y - PADDING - (renderExtraBox ? PADDING : classNode.members.length === 0 && classNode.methods.length === 0 ? -PADDING / 2 : 0),
    w + 2 * PADDING,
    h + 2 * PADDING + (renderExtraBox ? PADDING * 2 : classNode.members.length === 0 && classNode.methods.length === 0 ? -PADDING : 0),
    options
  );
  const rect2 = shapeSvg.insert(() => roughRect, ":first-child");
  rect2.attr("class", "basic label-container");
  const rectBBox = rect2.node().getBBox();
  shapeSvg.selectAll(".text").each((_, i, nodes) => {
    const text2 = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(nodes[i]);
    const transform = text2.attr("transform");
    let translateY = 0;
    if (transform) {
      const regex = RegExp(/translate\(([^,]+),([^)]+)\)/);
      const translate = regex.exec(transform);
      if (translate) {
        translateY = parseFloat(translate[2]);
      }
    }
    let newTranslateY = translateY + y + PADDING - (renderExtraBox ? PADDING : classNode.members.length === 0 && classNode.methods.length === 0 ? -PADDING / 2 : 0);
    if (!useHtmlLabels) {
      newTranslateY -= 4;
    }
    let newTranslateX = x;
    if (text2.attr("class").includes("label-group") || text2.attr("class").includes("annotation-group")) {
      newTranslateX = -text2.node()?.getBBox().width / 2 || 0;
      shapeSvg.selectAll("text").each(function(_2, i2, nodes2) {
        if (window.getComputedStyle(nodes2[i2]).textAnchor === "middle") {
          newTranslateX = 0;
        }
      });
    }
    text2.attr("transform", `translate(${newTranslateX}, ${newTranslateY})`);
  });
  const annotationGroupHeight = shapeSvg.select(".annotation-group").node().getBBox().height - (renderExtraBox ? PADDING / 2 : 0) || 0;
  const labelGroupHeight = shapeSvg.select(".label-group").node().getBBox().height - (renderExtraBox ? PADDING / 2 : 0) || 0;
  const membersGroupHeight = shapeSvg.select(".members-group").node().getBBox().height - (renderExtraBox ? PADDING / 2 : 0) || 0;
  if (classNode.members.length > 0 || classNode.methods.length > 0 || renderExtraBox) {
    const roughLine = rc.line(
      rectBBox.x,
      annotationGroupHeight + labelGroupHeight + y + PADDING,
      rectBBox.x + rectBBox.width,
      annotationGroupHeight + labelGroupHeight + y + PADDING,
      options
    );
    const line = shapeSvg.insert(() => roughLine);
    line.attr("class", "divider").attr("style", styles);
  }
  if (renderExtraBox || classNode.members.length > 0 || classNode.methods.length > 0) {
    const roughLine = rc.line(
      rectBBox.x,
      annotationGroupHeight + labelGroupHeight + membersGroupHeight + y + GAP * 2 + PADDING,
      rectBBox.x + rectBBox.width,
      annotationGroupHeight + labelGroupHeight + membersGroupHeight + y + PADDING + GAP * 2,
      options
    );
    const line = shapeSvg.insert(() => roughLine);
    line.attr("class", "divider").attr("style", styles);
  }
  if (classNode.look !== "handDrawn") {
    shapeSvg.selectAll("path").attr("style", styles);
  }
  rect2.select(":nth-child(2)").attr("style", styles);
  shapeSvg.selectAll(".divider").select("path").attr("style", styles);
  if (node.labelStyle) {
    shapeSvg.selectAll("span").attr("style", node.labelStyle);
  } else {
    shapeSvg.selectAll("span").attr("style", styles);
  }
  if (!useHtmlLabels) {
    const colorRegex = RegExp(/color\s*:\s*([^;]*)/);
    const match = colorRegex.exec(styles);
    if (match) {
      const colorStyle = match[0].replace("color", "fill");
      shapeSvg.selectAll("tspan").attr("style", colorStyle);
    } else if (labelStyles) {
      const match2 = colorRegex.exec(labelStyles);
      if (match2) {
        const colorStyle = match2[0].replace("color", "fill");
        shapeSvg.selectAll("tspan").attr("style", colorStyle);
      }
    }
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(classBox, "classBox");

// src/rendering-util/rendering-elements/shapes/requirementBox.ts


async function requirementBox(parent, node) {
  const { labelStyles, nodeStyles } = styles2String(node);
  node.labelStyle = labelStyles;
  const requirementNode = node;
  const elementNode = node;
  const padding = 20;
  const gap = 20;
  const isRequirementNode = "verifyMethod" in node;
  const classes = getNodeClasses(node);
  const shapeSvg = parent.insert("g").attr("class", classes).attr("id", node.domId ?? node.id);
  let typeHeight;
  if (isRequirementNode) {
    typeHeight = await addText3(
      shapeSvg,
      `&lt;&lt;${requirementNode.type}&gt;&gt;`,
      0,
      node.labelStyle
    );
  } else {
    typeHeight = await addText3(shapeSvg, "&lt;&lt;Element&gt;&gt;", 0, node.labelStyle);
  }
  let accumulativeHeight = typeHeight;
  const nameHeight = await addText3(
    shapeSvg,
    requirementNode.name,
    accumulativeHeight,
    node.labelStyle + "; font-weight: bold;"
  );
  accumulativeHeight += nameHeight + gap;
  if (isRequirementNode) {
    const idHeight = await addText3(
      shapeSvg,
      `${requirementNode.requirementId ? `Id: ${requirementNode.requirementId}` : ""}`,
      accumulativeHeight,
      node.labelStyle
    );
    accumulativeHeight += idHeight;
    const textHeight = await addText3(
      shapeSvg,
      `${requirementNode.text ? `Text: ${requirementNode.text}` : ""}`,
      accumulativeHeight,
      node.labelStyle
    );
    accumulativeHeight += textHeight;
    const riskHeight = await addText3(
      shapeSvg,
      `${requirementNode.risk ? `Risk: ${requirementNode.risk}` : ""}`,
      accumulativeHeight,
      node.labelStyle
    );
    accumulativeHeight += riskHeight;
    await addText3(
      shapeSvg,
      `${requirementNode.verifyMethod ? `Verification: ${requirementNode.verifyMethod}` : ""}`,
      accumulativeHeight,
      node.labelStyle
    );
  } else {
    const typeHeight2 = await addText3(
      shapeSvg,
      `${elementNode.type ? `Type: ${elementNode.type}` : ""}`,
      accumulativeHeight,
      node.labelStyle
    );
    accumulativeHeight += typeHeight2;
    await addText3(
      shapeSvg,
      `${elementNode.docRef ? `Doc Ref: ${elementNode.docRef}` : ""}`,
      accumulativeHeight,
      node.labelStyle
    );
  }
  const totalWidth = (shapeSvg.node()?.getBBox().width ?? 200) + padding;
  const totalHeight = (shapeSvg.node()?.getBBox().height ?? 200) + padding;
  const x = -totalWidth / 2;
  const y = -totalHeight / 2;
  const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
  const options = userNodeOverrides(node, {});
  if (node.look !== "handDrawn") {
    options.roughness = 0;
    options.fillStyle = "solid";
  }
  const roughRect = rc.rectangle(x, y, totalWidth, totalHeight, options);
  const rect2 = shapeSvg.insert(() => roughRect, ":first-child");
  rect2.attr("class", "basic label-container").attr("style", nodeStyles);
  shapeSvg.selectAll(".label").each((_, i, nodes) => {
    const text2 = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(nodes[i]);
    const transform = text2.attr("transform");
    let translateX = 0;
    let translateY = 0;
    if (transform) {
      const regex = RegExp(/translate\(([^,]+),([^)]+)\)/);
      const translate = regex.exec(transform);
      if (translate) {
        translateX = parseFloat(translate[1]);
        translateY = parseFloat(translate[2]);
      }
    }
    const newTranslateY = translateY - totalHeight / 2;
    let newTranslateX = x + padding / 2;
    if (i === 0 || i === 1) {
      newTranslateX = translateX;
    }
    text2.attr("transform", `translate(${newTranslateX}, ${newTranslateY + padding})`);
  });
  if (accumulativeHeight > typeHeight + nameHeight + gap) {
    const roughLine = rc.line(
      x,
      y + typeHeight + nameHeight + gap,
      x + totalWidth,
      y + typeHeight + nameHeight + gap,
      options
    );
    const dividerLine = shapeSvg.insert(() => roughLine);
    dividerLine.attr("style", nodeStyles);
  }
  updateNodeBounds(node, rect2);
  node.intersect = function(point) {
    return intersect_default.rect(node, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(requirementBox, "requirementBox");
async function addText3(parentGroup, inputText, yOffset, style = "") {
  if (inputText === "") {
    return 0;
  }
  const textEl = parentGroup.insert("g").attr("class", "label").attr("style", style);
  const config = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.getConfig2)();
  const useHtmlLabels = config.htmlLabels ?? true;
  const text2 = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_2__.createText)(
    textEl,
    (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.sanitizeText2)((0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.decodeEntities)(inputText)),
    {
      width: (0,_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_3__.calculateTextWidth)(inputText, config) + 50,
      // Add room for error when splitting text into multiple lines
      classes: "markdown-node-label",
      useHtmlLabels,
      style
    },
    config
  );
  let bbox;
  if (!useHtmlLabels) {
    const textChild = text2.children[0];
    for (const child of textChild.children) {
      child.textContent = child.textContent.replaceAll("&gt;", ">").replaceAll("&lt;", "<");
      if (style) {
        child.setAttribute("style", style);
      }
    }
    bbox = text2.getBBox();
    bbox.height += 6;
  } else {
    const div = text2.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_5__.select)(text2);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  textEl.attr("transform", `translate(${-bbox.width / 2},${-bbox.height / 2 + yOffset})`);
  return bbox.height;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(addText3, "addText");

// src/rendering-util/rendering-elements/shapes/kanbanItem.ts

var colorFromPriority = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((priority) => {
  switch (priority) {
    case "Very High":
      return "red";
    case "High":
      return "orange";
    case "Medium":
      return null;
    // no stroke
    case "Low":
      return "blue";
    case "Very Low":
      return "lightblue";
  }
}, "colorFromPriority");
async function kanbanItem(parent, kanbanNode, { config }) {
  const { labelStyles, nodeStyles } = styles2String(kanbanNode);
  kanbanNode.labelStyle = labelStyles || "";
  const labelPaddingX = 10;
  const orgWidth = kanbanNode.width;
  kanbanNode.width = (kanbanNode.width ?? 200) - 10;
  const {
    shapeSvg,
    bbox,
    label: labelElTitle
  } = await labelHelper(parent, kanbanNode, getNodeClasses(kanbanNode));
  const padding = kanbanNode.padding || 10;
  let ticketUrl = "";
  let link;
  if ("ticket" in kanbanNode && kanbanNode.ticket && config?.kanban?.ticketBaseUrl) {
    ticketUrl = config?.kanban?.ticketBaseUrl.replace("#TICKET#", kanbanNode.ticket);
    link = shapeSvg.insert("svg:a", ":first-child").attr("class", "kanban-ticket-link").attr("xlink:href", ticketUrl).attr("target", "_blank");
  }
  const options = {
    useHtmlLabels: kanbanNode.useHtmlLabels,
    labelStyle: kanbanNode.labelStyle || "",
    width: kanbanNode.width,
    img: kanbanNode.img,
    padding: kanbanNode.padding || 8,
    centerLabel: false
  };
  let labelEl, bbox2;
  if (link) {
    ({ label: labelEl, bbox: bbox2 } = await insertLabel(
      link,
      "ticket" in kanbanNode && kanbanNode.ticket || "",
      options
    ));
  } else {
    ({ label: labelEl, bbox: bbox2 } = await insertLabel(
      shapeSvg,
      "ticket" in kanbanNode && kanbanNode.ticket || "",
      options
    ));
  }
  const { label: labelElAssigned, bbox: bboxAssigned } = await insertLabel(
    shapeSvg,
    "assigned" in kanbanNode && kanbanNode.assigned || "",
    options
  );
  kanbanNode.width = orgWidth;
  const labelPaddingY = 10;
  const totalWidth = kanbanNode?.width || 0;
  const heightAdj = Math.max(bbox2.height, bboxAssigned.height) / 2;
  const totalHeight = Math.max(bbox.height + labelPaddingY * 2, kanbanNode?.height || 0) + heightAdj;
  const x = -totalWidth / 2;
  const y = -totalHeight / 2;
  labelElTitle.attr(
    "transform",
    "translate(" + (padding - totalWidth / 2) + ", " + (-heightAdj - bbox.height / 2) + ")"
  );
  labelEl.attr(
    "transform",
    "translate(" + (padding - totalWidth / 2) + ", " + (-heightAdj + bbox.height / 2) + ")"
  );
  labelElAssigned.attr(
    "transform",
    "translate(" + (padding + totalWidth / 2 - bboxAssigned.width - 2 * labelPaddingX) + ", " + (-heightAdj + bbox.height / 2) + ")"
  );
  let rect2;
  const { rx, ry } = kanbanNode;
  const { cssStyles } = kanbanNode;
  if (kanbanNode.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_6__["default"].svg(shapeSvg);
    const options2 = userNodeOverrides(kanbanNode, {});
    const roughNode = rx || ry ? rc.path(createRoundedRectPathD(x, y, totalWidth, totalHeight, rx || 0), options2) : rc.rectangle(x, y, totalWidth, totalHeight, options2);
    rect2 = shapeSvg.insert(() => roughNode, ":first-child");
    rect2.attr("class", "basic label-container").attr("style", cssStyles ? cssStyles : null);
  } else {
    rect2 = shapeSvg.insert("rect", ":first-child");
    rect2.attr("class", "basic label-container __APA__").attr("style", nodeStyles).attr("rx", rx ?? 5).attr("ry", ry ?? 5).attr("x", x).attr("y", y).attr("width", totalWidth).attr("height", totalHeight);
    const priority = "priority" in kanbanNode && kanbanNode.priority;
    if (priority) {
      const line = shapeSvg.append("line");
      const lineX = x + 2;
      const y1 = y + Math.floor((rx ?? 0) / 2);
      const y2 = y + totalHeight - Math.floor((rx ?? 0) / 2);
      line.attr("x1", lineX).attr("y1", y1).attr("x2", lineX).attr("y2", y2).attr("stroke-width", "4").attr("stroke", colorFromPriority(priority));
    }
  }
  updateNodeBounds(kanbanNode, rect2);
  kanbanNode.height = totalHeight;
  kanbanNode.intersect = function(point) {
    return intersect_default.rect(kanbanNode, point);
  };
  return shapeSvg;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(kanbanItem, "kanbanItem");

// src/rendering-util/rendering-elements/shapes.ts
var shapesDefs = [
  {
    semanticName: "Process",
    name: "Rectangle",
    shortName: "rect",
    description: "Standard process shape",
    aliases: ["proc", "process", "rectangle"],
    internalAliases: ["squareRect"],
    handler: squareRect2
  },
  {
    semanticName: "Event",
    name: "Rounded Rectangle",
    shortName: "rounded",
    description: "Represents an event",
    aliases: ["event"],
    internalAliases: ["roundedRect"],
    handler: roundedRect
  },
  {
    semanticName: "Terminal Point",
    name: "Stadium",
    shortName: "stadium",
    description: "Terminal point",
    aliases: ["terminal", "pill"],
    handler: stadium
  },
  {
    semanticName: "Subprocess",
    name: "Framed Rectangle",
    shortName: "fr-rect",
    description: "Subprocess",
    aliases: ["subprocess", "subproc", "framed-rectangle", "subroutine"],
    handler: subroutine
  },
  {
    semanticName: "Database",
    name: "Cylinder",
    shortName: "cyl",
    description: "Database storage",
    aliases: ["db", "database", "cylinder"],
    handler: cylinder
  },
  {
    semanticName: "Start",
    name: "Circle",
    shortName: "circle",
    description: "Starting point",
    aliases: ["circ"],
    handler: circle
  },
  {
    semanticName: "Decision",
    name: "Diamond",
    shortName: "diam",
    description: "Decision-making step",
    aliases: ["decision", "diamond", "question"],
    handler: question
  },
  {
    semanticName: "Prepare Conditional",
    name: "Hexagon",
    shortName: "hex",
    description: "Preparation or condition step",
    aliases: ["hexagon", "prepare"],
    handler: hexagon
  },
  {
    semanticName: "Data Input/Output",
    name: "Lean Right",
    shortName: "lean-r",
    description: "Represents input or output",
    aliases: ["lean-right", "in-out"],
    internalAliases: ["lean_right"],
    handler: lean_right
  },
  {
    semanticName: "Data Input/Output",
    name: "Lean Left",
    shortName: "lean-l",
    description: "Represents output or input",
    aliases: ["lean-left", "out-in"],
    internalAliases: ["lean_left"],
    handler: lean_left
  },
  {
    semanticName: "Priority Action",
    name: "Trapezoid Base Bottom",
    shortName: "trap-b",
    description: "Priority action",
    aliases: ["priority", "trapezoid-bottom", "trapezoid"],
    handler: trapezoid
  },
  {
    semanticName: "Manual Operation",
    name: "Trapezoid Base Top",
    shortName: "trap-t",
    description: "Represents a manual task",
    aliases: ["manual", "trapezoid-top", "inv-trapezoid"],
    internalAliases: ["inv_trapezoid"],
    handler: inv_trapezoid
  },
  {
    semanticName: "Stop",
    name: "Double Circle",
    shortName: "dbl-circ",
    description: "Represents a stop point",
    aliases: ["double-circle"],
    internalAliases: ["doublecircle"],
    handler: doublecircle
  },
  {
    semanticName: "Text Block",
    name: "Text Block",
    shortName: "text",
    description: "Text block",
    handler: text
  },
  {
    semanticName: "Card",
    name: "Notched Rectangle",
    shortName: "notch-rect",
    description: "Represents a card",
    aliases: ["card", "notched-rectangle"],
    handler: card
  },
  {
    semanticName: "Lined/Shaded Process",
    name: "Lined Rectangle",
    shortName: "lin-rect",
    description: "Lined process shape",
    aliases: ["lined-rectangle", "lined-process", "lin-proc", "shaded-process"],
    handler: shadedProcess
  },
  {
    semanticName: "Start",
    name: "Small Circle",
    shortName: "sm-circ",
    description: "Small starting point",
    aliases: ["start", "small-circle"],
    internalAliases: ["stateStart"],
    handler: stateStart
  },
  {
    semanticName: "Stop",
    name: "Framed Circle",
    shortName: "fr-circ",
    description: "Stop point",
    aliases: ["stop", "framed-circle"],
    internalAliases: ["stateEnd"],
    handler: stateEnd
  },
  {
    semanticName: "Fork/Join",
    name: "Filled Rectangle",
    shortName: "fork",
    description: "Fork or join in process flow",
    aliases: ["join"],
    internalAliases: ["forkJoin"],
    handler: forkJoin
  },
  {
    semanticName: "Collate",
    name: "Hourglass",
    shortName: "hourglass",
    description: "Represents a collate operation",
    aliases: ["hourglass", "collate"],
    handler: hourglass
  },
  {
    semanticName: "Comment",
    name: "Curly Brace",
    shortName: "brace",
    description: "Adds a comment",
    aliases: ["comment", "brace-l"],
    handler: curlyBraceLeft
  },
  {
    semanticName: "Comment Right",
    name: "Curly Brace",
    shortName: "brace-r",
    description: "Adds a comment",
    handler: curlyBraceRight
  },
  {
    semanticName: "Comment with braces on both sides",
    name: "Curly Braces",
    shortName: "braces",
    description: "Adds a comment",
    handler: curlyBraces
  },
  {
    semanticName: "Com Link",
    name: "Lightning Bolt",
    shortName: "bolt",
    description: "Communication link",
    aliases: ["com-link", "lightning-bolt"],
    handler: lightningBolt
  },
  {
    semanticName: "Document",
    name: "Document",
    shortName: "doc",
    description: "Represents a document",
    aliases: ["doc", "document"],
    handler: waveEdgedRectangle
  },
  {
    semanticName: "Delay",
    name: "Half-Rounded Rectangle",
    shortName: "delay",
    description: "Represents a delay",
    aliases: ["half-rounded-rectangle"],
    handler: halfRoundedRectangle
  },
  {
    semanticName: "Direct Access Storage",
    name: "Horizontal Cylinder",
    shortName: "h-cyl",
    description: "Direct access storage",
    aliases: ["das", "horizontal-cylinder"],
    handler: tiltedCylinder
  },
  {
    semanticName: "Disk Storage",
    name: "Lined Cylinder",
    shortName: "lin-cyl",
    description: "Disk storage",
    aliases: ["disk", "lined-cylinder"],
    handler: linedCylinder
  },
  {
    semanticName: "Display",
    name: "Curved Trapezoid",
    shortName: "curv-trap",
    description: "Represents a display",
    aliases: ["curved-trapezoid", "display"],
    handler: curvedTrapezoid
  },
  {
    semanticName: "Divided Process",
    name: "Divided Rectangle",
    shortName: "div-rect",
    description: "Divided process shape",
    aliases: ["div-proc", "divided-rectangle", "divided-process"],
    handler: dividedRectangle
  },
  {
    semanticName: "Extract",
    name: "Triangle",
    shortName: "tri",
    description: "Extraction process",
    aliases: ["extract", "triangle"],
    handler: triangle
  },
  {
    semanticName: "Internal Storage",
    name: "Window Pane",
    shortName: "win-pane",
    description: "Internal storage",
    aliases: ["internal-storage", "window-pane"],
    handler: windowPane
  },
  {
    semanticName: "Junction",
    name: "Filled Circle",
    shortName: "f-circ",
    description: "Junction point",
    aliases: ["junction", "filled-circle"],
    handler: filledCircle
  },
  {
    semanticName: "Loop Limit",
    name: "Trapezoidal Pentagon",
    shortName: "notch-pent",
    description: "Loop limit step",
    aliases: ["loop-limit", "notched-pentagon"],
    handler: trapezoidalPentagon
  },
  {
    semanticName: "Manual File",
    name: "Flipped Triangle",
    shortName: "flip-tri",
    description: "Manual file operation",
    aliases: ["manual-file", "flipped-triangle"],
    handler: flippedTriangle
  },
  {
    semanticName: "Manual Input",
    name: "Sloped Rectangle",
    shortName: "sl-rect",
    description: "Manual input step",
    aliases: ["manual-input", "sloped-rectangle"],
    handler: slopedRect
  },
  {
    semanticName: "Multi-Document",
    name: "Stacked Document",
    shortName: "docs",
    description: "Multiple documents",
    aliases: ["documents", "st-doc", "stacked-document"],
    handler: multiWaveEdgedRectangle
  },
  {
    semanticName: "Multi-Process",
    name: "Stacked Rectangle",
    shortName: "st-rect",
    description: "Multiple processes",
    aliases: ["procs", "processes", "stacked-rectangle"],
    handler: multiRect
  },
  {
    semanticName: "Stored Data",
    name: "Bow Tie Rectangle",
    shortName: "bow-rect",
    description: "Stored data",
    aliases: ["stored-data", "bow-tie-rectangle"],
    handler: bowTieRect
  },
  {
    semanticName: "Summary",
    name: "Crossed Circle",
    shortName: "cross-circ",
    description: "Summary",
    aliases: ["summary", "crossed-circle"],
    handler: crossedCircle
  },
  {
    semanticName: "Tagged Document",
    name: "Tagged Document",
    shortName: "tag-doc",
    description: "Tagged document",
    aliases: ["tag-doc", "tagged-document"],
    handler: taggedWaveEdgedRectangle
  },
  {
    semanticName: "Tagged Process",
    name: "Tagged Rectangle",
    shortName: "tag-rect",
    description: "Tagged process",
    aliases: ["tagged-rectangle", "tag-proc", "tagged-process"],
    handler: taggedRect
  },
  {
    semanticName: "Paper Tape",
    name: "Flag",
    shortName: "flag",
    description: "Paper tape",
    aliases: ["paper-tape"],
    handler: waveRectangle
  },
  {
    semanticName: "Odd",
    name: "Odd",
    shortName: "odd",
    description: "Odd shape",
    internalAliases: ["rect_left_inv_arrow"],
    handler: rect_left_inv_arrow
  },
  {
    semanticName: "Lined Document",
    name: "Lined Document",
    shortName: "lin-doc",
    description: "Lined document",
    aliases: ["lined-document"],
    handler: linedWaveEdgedRect
  }
];
var generateShapeMap = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(() => {
  const undocumentedShapes = {
    // States
    state,
    choice,
    note,
    // Rectangles
    rectWithTitle,
    labelRect,
    // Icons
    iconSquare,
    iconCircle,
    icon,
    iconRounded,
    imageSquare,
    anchor,
    // Kanban diagram
    kanbanItem,
    // class diagram
    classBox,
    // er diagram
    erBox,
    // Requirement diagram
    requirementBox
  };
  const entries = [
    ...Object.entries(undocumentedShapes),
    ...shapesDefs.flatMap((shape) => {
      const aliases = [
        shape.shortName,
        ..."aliases" in shape ? shape.aliases : [],
        ..."internalAliases" in shape ? shape.internalAliases : []
      ];
      return aliases.map((alias) => [alias, shape.handler]);
    })
  ];
  return Object.fromEntries(entries);
}, "generateShapeMap");
var shapes2 = generateShapeMap();
function isValidShape(shape) {
  return shape in shapes2;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(isValidShape, "isValidShape");

// src/rendering-util/rendering-elements/nodes.ts
var nodeElems = /* @__PURE__ */ new Map();
async function insertNode(elem, node, renderOptions) {
  let newEl;
  let el;
  if (node.shape === "rect") {
    if (node.rx && node.ry) {
      node.shape = "roundedRect";
    } else {
      node.shape = "squareRect";
    }
  }
  const shapeHandler = node.shape ? shapes2[node.shape] : void 0;
  if (!shapeHandler) {
    throw new Error(`No such shape: ${node.shape}. Please check your syntax.`);
  }
  if (node.link) {
    let target;
    if (renderOptions.config.securityLevel === "sandbox") {
      target = "_top";
    } else if (node.linkTarget) {
      target = node.linkTarget || "_blank";
    }
    newEl = elem.insert("svg:a").attr("xlink:href", node.link).attr("target", target ?? null);
    el = await shapeHandler(newEl, node, renderOptions);
  } else {
    el = await shapeHandler(elem, node, renderOptions);
    newEl = el;
  }
  if (node.tooltip) {
    el.attr("title", node.tooltip);
  }
  nodeElems.set(node.id, newEl);
  if (node.haveCallback) {
    newEl.attr("class", newEl.attr("class") + " clickable");
  }
  return newEl;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(insertNode, "insertNode");
var setNodeElem = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((elem, node) => {
  nodeElems.set(node.id, elem);
}, "setNodeElem");
var clear2 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)(() => {
  nodeElems.clear();
}, "clear");
var positionNode = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.__name)((node) => {
  const el = nodeElems.get(node.id);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_4__.log.trace(
    "Transforming node",
    node.diff,
    node,
    "translate(" + (node.x - node.width / 2 - 5) + ", " + node.width / 2 + ")"
  );
  const padding = 8;
  const diff = node.diff || 0;
  if (node.clusterNode) {
    el.attr(
      "transform",
      "translate(" + (node.x + diff - node.width / 2) + ", " + (node.y - node.height / 2 - padding) + ")"
    );
  } else {
    el.attr("transform", "translate(" + node.x + ", " + node.y + ")");
  }
  return diff;
}, "positionNode");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-IIMUDSI4.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-IIMUDSI4.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   insertEdge: () => (/* binding */ insertEdge),
/* harmony export */   insertEdgeLabel: () => (/* binding */ insertEdgeLabel),
/* harmony export */   markers_default: () => (/* binding */ markers_default),
/* harmony export */   positionEdgeLabel: () => (/* binding */ positionEdgeLabel)
/* harmony export */ });
/* harmony import */ var _chunk_VV3M67IP_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-VV3M67IP.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-VV3M67IP.mjs");
/* harmony import */ var _chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-HRU6DDCH.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HRU6DDCH.mjs");
/* harmony import */ var _chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-K557N5IZ.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-K557N5IZ.mjs");
/* harmony import */ var _chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-C3MQ5ANM.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-C3MQ5ANM.mjs");
/* harmony import */ var _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-O4NI6UNU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs");
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var roughjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! roughjs */ "./node_modules/roughjs/bundled/rough.esm.js");







// src/rendering-util/rendering-elements/edges.js



// src/rendering-util/rendering-elements/edgeMarker.ts
var addEdgeMarkers = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((svgPath, edge, url, id, diagramType, strokeColor) => {
  if (edge.arrowTypeStart) {
    addEdgeMarker(svgPath, "start", edge.arrowTypeStart, url, id, diagramType, strokeColor);
  }
  if (edge.arrowTypeEnd) {
    addEdgeMarker(svgPath, "end", edge.arrowTypeEnd, url, id, diagramType, strokeColor);
  }
}, "addEdgeMarkers");
var arrowTypesMap = {
  arrow_cross: { type: "cross", fill: false },
  arrow_point: { type: "point", fill: true },
  arrow_barb: { type: "barb", fill: true },
  arrow_circle: { type: "circle", fill: false },
  aggregation: { type: "aggregation", fill: false },
  extension: { type: "extension", fill: false },
  composition: { type: "composition", fill: true },
  dependency: { type: "dependency", fill: true },
  lollipop: { type: "lollipop", fill: false },
  only_one: { type: "onlyOne", fill: false },
  zero_or_one: { type: "zeroOrOne", fill: false },
  one_or_more: { type: "oneOrMore", fill: false },
  zero_or_more: { type: "zeroOrMore", fill: false },
  requirement_arrow: { type: "requirement_arrow", fill: false },
  requirement_contains: { type: "requirement_contains", fill: false }
};
var addEdgeMarker = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((svgPath, position, arrowType, url, id, diagramType, strokeColor) => {
  const arrowTypeInfo = arrowTypesMap[arrowType];
  if (!arrowTypeInfo) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.warn(`Unknown arrow type: ${arrowType}`);
    return;
  }
  const endMarkerType = arrowTypeInfo.type;
  const suffix = position === "start" ? "Start" : "End";
  const originalMarkerId = `${id}_${diagramType}-${endMarkerType}${suffix}`;
  if (strokeColor && strokeColor.trim() !== "") {
    const colorId = strokeColor.replace(/[^\dA-Za-z]/g, "_");
    const coloredMarkerId = `${originalMarkerId}_${colorId}`;
    if (!document.getElementById(coloredMarkerId)) {
      const originalMarker = document.getElementById(originalMarkerId);
      if (originalMarker) {
        const coloredMarker = originalMarker.cloneNode(true);
        coloredMarker.id = coloredMarkerId;
        const paths = coloredMarker.querySelectorAll("path, circle, line");
        paths.forEach((path) => {
          path.setAttribute("stroke", strokeColor);
          if (arrowTypeInfo.fill) {
            path.setAttribute("fill", strokeColor);
          }
        });
        originalMarker.parentNode?.appendChild(coloredMarker);
      }
    }
    svgPath.attr(`marker-${position}`, `url(${url}#${coloredMarkerId})`);
  } else {
    svgPath.attr(`marker-${position}`, `url(${url}#${originalMarkerId})`);
  }
}, "addEdgeMarker");

// src/rendering-util/rendering-elements/edges.js
var edgeLabels = /* @__PURE__ */ new Map();
var terminalLabels = /* @__PURE__ */ new Map();
var clear = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(() => {
  edgeLabels.clear();
  terminalLabels.clear();
}, "clear");
var getLabelStyles = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((styleArray) => {
  let styles = styleArray ? styleArray.reduce((acc, style) => acc + ";" + style, "") : "";
  return styles;
}, "getLabelStyles");
var insertEdgeLabel = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(async (elem, edge) => {
  let useHtmlLabels = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.evaluate)((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.getConfig2)().flowchart.htmlLabels);
  const labelElement = await (0,_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_3__.createText)(elem, edge.label, {
    style: getLabelStyles(edge.labelStyle),
    useHtmlLabels,
    addSvgBackground: true,
    isNode: false
  });
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.info("abc82", edge, edge.labelType);
  const edgeLabel = elem.insert("g").attr("class", "edgeLabel");
  const label = edgeLabel.insert("g").attr("class", "label");
  label.node().appendChild(labelElement);
  let bbox = labelElement.getBBox();
  if (useHtmlLabels) {
    const div = labelElement.children[0];
    const dv = (0,d3__WEBPACK_IMPORTED_MODULE_6__.select)(labelElement);
    bbox = div.getBoundingClientRect();
    dv.attr("width", bbox.width);
    dv.attr("height", bbox.height);
  }
  label.attr("transform", "translate(" + -bbox.width / 2 + ", " + -bbox.height / 2 + ")");
  edgeLabels.set(edge.id, edgeLabel);
  edge.width = bbox.width;
  edge.height = bbox.height;
  let fo;
  if (edge.startLabelLeft) {
    const startLabelElement = await (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.createLabel_default)(
      edge.startLabelLeft,
      getLabelStyles(edge.labelStyle)
    );
    const startEdgeLabelLeft = elem.insert("g").attr("class", "edgeTerminals");
    const inner = startEdgeLabelLeft.insert("g").attr("class", "inner");
    fo = inner.node().appendChild(startLabelElement);
    const slBox = startLabelElement.getBBox();
    inner.attr("transform", "translate(" + -slBox.width / 2 + ", " + -slBox.height / 2 + ")");
    if (!terminalLabels.get(edge.id)) {
      terminalLabels.set(edge.id, {});
    }
    terminalLabels.get(edge.id).startLeft = startEdgeLabelLeft;
    setTerminalWidth(fo, edge.startLabelLeft);
  }
  if (edge.startLabelRight) {
    const startLabelElement = await (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.createLabel_default)(
      edge.startLabelRight,
      getLabelStyles(edge.labelStyle)
    );
    const startEdgeLabelRight = elem.insert("g").attr("class", "edgeTerminals");
    const inner = startEdgeLabelRight.insert("g").attr("class", "inner");
    fo = startEdgeLabelRight.node().appendChild(startLabelElement);
    inner.node().appendChild(startLabelElement);
    const slBox = startLabelElement.getBBox();
    inner.attr("transform", "translate(" + -slBox.width / 2 + ", " + -slBox.height / 2 + ")");
    if (!terminalLabels.get(edge.id)) {
      terminalLabels.set(edge.id, {});
    }
    terminalLabels.get(edge.id).startRight = startEdgeLabelRight;
    setTerminalWidth(fo, edge.startLabelRight);
  }
  if (edge.endLabelLeft) {
    const endLabelElement = await (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.createLabel_default)(edge.endLabelLeft, getLabelStyles(edge.labelStyle));
    const endEdgeLabelLeft = elem.insert("g").attr("class", "edgeTerminals");
    const inner = endEdgeLabelLeft.insert("g").attr("class", "inner");
    fo = inner.node().appendChild(endLabelElement);
    const slBox = endLabelElement.getBBox();
    inner.attr("transform", "translate(" + -slBox.width / 2 + ", " + -slBox.height / 2 + ")");
    endEdgeLabelLeft.node().appendChild(endLabelElement);
    if (!terminalLabels.get(edge.id)) {
      terminalLabels.set(edge.id, {});
    }
    terminalLabels.get(edge.id).endLeft = endEdgeLabelLeft;
    setTerminalWidth(fo, edge.endLabelLeft);
  }
  if (edge.endLabelRight) {
    const endLabelElement = await (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.createLabel_default)(edge.endLabelRight, getLabelStyles(edge.labelStyle));
    const endEdgeLabelRight = elem.insert("g").attr("class", "edgeTerminals");
    const inner = endEdgeLabelRight.insert("g").attr("class", "inner");
    fo = inner.node().appendChild(endLabelElement);
    const slBox = endLabelElement.getBBox();
    inner.attr("transform", "translate(" + -slBox.width / 2 + ", " + -slBox.height / 2 + ")");
    endEdgeLabelRight.node().appendChild(endLabelElement);
    if (!terminalLabels.get(edge.id)) {
      terminalLabels.set(edge.id, {});
    }
    terminalLabels.get(edge.id).endRight = endEdgeLabelRight;
    setTerminalWidth(fo, edge.endLabelRight);
  }
  return labelElement;
}, "insertEdgeLabel");
function setTerminalWidth(fo, value) {
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.getConfig2)().flowchart.htmlLabels && fo) {
    fo.style.width = value.length * 9 + "px";
    fo.style.height = "12px";
  }
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(setTerminalWidth, "setTerminalWidth");
var positionEdgeLabel = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((edge, paths) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug("Moving label abc88 ", edge.id, edge.label, edgeLabels.get(edge.id), paths);
  let path = paths.updatedPath ? paths.updatedPath : paths.originalPath;
  const siteConfig = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.getConfig2)();
  const { subGraphTitleTotalMargin } = (0,_chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_2__.getSubGraphTitleMargins)(siteConfig);
  if (edge.label) {
    const el = edgeLabels.get(edge.id);
    let x = edge.x;
    let y = edge.y;
    if (path) {
      const pos = _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_4__.utils_default.calcLabelPosition(path);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(
        "Moving label " + edge.label + " from (",
        x,
        ",",
        y,
        ") to (",
        pos.x,
        ",",
        pos.y,
        ") abc88"
      );
      if (paths.updatedPath) {
        x = pos.x;
        y = pos.y;
      }
    }
    el.attr("transform", `translate(${x}, ${y + subGraphTitleTotalMargin / 2})`);
  }
  if (edge.startLabelLeft) {
    const el = terminalLabels.get(edge.id).startLeft;
    let x = edge.x;
    let y = edge.y;
    if (path) {
      const pos = _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_4__.utils_default.calcTerminalLabelPosition(edge.arrowTypeStart ? 10 : 0, "start_left", path);
      x = pos.x;
      y = pos.y;
    }
    el.attr("transform", `translate(${x}, ${y})`);
  }
  if (edge.startLabelRight) {
    const el = terminalLabels.get(edge.id).startRight;
    let x = edge.x;
    let y = edge.y;
    if (path) {
      const pos = _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_4__.utils_default.calcTerminalLabelPosition(
        edge.arrowTypeStart ? 10 : 0,
        "start_right",
        path
      );
      x = pos.x;
      y = pos.y;
    }
    el.attr("transform", `translate(${x}, ${y})`);
  }
  if (edge.endLabelLeft) {
    const el = terminalLabels.get(edge.id).endLeft;
    let x = edge.x;
    let y = edge.y;
    if (path) {
      const pos = _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_4__.utils_default.calcTerminalLabelPosition(edge.arrowTypeEnd ? 10 : 0, "end_left", path);
      x = pos.x;
      y = pos.y;
    }
    el.attr("transform", `translate(${x}, ${y})`);
  }
  if (edge.endLabelRight) {
    const el = terminalLabels.get(edge.id).endRight;
    let x = edge.x;
    let y = edge.y;
    if (path) {
      const pos = _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_4__.utils_default.calcTerminalLabelPosition(edge.arrowTypeEnd ? 10 : 0, "end_right", path);
      x = pos.x;
      y = pos.y;
    }
    el.attr("transform", `translate(${x}, ${y})`);
  }
}, "positionEdgeLabel");
var outsideNode = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((node, point2) => {
  const x = node.x;
  const y = node.y;
  const dx = Math.abs(point2.x - x);
  const dy = Math.abs(point2.y - y);
  const w = node.width / 2;
  const h = node.height / 2;
  return dx >= w || dy >= h;
}, "outsideNode");
var intersection = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((node, outsidePoint, insidePoint) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(`intersection calc abc89:
  outsidePoint: ${JSON.stringify(outsidePoint)}
  insidePoint : ${JSON.stringify(insidePoint)}
  node        : x:${node.x} y:${node.y} w:${node.width} h:${node.height}`);
  const x = node.x;
  const y = node.y;
  const dx = Math.abs(x - insidePoint.x);
  const w = node.width / 2;
  let r = insidePoint.x < outsidePoint.x ? w - dx : w + dx;
  const h = node.height / 2;
  const Q = Math.abs(outsidePoint.y - insidePoint.y);
  const R = Math.abs(outsidePoint.x - insidePoint.x);
  if (Math.abs(y - outsidePoint.y) * w > Math.abs(x - outsidePoint.x) * h) {
    let q = insidePoint.y < outsidePoint.y ? outsidePoint.y - h - y : y - h - outsidePoint.y;
    r = R * q / Q;
    const res = {
      x: insidePoint.x < outsidePoint.x ? insidePoint.x + r : insidePoint.x - R + r,
      y: insidePoint.y < outsidePoint.y ? insidePoint.y + Q - q : insidePoint.y - Q + q
    };
    if (r === 0) {
      res.x = outsidePoint.x;
      res.y = outsidePoint.y;
    }
    if (R === 0) {
      res.x = outsidePoint.x;
    }
    if (Q === 0) {
      res.y = outsidePoint.y;
    }
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(`abc89 top/bottom calc, Q ${Q}, q ${q}, R ${R}, r ${r}`, res);
    return res;
  } else {
    if (insidePoint.x < outsidePoint.x) {
      r = outsidePoint.x - w - x;
    } else {
      r = x - w - outsidePoint.x;
    }
    let q = Q * r / R;
    let _x = insidePoint.x < outsidePoint.x ? insidePoint.x + R - r : insidePoint.x - R + r;
    let _y = insidePoint.y < outsidePoint.y ? insidePoint.y + q : insidePoint.y - q;
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(`sides calc abc89, Q ${Q}, q ${q}, R ${R}, r ${r}`, { _x, _y });
    if (r === 0) {
      _x = outsidePoint.x;
      _y = outsidePoint.y;
    }
    if (R === 0) {
      _x = outsidePoint.x;
    }
    if (Q === 0) {
      _y = outsidePoint.y;
    }
    return { x: _x, y: _y };
  }
}, "intersection");
var cutPathAtIntersect = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((_points, boundaryNode) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.warn("abc88 cutPathAtIntersect", _points, boundaryNode);
  let points = [];
  let lastPointOutside = _points[0];
  let isInside = false;
  _points.forEach((point2) => {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.info("abc88 checking point", point2, boundaryNode);
    if (!outsideNode(boundaryNode, point2) && !isInside) {
      const inter = intersection(boundaryNode, lastPointOutside, point2);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug("abc88 inside", point2, lastPointOutside, inter);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug("abc88 intersection", inter, boundaryNode);
      let pointPresent = false;
      points.forEach((p) => {
        pointPresent = pointPresent || p.x === inter.x && p.y === inter.y;
      });
      if (!points.some((e) => e.x === inter.x && e.y === inter.y)) {
        points.push(inter);
      } else {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.warn("abc88 no intersect", inter, points);
      }
      isInside = true;
    } else {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.warn("abc88 outside", point2, lastPointOutside);
      lastPointOutside = point2;
      if (!isInside) {
        points.push(point2);
      }
    }
  });
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug("returning points", points);
  return points;
}, "cutPathAtIntersect");
function extractCornerPoints(points) {
  const cornerPoints = [];
  const cornerPointPositions = [];
  for (let i = 1; i < points.length - 1; i++) {
    const prev = points[i - 1];
    const curr = points[i];
    const next = points[i + 1];
    if (prev.x === curr.x && curr.y === next.y && Math.abs(curr.x - next.x) > 5 && Math.abs(curr.y - prev.y) > 5) {
      cornerPoints.push(curr);
      cornerPointPositions.push(i);
    } else if (prev.y === curr.y && curr.x === next.x && Math.abs(curr.x - prev.x) > 5 && Math.abs(curr.y - next.y) > 5) {
      cornerPoints.push(curr);
      cornerPointPositions.push(i);
    }
  }
  return { cornerPoints, cornerPointPositions };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(extractCornerPoints, "extractCornerPoints");
var findAdjacentPoint = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(function(pointA, pointB, distance) {
  const xDiff = pointB.x - pointA.x;
  const yDiff = pointB.y - pointA.y;
  const length = Math.sqrt(xDiff * xDiff + yDiff * yDiff);
  const ratio = distance / length;
  return { x: pointB.x - ratio * xDiff, y: pointB.y - ratio * yDiff };
}, "findAdjacentPoint");
var fixCorners = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(function(lineData) {
  const { cornerPointPositions } = extractCornerPoints(lineData);
  const newLineData = [];
  for (let i = 0; i < lineData.length; i++) {
    if (cornerPointPositions.includes(i)) {
      const prevPoint = lineData[i - 1];
      const nextPoint = lineData[i + 1];
      const cornerPoint = lineData[i];
      const newPrevPoint = findAdjacentPoint(prevPoint, cornerPoint, 5);
      const newNextPoint = findAdjacentPoint(nextPoint, cornerPoint, 5);
      const xDiff = newNextPoint.x - newPrevPoint.x;
      const yDiff = newNextPoint.y - newPrevPoint.y;
      newLineData.push(newPrevPoint);
      const a = Math.sqrt(2) * 2;
      let newCornerPoint = { x: cornerPoint.x, y: cornerPoint.y };
      if (Math.abs(nextPoint.x - prevPoint.x) > 10 && Math.abs(nextPoint.y - prevPoint.y) >= 10) {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(
          "Corner point fixing",
          Math.abs(nextPoint.x - prevPoint.x),
          Math.abs(nextPoint.y - prevPoint.y)
        );
        const r = 5;
        if (cornerPoint.x === newPrevPoint.x) {
          newCornerPoint = {
            x: xDiff < 0 ? newPrevPoint.x - r + a : newPrevPoint.x + r - a,
            y: yDiff < 0 ? newPrevPoint.y - a : newPrevPoint.y + a
          };
        } else {
          newCornerPoint = {
            x: xDiff < 0 ? newPrevPoint.x - a : newPrevPoint.x + a,
            y: yDiff < 0 ? newPrevPoint.y - r + a : newPrevPoint.y + r - a
          };
        }
      } else {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(
          "Corner point skipping fixing",
          Math.abs(nextPoint.x - prevPoint.x),
          Math.abs(nextPoint.y - prevPoint.y)
        );
      }
      newLineData.push(newCornerPoint, newNextPoint);
    } else {
      newLineData.push(lineData[i]);
    }
  }
  return newLineData;
}, "fixCorners");
var insertEdge = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)(function(elem, edge, clusterDb, diagramType, startNode, endNode, id) {
  const { handDrawnSeed } = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.getConfig2)();
  let points = edge.points;
  let pointsHasChanged = false;
  const tail = startNode;
  var head = endNode;
  const edgeClassStyles = [];
  for (const key in edge.cssCompiledStyles) {
    if ((0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.isLabelStyle)(key)) {
      continue;
    }
    edgeClassStyles.push(edge.cssCompiledStyles[key]);
  }
  if (head.intersect && tail.intersect) {
    points = points.slice(1, edge.points.length - 1);
    points.unshift(tail.intersect(points[0]));
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(
      "Last point APA12",
      edge.start,
      "-->",
      edge.end,
      points[points.length - 1],
      head,
      head.intersect(points[points.length - 1])
    );
    points.push(head.intersect(points[points.length - 1]));
  }
  if (edge.toCluster) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.info("to cluster abc88", clusterDb.get(edge.toCluster));
    points = cutPathAtIntersect(edge.points, clusterDb.get(edge.toCluster).node);
    pointsHasChanged = true;
  }
  if (edge.fromCluster) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.debug(
      "from cluster abc88",
      clusterDb.get(edge.fromCluster),
      JSON.stringify(points, null, 2)
    );
    points = cutPathAtIntersect(points.reverse(), clusterDb.get(edge.fromCluster).node).reverse();
    pointsHasChanged = true;
  }
  let lineData = points.filter((p) => !Number.isNaN(p.y));
  lineData = fixCorners(lineData);
  let curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveBasis;
  curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveLinear;
  switch (edge.curve) {
    case "linear":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveLinear;
      break;
    case "basis":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveBasis;
      break;
    case "cardinal":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveCardinal;
      break;
    case "bumpX":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveBumpX;
      break;
    case "bumpY":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveBumpY;
      break;
    case "catmullRom":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveCatmullRom;
      break;
    case "monotoneX":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveMonotoneX;
      break;
    case "monotoneY":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveMonotoneY;
      break;
    case "natural":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveNatural;
      break;
    case "step":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveStep;
      break;
    case "stepAfter":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveStepAfter;
      break;
    case "stepBefore":
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveStepBefore;
      break;
    default:
      curve = d3__WEBPACK_IMPORTED_MODULE_6__.curveBasis;
  }
  const { x, y } = (0,_chunk_VV3M67IP_mjs__WEBPACK_IMPORTED_MODULE_0__.getLineFunctionsWithOffset)(edge);
  const lineFunction = (0,d3__WEBPACK_IMPORTED_MODULE_6__.line)().x(x).y(y).curve(curve);
  let strokeClasses;
  switch (edge.thickness) {
    case "normal":
      strokeClasses = "edge-thickness-normal";
      break;
    case "thick":
      strokeClasses = "edge-thickness-thick";
      break;
    case "invisible":
      strokeClasses = "edge-thickness-invisible";
      break;
    default:
      strokeClasses = "edge-thickness-normal";
  }
  switch (edge.pattern) {
    case "solid":
      strokeClasses += " edge-pattern-solid";
      break;
    case "dotted":
      strokeClasses += " edge-pattern-dotted";
      break;
    case "dashed":
      strokeClasses += " edge-pattern-dashed";
      break;
    default:
      strokeClasses += " edge-pattern-solid";
  }
  let svgPath;
  let linePath = lineFunction(lineData);
  const edgeStyles = Array.isArray(edge.style) ? edge.style : [edge.style];
  let strokeColor = edgeStyles.find((style) => style?.startsWith("stroke:"));
  if (edge.look === "handDrawn") {
    const rc = roughjs__WEBPACK_IMPORTED_MODULE_7__["default"].svg(elem);
    Object.assign([], lineData);
    const svgPathNode = rc.path(linePath, {
      roughness: 0.3,
      seed: handDrawnSeed
    });
    strokeClasses += " transition";
    svgPath = (0,d3__WEBPACK_IMPORTED_MODULE_6__.select)(svgPathNode).select("path").attr("id", edge.id).attr("class", " " + strokeClasses + (edge.classes ? " " + edge.classes : "")).attr("style", edgeStyles ? edgeStyles.reduce((acc, style) => acc + ";" + style, "") : "");
    let d = svgPath.attr("d");
    svgPath.attr("d", d);
    elem.node().appendChild(svgPath.node());
  } else {
    const stylesFromClasses = edgeClassStyles.join(";");
    const styles = edgeStyles ? edgeStyles.reduce((acc, style) => acc + style + ";", "") : "";
    let animationClass = "";
    if (edge.animate) {
      animationClass = " edge-animation-fast";
    }
    if (edge.animation) {
      animationClass = " edge-animation-" + edge.animation;
    }
    const pathStyle = stylesFromClasses ? stylesFromClasses + ";" + styles + ";" : styles;
    svgPath = elem.append("path").attr("d", linePath).attr("id", edge.id).attr(
      "class",
      " " + strokeClasses + (edge.classes ? " " + edge.classes : "") + (animationClass ?? "")
    ).attr("style", pathStyle);
    strokeColor = pathStyle.match(/stroke:([^;]+)/)?.[1];
  }
  let url = "";
  if ((0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.getConfig2)().flowchart.arrowMarkerAbsolute || (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.getConfig2)().state.arrowMarkerAbsolute) {
    url = window.location.protocol + "//" + window.location.host + window.location.pathname + window.location.search;
    url = url.replace(/\(/g, "\\(").replace(/\)/g, "\\)");
  }
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.info("arrowTypeStart", edge.arrowTypeStart);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.info("arrowTypeEnd", edge.arrowTypeEnd);
  addEdgeMarkers(svgPath, edge, url, id, diagramType, strokeColor);
  let paths = {};
  if (pointsHasChanged) {
    paths.updatedPath = points;
  }
  paths.originalPath = edge.points;
  return paths;
}, "insertEdge");

// src/rendering-util/rendering-elements/markers.js
var insertMarkers = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, markerArray, type, id) => {
  markerArray.forEach((markerName) => {
    markers[markerName](elem, type, id);
  });
}, "insertMarkers");
var extension = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.log.trace("Making markers for ", id);
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-extensionStart").attr("class", "marker extension " + type).attr("refX", 18).attr("refY", 7).attr("markerWidth", 190).attr("markerHeight", 240).attr("orient", "auto").append("path").attr("d", "M 1,7 L18,13 V 1 Z");
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-extensionEnd").attr("class", "marker extension " + type).attr("refX", 1).attr("refY", 7).attr("markerWidth", 20).attr("markerHeight", 28).attr("orient", "auto").append("path").attr("d", "M 1,1 V 13 L18,7 Z");
}, "extension");
var composition = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-compositionStart").attr("class", "marker composition " + type).attr("refX", 18).attr("refY", 7).attr("markerWidth", 190).attr("markerHeight", 240).attr("orient", "auto").append("path").attr("d", "M 18,7 L9,13 L1,7 L9,1 Z");
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-compositionEnd").attr("class", "marker composition " + type).attr("refX", 1).attr("refY", 7).attr("markerWidth", 20).attr("markerHeight", 28).attr("orient", "auto").append("path").attr("d", "M 18,7 L9,13 L1,7 L9,1 Z");
}, "composition");
var aggregation = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-aggregationStart").attr("class", "marker aggregation " + type).attr("refX", 18).attr("refY", 7).attr("markerWidth", 190).attr("markerHeight", 240).attr("orient", "auto").append("path").attr("d", "M 18,7 L9,13 L1,7 L9,1 Z");
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-aggregationEnd").attr("class", "marker aggregation " + type).attr("refX", 1).attr("refY", 7).attr("markerWidth", 20).attr("markerHeight", 28).attr("orient", "auto").append("path").attr("d", "M 18,7 L9,13 L1,7 L9,1 Z");
}, "aggregation");
var dependency = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-dependencyStart").attr("class", "marker dependency " + type).attr("refX", 6).attr("refY", 7).attr("markerWidth", 190).attr("markerHeight", 240).attr("orient", "auto").append("path").attr("d", "M 5,7 L9,13 L1,7 L9,1 Z");
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-dependencyEnd").attr("class", "marker dependency " + type).attr("refX", 13).attr("refY", 7).attr("markerWidth", 20).attr("markerHeight", 28).attr("orient", "auto").append("path").attr("d", "M 18,7 L9,13 L14,7 L9,1 Z");
}, "dependency");
var lollipop = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-lollipopStart").attr("class", "marker lollipop " + type).attr("refX", 13).attr("refY", 7).attr("markerWidth", 190).attr("markerHeight", 240).attr("orient", "auto").append("circle").attr("stroke", "black").attr("fill", "transparent").attr("cx", 7).attr("cy", 7).attr("r", 6);
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-lollipopEnd").attr("class", "marker lollipop " + type).attr("refX", 1).attr("refY", 7).attr("markerWidth", 190).attr("markerHeight", 240).attr("orient", "auto").append("circle").attr("stroke", "black").attr("fill", "transparent").attr("cx", 7).attr("cy", 7).attr("r", 6);
}, "lollipop");
var point = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("marker").attr("id", id + "_" + type + "-pointEnd").attr("class", "marker " + type).attr("viewBox", "0 0 10 10").attr("refX", 5).attr("refY", 5).attr("markerUnits", "userSpaceOnUse").attr("markerWidth", 8).attr("markerHeight", 8).attr("orient", "auto").append("path").attr("d", "M 0 0 L 10 5 L 0 10 z").attr("class", "arrowMarkerPath").style("stroke-width", 1).style("stroke-dasharray", "1,0");
  elem.append("marker").attr("id", id + "_" + type + "-pointStart").attr("class", "marker " + type).attr("viewBox", "0 0 10 10").attr("refX", 4.5).attr("refY", 5).attr("markerUnits", "userSpaceOnUse").attr("markerWidth", 8).attr("markerHeight", 8).attr("orient", "auto").append("path").attr("d", "M 0 5 L 10 10 L 10 0 z").attr("class", "arrowMarkerPath").style("stroke-width", 1).style("stroke-dasharray", "1,0");
}, "point");
var circle = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("marker").attr("id", id + "_" + type + "-circleEnd").attr("class", "marker " + type).attr("viewBox", "0 0 10 10").attr("refX", 11).attr("refY", 5).attr("markerUnits", "userSpaceOnUse").attr("markerWidth", 11).attr("markerHeight", 11).attr("orient", "auto").append("circle").attr("cx", "5").attr("cy", "5").attr("r", "5").attr("class", "arrowMarkerPath").style("stroke-width", 1).style("stroke-dasharray", "1,0");
  elem.append("marker").attr("id", id + "_" + type + "-circleStart").attr("class", "marker " + type).attr("viewBox", "0 0 10 10").attr("refX", -1).attr("refY", 5).attr("markerUnits", "userSpaceOnUse").attr("markerWidth", 11).attr("markerHeight", 11).attr("orient", "auto").append("circle").attr("cx", "5").attr("cy", "5").attr("r", "5").attr("class", "arrowMarkerPath").style("stroke-width", 1).style("stroke-dasharray", "1,0");
}, "circle");
var cross = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("marker").attr("id", id + "_" + type + "-crossEnd").attr("class", "marker cross " + type).attr("viewBox", "0 0 11 11").attr("refX", 12).attr("refY", 5.2).attr("markerUnits", "userSpaceOnUse").attr("markerWidth", 11).attr("markerHeight", 11).attr("orient", "auto").append("path").attr("d", "M 1,1 l 9,9 M 10,1 l -9,9").attr("class", "arrowMarkerPath").style("stroke-width", 2).style("stroke-dasharray", "1,0");
  elem.append("marker").attr("id", id + "_" + type + "-crossStart").attr("class", "marker cross " + type).attr("viewBox", "0 0 11 11").attr("refX", -1).attr("refY", 5.2).attr("markerUnits", "userSpaceOnUse").attr("markerWidth", 11).attr("markerHeight", 11).attr("orient", "auto").append("path").attr("d", "M 1,1 l 9,9 M 10,1 l -9,9").attr("class", "arrowMarkerPath").style("stroke-width", 2).style("stroke-dasharray", "1,0");
}, "cross");
var barb = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-barbEnd").attr("refX", 19).attr("refY", 7).attr("markerWidth", 20).attr("markerHeight", 14).attr("markerUnits", "userSpaceOnUse").attr("orient", "auto").append("path").attr("d", "M 19,7 L9,13 L14,7 L9,1 Z");
}, "barb");
var only_one = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-onlyOneStart").attr("class", "marker onlyOne " + type).attr("refX", 0).attr("refY", 9).attr("markerWidth", 18).attr("markerHeight", 18).attr("orient", "auto").append("path").attr("d", "M9,0 L9,18 M15,0 L15,18");
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-onlyOneEnd").attr("class", "marker onlyOne " + type).attr("refX", 18).attr("refY", 9).attr("markerWidth", 18).attr("markerHeight", 18).attr("orient", "auto").append("path").attr("d", "M3,0 L3,18 M9,0 L9,18");
}, "only_one");
var zero_or_one = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  const startMarker = elem.append("defs").append("marker").attr("id", id + "_" + type + "-zeroOrOneStart").attr("class", "marker zeroOrOne " + type).attr("refX", 0).attr("refY", 9).attr("markerWidth", 30).attr("markerHeight", 18).attr("orient", "auto");
  startMarker.append("circle").attr("fill", "white").attr("cx", 21).attr("cy", 9).attr("r", 6);
  startMarker.append("path").attr("d", "M9,0 L9,18");
  const endMarker = elem.append("defs").append("marker").attr("id", id + "_" + type + "-zeroOrOneEnd").attr("class", "marker zeroOrOne " + type).attr("refX", 30).attr("refY", 9).attr("markerWidth", 30).attr("markerHeight", 18).attr("orient", "auto");
  endMarker.append("circle").attr("fill", "white").attr("cx", 9).attr("cy", 9).attr("r", 6);
  endMarker.append("path").attr("d", "M21,0 L21,18");
}, "zero_or_one");
var one_or_more = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-oneOrMoreStart").attr("class", "marker oneOrMore " + type).attr("refX", 18).attr("refY", 18).attr("markerWidth", 45).attr("markerHeight", 36).attr("orient", "auto").append("path").attr("d", "M0,18 Q 18,0 36,18 Q 18,36 0,18 M42,9 L42,27");
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-oneOrMoreEnd").attr("class", "marker oneOrMore " + type).attr("refX", 27).attr("refY", 18).attr("markerWidth", 45).attr("markerHeight", 36).attr("orient", "auto").append("path").attr("d", "M3,9 L3,27 M9,18 Q27,0 45,18 Q27,36 9,18");
}, "one_or_more");
var zero_or_more = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  const startMarker = elem.append("defs").append("marker").attr("id", id + "_" + type + "-zeroOrMoreStart").attr("class", "marker zeroOrMore " + type).attr("refX", 18).attr("refY", 18).attr("markerWidth", 57).attr("markerHeight", 36).attr("orient", "auto");
  startMarker.append("circle").attr("fill", "white").attr("cx", 48).attr("cy", 18).attr("r", 6);
  startMarker.append("path").attr("d", "M0,18 Q18,0 36,18 Q18,36 0,18");
  const endMarker = elem.append("defs").append("marker").attr("id", id + "_" + type + "-zeroOrMoreEnd").attr("class", "marker zeroOrMore " + type).attr("refX", 39).attr("refY", 18).attr("markerWidth", 57).attr("markerHeight", 36).attr("orient", "auto");
  endMarker.append("circle").attr("fill", "white").attr("cx", 9).attr("cy", 18).attr("r", 6);
  endMarker.append("path").attr("d", "M21,18 Q39,0 57,18 Q39,36 21,18");
}, "zero_or_more");
var requirement_arrow = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  elem.append("defs").append("marker").attr("id", id + "_" + type + "-requirement_arrowEnd").attr("refX", 20).attr("refY", 10).attr("markerWidth", 20).attr("markerHeight", 20).attr("orient", "auto").append("path").attr(
    "d",
    `M0,0
      L20,10
      M20,10
      L0,20`
  );
}, "requirement_arrow");
var requirement_contains = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_5__.__name)((elem, type, id) => {
  const containsNode = elem.append("defs").append("marker").attr("id", id + "_" + type + "-requirement_containsStart").attr("refX", 0).attr("refY", 10).attr("markerWidth", 20).attr("markerHeight", 20).attr("orient", "auto").append("g");
  containsNode.append("circle").attr("cx", 10).attr("cy", 10).attr("r", 9).attr("fill", "none");
  containsNode.append("line").attr("x1", 1).attr("x2", 19).attr("y1", 10).attr("y2", 10);
  containsNode.append("line").attr("y1", 1).attr("y2", 19).attr("x1", 10).attr("x2", 10);
}, "requirement_contains");
var markers = {
  extension,
  composition,
  aggregation,
  dependency,
  lollipop,
  point,
  circle,
  cross,
  barb,
  only_one,
  zero_or_one,
  one_or_more,
  zero_or_more,
  requirement_arrow,
  requirement_contains
};
var markers_default = insertMarkers;




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-K557N5IZ.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-K557N5IZ.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSubGraphTitleMargins: () => (/* binding */ getSubGraphTitleMargins)
/* harmony export */ });
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");


// src/utils/subGraphTitleMargins.ts
var getSubGraphTitleMargins = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(({
  flowchart
}) => {
  const subGraphTitleTopMargin = flowchart?.subGraphTitleMargin?.top ?? 0;
  const subGraphTitleBottomMargin = flowchart?.subGraphTitleMargin?.bottom ?? 0;
  const subGraphTitleTotalMargin = subGraphTitleTopMargin + subGraphTitleBottomMargin;
  return {
    subGraphTitleTopMargin,
    subGraphTitleBottomMargin,
    subGraphTitleTotalMargin
  };
}, "getSubGraphTitleMargins");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ZERO_WIDTH_SPACE: () => (/* binding */ ZERO_WIDTH_SPACE),
/* harmony export */   calculateTextHeight: () => (/* binding */ calculateTextHeight),
/* harmony export */   calculateTextWidth: () => (/* binding */ calculateTextWidth),
/* harmony export */   cleanAndMerge: () => (/* binding */ cleanAndMerge),
/* harmony export */   decodeEntities: () => (/* binding */ decodeEntities),
/* harmony export */   encodeEntities: () => (/* binding */ encodeEntities),
/* harmony export */   generateId: () => (/* binding */ generateId),
/* harmony export */   getEdgeId: () => (/* binding */ getEdgeId),
/* harmony export */   getStylesFromArray: () => (/* binding */ getStylesFromArray),
/* harmony export */   handleUndefinedAttr: () => (/* binding */ handleUndefinedAttr),
/* harmony export */   interpolateToCurve: () => (/* binding */ interpolateToCurve),
/* harmony export */   isDetailedError: () => (/* binding */ isDetailedError),
/* harmony export */   parseFontSize: () => (/* binding */ parseFontSize),
/* harmony export */   random: () => (/* binding */ random),
/* harmony export */   removeDirectives: () => (/* binding */ removeDirectives),
/* harmony export */   utils_default: () => (/* binding */ utils_default),
/* harmony export */   wrapLabel: () => (/* binding */ wrapLabel)
/* harmony export */ });
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @braintree/sanitize-url */ "./node_modules/@braintree/sanitize-url/dist/index.js");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var lodash_es_memoize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/memoize.js */ "./node_modules/lodash-es/memoize.js");
/* harmony import */ var lodash_es_merge_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es/merge.js */ "./node_modules/lodash-es/merge.js");


// src/utils.ts




var ZERO_WIDTH_SPACE = "\u200B";
var d3CurveTypes = {
  curveBasis: d3__WEBPACK_IMPORTED_MODULE_2__.curveBasis,
  curveBasisClosed: d3__WEBPACK_IMPORTED_MODULE_2__.curveBasisClosed,
  curveBasisOpen: d3__WEBPACK_IMPORTED_MODULE_2__.curveBasisOpen,
  curveBumpX: d3__WEBPACK_IMPORTED_MODULE_2__.curveBumpX,
  curveBumpY: d3__WEBPACK_IMPORTED_MODULE_2__.curveBumpY,
  curveBundle: d3__WEBPACK_IMPORTED_MODULE_2__.curveBundle,
  curveCardinalClosed: d3__WEBPACK_IMPORTED_MODULE_2__.curveCardinalClosed,
  curveCardinalOpen: d3__WEBPACK_IMPORTED_MODULE_2__.curveCardinalOpen,
  curveCardinal: d3__WEBPACK_IMPORTED_MODULE_2__.curveCardinal,
  curveCatmullRomClosed: d3__WEBPACK_IMPORTED_MODULE_2__.curveCatmullRomClosed,
  curveCatmullRomOpen: d3__WEBPACK_IMPORTED_MODULE_2__.curveCatmullRomOpen,
  curveCatmullRom: d3__WEBPACK_IMPORTED_MODULE_2__.curveCatmullRom,
  curveLinear: d3__WEBPACK_IMPORTED_MODULE_2__.curveLinear,
  curveLinearClosed: d3__WEBPACK_IMPORTED_MODULE_2__.curveLinearClosed,
  curveMonotoneX: d3__WEBPACK_IMPORTED_MODULE_2__.curveMonotoneX,
  curveMonotoneY: d3__WEBPACK_IMPORTED_MODULE_2__.curveMonotoneY,
  curveNatural: d3__WEBPACK_IMPORTED_MODULE_2__.curveNatural,
  curveStep: d3__WEBPACK_IMPORTED_MODULE_2__.curveStep,
  curveStepAfter: d3__WEBPACK_IMPORTED_MODULE_2__.curveStepAfter,
  curveStepBefore: d3__WEBPACK_IMPORTED_MODULE_2__.curveStepBefore
};
var directiveWithoutOpen = /\s*(?:(\w+)(?=:):|(\w+))\s*(?:(\w+)|((?:(?!}%{2}).|\r?\n)*))?\s*(?:}%{2})?/gi;
var detectInit = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(text, config) {
  const inits = detectDirective(text, /(?:init\b)|(?:initialize\b)/);
  let results = {};
  if (Array.isArray(inits)) {
    const args = inits.map((init) => init.args);
    (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.sanitizeDirective)(args);
    results = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.assignWithDepth_default)(results, [...args]);
  } else {
    results = inits.args;
  }
  if (!results) {
    return;
  }
  let type = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.detectType)(text, config);
  const prop = "config";
  if (results[prop] !== void 0) {
    if (type === "flowchart-v2") {
      type = "flowchart";
    }
    results[type] = results[prop];
    delete results[prop];
  }
  return results;
}, "detectInit");
var detectDirective = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(text, type = null) {
  try {
    const commentWithoutDirectives = new RegExp(
      `[%]{2}(?![{]${directiveWithoutOpen.source})(?=[}][%]{2}).*
`,
      "ig"
    );
    text = text.trim().replace(commentWithoutDirectives, "").replace(/'/gm, '"');
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.debug(
      `Detecting diagram directive${type !== null ? " type:" + type : ""} based on the text:${text}`
    );
    let match;
    const result = [];
    while ((match = _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.directiveRegex.exec(text)) !== null) {
      if (match.index === _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.directiveRegex.lastIndex) {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.directiveRegex.lastIndex++;
      }
      if (match && !type || type && match[1]?.match(type) || type && match[2]?.match(type)) {
        const type2 = match[1] ? match[1] : match[2];
        const args = match[3] ? match[3].trim() : match[4] ? JSON.parse(match[4].trim()) : null;
        result.push({ type: type2, args });
      }
    }
    if (result.length === 0) {
      return { type: text, args: null };
    }
    return result.length === 1 ? result[0] : result;
  } catch (error) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.error(
      `ERROR: ${error.message} - Unable to parse directive type: '${type}' based on the text: '${text}'`
    );
    return { type: void 0, args: null };
  }
}, "detectDirective");
var removeDirectives = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(text) {
  return text.replace(_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.directiveRegex, "");
}, "removeDirectives");
var isSubstringInArray = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(str, arr) {
  for (const [i, element] of arr.entries()) {
    if (element.match(str)) {
      return i;
    }
  }
  return -1;
}, "isSubstringInArray");
function interpolateToCurve(interpolate, defaultCurve) {
  if (!interpolate) {
    return defaultCurve;
  }
  const curveName = `curve${interpolate.charAt(0).toUpperCase() + interpolate.slice(1)}`;
  return d3CurveTypes[curveName] ?? defaultCurve;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(interpolateToCurve, "interpolateToCurve");
function formatUrl(linkStr, config) {
  const url = linkStr.trim();
  if (!url) {
    return void 0;
  }
  if (config.securityLevel !== "loose") {
    return (0,_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_1__.sanitizeUrl)(url);
  }
  return url;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(formatUrl, "formatUrl");
var runFunc = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((functionName, ...params) => {
  const arrPaths = functionName.split(".");
  const len = arrPaths.length - 1;
  const fnName = arrPaths[len];
  let obj = window;
  for (let i = 0; i < len; i++) {
    obj = obj[arrPaths[i]];
    if (!obj) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.error(`Function name: ${functionName} not found in window`);
      return;
    }
  }
  obj[fnName](...params);
}, "runFunc");
function distance(p1, p2) {
  if (!p1 || !p2) {
    return 0;
  }
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(distance, "distance");
function traverseEdge(points) {
  let prevPoint;
  let totalDistance = 0;
  points.forEach((point) => {
    totalDistance += distance(point, prevPoint);
    prevPoint = point;
  });
  const remainingDistance = totalDistance / 2;
  return calculatePoint(points, remainingDistance);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(traverseEdge, "traverseEdge");
function calcLabelPosition(points) {
  if (points.length === 1) {
    return points[0];
  }
  return traverseEdge(points);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(calcLabelPosition, "calcLabelPosition");
var roundNumber = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((num, precision = 2) => {
  const factor = Math.pow(10, precision);
  return Math.round(num * factor) / factor;
}, "roundNumber");
var calculatePoint = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((points, distanceToTraverse) => {
  let prevPoint = void 0;
  let remainingDistance = distanceToTraverse;
  for (const point of points) {
    if (prevPoint) {
      const vectorDistance = distance(point, prevPoint);
      if (vectorDistance === 0) {
        return prevPoint;
      }
      if (vectorDistance < remainingDistance) {
        remainingDistance -= vectorDistance;
      } else {
        const distanceRatio = remainingDistance / vectorDistance;
        if (distanceRatio <= 0) {
          return prevPoint;
        }
        if (distanceRatio >= 1) {
          return { x: point.x, y: point.y };
        }
        if (distanceRatio > 0 && distanceRatio < 1) {
          return {
            x: roundNumber((1 - distanceRatio) * prevPoint.x + distanceRatio * point.x, 5),
            y: roundNumber((1 - distanceRatio) * prevPoint.y + distanceRatio * point.y, 5)
          };
        }
      }
    }
    prevPoint = point;
  }
  throw new Error("Could not find a suitable point for the given distance");
}, "calculatePoint");
var calcCardinalityPosition = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((isRelationTypePresent, points, initialPosition) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.info(`our points ${JSON.stringify(points)}`);
  if (points[0] !== initialPosition) {
    points = points.reverse();
  }
  const distanceToCardinalityPoint = 25;
  const center = calculatePoint(points, distanceToCardinalityPoint);
  const d = isRelationTypePresent ? 10 : 5;
  const angle = Math.atan2(points[0].y - center.y, points[0].x - center.x);
  const cardinalityPosition = { x: 0, y: 0 };
  cardinalityPosition.x = Math.sin(angle) * d + (points[0].x + center.x) / 2;
  cardinalityPosition.y = -Math.cos(angle) * d + (points[0].y + center.y) / 2;
  return cardinalityPosition;
}, "calcCardinalityPosition");
function calcTerminalLabelPosition(terminalMarkerSize, position, _points) {
  const points = structuredClone(_points);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.log.info("our points", points);
  if (position !== "start_left" && position !== "start_right") {
    points.reverse();
  }
  const distanceToCardinalityPoint = 25 + terminalMarkerSize;
  const center = calculatePoint(points, distanceToCardinalityPoint);
  const d = 10 + terminalMarkerSize * 0.5;
  const angle = Math.atan2(points[0].y - center.y, points[0].x - center.x);
  const cardinalityPosition = { x: 0, y: 0 };
  if (position === "start_left") {
    cardinalityPosition.x = Math.sin(angle + Math.PI) * d + (points[0].x + center.x) / 2;
    cardinalityPosition.y = -Math.cos(angle + Math.PI) * d + (points[0].y + center.y) / 2;
  } else if (position === "end_right") {
    cardinalityPosition.x = Math.sin(angle - Math.PI) * d + (points[0].x + center.x) / 2 - 5;
    cardinalityPosition.y = -Math.cos(angle - Math.PI) * d + (points[0].y + center.y) / 2 - 5;
  } else if (position === "end_left") {
    cardinalityPosition.x = Math.sin(angle) * d + (points[0].x + center.x) / 2 - 5;
    cardinalityPosition.y = -Math.cos(angle) * d + (points[0].y + center.y) / 2 - 5;
  } else {
    cardinalityPosition.x = Math.sin(angle) * d + (points[0].x + center.x) / 2;
    cardinalityPosition.y = -Math.cos(angle) * d + (points[0].y + center.y) / 2;
  }
  return cardinalityPosition;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(calcTerminalLabelPosition, "calcTerminalLabelPosition");
function getStylesFromArray(arr) {
  let style = "";
  let labelStyle = "";
  for (const element of arr) {
    if (element !== void 0) {
      if (element.startsWith("color:") || element.startsWith("text-align:")) {
        labelStyle = labelStyle + element + ";";
      } else {
        style = style + element + ";";
      }
    }
  }
  return { style, labelStyle };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(getStylesFromArray, "getStylesFromArray");
var cnt = 0;
var generateId = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(() => {
  cnt++;
  return "id-" + Math.random().toString(36).substr(2, 12) + "-" + cnt;
}, "generateId");
function makeRandomHex(length) {
  let result = "";
  const characters = "0123456789abcdef";
  const charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(makeRandomHex, "makeRandomHex");
var random = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((options) => {
  return makeRandomHex(options.length);
}, "random");
var getTextObj = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function() {
  return {
    x: 0,
    y: 0,
    fill: void 0,
    anchor: "start",
    style: "#666",
    width: 100,
    height: 100,
    textMargin: 0,
    rx: 0,
    ry: 0,
    valign: void 0,
    text: ""
  };
}, "getTextObj");
var drawSimpleText = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(elem, textData) {
  const nText = textData.text.replace(_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.common_default.lineBreakRegex, " ");
  const [, _fontSizePx] = parseFontSize(textData.fontSize);
  const textElem = elem.append("text");
  textElem.attr("x", textData.x);
  textElem.attr("y", textData.y);
  textElem.style("text-anchor", textData.anchor);
  textElem.style("font-family", textData.fontFamily);
  textElem.style("font-size", _fontSizePx);
  textElem.style("font-weight", textData.fontWeight);
  textElem.attr("fill", textData.fill);
  if (textData.class !== void 0) {
    textElem.attr("class", textData.class);
  }
  const span = textElem.append("tspan");
  span.attr("x", textData.x + textData.textMargin * 2);
  span.attr("fill", textData.fill);
  span.text(nText);
  return textElem;
}, "drawSimpleText");
var wrapLabel = (0,lodash_es_memoize_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  (label, maxWidth, config) => {
    if (!label) {
      return label;
    }
    config = Object.assign(
      { fontSize: 12, fontWeight: 400, fontFamily: "Arial", joinWith: "<br/>" },
      config
    );
    if (_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.common_default.lineBreakRegex.test(label)) {
      return label;
    }
    const words = label.split(" ").filter(Boolean);
    const completedLines = [];
    let nextLine = "";
    words.forEach((word, index) => {
      const wordLength = calculateTextWidth(`${word} `, config);
      const nextLineLength = calculateTextWidth(nextLine, config);
      if (wordLength > maxWidth) {
        const { hyphenatedStrings, remainingWord } = breakString(word, maxWidth, "-", config);
        completedLines.push(nextLine, ...hyphenatedStrings);
        nextLine = remainingWord;
      } else if (nextLineLength + wordLength >= maxWidth) {
        completedLines.push(nextLine);
        nextLine = word;
      } else {
        nextLine = [nextLine, word].filter(Boolean).join(" ");
      }
      const currentWord = index + 1;
      const isLastWord = currentWord === words.length;
      if (isLastWord) {
        completedLines.push(nextLine);
      }
    });
    return completedLines.filter((line) => line !== "").join(config.joinWith);
  },
  (label, maxWidth, config) => `${label}${maxWidth}${config.fontSize}${config.fontWeight}${config.fontFamily}${config.joinWith}`
);
var breakString = (0,lodash_es_memoize_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  (word, maxWidth, hyphenCharacter = "-", config) => {
    config = Object.assign(
      { fontSize: 12, fontWeight: 400, fontFamily: "Arial", margin: 0 },
      config
    );
    const characters = [...word];
    const lines = [];
    let currentLine = "";
    characters.forEach((character, index) => {
      const nextLine = `${currentLine}${character}`;
      const lineWidth = calculateTextWidth(nextLine, config);
      if (lineWidth >= maxWidth) {
        const currentCharacter = index + 1;
        const isLastLine = characters.length === currentCharacter;
        const hyphenatedNextLine = `${nextLine}${hyphenCharacter}`;
        lines.push(isLastLine ? nextLine : hyphenatedNextLine);
        currentLine = "";
      } else {
        currentLine = nextLine;
      }
    });
    return { hyphenatedStrings: lines, remainingWord: currentLine };
  },
  (word, maxWidth, hyphenCharacter = "-", config) => `${word}${maxWidth}${hyphenCharacter}${config.fontSize}${config.fontWeight}${config.fontFamily}`
);
function calculateTextHeight(text, config) {
  return calculateTextDimensions(text, config).height;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(calculateTextHeight, "calculateTextHeight");
function calculateTextWidth(text, config) {
  return calculateTextDimensions(text, config).width;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(calculateTextWidth, "calculateTextWidth");
var calculateTextDimensions = (0,lodash_es_memoize_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  (text, config) => {
    const { fontSize = 12, fontFamily = "Arial", fontWeight = 400 } = config;
    if (!text) {
      return { width: 0, height: 0 };
    }
    const [, _fontSizePx] = parseFontSize(fontSize);
    const fontFamilies = ["sans-serif", fontFamily];
    const lines = text.split(_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.common_default.lineBreakRegex);
    const dims = [];
    const body = (0,d3__WEBPACK_IMPORTED_MODULE_2__.select)("body");
    if (!body.remove) {
      return { width: 0, height: 0, lineHeight: 0 };
    }
    const g = body.append("svg");
    for (const fontFamily2 of fontFamilies) {
      let cHeight = 0;
      const dim = { width: 0, height: 0, lineHeight: 0 };
      for (const line of lines) {
        const textObj = getTextObj();
        textObj.text = line || ZERO_WIDTH_SPACE;
        const textElem = drawSimpleText(g, textObj).style("font-size", _fontSizePx).style("font-weight", fontWeight).style("font-family", fontFamily2);
        const bBox = (textElem._groups || textElem)[0][0].getBBox();
        if (bBox.width === 0 && bBox.height === 0) {
          throw new Error("svg element not in render tree");
        }
        dim.width = Math.round(Math.max(dim.width, bBox.width));
        cHeight = Math.round(bBox.height);
        dim.height += cHeight;
        dim.lineHeight = Math.round(Math.max(dim.lineHeight, cHeight));
      }
      dims.push(dim);
    }
    g.remove();
    const index = isNaN(dims[1].height) || isNaN(dims[1].width) || isNaN(dims[1].lineHeight) || dims[0].height > dims[1].height && dims[0].width > dims[1].width && dims[0].lineHeight > dims[1].lineHeight ? 0 : 1;
    return dims[index];
  },
  (text, config) => `${text}${config.fontSize}${config.fontWeight}${config.fontFamily}`
);
var InitIDGenerator = class {
  constructor(deterministic = false, seed) {
    this.count = 0;
    this.count = seed ? seed.length : 0;
    this.next = deterministic ? () => this.count++ : () => Date.now();
  }
  static {
    (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(this, "InitIDGenerator");
  }
};
var decoder;
var entityDecode = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(html) {
  decoder = decoder || document.createElement("div");
  html = escape(html).replace(/%26/g, "&").replace(/%23/g, "#").replace(/%3B/g, ";");
  decoder.innerHTML = html;
  return unescape(decoder.textContent);
}, "entityDecode");
function isDetailedError(error) {
  return "str" in error;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(isDetailedError, "isDetailedError");
var insertTitle = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((parent, cssClass, titleTopMargin, title) => {
  if (!title) {
    return;
  }
  const bounds = parent.node()?.getBBox();
  if (!bounds) {
    return;
  }
  parent.append("text").text(title).attr("text-anchor", "middle").attr("x", bounds.x + bounds.width / 2).attr("y", -titleTopMargin).attr("class", cssClass);
}, "insertTitle");
var parseFontSize = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((fontSize) => {
  if (typeof fontSize === "number") {
    return [fontSize, fontSize + "px"];
  }
  const fontSizeNumber = parseInt(fontSize ?? "", 10);
  if (Number.isNaN(fontSizeNumber)) {
    return [void 0, void 0];
  } else if (fontSize === String(fontSizeNumber)) {
    return [fontSizeNumber, fontSize + "px"];
  } else {
    return [fontSizeNumber, fontSize];
  }
}, "parseFontSize");
function cleanAndMerge(defaultData, data) {
  return (0,lodash_es_merge_js__WEBPACK_IMPORTED_MODULE_4__["default"])({}, defaultData, data);
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(cleanAndMerge, "cleanAndMerge");
var utils_default = {
  assignWithDepth: _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.assignWithDepth_default,
  wrapLabel,
  calculateTextHeight,
  calculateTextWidth,
  calculateTextDimensions,
  cleanAndMerge,
  detectInit,
  detectDirective,
  isSubstringInArray,
  interpolateToCurve,
  calcLabelPosition,
  calcCardinalityPosition,
  calcTerminalLabelPosition,
  formatUrl,
  getStylesFromArray,
  generateId,
  random,
  runFunc,
  entityDecode,
  insertTitle,
  parseFontSize,
  InitIDGenerator
};
var encodeEntities = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(text) {
  let txt = text;
  txt = txt.replace(/style.*:\S*#.*;/g, function(s) {
    return s.substring(0, s.length - 1);
  });
  txt = txt.replace(/classDef.*:\S*#.*;/g, function(s) {
    return s.substring(0, s.length - 1);
  });
  txt = txt.replace(/#\w+;/g, function(s) {
    const innerTxt = s.substring(1, s.length - 1);
    const isInt = /^\+?\d+$/.test(innerTxt);
    if (isInt) {
      return "\uFB02\xB0\xB0" + innerTxt + "\xB6\xDF";
    } else {
      return "\uFB02\xB0" + innerTxt + "\xB6\xDF";
    }
  });
  return txt;
}, "encodeEntities");
var decodeEntities = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(text) {
  return text.replace(/ﬂ°°/g, "&#").replace(/ﬂ°/g, "&").replace(/¶ß/g, ";");
}, "decodeEntities");
var getEdgeId = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((from, to, {
  counter = 0,
  prefix,
  suffix
}, id) => {
  if (id) {
    return id;
  }
  return `${prefix ? `${prefix}_` : ""}${from}_${to}_${counter}${suffix ? `_${suffix}` : ""}`;
}, "getEdgeId");
function handleUndefinedAttr(attrValue) {
  return attrValue ?? null;
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(handleUndefinedAttr, "handleUndefinedAttr");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-TYCBKAJE.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-TYCBKAJE.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getRegisteredLayoutAlgorithm: () => (/* binding */ getRegisteredLayoutAlgorithm),
/* harmony export */   registerLayoutLoaders: () => (/* binding */ registerLayoutLoaders),
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var _chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-IIMUDSI4.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-IIMUDSI4.mjs");
/* harmony import */ var _chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-HRU6DDCH.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HRU6DDCH.mjs");
/* harmony import */ var _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-O4NI6UNU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs");
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");





// src/internals.ts
var internalHelpers = {
  common: _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.common_default,
  getConfig: _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.getConfig,
  insertCluster: _chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.insertCluster,
  insertEdge: _chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.insertEdge,
  insertEdgeLabel: _chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.insertEdgeLabel,
  insertMarkers: _chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.markers_default,
  insertNode: _chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.insertNode,
  interpolateToCurve: _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_2__.interpolateToCurve,
  labelHelper: _chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_1__.labelHelper,
  log: _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.log,
  positionEdgeLabel: _chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.positionEdgeLabel
};

// src/rendering-util/render.ts
var layoutAlgorithms = {};
var registerLayoutLoaders = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.__name)((loaders) => {
  for (const loader of loaders) {
    layoutAlgorithms[loader.name] = loader;
  }
}, "registerLayoutLoaders");
var registerDefaultLayoutLoaders = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.__name)(() => {
  registerLayoutLoaders([
    {
      name: "dagre",
      loader: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.__name)(async () => await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_dagre-d3-es_src_graphlib_index_js"), __webpack_require__.e("vendors-node_modules_dagre-d3-es_src_dagre_index_js"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_dagre-OKDRZEBW_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./dagre-OKDRZEBW.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/dagre-OKDRZEBW.mjs")), "loader")
    }
  ]);
}, "registerDefaultLayoutLoaders");
registerDefaultLayoutLoaders();
var render = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.__name)(async (data4Layout, svg) => {
  if (!(data4Layout.layoutAlgorithm in layoutAlgorithms)) {
    throw new Error(`Unknown layout algorithm: ${data4Layout.layoutAlgorithm}`);
  }
  const layoutDefinition = layoutAlgorithms[data4Layout.layoutAlgorithm];
  const layoutRenderer = await layoutDefinition.loader();
  return layoutRenderer.render(data4Layout, svg, internalHelpers, {
    algorithm: layoutDefinition.algorithm
  });
}, "render");
var getRegisteredLayoutAlgorithm = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.__name)((algorithm = "", { fallback = "dagre" } = {}) => {
  if (algorithm in layoutAlgorithms) {
    return algorithm;
  }
  if (fallback in layoutAlgorithms) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_3__.log.warn(`Layout algorithm ${algorithm} is not registered. Using ${fallback} as fallback.`);
    return fallback;
  }
  throw new Error(`Both layout algorithms ${algorithm} and ${fallback} are not registered.`);
}, "getRegisteredLayoutAlgorithm");




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-VV3M67IP.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-VV3M67IP.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLineFunctionsWithOffset: () => (/* binding */ getLineFunctionsWithOffset)
/* harmony export */ });
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");


// src/utils/lineWithOffset.ts
var markerOffsets = {
  aggregation: 18,
  extension: 18,
  composition: 18,
  dependency: 6,
  lollipop: 13.5,
  arrow_point: 4
};
function calculateDeltaAndAngle(point1, point2) {
  if (point1 === void 0 || point2 === void 0) {
    return { angle: 0, deltaX: 0, deltaY: 0 };
  }
  point1 = pointTransformer(point1);
  point2 = pointTransformer(point2);
  const [x1, y1] = [point1.x, point1.y];
  const [x2, y2] = [point2.x, point2.y];
  const deltaX = x2 - x1;
  const deltaY = y2 - y1;
  return { angle: Math.atan(deltaY / deltaX), deltaX, deltaY };
}
(0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(calculateDeltaAndAngle, "calculateDeltaAndAngle");
var pointTransformer = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((data) => {
  if (Array.isArray(data)) {
    return { x: data[0], y: data[1] };
  }
  return data;
}, "pointTransformer");
var getLineFunctionsWithOffset = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)((edge) => {
  return {
    x: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(d, i, data) {
      let offset = 0;
      const DIRECTION = pointTransformer(data[0]).x < pointTransformer(data[data.length - 1]).x ? "left" : "right";
      if (i === 0 && Object.hasOwn(markerOffsets, edge.arrowTypeStart)) {
        const { angle, deltaX } = calculateDeltaAndAngle(data[0], data[1]);
        offset = markerOffsets[edge.arrowTypeStart] * Math.cos(angle) * (deltaX >= 0 ? 1 : -1);
      } else if (i === data.length - 1 && Object.hasOwn(markerOffsets, edge.arrowTypeEnd)) {
        const { angle, deltaX } = calculateDeltaAndAngle(
          data[data.length - 1],
          data[data.length - 2]
        );
        offset = markerOffsets[edge.arrowTypeEnd] * Math.cos(angle) * (deltaX >= 0 ? 1 : -1);
      }
      const differenceToEnd = Math.abs(
        pointTransformer(d).x - pointTransformer(data[data.length - 1]).x
      );
      const differenceInYEnd = Math.abs(
        pointTransformer(d).y - pointTransformer(data[data.length - 1]).y
      );
      const differenceToStart = Math.abs(pointTransformer(d).x - pointTransformer(data[0]).x);
      const differenceInYStart = Math.abs(pointTransformer(d).y - pointTransformer(data[0]).y);
      const startMarkerHeight = markerOffsets[edge.arrowTypeStart];
      const endMarkerHeight = markerOffsets[edge.arrowTypeEnd];
      const extraRoom = 1;
      if (differenceToEnd < endMarkerHeight && differenceToEnd > 0 && differenceInYEnd < endMarkerHeight) {
        let adjustment = endMarkerHeight + extraRoom - differenceToEnd;
        adjustment *= DIRECTION === "right" ? -1 : 1;
        offset -= adjustment;
      }
      if (differenceToStart < startMarkerHeight && differenceToStart > 0 && differenceInYStart < startMarkerHeight) {
        let adjustment = startMarkerHeight + extraRoom - differenceToStart;
        adjustment *= DIRECTION === "right" ? -1 : 1;
        offset += adjustment;
      }
      return pointTransformer(d).x + offset;
    }, "x"),
    y: /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_0__.__name)(function(d, i, data) {
      let offset = 0;
      const DIRECTION = pointTransformer(data[0]).y < pointTransformer(data[data.length - 1]).y ? "down" : "up";
      if (i === 0 && Object.hasOwn(markerOffsets, edge.arrowTypeStart)) {
        const { angle, deltaY } = calculateDeltaAndAngle(data[0], data[1]);
        offset = markerOffsets[edge.arrowTypeStart] * Math.abs(Math.sin(angle)) * (deltaY >= 0 ? 1 : -1);
      } else if (i === data.length - 1 && Object.hasOwn(markerOffsets, edge.arrowTypeEnd)) {
        const { angle, deltaY } = calculateDeltaAndAngle(
          data[data.length - 1],
          data[data.length - 2]
        );
        offset = markerOffsets[edge.arrowTypeEnd] * Math.abs(Math.sin(angle)) * (deltaY >= 0 ? 1 : -1);
      }
      const differenceToEnd = Math.abs(
        pointTransformer(d).y - pointTransformer(data[data.length - 1]).y
      );
      const differenceInXEnd = Math.abs(
        pointTransformer(d).x - pointTransformer(data[data.length - 1]).x
      );
      const differenceToStart = Math.abs(pointTransformer(d).y - pointTransformer(data[0]).y);
      const differenceInXStart = Math.abs(pointTransformer(d).x - pointTransformer(data[0]).x);
      const startMarkerHeight = markerOffsets[edge.arrowTypeStart];
      const endMarkerHeight = markerOffsets[edge.arrowTypeEnd];
      const extraRoom = 1;
      if (differenceToEnd < endMarkerHeight && differenceToEnd > 0 && differenceInXEnd < endMarkerHeight) {
        let adjustment = endMarkerHeight + extraRoom - differenceToEnd;
        adjustment *= DIRECTION === "up" ? -1 : 1;
        offset -= adjustment;
      }
      if (differenceToStart < startMarkerHeight && differenceToStart > 0 && differenceInXStart < startMarkerHeight) {
        let adjustment = startMarkerHeight + extraRoom - differenceToStart;
        adjustment *= DIRECTION === "up" ? -1 : 1;
        offset += adjustment;
      }
      return pointTransformer(d).y + offset;
    }, "y")
  };
}, "getLineFunctionsWithOffset");
if (void 0) {
  const { it, expect, describe } = void 0;
  describe("calculateDeltaAndAngle", () => {
    it("should calculate the angle and deltas between two points", () => {
      expect(calculateDeltaAndAngle([0, 0], [0, 1])).toStrictEqual({
        angle: 1.5707963267948966,
        deltaX: 0,
        deltaY: 1
      });
      expect(calculateDeltaAndAngle([1, 0], [0, -1])).toStrictEqual({
        angle: 0.7853981633974483,
        deltaX: -1,
        deltaY: -1
      });
      expect(calculateDeltaAndAngle({ x: 1, y: 0 }, [0, -1])).toStrictEqual({
        angle: 0.7853981633974483,
        deltaX: -1,
        deltaY: -1
      });
      expect(calculateDeltaAndAngle({ x: 1, y: 0 }, { x: 1, y: 0 })).toStrictEqual({
        angle: NaN,
        deltaX: 0,
        deltaY: 0
      });
    });
    it("should calculate the angle and deltas if one point in undefined", () => {
      expect(calculateDeltaAndAngle(void 0, [0, 1])).toStrictEqual({
        angle: 0,
        deltaX: 0,
        deltaY: 0
      });
      expect(calculateDeltaAndAngle([0, 1], void 0)).toStrictEqual({
        angle: 0,
        deltaX: 0,
        deltaY: 0
      });
    });
  });
}




/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UnknownDiagramError: () => (/* binding */ UnknownDiagramError),
/* harmony export */   __export: () => (/* binding */ __export),
/* harmony export */   __name: () => (/* binding */ __name),
/* harmony export */   addDirective: () => (/* binding */ addDirective),
/* harmony export */   assignWithDepth_default: () => (/* binding */ assignWithDepth_default),
/* harmony export */   calculateMathMLDimensions: () => (/* binding */ calculateMathMLDimensions),
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   commonDb_exports: () => (/* binding */ commonDb_exports),
/* harmony export */   common_default: () => (/* binding */ common_default),
/* harmony export */   configureSvgSize: () => (/* binding */ configureSvgSize),
/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),
/* harmony export */   defaultConfig2: () => (/* binding */ defaultConfig2),
/* harmony export */   defaultConfig_default: () => (/* binding */ defaultConfig_default),
/* harmony export */   detectType: () => (/* binding */ detectType),
/* harmony export */   detectors: () => (/* binding */ detectors),
/* harmony export */   directiveRegex: () => (/* binding */ directiveRegex),
/* harmony export */   evaluate: () => (/* binding */ evaluate),
/* harmony export */   frontMatterRegex: () => (/* binding */ frontMatterRegex),
/* harmony export */   getAccDescription: () => (/* binding */ getAccDescription),
/* harmony export */   getAccTitle: () => (/* binding */ getAccTitle),
/* harmony export */   getConfig: () => (/* binding */ getConfig),
/* harmony export */   getConfig2: () => (/* binding */ getConfig2),
/* harmony export */   getDiagram: () => (/* binding */ getDiagram),
/* harmony export */   getDiagramLoader: () => (/* binding */ getDiagramLoader),
/* harmony export */   getDiagramTitle: () => (/* binding */ getDiagramTitle),
/* harmony export */   getSiteConfig: () => (/* binding */ getSiteConfig),
/* harmony export */   getThemeVariables: () => (/* binding */ getThemeVariables3),
/* harmony export */   hasKatex: () => (/* binding */ hasKatex),
/* harmony export */   lineBreakRegex: () => (/* binding */ lineBreakRegex),
/* harmony export */   log: () => (/* binding */ log),
/* harmony export */   parseGenericTypes: () => (/* binding */ parseGenericTypes),
/* harmony export */   registerDiagram: () => (/* binding */ registerDiagram),
/* harmony export */   registerLazyLoadedDiagrams: () => (/* binding */ registerLazyLoadedDiagrams),
/* harmony export */   renderKatex: () => (/* binding */ renderKatex),
/* harmony export */   reset: () => (/* binding */ reset),
/* harmony export */   sanitizeDirective: () => (/* binding */ sanitizeDirective),
/* harmony export */   sanitizeText: () => (/* binding */ sanitizeText),
/* harmony export */   sanitizeText2: () => (/* binding */ sanitizeText3),
/* harmony export */   saveConfigFromInitialize: () => (/* binding */ saveConfigFromInitialize),
/* harmony export */   setAccDescription: () => (/* binding */ setAccDescription),
/* harmony export */   setAccTitle: () => (/* binding */ setAccTitle),
/* harmony export */   setConfig: () => (/* binding */ setConfig),
/* harmony export */   setConfig2: () => (/* binding */ setConfig2),
/* harmony export */   setDiagramTitle: () => (/* binding */ setDiagramTitle),
/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),
/* harmony export */   setSiteConfig: () => (/* binding */ setSiteConfig),
/* harmony export */   setupGraphViewbox: () => (/* binding */ setupGraphViewbox),
/* harmony export */   setupGraphViewbox2: () => (/* binding */ setupGraphViewbox2),
/* harmony export */   styles_default: () => (/* binding */ styles_default),
/* harmony export */   themes_default: () => (/* binding */ themes_default),
/* harmony export */   updateSiteConfig: () => (/* binding */ updateSiteConfig)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! khroma */ "./node_modules/khroma/dist/methods/adjust.js");
/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! khroma */ "./node_modules/khroma/dist/methods/invert.js");
/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! khroma */ "./node_modules/khroma/dist/methods/darken.js");
/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! khroma */ "./node_modules/khroma/dist/methods/lighten.js");
/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! khroma */ "./node_modules/khroma/dist/methods/is_dark.js");
/* harmony import */ var khroma__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! khroma */ "./node_modules/khroma/dist/methods/rgba.js");
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.es.mjs");
var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/logger.ts

var LEVELS = {
  trace: 0,
  debug: 1,
  info: 2,
  warn: 3,
  error: 4,
  fatal: 5
};
var log = {
  trace: /* @__PURE__ */ __name((..._args) => {
  }, "trace"),
  debug: /* @__PURE__ */ __name((..._args) => {
  }, "debug"),
  info: /* @__PURE__ */ __name((..._args) => {
  }, "info"),
  warn: /* @__PURE__ */ __name((..._args) => {
  }, "warn"),
  error: /* @__PURE__ */ __name((..._args) => {
  }, "error"),
  fatal: /* @__PURE__ */ __name((..._args) => {
  }, "fatal")
};
var setLogLevel = /* @__PURE__ */ __name(function(level = "fatal") {
  let numericLevel = LEVELS.fatal;
  if (typeof level === "string") {
    if (level.toLowerCase() in LEVELS) {
      numericLevel = LEVELS[level];
    }
  } else if (typeof level === "number") {
    numericLevel = level;
  }
  log.trace = () => {
  };
  log.debug = () => {
  };
  log.info = () => {
  };
  log.warn = () => {
  };
  log.error = () => {
  };
  log.fatal = () => {
  };
  if (numericLevel <= LEVELS.fatal) {
    log.fatal = console.error ? console.error.bind(console, format("FATAL"), "color: orange") : console.log.bind(console, "\x1B[35m", format("FATAL"));
  }
  if (numericLevel <= LEVELS.error) {
    log.error = console.error ? console.error.bind(console, format("ERROR"), "color: orange") : console.log.bind(console, "\x1B[31m", format("ERROR"));
  }
  if (numericLevel <= LEVELS.warn) {
    log.warn = console.warn ? console.warn.bind(console, format("WARN"), "color: orange") : console.log.bind(console, `\x1B[33m`, format("WARN"));
  }
  if (numericLevel <= LEVELS.info) {
    log.info = console.info ? console.info.bind(console, format("INFO"), "color: lightblue") : console.log.bind(console, "\x1B[34m", format("INFO"));
  }
  if (numericLevel <= LEVELS.debug) {
    log.debug = console.debug ? console.debug.bind(console, format("DEBUG"), "color: lightgreen") : console.log.bind(console, "\x1B[32m", format("DEBUG"));
  }
  if (numericLevel <= LEVELS.trace) {
    log.trace = console.debug ? console.debug.bind(console, format("TRACE"), "color: lightgreen") : console.log.bind(console, "\x1B[32m", format("TRACE"));
  }
}, "setLogLevel");
var format = /* @__PURE__ */ __name((level) => {
  const time = dayjs__WEBPACK_IMPORTED_MODULE_0___default()().format("ss.SSS");
  return `%c${time} : ${level} : `;
}, "format");

// src/diagram-api/regexes.ts
var frontMatterRegex = /^-{3}\s*[\n\r](.*?)[\n\r]-{3}\s*[\n\r]+/s;
var directiveRegex = /%{2}{\s*(?:(\w+)\s*:|(\w+))\s*(?:(\w+)|((?:(?!}%{2}).|\r?\n)*))?\s*(?:}%{2})?/gi;
var anyCommentRegex = /\s*%%.*\n/gm;

// src/errors.ts
var UnknownDiagramError = class extends Error {
  static {
    __name(this, "UnknownDiagramError");
  }
  constructor(message) {
    super(message);
    this.name = "UnknownDiagramError";
  }
};

// src/diagram-api/detectType.ts
var detectors = {};
var detectType = /* @__PURE__ */ __name(function(text, config2) {
  text = text.replace(frontMatterRegex, "").replace(directiveRegex, "").replace(anyCommentRegex, "\n");
  for (const [key, { detector }] of Object.entries(detectors)) {
    const diagram = detector(text, config2);
    if (diagram) {
      return key;
    }
  }
  throw new UnknownDiagramError(
    `No diagram type detected matching given configuration for text: ${text}`
  );
}, "detectType");
var registerLazyLoadedDiagrams = /* @__PURE__ */ __name((...diagrams2) => {
  for (const { id, detector, loader } of diagrams2) {
    addDetector(id, detector, loader);
  }
}, "registerLazyLoadedDiagrams");
var addDetector = /* @__PURE__ */ __name((key, detector, loader) => {
  if (detectors[key]) {
    log.warn(`Detector with key ${key} already exists. Overwriting.`);
  }
  detectors[key] = { detector, loader };
  log.debug(`Detector with key ${key} added${loader ? " with loader" : ""}`);
}, "addDetector");
var getDiagramLoader = /* @__PURE__ */ __name((key) => {
  return detectors[key].loader;
}, "getDiagramLoader");

// src/assignWithDepth.ts
var assignWithDepth = /* @__PURE__ */ __name((dst, src, { depth = 2, clobber = false } = {}) => {
  const config2 = { depth, clobber };
  if (Array.isArray(src) && !Array.isArray(dst)) {
    src.forEach((s) => assignWithDepth(dst, s, config2));
    return dst;
  } else if (Array.isArray(src) && Array.isArray(dst)) {
    src.forEach((s) => {
      if (!dst.includes(s)) {
        dst.push(s);
      }
    });
    return dst;
  }
  if (dst === void 0 || depth <= 0) {
    if (dst !== void 0 && dst !== null && typeof dst === "object" && typeof src === "object") {
      return Object.assign(dst, src);
    } else {
      return src;
    }
  }
  if (src !== void 0 && typeof dst === "object" && typeof src === "object") {
    Object.keys(src).forEach((key) => {
      if (typeof src[key] === "object" && (dst[key] === void 0 || typeof dst[key] === "object")) {
        if (dst[key] === void 0) {
          dst[key] = Array.isArray(src[key]) ? [] : {};
        }
        dst[key] = assignWithDepth(dst[key], src[key], { depth: depth - 1, clobber });
      } else if (clobber || typeof dst[key] !== "object" && typeof src[key] !== "object") {
        dst[key] = src[key];
      }
    });
  }
  return dst;
}, "assignWithDepth");
var assignWithDepth_default = assignWithDepth;

// src/themes/theme-base.js


// src/themes/erDiagram-oldHardcodedValues.ts
var oldAttributeBackgroundColorOdd = "#ffffff";
var oldAttributeBackgroundColorEven = "#f2f2f2";

// src/themes/theme-helpers.js

var mkBorder = /* @__PURE__ */ __name((col, darkMode) => darkMode ? (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(col, { s: -40, l: 10 }) : (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(col, { s: -40, l: -10 }), "mkBorder");

// src/themes/theme-base.js
var Theme = class {
  static {
    __name(this, "Theme");
  }
  constructor() {
    this.background = "#f4f4f4";
    this.primaryColor = "#fff4dd";
    this.noteBkgColor = "#fff5ad";
    this.noteTextColor = "#333";
    this.THEME_COLOR_LIMIT = 12;
    this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
    this.fontSize = "16px";
  }
  updateColors() {
    this.primaryTextColor = this.primaryTextColor || (this.darkMode ? "#eee" : "#333");
    this.secondaryColor = this.secondaryColor || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -120 });
    this.tertiaryColor = this.tertiaryColor || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 180, l: 5 });
    this.primaryBorderColor = this.primaryBorderColor || mkBorder(this.primaryColor, this.darkMode);
    this.secondaryBorderColor = this.secondaryBorderColor || mkBorder(this.secondaryColor, this.darkMode);
    this.tertiaryBorderColor = this.tertiaryBorderColor || mkBorder(this.tertiaryColor, this.darkMode);
    this.noteBorderColor = this.noteBorderColor || mkBorder(this.noteBkgColor, this.darkMode);
    this.noteBkgColor = this.noteBkgColor || "#fff5ad";
    this.noteTextColor = this.noteTextColor || "#333";
    this.secondaryTextColor = this.secondaryTextColor || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.secondaryColor);
    this.tertiaryTextColor = this.tertiaryTextColor || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.tertiaryColor);
    this.lineColor = this.lineColor || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.arrowheadColor = this.arrowheadColor || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.textColor = this.textColor || this.primaryTextColor;
    this.border2 = this.border2 || this.tertiaryBorderColor;
    this.nodeBkg = this.nodeBkg || this.primaryColor;
    this.mainBkg = this.mainBkg || this.primaryColor;
    this.nodeBorder = this.nodeBorder || this.primaryBorderColor;
    this.clusterBkg = this.clusterBkg || this.tertiaryColor;
    this.clusterBorder = this.clusterBorder || this.tertiaryBorderColor;
    this.defaultLinkColor = this.defaultLinkColor || this.lineColor;
    this.titleColor = this.titleColor || this.tertiaryTextColor;
    this.edgeLabelBackground = this.edgeLabelBackground || (this.darkMode ? (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.secondaryColor, 30) : this.secondaryColor);
    this.nodeTextColor = this.nodeTextColor || this.primaryTextColor;
    this.actorBorder = this.actorBorder || this.primaryBorderColor;
    this.actorBkg = this.actorBkg || this.mainBkg;
    this.actorTextColor = this.actorTextColor || this.primaryTextColor;
    this.actorLineColor = this.actorLineColor || this.actorBorder;
    this.labelBoxBkgColor = this.labelBoxBkgColor || this.actorBkg;
    this.signalColor = this.signalColor || this.textColor;
    this.signalTextColor = this.signalTextColor || this.textColor;
    this.labelBoxBorderColor = this.labelBoxBorderColor || this.actorBorder;
    this.labelTextColor = this.labelTextColor || this.actorTextColor;
    this.loopTextColor = this.loopTextColor || this.actorTextColor;
    this.activationBorderColor = this.activationBorderColor || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.secondaryColor, 10);
    this.activationBkgColor = this.activationBkgColor || this.secondaryColor;
    this.sequenceNumberColor = this.sequenceNumberColor || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.lineColor);
    this.sectionBkgColor = this.sectionBkgColor || this.tertiaryColor;
    this.altSectionBkgColor = this.altSectionBkgColor || "white";
    this.sectionBkgColor = this.sectionBkgColor || this.secondaryColor;
    this.sectionBkgColor2 = this.sectionBkgColor2 || this.primaryColor;
    this.excludeBkgColor = this.excludeBkgColor || "#eeeeee";
    this.taskBorderColor = this.taskBorderColor || this.primaryBorderColor;
    this.taskBkgColor = this.taskBkgColor || this.primaryColor;
    this.activeTaskBorderColor = this.activeTaskBorderColor || this.primaryColor;
    this.activeTaskBkgColor = this.activeTaskBkgColor || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.primaryColor, 23);
    this.gridColor = this.gridColor || "lightgrey";
    this.doneTaskBkgColor = this.doneTaskBkgColor || "lightgrey";
    this.doneTaskBorderColor = this.doneTaskBorderColor || "grey";
    this.critBorderColor = this.critBorderColor || "#ff8888";
    this.critBkgColor = this.critBkgColor || "red";
    this.todayLineColor = this.todayLineColor || "red";
    this.taskTextColor = this.taskTextColor || this.textColor;
    this.taskTextOutsideColor = this.taskTextOutsideColor || this.textColor;
    this.taskTextLightColor = this.taskTextLightColor || this.textColor;
    this.taskTextColor = this.taskTextColor || this.primaryTextColor;
    this.taskTextDarkColor = this.taskTextDarkColor || this.textColor;
    this.taskTextClickableColor = this.taskTextClickableColor || "#003163";
    this.personBorder = this.personBorder || this.primaryBorderColor;
    this.personBkg = this.personBkg || this.mainBkg;
    if (this.darkMode) {
      this.rowOdd = this.rowOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.mainBkg, 5) || "#ffffff";
      this.rowEven = this.rowEven || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.mainBkg, 10);
    } else {
      this.rowOdd = this.rowOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 75) || "#ffffff";
      this.rowEven = this.rowEven || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 5);
    }
    this.transitionColor = this.transitionColor || this.lineColor;
    this.transitionLabelColor = this.transitionLabelColor || this.textColor;
    this.stateLabelColor = this.stateLabelColor || this.stateBkg || this.primaryTextColor;
    this.stateBkg = this.stateBkg || this.mainBkg;
    this.labelBackgroundColor = this.labelBackgroundColor || this.stateBkg;
    this.compositeBackground = this.compositeBackground || this.background || this.tertiaryColor;
    this.altBackground = this.altBackground || this.tertiaryColor;
    this.compositeTitleBackground = this.compositeTitleBackground || this.mainBkg;
    this.compositeBorder = this.compositeBorder || this.nodeBorder;
    this.innerEndBackground = this.nodeBorder;
    this.errorBkgColor = this.errorBkgColor || this.tertiaryColor;
    this.errorTextColor = this.errorTextColor || this.tertiaryTextColor;
    this.transitionColor = this.transitionColor || this.lineColor;
    this.specialStateColor = this.lineColor;
    this.cScale0 = this.cScale0 || this.primaryColor;
    this.cScale1 = this.cScale1 || this.secondaryColor;
    this.cScale2 = this.cScale2 || this.tertiaryColor;
    this.cScale3 = this.cScale3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 30 });
    this.cScale4 = this.cScale4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.cScale5 = this.cScale5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 90 });
    this.cScale6 = this.cScale6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    this.cScale7 = this.cScale7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 150 });
    this.cScale8 = this.cScale8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 210, l: 150 });
    this.cScale9 = this.cScale9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 270 });
    this.cScale10 = this.cScale10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 300 });
    this.cScale11 = this.cScale11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 330 });
    if (this.darkMode) {
      for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
        this["cScale" + i] = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 75);
      }
    } else {
      for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
        this["cScale" + i] = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 25);
      }
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleInv" + i] = this["cScaleInv" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this["cScale" + i]);
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      if (this.darkMode) {
        this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this["cScale" + i], 10);
      } else {
        this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 10);
      }
    }
    this.scaleLabelColor = this.scaleLabelColor || this.labelTextColor;
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleLabel" + i] = this["cScaleLabel" + i] || this.scaleLabelColor;
    }
    const multiplier = this.darkMode ? -4 : -1;
    for (let i = 0; i < 5; i++) {
      this["surface" + i] = this["surface" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 180, s: -15, l: multiplier * (5 + i * 3) });
      this["surfacePeer" + i] = this["surfacePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 180, s: -15, l: multiplier * (8 + i * 3) });
    }
    this.classText = this.classText || this.textColor;
    this.fillType0 = this.fillType0 || this.primaryColor;
    this.fillType1 = this.fillType1 || this.secondaryColor;
    this.fillType2 = this.fillType2 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 64 });
    this.fillType3 = this.fillType3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 64 });
    this.fillType4 = this.fillType4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -64 });
    this.fillType5 = this.fillType5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: -64 });
    this.fillType6 = this.fillType6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 128 });
    this.fillType7 = this.fillType7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 128 });
    this.pie1 = this.pie1 || this.primaryColor;
    this.pie2 = this.pie2 || this.secondaryColor;
    this.pie3 = this.pie3 || this.tertiaryColor;
    this.pie4 = this.pie4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { l: -10 });
    this.pie5 = this.pie5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { l: -10 });
    this.pie6 = this.pie6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.tertiaryColor, { l: -10 });
    this.pie7 = this.pie7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60, l: -10 });
    this.pie8 = this.pie8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60, l: -10 });
    this.pie9 = this.pie9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120, l: 0 });
    this.pie10 = this.pie10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60, l: -20 });
    this.pie11 = this.pie11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60, l: -20 });
    this.pie12 = this.pie12 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120, l: -10 });
    this.pieTitleTextSize = this.pieTitleTextSize || "25px";
    this.pieTitleTextColor = this.pieTitleTextColor || this.taskTextDarkColor;
    this.pieSectionTextSize = this.pieSectionTextSize || "17px";
    this.pieSectionTextColor = this.pieSectionTextColor || this.textColor;
    this.pieLegendTextSize = this.pieLegendTextSize || "17px";
    this.pieLegendTextColor = this.pieLegendTextColor || this.taskTextDarkColor;
    this.pieStrokeColor = this.pieStrokeColor || "black";
    this.pieStrokeWidth = this.pieStrokeWidth || "2px";
    this.pieOuterStrokeWidth = this.pieOuterStrokeWidth || "2px";
    this.pieOuterStrokeColor = this.pieOuterStrokeColor || "black";
    this.pieOpacity = this.pieOpacity || "0.7";
    this.radar = {
      axisColor: this.radar?.axisColor || this.lineColor,
      axisStrokeWidth: this.radar?.axisStrokeWidth || 2,
      axisLabelFontSize: this.radar?.axisLabelFontSize || 12,
      curveOpacity: this.radar?.curveOpacity || 0.5,
      curveStrokeWidth: this.radar?.curveStrokeWidth || 2,
      graticuleColor: this.radar?.graticuleColor || "#DEDEDE",
      graticuleStrokeWidth: this.radar?.graticuleStrokeWidth || 1,
      graticuleOpacity: this.radar?.graticuleOpacity || 0.3,
      legendBoxSize: this.radar?.legendBoxSize || 12,
      legendFontSize: this.radar?.legendFontSize || 12
    };
    this.archEdgeColor = this.archEdgeColor || "#777";
    this.archEdgeArrowColor = this.archEdgeArrowColor || "#777";
    this.archEdgeWidth = this.archEdgeWidth || "3";
    this.archGroupBorderColor = this.archGroupBorderColor || "#000";
    this.archGroupBorderWidth = this.archGroupBorderWidth || "2px";
    this.quadrant1Fill = this.quadrant1Fill || this.primaryColor;
    this.quadrant2Fill = this.quadrant2Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 5, g: 5, b: 5 });
    this.quadrant3Fill = this.quadrant3Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 10, g: 10, b: 10 });
    this.quadrant4Fill = this.quadrant4Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 15, g: 15, b: 15 });
    this.quadrant1TextFill = this.quadrant1TextFill || this.primaryTextColor;
    this.quadrant2TextFill = this.quadrant2TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -5, g: -5, b: -5 });
    this.quadrant3TextFill = this.quadrant3TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -10, g: -10, b: -10 });
    this.quadrant4TextFill = this.quadrant4TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -15, g: -15, b: -15 });
    this.quadrantPointFill = this.quadrantPointFill || (0,khroma__WEBPACK_IMPORTED_MODULE_5__["default"])(this.quadrant1Fill) ? (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.quadrant1Fill) : (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.quadrant1Fill);
    this.quadrantPointTextFill = this.quadrantPointTextFill || this.primaryTextColor;
    this.quadrantXAxisTextFill = this.quadrantXAxisTextFill || this.primaryTextColor;
    this.quadrantYAxisTextFill = this.quadrantYAxisTextFill || this.primaryTextColor;
    this.quadrantInternalBorderStrokeFill = this.quadrantInternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantExternalBorderStrokeFill = this.quadrantExternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantTitleFill = this.quadrantTitleFill || this.primaryTextColor;
    this.xyChart = {
      backgroundColor: this.xyChart?.backgroundColor || this.background,
      titleColor: this.xyChart?.titleColor || this.primaryTextColor,
      xAxisTitleColor: this.xyChart?.xAxisTitleColor || this.primaryTextColor,
      xAxisLabelColor: this.xyChart?.xAxisLabelColor || this.primaryTextColor,
      xAxisTickColor: this.xyChart?.xAxisTickColor || this.primaryTextColor,
      xAxisLineColor: this.xyChart?.xAxisLineColor || this.primaryTextColor,
      yAxisTitleColor: this.xyChart?.yAxisTitleColor || this.primaryTextColor,
      yAxisLabelColor: this.xyChart?.yAxisLabelColor || this.primaryTextColor,
      yAxisTickColor: this.xyChart?.yAxisTickColor || this.primaryTextColor,
      yAxisLineColor: this.xyChart?.yAxisLineColor || this.primaryTextColor,
      plotColorPalette: this.xyChart?.plotColorPalette || "#FFF4DD,#FFD8B1,#FFA07A,#ECEFF1,#D6DBDF,#C3E0A8,#FFB6A4,#FFD74D,#738FA7,#FFFFF0"
    };
    this.requirementBackground = this.requirementBackground || this.primaryColor;
    this.requirementBorderColor = this.requirementBorderColor || this.primaryBorderColor;
    this.requirementBorderSize = this.requirementBorderSize || "1";
    this.requirementTextColor = this.requirementTextColor || this.primaryTextColor;
    this.relationColor = this.relationColor || this.lineColor;
    this.relationLabelBackground = this.relationLabelBackground || (this.darkMode ? (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.secondaryColor, 30) : this.secondaryColor);
    this.relationLabelColor = this.relationLabelColor || this.actorTextColor;
    this.git0 = this.git0 || this.primaryColor;
    this.git1 = this.git1 || this.secondaryColor;
    this.git2 = this.git2 || this.tertiaryColor;
    this.git3 = this.git3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -30 });
    this.git4 = this.git4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60 });
    this.git5 = this.git5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -90 });
    this.git6 = this.git6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.git7 = this.git7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    if (this.darkMode) {
      this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git0, 25);
      this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git1, 25);
      this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git2, 25);
      this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git3, 25);
      this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git4, 25);
      this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git5, 25);
      this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git6, 25);
      this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git7, 25);
    } else {
      this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git0, 25);
      this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git1, 25);
      this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git2, 25);
      this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git3, 25);
      this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git4, 25);
      this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git5, 25);
      this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git6, 25);
      this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git7, 25);
    }
    this.gitInv0 = this.gitInv0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git0);
    this.gitInv1 = this.gitInv1 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git1);
    this.gitInv2 = this.gitInv2 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git2);
    this.gitInv3 = this.gitInv3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git3);
    this.gitInv4 = this.gitInv4 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git4);
    this.gitInv5 = this.gitInv5 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git5);
    this.gitInv6 = this.gitInv6 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git6);
    this.gitInv7 = this.gitInv7 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git7);
    this.branchLabelColor = this.branchLabelColor || (this.darkMode ? "black" : this.labelTextColor);
    this.gitBranchLabel0 = this.gitBranchLabel0 || this.branchLabelColor;
    this.gitBranchLabel1 = this.gitBranchLabel1 || this.branchLabelColor;
    this.gitBranchLabel2 = this.gitBranchLabel2 || this.branchLabelColor;
    this.gitBranchLabel3 = this.gitBranchLabel3 || this.branchLabelColor;
    this.gitBranchLabel4 = this.gitBranchLabel4 || this.branchLabelColor;
    this.gitBranchLabel5 = this.gitBranchLabel5 || this.branchLabelColor;
    this.gitBranchLabel6 = this.gitBranchLabel6 || this.branchLabelColor;
    this.gitBranchLabel7 = this.gitBranchLabel7 || this.branchLabelColor;
    this.tagLabelColor = this.tagLabelColor || this.primaryTextColor;
    this.tagLabelBackground = this.tagLabelBackground || this.primaryColor;
    this.tagLabelBorder = this.tagBorder || this.primaryBorderColor;
    this.tagLabelFontSize = this.tagLabelFontSize || "10px";
    this.commitLabelColor = this.commitLabelColor || this.secondaryTextColor;
    this.commitLabelBackground = this.commitLabelBackground || this.secondaryColor;
    this.commitLabelFontSize = this.commitLabelFontSize || "10px";
    this.attributeBackgroundColorOdd = this.attributeBackgroundColorOdd || oldAttributeBackgroundColorOdd;
    this.attributeBackgroundColorEven = this.attributeBackgroundColorEven || oldAttributeBackgroundColorEven;
  }
  calculate(overrides) {
    if (typeof overrides !== "object") {
      this.updateColors();
      return;
    }
    const keys = Object.keys(overrides);
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
    this.updateColors();
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
  }
};
var getThemeVariables = /* @__PURE__ */ __name((userOverrides) => {
  const theme = new Theme();
  theme.calculate(userOverrides);
  return theme;
}, "getThemeVariables");

// src/themes/theme-dark.js

var Theme2 = class {
  static {
    __name(this, "Theme");
  }
  constructor() {
    this.background = "#333";
    this.primaryColor = "#1f2020";
    this.secondaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.primaryColor, 16);
    this.tertiaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -160 });
    this.primaryBorderColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.secondaryBorderColor = mkBorder(this.secondaryColor, this.darkMode);
    this.tertiaryBorderColor = mkBorder(this.tertiaryColor, this.darkMode);
    this.primaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.primaryColor);
    this.secondaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.secondaryColor);
    this.tertiaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.tertiaryColor);
    this.lineColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.textColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.mainBkg = "#1f2020";
    this.secondBkg = "calculated";
    this.mainContrastColor = "lightgrey";
    this.darkTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])((0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])("#323D47"), 10);
    this.lineColor = "calculated";
    this.border1 = "#ccc";
    this.border2 = (0,khroma__WEBPACK_IMPORTED_MODULE_6__["default"])(255, 255, 255, 0.25);
    this.arrowheadColor = "calculated";
    this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
    this.fontSize = "16px";
    this.labelBackground = "#181818";
    this.textColor = "#ccc";
    this.THEME_COLOR_LIMIT = 12;
    this.nodeBkg = "calculated";
    this.nodeBorder = "calculated";
    this.clusterBkg = "calculated";
    this.clusterBorder = "calculated";
    this.defaultLinkColor = "calculated";
    this.titleColor = "#F9FFFE";
    this.edgeLabelBackground = "calculated";
    this.actorBorder = "calculated";
    this.actorBkg = "calculated";
    this.actorTextColor = "calculated";
    this.actorLineColor = "calculated";
    this.signalColor = "calculated";
    this.signalTextColor = "calculated";
    this.labelBoxBkgColor = "calculated";
    this.labelBoxBorderColor = "calculated";
    this.labelTextColor = "calculated";
    this.loopTextColor = "calculated";
    this.noteBorderColor = "calculated";
    this.noteBkgColor = "#fff5ad";
    this.noteTextColor = "calculated";
    this.activationBorderColor = "calculated";
    this.activationBkgColor = "calculated";
    this.sequenceNumberColor = "black";
    this.sectionBkgColor = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])("#EAE8D9", 30);
    this.altSectionBkgColor = "calculated";
    this.sectionBkgColor2 = "#EAE8D9";
    this.excludeBkgColor = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.sectionBkgColor, 10);
    this.taskBorderColor = (0,khroma__WEBPACK_IMPORTED_MODULE_6__["default"])(255, 255, 255, 70);
    this.taskBkgColor = "calculated";
    this.taskTextColor = "calculated";
    this.taskTextLightColor = "calculated";
    this.taskTextOutsideColor = "calculated";
    this.taskTextClickableColor = "#003163";
    this.activeTaskBorderColor = (0,khroma__WEBPACK_IMPORTED_MODULE_6__["default"])(255, 255, 255, 50);
    this.activeTaskBkgColor = "#81B1DB";
    this.gridColor = "calculated";
    this.doneTaskBkgColor = "calculated";
    this.doneTaskBorderColor = "grey";
    this.critBorderColor = "#E83737";
    this.critBkgColor = "#E83737";
    this.taskTextDarkColor = "calculated";
    this.todayLineColor = "#DB5757";
    this.personBorder = this.primaryBorderColor;
    this.personBkg = this.mainBkg;
    this.archEdgeColor = "calculated";
    this.archEdgeArrowColor = "calculated";
    this.archEdgeWidth = "3";
    this.archGroupBorderColor = this.primaryBorderColor;
    this.archGroupBorderWidth = "2px";
    this.rowOdd = this.rowOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 5) || "#ffffff";
    this.rowEven = this.rowEven || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.mainBkg, 10);
    this.labelColor = "calculated";
    this.errorBkgColor = "#a44141";
    this.errorTextColor = "#ddd";
  }
  updateColors() {
    this.secondBkg = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 16);
    this.lineColor = this.mainContrastColor;
    this.arrowheadColor = this.mainContrastColor;
    this.nodeBkg = this.mainBkg;
    this.nodeBorder = this.border1;
    this.clusterBkg = this.secondBkg;
    this.clusterBorder = this.border2;
    this.defaultLinkColor = this.lineColor;
    this.edgeLabelBackground = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.labelBackground, 25);
    this.actorBorder = this.border1;
    this.actorBkg = this.mainBkg;
    this.actorTextColor = this.mainContrastColor;
    this.actorLineColor = this.actorBorder;
    this.signalColor = this.mainContrastColor;
    this.signalTextColor = this.mainContrastColor;
    this.labelBoxBkgColor = this.actorBkg;
    this.labelBoxBorderColor = this.actorBorder;
    this.labelTextColor = this.mainContrastColor;
    this.loopTextColor = this.mainContrastColor;
    this.noteBorderColor = this.secondaryBorderColor;
    this.noteBkgColor = this.secondBkg;
    this.noteTextColor = this.secondaryTextColor;
    this.activationBorderColor = this.border1;
    this.activationBkgColor = this.secondBkg;
    this.altSectionBkgColor = this.background;
    this.taskBkgColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 23);
    this.taskTextColor = this.darkTextColor;
    this.taskTextLightColor = this.mainContrastColor;
    this.taskTextOutsideColor = this.taskTextLightColor;
    this.gridColor = this.mainContrastColor;
    this.doneTaskBkgColor = this.mainContrastColor;
    this.taskTextDarkColor = this.darkTextColor;
    this.archEdgeColor = this.lineColor;
    this.archEdgeArrowColor = this.lineColor;
    this.transitionColor = this.transitionColor || this.lineColor;
    this.transitionLabelColor = this.transitionLabelColor || this.textColor;
    this.stateLabelColor = this.stateLabelColor || this.stateBkg || this.primaryTextColor;
    this.stateBkg = this.stateBkg || this.mainBkg;
    this.labelBackgroundColor = this.labelBackgroundColor || this.stateBkg;
    this.compositeBackground = this.compositeBackground || this.background || this.tertiaryColor;
    this.altBackground = this.altBackground || "#555";
    this.compositeTitleBackground = this.compositeTitleBackground || this.mainBkg;
    this.compositeBorder = this.compositeBorder || this.nodeBorder;
    this.innerEndBackground = this.primaryBorderColor;
    this.specialStateColor = "#f4f4f4";
    this.errorBkgColor = this.errorBkgColor || this.tertiaryColor;
    this.errorTextColor = this.errorTextColor || this.tertiaryTextColor;
    this.fillType0 = this.primaryColor;
    this.fillType1 = this.secondaryColor;
    this.fillType2 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 64 });
    this.fillType3 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 64 });
    this.fillType4 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -64 });
    this.fillType5 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: -64 });
    this.fillType6 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 128 });
    this.fillType7 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 128 });
    this.cScale1 = this.cScale1 || "#0b0000";
    this.cScale2 = this.cScale2 || "#4d1037";
    this.cScale3 = this.cScale3 || "#3f5258";
    this.cScale4 = this.cScale4 || "#4f2f1b";
    this.cScale5 = this.cScale5 || "#6e0a0a";
    this.cScale6 = this.cScale6 || "#3b0048";
    this.cScale7 = this.cScale7 || "#995a01";
    this.cScale8 = this.cScale8 || "#154706";
    this.cScale9 = this.cScale9 || "#161722";
    this.cScale10 = this.cScale10 || "#00296f";
    this.cScale11 = this.cScale11 || "#01629c";
    this.cScale12 = this.cScale12 || "#010029";
    this.cScale0 = this.cScale0 || this.primaryColor;
    this.cScale1 = this.cScale1 || this.secondaryColor;
    this.cScale2 = this.cScale2 || this.tertiaryColor;
    this.cScale3 = this.cScale3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 30 });
    this.cScale4 = this.cScale4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.cScale5 = this.cScale5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 90 });
    this.cScale6 = this.cScale6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    this.cScale7 = this.cScale7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 150 });
    this.cScale8 = this.cScale8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 210 });
    this.cScale9 = this.cScale9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 270 });
    this.cScale10 = this.cScale10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 300 });
    this.cScale11 = this.cScale11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 330 });
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleInv" + i] = this["cScaleInv" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this["cScale" + i]);
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this["cScale" + i], 10);
    }
    for (let i = 0; i < 5; i++) {
      this["surface" + i] = this["surface" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 30, s: -30, l: -(-10 + i * 4) });
      this["surfacePeer" + i] = this["surfacePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 30, s: -30, l: -(-7 + i * 4) });
    }
    this.scaleLabelColor = this.scaleLabelColor || (this.darkMode ? "black" : this.labelTextColor);
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleLabel" + i] = this["cScaleLabel" + i] || this.scaleLabelColor;
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["pie" + i] = this["cScale" + i];
    }
    this.pieTitleTextSize = this.pieTitleTextSize || "25px";
    this.pieTitleTextColor = this.pieTitleTextColor || this.taskTextDarkColor;
    this.pieSectionTextSize = this.pieSectionTextSize || "17px";
    this.pieSectionTextColor = this.pieSectionTextColor || this.textColor;
    this.pieLegendTextSize = this.pieLegendTextSize || "17px";
    this.pieLegendTextColor = this.pieLegendTextColor || this.taskTextDarkColor;
    this.pieStrokeColor = this.pieStrokeColor || "black";
    this.pieStrokeWidth = this.pieStrokeWidth || "2px";
    this.pieOuterStrokeWidth = this.pieOuterStrokeWidth || "2px";
    this.pieOuterStrokeColor = this.pieOuterStrokeColor || "black";
    this.pieOpacity = this.pieOpacity || "0.7";
    this.quadrant1Fill = this.quadrant1Fill || this.primaryColor;
    this.quadrant2Fill = this.quadrant2Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 5, g: 5, b: 5 });
    this.quadrant3Fill = this.quadrant3Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 10, g: 10, b: 10 });
    this.quadrant4Fill = this.quadrant4Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 15, g: 15, b: 15 });
    this.quadrant1TextFill = this.quadrant1TextFill || this.primaryTextColor;
    this.quadrant2TextFill = this.quadrant2TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -5, g: -5, b: -5 });
    this.quadrant3TextFill = this.quadrant3TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -10, g: -10, b: -10 });
    this.quadrant4TextFill = this.quadrant4TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -15, g: -15, b: -15 });
    this.quadrantPointFill = this.quadrantPointFill || (0,khroma__WEBPACK_IMPORTED_MODULE_5__["default"])(this.quadrant1Fill) ? (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.quadrant1Fill) : (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.quadrant1Fill);
    this.quadrantPointTextFill = this.quadrantPointTextFill || this.primaryTextColor;
    this.quadrantXAxisTextFill = this.quadrantXAxisTextFill || this.primaryTextColor;
    this.quadrantYAxisTextFill = this.quadrantYAxisTextFill || this.primaryTextColor;
    this.quadrantInternalBorderStrokeFill = this.quadrantInternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantExternalBorderStrokeFill = this.quadrantExternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantTitleFill = this.quadrantTitleFill || this.primaryTextColor;
    this.xyChart = {
      backgroundColor: this.xyChart?.backgroundColor || this.background,
      titleColor: this.xyChart?.titleColor || this.primaryTextColor,
      xAxisTitleColor: this.xyChart?.xAxisTitleColor || this.primaryTextColor,
      xAxisLabelColor: this.xyChart?.xAxisLabelColor || this.primaryTextColor,
      xAxisTickColor: this.xyChart?.xAxisTickColor || this.primaryTextColor,
      xAxisLineColor: this.xyChart?.xAxisLineColor || this.primaryTextColor,
      yAxisTitleColor: this.xyChart?.yAxisTitleColor || this.primaryTextColor,
      yAxisLabelColor: this.xyChart?.yAxisLabelColor || this.primaryTextColor,
      yAxisTickColor: this.xyChart?.yAxisTickColor || this.primaryTextColor,
      yAxisLineColor: this.xyChart?.yAxisLineColor || this.primaryTextColor,
      plotColorPalette: this.xyChart?.plotColorPalette || "#3498db,#2ecc71,#e74c3c,#f1c40f,#bdc3c7,#ffffff,#34495e,#9b59b6,#1abc9c,#e67e22"
    };
    this.packet = {
      startByteColor: this.primaryTextColor,
      endByteColor: this.primaryTextColor,
      labelColor: this.primaryTextColor,
      titleColor: this.primaryTextColor,
      blockStrokeColor: this.primaryTextColor,
      blockFillColor: this.background
    };
    this.radar = {
      axisColor: this.radar?.axisColor || this.lineColor,
      axisStrokeWidth: this.radar?.axisStrokeWidth || 2,
      axisLabelFontSize: this.radar?.axisLabelFontSize || 12,
      curveOpacity: this.radar?.curveOpacity || 0.5,
      curveStrokeWidth: this.radar?.curveStrokeWidth || 2,
      graticuleColor: this.radar?.graticuleColor || "#DEDEDE",
      graticuleStrokeWidth: this.radar?.graticuleStrokeWidth || 1,
      graticuleOpacity: this.radar?.graticuleOpacity || 0.3,
      legendBoxSize: this.radar?.legendBoxSize || 12,
      legendFontSize: this.radar?.legendFontSize || 12
    };
    this.classText = this.primaryTextColor;
    this.requirementBackground = this.requirementBackground || this.primaryColor;
    this.requirementBorderColor = this.requirementBorderColor || this.primaryBorderColor;
    this.requirementBorderSize = this.requirementBorderSize || "1";
    this.requirementTextColor = this.requirementTextColor || this.primaryTextColor;
    this.relationColor = this.relationColor || this.lineColor;
    this.relationLabelBackground = this.relationLabelBackground || (this.darkMode ? (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.secondaryColor, 30) : this.secondaryColor);
    this.relationLabelColor = this.relationLabelColor || this.actorTextColor;
    this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.secondaryColor, 20);
    this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie2 || this.secondaryColor, 20);
    this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie3 || this.tertiaryColor, 20);
    this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -30 }), 20);
    this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60 }), 20);
    this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -90 }), 10);
    this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 }), 10);
    this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.pie8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 }), 20);
    this.gitInv0 = this.gitInv0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git0);
    this.gitInv1 = this.gitInv1 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git1);
    this.gitInv2 = this.gitInv2 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git2);
    this.gitInv3 = this.gitInv3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git3);
    this.gitInv4 = this.gitInv4 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git4);
    this.gitInv5 = this.gitInv5 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git5);
    this.gitInv6 = this.gitInv6 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git6);
    this.gitInv7 = this.gitInv7 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git7);
    this.gitBranchLabel0 = this.gitBranchLabel0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
    this.gitBranchLabel1 = this.gitBranchLabel1 || this.labelTextColor;
    this.gitBranchLabel2 = this.gitBranchLabel2 || this.labelTextColor;
    this.gitBranchLabel3 = this.gitBranchLabel3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
    this.gitBranchLabel4 = this.gitBranchLabel4 || this.labelTextColor;
    this.gitBranchLabel5 = this.gitBranchLabel5 || this.labelTextColor;
    this.gitBranchLabel6 = this.gitBranchLabel6 || this.labelTextColor;
    this.gitBranchLabel7 = this.gitBranchLabel7 || this.labelTextColor;
    this.tagLabelColor = this.tagLabelColor || this.primaryTextColor;
    this.tagLabelBackground = this.tagLabelBackground || this.primaryColor;
    this.tagLabelBorder = this.tagBorder || this.primaryBorderColor;
    this.tagLabelFontSize = this.tagLabelFontSize || "10px";
    this.commitLabelColor = this.commitLabelColor || this.secondaryTextColor;
    this.commitLabelBackground = this.commitLabelBackground || this.secondaryColor;
    this.commitLabelFontSize = this.commitLabelFontSize || "10px";
    this.attributeBackgroundColorOdd = this.attributeBackgroundColorOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.background, 12);
    this.attributeBackgroundColorEven = this.attributeBackgroundColorEven || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.background, 2);
    this.nodeBorder = this.nodeBorder || "#999";
  }
  calculate(overrides) {
    if (typeof overrides !== "object") {
      this.updateColors();
      return;
    }
    const keys = Object.keys(overrides);
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
    this.updateColors();
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
  }
};
var getThemeVariables2 = /* @__PURE__ */ __name((userOverrides) => {
  const theme = new Theme2();
  theme.calculate(userOverrides);
  return theme;
}, "getThemeVariables");

// src/themes/theme-default.js

var Theme3 = class {
  static {
    __name(this, "Theme");
  }
  constructor() {
    this.background = "#f4f4f4";
    this.primaryColor = "#ECECFF";
    this.secondaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    this.secondaryColor = "#ffffde";
    this.tertiaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -160 });
    this.primaryBorderColor = mkBorder(this.primaryColor, this.darkMode);
    this.secondaryBorderColor = mkBorder(this.secondaryColor, this.darkMode);
    this.tertiaryBorderColor = mkBorder(this.tertiaryColor, this.darkMode);
    this.primaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.primaryColor);
    this.secondaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.secondaryColor);
    this.tertiaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.tertiaryColor);
    this.lineColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.textColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.background = "white";
    this.mainBkg = "#ECECFF";
    this.secondBkg = "#ffffde";
    this.lineColor = "#333333";
    this.border1 = "#9370DB";
    this.border2 = "#aaaa33";
    this.arrowheadColor = "#333333";
    this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
    this.fontSize = "16px";
    this.labelBackground = "rgba(232,232,232, 0.8)";
    this.textColor = "#333";
    this.THEME_COLOR_LIMIT = 12;
    this.nodeBkg = "calculated";
    this.nodeBorder = "calculated";
    this.clusterBkg = "calculated";
    this.clusterBorder = "calculated";
    this.defaultLinkColor = "calculated";
    this.titleColor = "calculated";
    this.edgeLabelBackground = "calculated";
    this.actorBorder = "calculated";
    this.actorBkg = "calculated";
    this.actorTextColor = "black";
    this.actorLineColor = "calculated";
    this.signalColor = "calculated";
    this.signalTextColor = "calculated";
    this.labelBoxBkgColor = "calculated";
    this.labelBoxBorderColor = "calculated";
    this.labelTextColor = "calculated";
    this.loopTextColor = "calculated";
    this.noteBorderColor = "calculated";
    this.noteBkgColor = "#fff5ad";
    this.noteTextColor = "calculated";
    this.activationBorderColor = "#666";
    this.activationBkgColor = "#f4f4f4";
    this.sequenceNumberColor = "white";
    this.sectionBkgColor = "calculated";
    this.altSectionBkgColor = "calculated";
    this.sectionBkgColor2 = "calculated";
    this.excludeBkgColor = "#eeeeee";
    this.taskBorderColor = "calculated";
    this.taskBkgColor = "calculated";
    this.taskTextLightColor = "calculated";
    this.taskTextColor = this.taskTextLightColor;
    this.taskTextDarkColor = "calculated";
    this.taskTextOutsideColor = this.taskTextDarkColor;
    this.taskTextClickableColor = "calculated";
    this.activeTaskBorderColor = "calculated";
    this.activeTaskBkgColor = "calculated";
    this.gridColor = "calculated";
    this.doneTaskBkgColor = "calculated";
    this.doneTaskBorderColor = "calculated";
    this.critBorderColor = "calculated";
    this.critBkgColor = "calculated";
    this.todayLineColor = "calculated";
    this.sectionBkgColor = (0,khroma__WEBPACK_IMPORTED_MODULE_6__["default"])(102, 102, 255, 0.49);
    this.altSectionBkgColor = "white";
    this.sectionBkgColor2 = "#fff400";
    this.taskBorderColor = "#534fbc";
    this.taskBkgColor = "#8a90dd";
    this.taskTextLightColor = "white";
    this.taskTextColor = "calculated";
    this.taskTextDarkColor = "black";
    this.taskTextOutsideColor = "calculated";
    this.taskTextClickableColor = "#003163";
    this.activeTaskBorderColor = "#534fbc";
    this.activeTaskBkgColor = "#bfc7ff";
    this.gridColor = "lightgrey";
    this.doneTaskBkgColor = "lightgrey";
    this.doneTaskBorderColor = "grey";
    this.critBorderColor = "#ff8888";
    this.critBkgColor = "red";
    this.todayLineColor = "red";
    this.personBorder = this.primaryBorderColor;
    this.personBkg = this.mainBkg;
    this.archEdgeColor = "calculated";
    this.archEdgeArrowColor = "calculated";
    this.archEdgeWidth = "3";
    this.archGroupBorderColor = this.primaryBorderColor;
    this.archGroupBorderWidth = "2px";
    this.rowOdd = "calculated";
    this.rowEven = "calculated";
    this.labelColor = "black";
    this.errorBkgColor = "#552222";
    this.errorTextColor = "#552222";
    this.updateColors();
  }
  updateColors() {
    this.cScale0 = this.cScale0 || this.primaryColor;
    this.cScale1 = this.cScale1 || this.secondaryColor;
    this.cScale2 = this.cScale2 || this.tertiaryColor;
    this.cScale3 = this.cScale3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 30 });
    this.cScale4 = this.cScale4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.cScale5 = this.cScale5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 90 });
    this.cScale6 = this.cScale6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    this.cScale7 = this.cScale7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 150 });
    this.cScale8 = this.cScale8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 210 });
    this.cScale9 = this.cScale9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 270 });
    this.cScale10 = this.cScale10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 300 });
    this.cScale11 = this.cScale11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 330 });
    this["cScalePeer1"] = this["cScalePeer1"] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.secondaryColor, 45);
    this["cScalePeer2"] = this["cScalePeer2"] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.tertiaryColor, 40);
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScale" + i] = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 10);
      this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 25);
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleInv" + i] = this["cScaleInv" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this["cScale" + i], { h: 180 });
    }
    for (let i = 0; i < 5; i++) {
      this["surface" + i] = this["surface" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 30, l: -(5 + i * 5) });
      this["surfacePeer" + i] = this["surfacePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 30, l: -(7 + i * 5) });
    }
    this.scaleLabelColor = this.scaleLabelColor !== "calculated" && this.scaleLabelColor ? this.scaleLabelColor : this.labelTextColor;
    if (this.labelTextColor !== "calculated") {
      this.cScaleLabel0 = this.cScaleLabel0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
      this.cScaleLabel3 = this.cScaleLabel3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
      for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
        this["cScaleLabel" + i] = this["cScaleLabel" + i] || this.labelTextColor;
      }
    }
    this.nodeBkg = this.mainBkg;
    this.nodeBorder = this.border1;
    this.clusterBkg = this.secondBkg;
    this.clusterBorder = this.border2;
    this.defaultLinkColor = this.lineColor;
    this.titleColor = this.textColor;
    this.edgeLabelBackground = this.labelBackground;
    this.actorBorder = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.border1, 23);
    this.actorBkg = this.mainBkg;
    this.labelBoxBkgColor = this.actorBkg;
    this.signalColor = this.textColor;
    this.signalTextColor = this.textColor;
    this.labelBoxBorderColor = this.actorBorder;
    this.labelTextColor = this.actorTextColor;
    this.loopTextColor = this.actorTextColor;
    this.noteBorderColor = this.border2;
    this.noteTextColor = this.actorTextColor;
    this.actorLineColor = this.actorBorder;
    this.taskTextColor = this.taskTextLightColor;
    this.taskTextOutsideColor = this.taskTextDarkColor;
    this.archEdgeColor = this.lineColor;
    this.archEdgeArrowColor = this.lineColor;
    this.rowOdd = this.rowOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.primaryColor, 75) || "#ffffff";
    this.rowEven = this.rowEven || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.primaryColor, 1);
    this.transitionColor = this.transitionColor || this.lineColor;
    this.transitionLabelColor = this.transitionLabelColor || this.textColor;
    this.stateLabelColor = this.stateLabelColor || this.stateBkg || this.primaryTextColor;
    this.stateBkg = this.stateBkg || this.mainBkg;
    this.labelBackgroundColor = this.labelBackgroundColor || this.stateBkg;
    this.compositeBackground = this.compositeBackground || this.background || this.tertiaryColor;
    this.altBackground = this.altBackground || "#f0f0f0";
    this.compositeTitleBackground = this.compositeTitleBackground || this.mainBkg;
    this.compositeBorder = this.compositeBorder || this.nodeBorder;
    this.innerEndBackground = this.nodeBorder;
    this.specialStateColor = this.lineColor;
    this.errorBkgColor = this.errorBkgColor || this.tertiaryColor;
    this.errorTextColor = this.errorTextColor || this.tertiaryTextColor;
    this.transitionColor = this.transitionColor || this.lineColor;
    this.classText = this.primaryTextColor;
    this.fillType0 = this.primaryColor;
    this.fillType1 = this.secondaryColor;
    this.fillType2 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 64 });
    this.fillType3 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 64 });
    this.fillType4 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -64 });
    this.fillType5 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: -64 });
    this.fillType6 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 128 });
    this.fillType7 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 128 });
    this.pie1 = this.pie1 || this.primaryColor;
    this.pie2 = this.pie2 || this.secondaryColor;
    this.pie3 = this.pie3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.tertiaryColor, { l: -40 });
    this.pie4 = this.pie4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { l: -10 });
    this.pie5 = this.pie5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { l: -30 });
    this.pie6 = this.pie6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.tertiaryColor, { l: -20 });
    this.pie7 = this.pie7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60, l: -20 });
    this.pie8 = this.pie8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60, l: -40 });
    this.pie9 = this.pie9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120, l: -40 });
    this.pie10 = this.pie10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60, l: -40 });
    this.pie11 = this.pie11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -90, l: -40 });
    this.pie12 = this.pie12 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120, l: -30 });
    this.pieTitleTextSize = this.pieTitleTextSize || "25px";
    this.pieTitleTextColor = this.pieTitleTextColor || this.taskTextDarkColor;
    this.pieSectionTextSize = this.pieSectionTextSize || "17px";
    this.pieSectionTextColor = this.pieSectionTextColor || this.textColor;
    this.pieLegendTextSize = this.pieLegendTextSize || "17px";
    this.pieLegendTextColor = this.pieLegendTextColor || this.taskTextDarkColor;
    this.pieStrokeColor = this.pieStrokeColor || "black";
    this.pieStrokeWidth = this.pieStrokeWidth || "2px";
    this.pieOuterStrokeWidth = this.pieOuterStrokeWidth || "2px";
    this.pieOuterStrokeColor = this.pieOuterStrokeColor || "black";
    this.pieOpacity = this.pieOpacity || "0.7";
    this.quadrant1Fill = this.quadrant1Fill || this.primaryColor;
    this.quadrant2Fill = this.quadrant2Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 5, g: 5, b: 5 });
    this.quadrant3Fill = this.quadrant3Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 10, g: 10, b: 10 });
    this.quadrant4Fill = this.quadrant4Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 15, g: 15, b: 15 });
    this.quadrant1TextFill = this.quadrant1TextFill || this.primaryTextColor;
    this.quadrant2TextFill = this.quadrant2TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -5, g: -5, b: -5 });
    this.quadrant3TextFill = this.quadrant3TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -10, g: -10, b: -10 });
    this.quadrant4TextFill = this.quadrant4TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -15, g: -15, b: -15 });
    this.quadrantPointFill = this.quadrantPointFill || (0,khroma__WEBPACK_IMPORTED_MODULE_5__["default"])(this.quadrant1Fill) ? (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.quadrant1Fill) : (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.quadrant1Fill);
    this.quadrantPointTextFill = this.quadrantPointTextFill || this.primaryTextColor;
    this.quadrantXAxisTextFill = this.quadrantXAxisTextFill || this.primaryTextColor;
    this.quadrantYAxisTextFill = this.quadrantYAxisTextFill || this.primaryTextColor;
    this.quadrantInternalBorderStrokeFill = this.quadrantInternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantExternalBorderStrokeFill = this.quadrantExternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantTitleFill = this.quadrantTitleFill || this.primaryTextColor;
    this.radar = {
      axisColor: this.radar?.axisColor || this.lineColor,
      axisStrokeWidth: this.radar?.axisStrokeWidth || 2,
      axisLabelFontSize: this.radar?.axisLabelFontSize || 12,
      curveOpacity: this.radar?.curveOpacity || 0.5,
      curveStrokeWidth: this.radar?.curveStrokeWidth || 2,
      graticuleColor: this.radar?.graticuleColor || "#DEDEDE",
      graticuleStrokeWidth: this.radar?.graticuleStrokeWidth || 1,
      graticuleOpacity: this.radar?.graticuleOpacity || 0.3,
      legendBoxSize: this.radar?.legendBoxSize || 12,
      legendFontSize: this.radar?.legendFontSize || 12
    };
    this.xyChart = {
      backgroundColor: this.xyChart?.backgroundColor || this.background,
      titleColor: this.xyChart?.titleColor || this.primaryTextColor,
      xAxisTitleColor: this.xyChart?.xAxisTitleColor || this.primaryTextColor,
      xAxisLabelColor: this.xyChart?.xAxisLabelColor || this.primaryTextColor,
      xAxisTickColor: this.xyChart?.xAxisTickColor || this.primaryTextColor,
      xAxisLineColor: this.xyChart?.xAxisLineColor || this.primaryTextColor,
      yAxisTitleColor: this.xyChart?.yAxisTitleColor || this.primaryTextColor,
      yAxisLabelColor: this.xyChart?.yAxisLabelColor || this.primaryTextColor,
      yAxisTickColor: this.xyChart?.yAxisTickColor || this.primaryTextColor,
      yAxisLineColor: this.xyChart?.yAxisLineColor || this.primaryTextColor,
      plotColorPalette: this.xyChart?.plotColorPalette || "#ECECFF,#8493A6,#FFC3A0,#DCDDE1,#B8E994,#D1A36F,#C3CDE6,#FFB6C1,#496078,#F8F3E3"
    };
    this.requirementBackground = this.requirementBackground || this.primaryColor;
    this.requirementBorderColor = this.requirementBorderColor || this.primaryBorderColor;
    this.requirementBorderSize = this.requirementBorderSize || "1";
    this.requirementTextColor = this.requirementTextColor || this.primaryTextColor;
    this.relationColor = this.relationColor || this.lineColor;
    this.relationLabelBackground = this.relationLabelBackground || this.labelBackground;
    this.relationLabelColor = this.relationLabelColor || this.actorTextColor;
    this.git0 = this.git0 || this.primaryColor;
    this.git1 = this.git1 || this.secondaryColor;
    this.git2 = this.git2 || this.tertiaryColor;
    this.git3 = this.git3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -30 });
    this.git4 = this.git4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60 });
    this.git5 = this.git5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -90 });
    this.git6 = this.git6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.git7 = this.git7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    if (this.darkMode) {
      this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git0, 25);
      this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git1, 25);
      this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git2, 25);
      this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git3, 25);
      this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git4, 25);
      this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git5, 25);
      this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git6, 25);
      this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git7, 25);
    } else {
      this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git0, 25);
      this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git1, 25);
      this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git2, 25);
      this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git3, 25);
      this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git4, 25);
      this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git5, 25);
      this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git6, 25);
      this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git7, 25);
    }
    this.gitInv0 = this.gitInv0 || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])((0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git0), 25);
    this.gitInv1 = this.gitInv1 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git1);
    this.gitInv2 = this.gitInv2 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git2);
    this.gitInv3 = this.gitInv3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git3);
    this.gitInv4 = this.gitInv4 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git4);
    this.gitInv5 = this.gitInv5 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git5);
    this.gitInv6 = this.gitInv6 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git6);
    this.gitInv7 = this.gitInv7 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git7);
    this.gitBranchLabel0 = this.gitBranchLabel0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
    this.gitBranchLabel1 = this.gitBranchLabel1 || this.labelTextColor;
    this.gitBranchLabel2 = this.gitBranchLabel2 || this.labelTextColor;
    this.gitBranchLabel3 = this.gitBranchLabel3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
    this.gitBranchLabel4 = this.gitBranchLabel4 || this.labelTextColor;
    this.gitBranchLabel5 = this.gitBranchLabel5 || this.labelTextColor;
    this.gitBranchLabel6 = this.gitBranchLabel6 || this.labelTextColor;
    this.gitBranchLabel7 = this.gitBranchLabel7 || this.labelTextColor;
    this.tagLabelColor = this.tagLabelColor || this.primaryTextColor;
    this.tagLabelBackground = this.tagLabelBackground || this.primaryColor;
    this.tagLabelBorder = this.tagBorder || this.primaryBorderColor;
    this.tagLabelFontSize = this.tagLabelFontSize || "10px";
    this.commitLabelColor = this.commitLabelColor || this.secondaryTextColor;
    this.commitLabelBackground = this.commitLabelBackground || this.secondaryColor;
    this.commitLabelFontSize = this.commitLabelFontSize || "10px";
    this.attributeBackgroundColorOdd = this.attributeBackgroundColorOdd || oldAttributeBackgroundColorOdd;
    this.attributeBackgroundColorEven = this.attributeBackgroundColorEven || oldAttributeBackgroundColorEven;
  }
  calculate(overrides) {
    Object.keys(this).forEach((k) => {
      if (this[k] === "calculated") {
        this[k] = void 0;
      }
    });
    if (typeof overrides !== "object") {
      this.updateColors();
      return;
    }
    const keys = Object.keys(overrides);
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
    this.updateColors();
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
  }
};
var getThemeVariables3 = /* @__PURE__ */ __name((userOverrides) => {
  const theme = new Theme3();
  theme.calculate(userOverrides);
  return theme;
}, "getThemeVariables");

// src/themes/theme-forest.js

var Theme4 = class {
  static {
    __name(this, "Theme");
  }
  constructor() {
    this.background = "#f4f4f4";
    this.primaryColor = "#cde498";
    this.secondaryColor = "#cdffb2";
    this.background = "white";
    this.mainBkg = "#cde498";
    this.secondBkg = "#cdffb2";
    this.lineColor = "green";
    this.border1 = "#13540c";
    this.border2 = "#6eaa49";
    this.arrowheadColor = "green";
    this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
    this.fontSize = "16px";
    this.tertiaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])("#cde498", 10);
    this.primaryBorderColor = mkBorder(this.primaryColor, this.darkMode);
    this.secondaryBorderColor = mkBorder(this.secondaryColor, this.darkMode);
    this.tertiaryBorderColor = mkBorder(this.tertiaryColor, this.darkMode);
    this.primaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.primaryColor);
    this.secondaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.secondaryColor);
    this.tertiaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.primaryColor);
    this.lineColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.textColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.THEME_COLOR_LIMIT = 12;
    this.nodeBkg = "calculated";
    this.nodeBorder = "calculated";
    this.clusterBkg = "calculated";
    this.clusterBorder = "calculated";
    this.defaultLinkColor = "calculated";
    this.titleColor = "#333";
    this.edgeLabelBackground = "#e8e8e8";
    this.actorBorder = "calculated";
    this.actorBkg = "calculated";
    this.actorTextColor = "black";
    this.actorLineColor = "calculated";
    this.signalColor = "#333";
    this.signalTextColor = "#333";
    this.labelBoxBkgColor = "calculated";
    this.labelBoxBorderColor = "#326932";
    this.labelTextColor = "calculated";
    this.loopTextColor = "calculated";
    this.noteBorderColor = "calculated";
    this.noteBkgColor = "#fff5ad";
    this.noteTextColor = "calculated";
    this.activationBorderColor = "#666";
    this.activationBkgColor = "#f4f4f4";
    this.sequenceNumberColor = "white";
    this.sectionBkgColor = "#6eaa49";
    this.altSectionBkgColor = "white";
    this.sectionBkgColor2 = "#6eaa49";
    this.excludeBkgColor = "#eeeeee";
    this.taskBorderColor = "calculated";
    this.taskBkgColor = "#487e3a";
    this.taskTextLightColor = "white";
    this.taskTextColor = "calculated";
    this.taskTextDarkColor = "black";
    this.taskTextOutsideColor = "calculated";
    this.taskTextClickableColor = "#003163";
    this.activeTaskBorderColor = "calculated";
    this.activeTaskBkgColor = "calculated";
    this.gridColor = "lightgrey";
    this.doneTaskBkgColor = "lightgrey";
    this.doneTaskBorderColor = "grey";
    this.critBorderColor = "#ff8888";
    this.critBkgColor = "red";
    this.todayLineColor = "red";
    this.personBorder = this.primaryBorderColor;
    this.personBkg = this.mainBkg;
    this.archEdgeColor = "calculated";
    this.archEdgeArrowColor = "calculated";
    this.archEdgeWidth = "3";
    this.archGroupBorderColor = this.primaryBorderColor;
    this.archGroupBorderWidth = "2px";
    this.labelColor = "black";
    this.errorBkgColor = "#552222";
    this.errorTextColor = "#552222";
  }
  updateColors() {
    this.actorBorder = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.mainBkg, 20);
    this.actorBkg = this.mainBkg;
    this.labelBoxBkgColor = this.actorBkg;
    this.labelTextColor = this.actorTextColor;
    this.loopTextColor = this.actorTextColor;
    this.noteBorderColor = this.border2;
    this.noteTextColor = this.actorTextColor;
    this.actorLineColor = this.actorBorder;
    this.cScale0 = this.cScale0 || this.primaryColor;
    this.cScale1 = this.cScale1 || this.secondaryColor;
    this.cScale2 = this.cScale2 || this.tertiaryColor;
    this.cScale3 = this.cScale3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 30 });
    this.cScale4 = this.cScale4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.cScale5 = this.cScale5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 90 });
    this.cScale6 = this.cScale6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    this.cScale7 = this.cScale7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 150 });
    this.cScale8 = this.cScale8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 210 });
    this.cScale9 = this.cScale9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 270 });
    this.cScale10 = this.cScale10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 300 });
    this.cScale11 = this.cScale11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 330 });
    this["cScalePeer1"] = this["cScalePeer1"] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.secondaryColor, 45);
    this["cScalePeer2"] = this["cScalePeer2"] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.tertiaryColor, 40);
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScale" + i] = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 10);
      this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 25);
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleInv" + i] = this["cScaleInv" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this["cScale" + i], { h: 180 });
    }
    this.scaleLabelColor = this.scaleLabelColor !== "calculated" && this.scaleLabelColor ? this.scaleLabelColor : this.labelTextColor;
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleLabel" + i] = this["cScaleLabel" + i] || this.scaleLabelColor;
    }
    for (let i = 0; i < 5; i++) {
      this["surface" + i] = this["surface" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 30, s: -30, l: -(5 + i * 5) });
      this["surfacePeer" + i] = this["surfacePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { h: 30, s: -30, l: -(8 + i * 5) });
    }
    this.nodeBkg = this.mainBkg;
    this.nodeBorder = this.border1;
    this.clusterBkg = this.secondBkg;
    this.clusterBorder = this.border2;
    this.defaultLinkColor = this.lineColor;
    this.taskBorderColor = this.border1;
    this.taskTextColor = this.taskTextLightColor;
    this.taskTextOutsideColor = this.taskTextDarkColor;
    this.activeTaskBorderColor = this.taskBorderColor;
    this.activeTaskBkgColor = this.mainBkg;
    this.archEdgeColor = this.lineColor;
    this.archEdgeArrowColor = this.lineColor;
    this.rowOdd = this.rowOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 75) || "#ffffff";
    this.rowEven = this.rowEven || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 20);
    this.transitionColor = this.transitionColor || this.lineColor;
    this.transitionLabelColor = this.transitionLabelColor || this.textColor;
    this.stateLabelColor = this.stateLabelColor || this.stateBkg || this.primaryTextColor;
    this.stateBkg = this.stateBkg || this.mainBkg;
    this.labelBackgroundColor = this.labelBackgroundColor || this.stateBkg;
    this.compositeBackground = this.compositeBackground || this.background || this.tertiaryColor;
    this.altBackground = this.altBackground || "#f0f0f0";
    this.compositeTitleBackground = this.compositeTitleBackground || this.mainBkg;
    this.compositeBorder = this.compositeBorder || this.nodeBorder;
    this.innerEndBackground = this.primaryBorderColor;
    this.specialStateColor = this.lineColor;
    this.errorBkgColor = this.errorBkgColor || this.tertiaryColor;
    this.errorTextColor = this.errorTextColor || this.tertiaryTextColor;
    this.transitionColor = this.transitionColor || this.lineColor;
    this.classText = this.primaryTextColor;
    this.fillType0 = this.primaryColor;
    this.fillType1 = this.secondaryColor;
    this.fillType2 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 64 });
    this.fillType3 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 64 });
    this.fillType4 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -64 });
    this.fillType5 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: -64 });
    this.fillType6 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 128 });
    this.fillType7 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 128 });
    this.pie1 = this.pie1 || this.primaryColor;
    this.pie2 = this.pie2 || this.secondaryColor;
    this.pie3 = this.pie3 || this.tertiaryColor;
    this.pie4 = this.pie4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { l: -30 });
    this.pie5 = this.pie5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { l: -30 });
    this.pie6 = this.pie6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.tertiaryColor, { h: 40, l: -40 });
    this.pie7 = this.pie7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60, l: -10 });
    this.pie8 = this.pie8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60, l: -10 });
    this.pie9 = this.pie9 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120, l: 0 });
    this.pie10 = this.pie10 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60, l: -50 });
    this.pie11 = this.pie11 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60, l: -50 });
    this.pie12 = this.pie12 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120, l: -50 });
    this.pieTitleTextSize = this.pieTitleTextSize || "25px";
    this.pieTitleTextColor = this.pieTitleTextColor || this.taskTextDarkColor;
    this.pieSectionTextSize = this.pieSectionTextSize || "17px";
    this.pieSectionTextColor = this.pieSectionTextColor || this.textColor;
    this.pieLegendTextSize = this.pieLegendTextSize || "17px";
    this.pieLegendTextColor = this.pieLegendTextColor || this.taskTextDarkColor;
    this.pieStrokeColor = this.pieStrokeColor || "black";
    this.pieStrokeWidth = this.pieStrokeWidth || "2px";
    this.pieOuterStrokeWidth = this.pieOuterStrokeWidth || "2px";
    this.pieOuterStrokeColor = this.pieOuterStrokeColor || "black";
    this.pieOpacity = this.pieOpacity || "0.7";
    this.quadrant1Fill = this.quadrant1Fill || this.primaryColor;
    this.quadrant2Fill = this.quadrant2Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 5, g: 5, b: 5 });
    this.quadrant3Fill = this.quadrant3Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 10, g: 10, b: 10 });
    this.quadrant4Fill = this.quadrant4Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 15, g: 15, b: 15 });
    this.quadrant1TextFill = this.quadrant1TextFill || this.primaryTextColor;
    this.quadrant2TextFill = this.quadrant2TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -5, g: -5, b: -5 });
    this.quadrant3TextFill = this.quadrant3TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -10, g: -10, b: -10 });
    this.quadrant4TextFill = this.quadrant4TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -15, g: -15, b: -15 });
    this.quadrantPointFill = this.quadrantPointFill || (0,khroma__WEBPACK_IMPORTED_MODULE_5__["default"])(this.quadrant1Fill) ? (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.quadrant1Fill) : (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.quadrant1Fill);
    this.quadrantPointTextFill = this.quadrantPointTextFill || this.primaryTextColor;
    this.quadrantXAxisTextFill = this.quadrantXAxisTextFill || this.primaryTextColor;
    this.quadrantYAxisTextFill = this.quadrantYAxisTextFill || this.primaryTextColor;
    this.quadrantInternalBorderStrokeFill = this.quadrantInternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantExternalBorderStrokeFill = this.quadrantExternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantTitleFill = this.quadrantTitleFill || this.primaryTextColor;
    this.packet = {
      startByteColor: this.primaryTextColor,
      endByteColor: this.primaryTextColor,
      labelColor: this.primaryTextColor,
      titleColor: this.primaryTextColor,
      blockStrokeColor: this.primaryTextColor,
      blockFillColor: this.mainBkg
    };
    this.radar = {
      axisColor: this.radar?.axisColor || this.lineColor,
      axisStrokeWidth: this.radar?.axisStrokeWidth || 2,
      axisLabelFontSize: this.radar?.axisLabelFontSize || 12,
      curveOpacity: this.radar?.curveOpacity || 0.5,
      curveStrokeWidth: this.radar?.curveStrokeWidth || 2,
      graticuleColor: this.radar?.graticuleColor || "#DEDEDE",
      graticuleStrokeWidth: this.radar?.graticuleStrokeWidth || 1,
      graticuleOpacity: this.radar?.graticuleOpacity || 0.3,
      legendBoxSize: this.radar?.legendBoxSize || 12,
      legendFontSize: this.radar?.legendFontSize || 12
    };
    this.xyChart = {
      backgroundColor: this.xyChart?.backgroundColor || this.background,
      titleColor: this.xyChart?.titleColor || this.primaryTextColor,
      xAxisTitleColor: this.xyChart?.xAxisTitleColor || this.primaryTextColor,
      xAxisLabelColor: this.xyChart?.xAxisLabelColor || this.primaryTextColor,
      xAxisTickColor: this.xyChart?.xAxisTickColor || this.primaryTextColor,
      xAxisLineColor: this.xyChart?.xAxisLineColor || this.primaryTextColor,
      yAxisTitleColor: this.xyChart?.yAxisTitleColor || this.primaryTextColor,
      yAxisLabelColor: this.xyChart?.yAxisLabelColor || this.primaryTextColor,
      yAxisTickColor: this.xyChart?.yAxisTickColor || this.primaryTextColor,
      yAxisLineColor: this.xyChart?.yAxisLineColor || this.primaryTextColor,
      plotColorPalette: this.xyChart?.plotColorPalette || "#CDE498,#FF6B6B,#A0D2DB,#D7BDE2,#F0F0F0,#FFC3A0,#7FD8BE,#FF9A8B,#FAF3E0,#FFF176"
    };
    this.requirementBackground = this.requirementBackground || this.primaryColor;
    this.requirementBorderColor = this.requirementBorderColor || this.primaryBorderColor;
    this.requirementBorderSize = this.requirementBorderSize || "1";
    this.requirementTextColor = this.requirementTextColor || this.primaryTextColor;
    this.relationColor = this.relationColor || this.lineColor;
    this.relationLabelBackground = this.relationLabelBackground || this.edgeLabelBackground;
    this.relationLabelColor = this.relationLabelColor || this.actorTextColor;
    this.git0 = this.git0 || this.primaryColor;
    this.git1 = this.git1 || this.secondaryColor;
    this.git2 = this.git2 || this.tertiaryColor;
    this.git3 = this.git3 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -30 });
    this.git4 = this.git4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60 });
    this.git5 = this.git5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -90 });
    this.git6 = this.git6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.git7 = this.git7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    if (this.darkMode) {
      this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git0, 25);
      this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git1, 25);
      this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git2, 25);
      this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git3, 25);
      this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git4, 25);
      this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git5, 25);
      this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git6, 25);
      this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.git7, 25);
    } else {
      this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git0, 25);
      this.git1 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git1, 25);
      this.git2 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git2, 25);
      this.git3 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git3, 25);
      this.git4 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git4, 25);
      this.git5 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git5, 25);
      this.git6 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git6, 25);
      this.git7 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.git7, 25);
    }
    this.gitInv0 = this.gitInv0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git0);
    this.gitInv1 = this.gitInv1 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git1);
    this.gitInv2 = this.gitInv2 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git2);
    this.gitInv3 = this.gitInv3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git3);
    this.gitInv4 = this.gitInv4 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git4);
    this.gitInv5 = this.gitInv5 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git5);
    this.gitInv6 = this.gitInv6 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git6);
    this.gitInv7 = this.gitInv7 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git7);
    this.gitBranchLabel0 = this.gitBranchLabel0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
    this.gitBranchLabel1 = this.gitBranchLabel1 || this.labelTextColor;
    this.gitBranchLabel2 = this.gitBranchLabel2 || this.labelTextColor;
    this.gitBranchLabel3 = this.gitBranchLabel3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.labelTextColor);
    this.gitBranchLabel4 = this.gitBranchLabel4 || this.labelTextColor;
    this.gitBranchLabel5 = this.gitBranchLabel5 || this.labelTextColor;
    this.gitBranchLabel6 = this.gitBranchLabel6 || this.labelTextColor;
    this.gitBranchLabel7 = this.gitBranchLabel7 || this.labelTextColor;
    this.tagLabelColor = this.tagLabelColor || this.primaryTextColor;
    this.tagLabelBackground = this.tagLabelBackground || this.primaryColor;
    this.tagLabelBorder = this.tagBorder || this.primaryBorderColor;
    this.tagLabelFontSize = this.tagLabelFontSize || "10px";
    this.commitLabelColor = this.commitLabelColor || this.secondaryTextColor;
    this.commitLabelBackground = this.commitLabelBackground || this.secondaryColor;
    this.commitLabelFontSize = this.commitLabelFontSize || "10px";
    this.attributeBackgroundColorOdd = this.attributeBackgroundColorOdd || oldAttributeBackgroundColorOdd;
    this.attributeBackgroundColorEven = this.attributeBackgroundColorEven || oldAttributeBackgroundColorEven;
  }
  calculate(overrides) {
    if (typeof overrides !== "object") {
      this.updateColors();
      return;
    }
    const keys = Object.keys(overrides);
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
    this.updateColors();
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
  }
};
var getThemeVariables4 = /* @__PURE__ */ __name((userOverrides) => {
  const theme = new Theme4();
  theme.calculate(userOverrides);
  return theme;
}, "getThemeVariables");

// src/themes/theme-neutral.js

var Theme5 = class {
  static {
    __name(this, "Theme");
  }
  constructor() {
    this.primaryColor = "#eee";
    this.contrast = "#707070";
    this.secondaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.contrast, 55);
    this.background = "#ffffff";
    this.tertiaryColor = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -160 });
    this.primaryBorderColor = mkBorder(this.primaryColor, this.darkMode);
    this.secondaryBorderColor = mkBorder(this.secondaryColor, this.darkMode);
    this.tertiaryBorderColor = mkBorder(this.tertiaryColor, this.darkMode);
    this.primaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.primaryColor);
    this.secondaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.secondaryColor);
    this.tertiaryTextColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.tertiaryColor);
    this.lineColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.textColor = (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.background);
    this.mainBkg = "#eee";
    this.secondBkg = "calculated";
    this.lineColor = "#666";
    this.border1 = "#999";
    this.border2 = "calculated";
    this.note = "#ffa";
    this.text = "#333";
    this.critical = "#d42";
    this.done = "#bbb";
    this.arrowheadColor = "#333333";
    this.fontFamily = '"trebuchet ms", verdana, arial, sans-serif';
    this.fontSize = "16px";
    this.THEME_COLOR_LIMIT = 12;
    this.nodeBkg = "calculated";
    this.nodeBorder = "calculated";
    this.clusterBkg = "calculated";
    this.clusterBorder = "calculated";
    this.defaultLinkColor = "calculated";
    this.titleColor = "calculated";
    this.edgeLabelBackground = "white";
    this.actorBorder = "calculated";
    this.actorBkg = "calculated";
    this.actorTextColor = "calculated";
    this.actorLineColor = this.actorBorder;
    this.signalColor = "calculated";
    this.signalTextColor = "calculated";
    this.labelBoxBkgColor = "calculated";
    this.labelBoxBorderColor = "calculated";
    this.labelTextColor = "calculated";
    this.loopTextColor = "calculated";
    this.noteBorderColor = "calculated";
    this.noteBkgColor = "calculated";
    this.noteTextColor = "calculated";
    this.activationBorderColor = "#666";
    this.activationBkgColor = "#f4f4f4";
    this.sequenceNumberColor = "white";
    this.sectionBkgColor = "calculated";
    this.altSectionBkgColor = "white";
    this.sectionBkgColor2 = "calculated";
    this.excludeBkgColor = "#eeeeee";
    this.taskBorderColor = "calculated";
    this.taskBkgColor = "calculated";
    this.taskTextLightColor = "white";
    this.taskTextColor = "calculated";
    this.taskTextDarkColor = "calculated";
    this.taskTextOutsideColor = "calculated";
    this.taskTextClickableColor = "#003163";
    this.activeTaskBorderColor = "calculated";
    this.activeTaskBkgColor = "calculated";
    this.gridColor = "calculated";
    this.doneTaskBkgColor = "calculated";
    this.doneTaskBorderColor = "calculated";
    this.critBkgColor = "calculated";
    this.critBorderColor = "calculated";
    this.todayLineColor = "calculated";
    this.personBorder = this.primaryBorderColor;
    this.personBkg = this.mainBkg;
    this.archEdgeColor = "calculated";
    this.archEdgeArrowColor = "calculated";
    this.archEdgeWidth = "3";
    this.archGroupBorderColor = this.primaryBorderColor;
    this.archGroupBorderWidth = "2px";
    this.rowOdd = this.rowOdd || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.mainBkg, 75) || "#ffffff";
    this.rowEven = this.rowEven || "#f4f4f4";
    this.labelColor = "black";
    this.errorBkgColor = "#552222";
    this.errorTextColor = "#552222";
  }
  updateColors() {
    this.secondBkg = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.contrast, 55);
    this.border2 = this.contrast;
    this.actorBorder = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.border1, 23);
    this.actorBkg = this.mainBkg;
    this.actorTextColor = this.text;
    this.actorLineColor = this.actorBorder;
    this.signalColor = this.text;
    this.signalTextColor = this.text;
    this.labelBoxBkgColor = this.actorBkg;
    this.labelBoxBorderColor = this.actorBorder;
    this.labelTextColor = this.text;
    this.loopTextColor = this.text;
    this.noteBorderColor = "#999";
    this.noteBkgColor = "#666";
    this.noteTextColor = "#fff";
    this.cScale0 = this.cScale0 || "#555";
    this.cScale1 = this.cScale1 || "#F4F4F4";
    this.cScale2 = this.cScale2 || "#555";
    this.cScale3 = this.cScale3 || "#BBB";
    this.cScale4 = this.cScale4 || "#777";
    this.cScale5 = this.cScale5 || "#999";
    this.cScale6 = this.cScale6 || "#DDD";
    this.cScale7 = this.cScale7 || "#FFF";
    this.cScale8 = this.cScale8 || "#DDD";
    this.cScale9 = this.cScale9 || "#BBB";
    this.cScale10 = this.cScale10 || "#999";
    this.cScale11 = this.cScale11 || "#777";
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleInv" + i] = this["cScaleInv" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this["cScale" + i]);
    }
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      if (this.darkMode) {
        this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this["cScale" + i], 10);
      } else {
        this["cScalePeer" + i] = this["cScalePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this["cScale" + i], 10);
      }
    }
    this.scaleLabelColor = this.scaleLabelColor || (this.darkMode ? "black" : this.labelTextColor);
    this.cScaleLabel0 = this.cScaleLabel0 || this.cScale1;
    this.cScaleLabel2 = this.cScaleLabel2 || this.cScale1;
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["cScaleLabel" + i] = this["cScaleLabel" + i] || this.scaleLabelColor;
    }
    for (let i = 0; i < 5; i++) {
      this["surface" + i] = this["surface" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { l: -(5 + i * 5) });
      this["surfacePeer" + i] = this["surfacePeer" + i] || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.mainBkg, { l: -(8 + i * 5) });
    }
    this.nodeBkg = this.mainBkg;
    this.nodeBorder = this.border1;
    this.clusterBkg = this.secondBkg;
    this.clusterBorder = this.border2;
    this.defaultLinkColor = this.lineColor;
    this.titleColor = this.text;
    this.sectionBkgColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.contrast, 30);
    this.sectionBkgColor2 = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.contrast, 30);
    this.taskBorderColor = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.contrast, 10);
    this.taskBkgColor = this.contrast;
    this.taskTextColor = this.taskTextLightColor;
    this.taskTextDarkColor = this.text;
    this.taskTextOutsideColor = this.taskTextDarkColor;
    this.activeTaskBorderColor = this.taskBorderColor;
    this.activeTaskBkgColor = this.mainBkg;
    this.gridColor = (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.border1, 30);
    this.doneTaskBkgColor = this.done;
    this.doneTaskBorderColor = this.lineColor;
    this.critBkgColor = this.critical;
    this.critBorderColor = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.critBkgColor, 10);
    this.todayLineColor = this.critBkgColor;
    this.archEdgeColor = this.lineColor;
    this.archEdgeArrowColor = this.lineColor;
    this.transitionColor = this.transitionColor || "#000";
    this.transitionLabelColor = this.transitionLabelColor || this.textColor;
    this.stateLabelColor = this.stateLabelColor || this.stateBkg || this.primaryTextColor;
    this.stateBkg = this.stateBkg || this.mainBkg;
    this.labelBackgroundColor = this.labelBackgroundColor || this.stateBkg;
    this.compositeBackground = this.compositeBackground || this.background || this.tertiaryColor;
    this.altBackground = this.altBackground || "#f4f4f4";
    this.compositeTitleBackground = this.compositeTitleBackground || this.mainBkg;
    this.stateBorder = this.stateBorder || "#000";
    this.innerEndBackground = this.primaryBorderColor;
    this.specialStateColor = "#222";
    this.errorBkgColor = this.errorBkgColor || this.tertiaryColor;
    this.errorTextColor = this.errorTextColor || this.tertiaryTextColor;
    this.classText = this.primaryTextColor;
    this.fillType0 = this.primaryColor;
    this.fillType1 = this.secondaryColor;
    this.fillType2 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 64 });
    this.fillType3 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 64 });
    this.fillType4 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -64 });
    this.fillType5 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: -64 });
    this.fillType6 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 128 });
    this.fillType7 = (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.secondaryColor, { h: 128 });
    for (let i = 0; i < this.THEME_COLOR_LIMIT; i++) {
      this["pie" + i] = this["cScale" + i];
    }
    this.pie12 = this.pie0;
    this.pieTitleTextSize = this.pieTitleTextSize || "25px";
    this.pieTitleTextColor = this.pieTitleTextColor || this.taskTextDarkColor;
    this.pieSectionTextSize = this.pieSectionTextSize || "17px";
    this.pieSectionTextColor = this.pieSectionTextColor || this.textColor;
    this.pieLegendTextSize = this.pieLegendTextSize || "17px";
    this.pieLegendTextColor = this.pieLegendTextColor || this.taskTextDarkColor;
    this.pieStrokeColor = this.pieStrokeColor || "black";
    this.pieStrokeWidth = this.pieStrokeWidth || "2px";
    this.pieOuterStrokeWidth = this.pieOuterStrokeWidth || "2px";
    this.pieOuterStrokeColor = this.pieOuterStrokeColor || "black";
    this.pieOpacity = this.pieOpacity || "0.7";
    this.quadrant1Fill = this.quadrant1Fill || this.primaryColor;
    this.quadrant2Fill = this.quadrant2Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 5, g: 5, b: 5 });
    this.quadrant3Fill = this.quadrant3Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 10, g: 10, b: 10 });
    this.quadrant4Fill = this.quadrant4Fill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { r: 15, g: 15, b: 15 });
    this.quadrant1TextFill = this.quadrant1TextFill || this.primaryTextColor;
    this.quadrant2TextFill = this.quadrant2TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -5, g: -5, b: -5 });
    this.quadrant3TextFill = this.quadrant3TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -10, g: -10, b: -10 });
    this.quadrant4TextFill = this.quadrant4TextFill || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryTextColor, { r: -15, g: -15, b: -15 });
    this.quadrantPointFill = this.quadrantPointFill || (0,khroma__WEBPACK_IMPORTED_MODULE_5__["default"])(this.quadrant1Fill) ? (0,khroma__WEBPACK_IMPORTED_MODULE_4__["default"])(this.quadrant1Fill) : (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.quadrant1Fill);
    this.quadrantPointTextFill = this.quadrantPointTextFill || this.primaryTextColor;
    this.quadrantXAxisTextFill = this.quadrantXAxisTextFill || this.primaryTextColor;
    this.quadrantYAxisTextFill = this.quadrantYAxisTextFill || this.primaryTextColor;
    this.quadrantInternalBorderStrokeFill = this.quadrantInternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantExternalBorderStrokeFill = this.quadrantExternalBorderStrokeFill || this.primaryBorderColor;
    this.quadrantTitleFill = this.quadrantTitleFill || this.primaryTextColor;
    this.xyChart = {
      backgroundColor: this.xyChart?.backgroundColor || this.background,
      titleColor: this.xyChart?.titleColor || this.primaryTextColor,
      xAxisTitleColor: this.xyChart?.xAxisTitleColor || this.primaryTextColor,
      xAxisLabelColor: this.xyChart?.xAxisLabelColor || this.primaryTextColor,
      xAxisTickColor: this.xyChart?.xAxisTickColor || this.primaryTextColor,
      xAxisLineColor: this.xyChart?.xAxisLineColor || this.primaryTextColor,
      yAxisTitleColor: this.xyChart?.yAxisTitleColor || this.primaryTextColor,
      yAxisLabelColor: this.xyChart?.yAxisLabelColor || this.primaryTextColor,
      yAxisTickColor: this.xyChart?.yAxisTickColor || this.primaryTextColor,
      yAxisLineColor: this.xyChart?.yAxisLineColor || this.primaryTextColor,
      plotColorPalette: this.xyChart?.plotColorPalette || "#EEE,#6BB8E4,#8ACB88,#C7ACD6,#E8DCC2,#FFB2A8,#FFF380,#7E8D91,#FFD8B1,#FAF3E0"
    };
    this.radar = {
      axisColor: this.radar?.axisColor || this.lineColor,
      axisStrokeWidth: this.radar?.axisStrokeWidth || 2,
      axisLabelFontSize: this.radar?.axisLabelFontSize || 12,
      curveOpacity: this.radar?.curveOpacity || 0.5,
      curveStrokeWidth: this.radar?.curveStrokeWidth || 2,
      graticuleColor: this.radar?.graticuleColor || "#DEDEDE",
      graticuleStrokeWidth: this.radar?.graticuleStrokeWidth || 1,
      graticuleOpacity: this.radar?.graticuleOpacity || 0.3,
      legendBoxSize: this.radar?.legendBoxSize || 12,
      legendFontSize: this.radar?.legendFontSize || 12
    };
    this.requirementBackground = this.requirementBackground || this.primaryColor;
    this.requirementBorderColor = this.requirementBorderColor || this.primaryBorderColor;
    this.requirementBorderSize = this.requirementBorderSize || "1";
    this.requirementTextColor = this.requirementTextColor || this.primaryTextColor;
    this.relationColor = this.relationColor || this.lineColor;
    this.relationLabelBackground = this.relationLabelBackground || this.edgeLabelBackground;
    this.relationLabelColor = this.relationLabelColor || this.actorTextColor;
    this.git0 = (0,khroma__WEBPACK_IMPORTED_MODULE_3__["default"])(this.pie1, 25) || this.primaryColor;
    this.git1 = this.pie2 || this.secondaryColor;
    this.git2 = this.pie3 || this.tertiaryColor;
    this.git3 = this.pie4 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -30 });
    this.git4 = this.pie5 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -60 });
    this.git5 = this.pie6 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: -90 });
    this.git6 = this.pie7 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 60 });
    this.git7 = this.pie8 || (0,khroma__WEBPACK_IMPORTED_MODULE_1__["default"])(this.primaryColor, { h: 120 });
    this.gitInv0 = this.gitInv0 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git0);
    this.gitInv1 = this.gitInv1 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git1);
    this.gitInv2 = this.gitInv2 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git2);
    this.gitInv3 = this.gitInv3 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git3);
    this.gitInv4 = this.gitInv4 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git4);
    this.gitInv5 = this.gitInv5 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git5);
    this.gitInv6 = this.gitInv6 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git6);
    this.gitInv7 = this.gitInv7 || (0,khroma__WEBPACK_IMPORTED_MODULE_2__["default"])(this.git7);
    this.branchLabelColor = this.branchLabelColor || this.labelTextColor;
    this.gitBranchLabel0 = this.branchLabelColor;
    this.gitBranchLabel1 = "white";
    this.gitBranchLabel2 = this.branchLabelColor;
    this.gitBranchLabel3 = "white";
    this.gitBranchLabel4 = this.branchLabelColor;
    this.gitBranchLabel5 = this.branchLabelColor;
    this.gitBranchLabel6 = this.branchLabelColor;
    this.gitBranchLabel7 = this.branchLabelColor;
    this.tagLabelColor = this.tagLabelColor || this.primaryTextColor;
    this.tagLabelBackground = this.tagLabelBackground || this.primaryColor;
    this.tagLabelBorder = this.tagBorder || this.primaryBorderColor;
    this.tagLabelFontSize = this.tagLabelFontSize || "10px";
    this.commitLabelColor = this.commitLabelColor || this.secondaryTextColor;
    this.commitLabelBackground = this.commitLabelBackground || this.secondaryColor;
    this.commitLabelFontSize = this.commitLabelFontSize || "10px";
    this.attributeBackgroundColorOdd = this.attributeBackgroundColorOdd || oldAttributeBackgroundColorOdd;
    this.attributeBackgroundColorEven = this.attributeBackgroundColorEven || oldAttributeBackgroundColorEven;
  }
  calculate(overrides) {
    if (typeof overrides !== "object") {
      this.updateColors();
      return;
    }
    const keys = Object.keys(overrides);
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
    this.updateColors();
    keys.forEach((k) => {
      this[k] = overrides[k];
    });
  }
};
var getThemeVariables5 = /* @__PURE__ */ __name((userOverrides) => {
  const theme = new Theme5();
  theme.calculate(userOverrides);
  return theme;
}, "getThemeVariables");

// src/themes/index.js
var themes_default = {
  base: {
    getThemeVariables
  },
  dark: {
    getThemeVariables: getThemeVariables2
  },
  default: {
    getThemeVariables: getThemeVariables3
  },
  forest: {
    getThemeVariables: getThemeVariables4
  },
  neutral: {
    getThemeVariables: getThemeVariables5
  }
};

// src/schemas/config.schema.yaml?only-defaults=true
var config_schema_default = {
  "flowchart": {
    "useMaxWidth": true,
    "titleTopMargin": 25,
    "subGraphTitleMargin": {
      "top": 0,
      "bottom": 0
    },
    "diagramPadding": 8,
    "htmlLabels": true,
    "nodeSpacing": 50,
    "rankSpacing": 50,
    "curve": "basis",
    "padding": 15,
    "defaultRenderer": "dagre-wrapper",
    "wrappingWidth": 200
  },
  "sequence": {
    "useMaxWidth": true,
    "hideUnusedParticipants": false,
    "activationWidth": 10,
    "diagramMarginX": 50,
    "diagramMarginY": 10,
    "actorMargin": 50,
    "width": 150,
    "height": 65,
    "boxMargin": 10,
    "boxTextMargin": 5,
    "noteMargin": 10,
    "messageMargin": 35,
    "messageAlign": "center",
    "mirrorActors": true,
    "forceMenus": false,
    "bottomMarginAdj": 1,
    "rightAngles": false,
    "showSequenceNumbers": false,
    "actorFontSize": 14,
    "actorFontFamily": '"Open Sans", sans-serif',
    "actorFontWeight": 400,
    "noteFontSize": 14,
    "noteFontFamily": '"trebuchet ms", verdana, arial, sans-serif',
    "noteFontWeight": 400,
    "noteAlign": "center",
    "messageFontSize": 16,
    "messageFontFamily": '"trebuchet ms", verdana, arial, sans-serif',
    "messageFontWeight": 400,
    "wrap": false,
    "wrapPadding": 10,
    "labelBoxWidth": 50,
    "labelBoxHeight": 20
  },
  "gantt": {
    "useMaxWidth": true,
    "titleTopMargin": 25,
    "barHeight": 20,
    "barGap": 4,
    "topPadding": 50,
    "rightPadding": 75,
    "leftPadding": 75,
    "gridLineStartPadding": 35,
    "fontSize": 11,
    "sectionFontSize": 11,
    "numberSectionStyles": 4,
    "axisFormat": "%Y-%m-%d",
    "topAxis": false,
    "displayMode": "",
    "weekday": "sunday"
  },
  "journey": {
    "useMaxWidth": true,
    "diagramMarginX": 50,
    "diagramMarginY": 10,
    "leftMargin": 150,
    "width": 150,
    "height": 50,
    "boxMargin": 10,
    "boxTextMargin": 5,
    "noteMargin": 10,
    "messageMargin": 35,
    "messageAlign": "center",
    "bottomMarginAdj": 1,
    "rightAngles": false,
    "taskFontSize": 14,
    "taskFontFamily": '"Open Sans", sans-serif',
    "taskMargin": 50,
    "activationWidth": 10,
    "textPlacement": "fo",
    "actorColours": [
      "#8FBC8F",
      "#7CFC00",
      "#00FFFF",
      "#20B2AA",
      "#B0E0E6",
      "#FFFFE0"
    ],
    "sectionFills": [
      "#191970",
      "#8B008B",
      "#4B0082",
      "#2F4F4F",
      "#800000",
      "#8B4513",
      "#00008B"
    ],
    "sectionColours": [
      "#fff"
    ]
  },
  "class": {
    "useMaxWidth": true,
    "titleTopMargin": 25,
    "arrowMarkerAbsolute": false,
    "dividerMargin": 10,
    "padding": 5,
    "textHeight": 10,
    "defaultRenderer": "dagre-wrapper",
    "htmlLabels": false,
    "hideEmptyMembersBox": false
  },
  "state": {
    "useMaxWidth": true,
    "titleTopMargin": 25,
    "dividerMargin": 10,
    "sizeUnit": 5,
    "padding": 8,
    "textHeight": 10,
    "titleShift": -15,
    "noteMargin": 10,
    "forkWidth": 70,
    "forkHeight": 7,
    "miniPadding": 2,
    "fontSizeFactor": 5.02,
    "fontSize": 24,
    "labelHeight": 16,
    "edgeLengthFactor": "20",
    "compositTitleSize": 35,
    "radius": 5,
    "defaultRenderer": "dagre-wrapper"
  },
  "er": {
    "useMaxWidth": true,
    "titleTopMargin": 25,
    "diagramPadding": 20,
    "layoutDirection": "TB",
    "minEntityWidth": 100,
    "minEntityHeight": 75,
    "entityPadding": 15,
    "nodeSpacing": 140,
    "rankSpacing": 80,
    "stroke": "gray",
    "fill": "honeydew",
    "fontSize": 12
  },
  "pie": {
    "useMaxWidth": true,
    "textPosition": 0.75
  },
  "quadrantChart": {
    "useMaxWidth": true,
    "chartWidth": 500,
    "chartHeight": 500,
    "titleFontSize": 20,
    "titlePadding": 10,
    "quadrantPadding": 5,
    "xAxisLabelPadding": 5,
    "yAxisLabelPadding": 5,
    "xAxisLabelFontSize": 16,
    "yAxisLabelFontSize": 16,
    "quadrantLabelFontSize": 16,
    "quadrantTextTopPadding": 5,
    "pointTextPadding": 5,
    "pointLabelFontSize": 12,
    "pointRadius": 5,
    "xAxisPosition": "top",
    "yAxisPosition": "left",
    "quadrantInternalBorderStrokeWidth": 1,
    "quadrantExternalBorderStrokeWidth": 2
  },
  "xyChart": {
    "useMaxWidth": true,
    "width": 700,
    "height": 500,
    "titleFontSize": 20,
    "titlePadding": 10,
    "showTitle": true,
    "xAxis": {
      "$ref": "#/$defs/XYChartAxisConfig",
      "showLabel": true,
      "labelFontSize": 14,
      "labelPadding": 5,
      "showTitle": true,
      "titleFontSize": 16,
      "titlePadding": 5,
      "showTick": true,
      "tickLength": 5,
      "tickWidth": 2,
      "showAxisLine": true,
      "axisLineWidth": 2
    },
    "yAxis": {
      "$ref": "#/$defs/XYChartAxisConfig",
      "showLabel": true,
      "labelFontSize": 14,
      "labelPadding": 5,
      "showTitle": true,
      "titleFontSize": 16,
      "titlePadding": 5,
      "showTick": true,
      "tickLength": 5,
      "tickWidth": 2,
      "showAxisLine": true,
      "axisLineWidth": 2
    },
    "chartOrientation": "vertical",
    "plotReservedSpacePercent": 50
  },
  "requirement": {
    "useMaxWidth": true,
    "rect_fill": "#f9f9f9",
    "text_color": "#333",
    "rect_border_size": "0.5px",
    "rect_border_color": "#bbb",
    "rect_min_width": 200,
    "rect_min_height": 200,
    "fontSize": 14,
    "rect_padding": 10,
    "line_height": 20
  },
  "mindmap": {
    "useMaxWidth": true,
    "padding": 10,
    "maxNodeWidth": 200
  },
  "kanban": {
    "useMaxWidth": true,
    "padding": 8,
    "sectionWidth": 200,
    "ticketBaseUrl": ""
  },
  "timeline": {
    "useMaxWidth": true,
    "diagramMarginX": 50,
    "diagramMarginY": 10,
    "leftMargin": 150,
    "width": 150,
    "height": 50,
    "boxMargin": 10,
    "boxTextMargin": 5,
    "noteMargin": 10,
    "messageMargin": 35,
    "messageAlign": "center",
    "bottomMarginAdj": 1,
    "rightAngles": false,
    "taskFontSize": 14,
    "taskFontFamily": '"Open Sans", sans-serif',
    "taskMargin": 50,
    "activationWidth": 10,
    "textPlacement": "fo",
    "actorColours": [
      "#8FBC8F",
      "#7CFC00",
      "#00FFFF",
      "#20B2AA",
      "#B0E0E6",
      "#FFFFE0"
    ],
    "sectionFills": [
      "#191970",
      "#8B008B",
      "#4B0082",
      "#2F4F4F",
      "#800000",
      "#8B4513",
      "#00008B"
    ],
    "sectionColours": [
      "#fff"
    ],
    "disableMulticolor": false
  },
  "gitGraph": {
    "useMaxWidth": true,
    "titleTopMargin": 25,
    "diagramPadding": 8,
    "nodeLabel": {
      "width": 75,
      "height": 100,
      "x": -25,
      "y": 0
    },
    "mainBranchName": "main",
    "mainBranchOrder": 0,
    "showCommitLabel": true,
    "showBranches": true,
    "rotateCommitLabel": true,
    "parallelCommits": false,
    "arrowMarkerAbsolute": false
  },
  "c4": {
    "useMaxWidth": true,
    "diagramMarginX": 50,
    "diagramMarginY": 10,
    "c4ShapeMargin": 50,
    "c4ShapePadding": 20,
    "width": 216,
    "height": 60,
    "boxMargin": 10,
    "c4ShapeInRow": 4,
    "nextLinePaddingX": 0,
    "c4BoundaryInRow": 2,
    "personFontSize": 14,
    "personFontFamily": '"Open Sans", sans-serif',
    "personFontWeight": "normal",
    "external_personFontSize": 14,
    "external_personFontFamily": '"Open Sans", sans-serif',
    "external_personFontWeight": "normal",
    "systemFontSize": 14,
    "systemFontFamily": '"Open Sans", sans-serif',
    "systemFontWeight": "normal",
    "external_systemFontSize": 14,
    "external_systemFontFamily": '"Open Sans", sans-serif',
    "external_systemFontWeight": "normal",
    "system_dbFontSize": 14,
    "system_dbFontFamily": '"Open Sans", sans-serif',
    "system_dbFontWeight": "normal",
    "external_system_dbFontSize": 14,
    "external_system_dbFontFamily": '"Open Sans", sans-serif',
    "external_system_dbFontWeight": "normal",
    "system_queueFontSize": 14,
    "system_queueFontFamily": '"Open Sans", sans-serif',
    "system_queueFontWeight": "normal",
    "external_system_queueFontSize": 14,
    "external_system_queueFontFamily": '"Open Sans", sans-serif',
    "external_system_queueFontWeight": "normal",
    "boundaryFontSize": 14,
    "boundaryFontFamily": '"Open Sans", sans-serif',
    "boundaryFontWeight": "normal",
    "messageFontSize": 12,
    "messageFontFamily": '"Open Sans", sans-serif',
    "messageFontWeight": "normal",
    "containerFontSize": 14,
    "containerFontFamily": '"Open Sans", sans-serif',
    "containerFontWeight": "normal",
    "external_containerFontSize": 14,
    "external_containerFontFamily": '"Open Sans", sans-serif',
    "external_containerFontWeight": "normal",
    "container_dbFontSize": 14,
    "container_dbFontFamily": '"Open Sans", sans-serif',
    "container_dbFontWeight": "normal",
    "external_container_dbFontSize": 14,
    "external_container_dbFontFamily": '"Open Sans", sans-serif',
    "external_container_dbFontWeight": "normal",
    "container_queueFontSize": 14,
    "container_queueFontFamily": '"Open Sans", sans-serif',
    "container_queueFontWeight": "normal",
    "external_container_queueFontSize": 14,
    "external_container_queueFontFamily": '"Open Sans", sans-serif',
    "external_container_queueFontWeight": "normal",
    "componentFontSize": 14,
    "componentFontFamily": '"Open Sans", sans-serif',
    "componentFontWeight": "normal",
    "external_componentFontSize": 14,
    "external_componentFontFamily": '"Open Sans", sans-serif',
    "external_componentFontWeight": "normal",
    "component_dbFontSize": 14,
    "component_dbFontFamily": '"Open Sans", sans-serif',
    "component_dbFontWeight": "normal",
    "external_component_dbFontSize": 14,
    "external_component_dbFontFamily": '"Open Sans", sans-serif',
    "external_component_dbFontWeight": "normal",
    "component_queueFontSize": 14,
    "component_queueFontFamily": '"Open Sans", sans-serif',
    "component_queueFontWeight": "normal",
    "external_component_queueFontSize": 14,
    "external_component_queueFontFamily": '"Open Sans", sans-serif',
    "external_component_queueFontWeight": "normal",
    "wrap": true,
    "wrapPadding": 10,
    "person_bg_color": "#08427B",
    "person_border_color": "#073B6F",
    "external_person_bg_color": "#686868",
    "external_person_border_color": "#8A8A8A",
    "system_bg_color": "#1168BD",
    "system_border_color": "#3C7FC0",
    "system_db_bg_color": "#1168BD",
    "system_db_border_color": "#3C7FC0",
    "system_queue_bg_color": "#1168BD",
    "system_queue_border_color": "#3C7FC0",
    "external_system_bg_color": "#999999",
    "external_system_border_color": "#8A8A8A",
    "external_system_db_bg_color": "#999999",
    "external_system_db_border_color": "#8A8A8A",
    "external_system_queue_bg_color": "#999999",
    "external_system_queue_border_color": "#8A8A8A",
    "container_bg_color": "#438DD5",
    "container_border_color": "#3C7FC0",
    "container_db_bg_color": "#438DD5",
    "container_db_border_color": "#3C7FC0",
    "container_queue_bg_color": "#438DD5",
    "container_queue_border_color": "#3C7FC0",
    "external_container_bg_color": "#B3B3B3",
    "external_container_border_color": "#A6A6A6",
    "external_container_db_bg_color": "#B3B3B3",
    "external_container_db_border_color": "#A6A6A6",
    "external_container_queue_bg_color": "#B3B3B3",
    "external_container_queue_border_color": "#A6A6A6",
    "component_bg_color": "#85BBF0",
    "component_border_color": "#78A8D8",
    "component_db_bg_color": "#85BBF0",
    "component_db_border_color": "#78A8D8",
    "component_queue_bg_color": "#85BBF0",
    "component_queue_border_color": "#78A8D8",
    "external_component_bg_color": "#CCCCCC",
    "external_component_border_color": "#BFBFBF",
    "external_component_db_bg_color": "#CCCCCC",
    "external_component_db_border_color": "#BFBFBF",
    "external_component_queue_bg_color": "#CCCCCC",
    "external_component_queue_border_color": "#BFBFBF"
  },
  "sankey": {
    "useMaxWidth": true,
    "width": 600,
    "height": 400,
    "linkColor": "gradient",
    "nodeAlignment": "justify",
    "showValues": true,
    "prefix": "",
    "suffix": ""
  },
  "block": {
    "useMaxWidth": true,
    "padding": 8
  },
  "packet": {
    "useMaxWidth": true,
    "rowHeight": 32,
    "bitWidth": 32,
    "bitsPerRow": 32,
    "showBits": true,
    "paddingX": 5,
    "paddingY": 5
  },
  "architecture": {
    "useMaxWidth": true,
    "padding": 40,
    "iconSize": 80,
    "fontSize": 16
  },
  "radar": {
    "useMaxWidth": true,
    "width": 600,
    "height": 600,
    "marginTop": 50,
    "marginRight": 50,
    "marginBottom": 50,
    "marginLeft": 50,
    "axisScaleFactor": 1,
    "axisLabelFactor": 1.05,
    "curveTension": 0.17
  },
  "theme": "default",
  "look": "classic",
  "handDrawnSeed": 0,
  "layout": "dagre",
  "maxTextSize": 5e4,
  "maxEdges": 500,
  "darkMode": false,
  "fontFamily": '"trebuchet ms", verdana, arial, sans-serif;',
  "logLevel": 5,
  "securityLevel": "strict",
  "startOnLoad": true,
  "arrowMarkerAbsolute": false,
  "secure": [
    "secure",
    "securityLevel",
    "startOnLoad",
    "maxTextSize",
    "suppressErrorRendering",
    "maxEdges"
  ],
  "legacyMathML": false,
  "forceLegacyMathML": false,
  "deterministicIds": false,
  "fontSize": 16,
  "markdownAutoWrap": true,
  "suppressErrorRendering": false
};

// src/defaultConfig.ts
var config = {
  ...config_schema_default,
  // Set, even though they're `undefined` so that `configKeys` finds these keys
  // TODO: Should we replace these with `null` so that they can go in the JSON Schema?
  deterministicIDSeed: void 0,
  elk: {
    // mergeEdges is needed here to be considered
    mergeEdges: false,
    nodePlacementStrategy: "BRANDES_KOEPF"
  },
  themeCSS: void 0,
  // add non-JSON default config values
  themeVariables: themes_default.default.getThemeVariables(),
  sequence: {
    ...config_schema_default.sequence,
    messageFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.messageFontFamily,
        fontSize: this.messageFontSize,
        fontWeight: this.messageFontWeight
      };
    }, "messageFont"),
    noteFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.noteFontFamily,
        fontSize: this.noteFontSize,
        fontWeight: this.noteFontWeight
      };
    }, "noteFont"),
    actorFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.actorFontFamily,
        fontSize: this.actorFontSize,
        fontWeight: this.actorFontWeight
      };
    }, "actorFont")
  },
  class: {
    hideEmptyMembersBox: false
  },
  gantt: {
    ...config_schema_default.gantt,
    tickInterval: void 0,
    useWidth: void 0
    // can probably be removed since `configKeys` already includes this
  },
  c4: {
    ...config_schema_default.c4,
    useWidth: void 0,
    personFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.personFontFamily,
        fontSize: this.personFontSize,
        fontWeight: this.personFontWeight
      };
    }, "personFont"),
    external_personFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_personFontFamily,
        fontSize: this.external_personFontSize,
        fontWeight: this.external_personFontWeight
      };
    }, "external_personFont"),
    systemFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.systemFontFamily,
        fontSize: this.systemFontSize,
        fontWeight: this.systemFontWeight
      };
    }, "systemFont"),
    external_systemFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_systemFontFamily,
        fontSize: this.external_systemFontSize,
        fontWeight: this.external_systemFontWeight
      };
    }, "external_systemFont"),
    system_dbFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.system_dbFontFamily,
        fontSize: this.system_dbFontSize,
        fontWeight: this.system_dbFontWeight
      };
    }, "system_dbFont"),
    external_system_dbFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_system_dbFontFamily,
        fontSize: this.external_system_dbFontSize,
        fontWeight: this.external_system_dbFontWeight
      };
    }, "external_system_dbFont"),
    system_queueFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.system_queueFontFamily,
        fontSize: this.system_queueFontSize,
        fontWeight: this.system_queueFontWeight
      };
    }, "system_queueFont"),
    external_system_queueFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_system_queueFontFamily,
        fontSize: this.external_system_queueFontSize,
        fontWeight: this.external_system_queueFontWeight
      };
    }, "external_system_queueFont"),
    containerFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.containerFontFamily,
        fontSize: this.containerFontSize,
        fontWeight: this.containerFontWeight
      };
    }, "containerFont"),
    external_containerFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_containerFontFamily,
        fontSize: this.external_containerFontSize,
        fontWeight: this.external_containerFontWeight
      };
    }, "external_containerFont"),
    container_dbFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.container_dbFontFamily,
        fontSize: this.container_dbFontSize,
        fontWeight: this.container_dbFontWeight
      };
    }, "container_dbFont"),
    external_container_dbFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_container_dbFontFamily,
        fontSize: this.external_container_dbFontSize,
        fontWeight: this.external_container_dbFontWeight
      };
    }, "external_container_dbFont"),
    container_queueFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.container_queueFontFamily,
        fontSize: this.container_queueFontSize,
        fontWeight: this.container_queueFontWeight
      };
    }, "container_queueFont"),
    external_container_queueFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_container_queueFontFamily,
        fontSize: this.external_container_queueFontSize,
        fontWeight: this.external_container_queueFontWeight
      };
    }, "external_container_queueFont"),
    componentFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.componentFontFamily,
        fontSize: this.componentFontSize,
        fontWeight: this.componentFontWeight
      };
    }, "componentFont"),
    external_componentFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_componentFontFamily,
        fontSize: this.external_componentFontSize,
        fontWeight: this.external_componentFontWeight
      };
    }, "external_componentFont"),
    component_dbFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.component_dbFontFamily,
        fontSize: this.component_dbFontSize,
        fontWeight: this.component_dbFontWeight
      };
    }, "component_dbFont"),
    external_component_dbFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_component_dbFontFamily,
        fontSize: this.external_component_dbFontSize,
        fontWeight: this.external_component_dbFontWeight
      };
    }, "external_component_dbFont"),
    component_queueFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.component_queueFontFamily,
        fontSize: this.component_queueFontSize,
        fontWeight: this.component_queueFontWeight
      };
    }, "component_queueFont"),
    external_component_queueFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.external_component_queueFontFamily,
        fontSize: this.external_component_queueFontSize,
        fontWeight: this.external_component_queueFontWeight
      };
    }, "external_component_queueFont"),
    boundaryFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.boundaryFontFamily,
        fontSize: this.boundaryFontSize,
        fontWeight: this.boundaryFontWeight
      };
    }, "boundaryFont"),
    messageFont: /* @__PURE__ */ __name(function() {
      return {
        fontFamily: this.messageFontFamily,
        fontSize: this.messageFontSize,
        fontWeight: this.messageFontWeight
      };
    }, "messageFont")
  },
  pie: {
    ...config_schema_default.pie,
    useWidth: 984
  },
  xyChart: {
    ...config_schema_default.xyChart,
    useWidth: void 0
  },
  requirement: {
    ...config_schema_default.requirement,
    useWidth: void 0
  },
  packet: {
    ...config_schema_default.packet
  },
  radar: {
    ...config_schema_default.radar
  }
};
var keyify = /* @__PURE__ */ __name((obj, prefix = "") => Object.keys(obj).reduce((res, el) => {
  if (Array.isArray(obj[el])) {
    return res;
  } else if (typeof obj[el] === "object" && obj[el] !== null) {
    return [...res, prefix + el, ...keyify(obj[el], "")];
  }
  return [...res, prefix + el];
}, []), "keyify");
var configKeys = new Set(keyify(config, ""));
var defaultConfig_default = config;

// src/utils/sanitizeDirective.ts
var sanitizeDirective = /* @__PURE__ */ __name((args) => {
  log.debug("sanitizeDirective called with", args);
  if (typeof args !== "object" || args == null) {
    return;
  }
  if (Array.isArray(args)) {
    args.forEach((arg) => sanitizeDirective(arg));
    return;
  }
  for (const key of Object.keys(args)) {
    log.debug("Checking key", key);
    if (key.startsWith("__") || key.includes("proto") || key.includes("constr") || !configKeys.has(key) || args[key] == null) {
      log.debug("sanitize deleting key: ", key);
      delete args[key];
      continue;
    }
    if (typeof args[key] === "object") {
      log.debug("sanitizing object", key);
      sanitizeDirective(args[key]);
      continue;
    }
    const cssMatchers = ["themeCSS", "fontFamily", "altFontFamily"];
    for (const cssKey of cssMatchers) {
      if (key.includes(cssKey)) {
        log.debug("sanitizing css option", key);
        args[key] = sanitizeCss(args[key]);
      }
    }
  }
  if (args.themeVariables) {
    for (const k of Object.keys(args.themeVariables)) {
      const val = args.themeVariables[k];
      if (val?.match && !val.match(/^[\d "#%(),.;A-Za-z]+$/)) {
        args.themeVariables[k] = "";
      }
    }
  }
  log.debug("After sanitization", args);
}, "sanitizeDirective");
var sanitizeCss = /* @__PURE__ */ __name((str) => {
  let startCnt = 0;
  let endCnt = 0;
  for (const element of str) {
    if (startCnt < endCnt) {
      return "{ /* ERROR: Unbalanced CSS */ }";
    }
    if (element === "{") {
      startCnt++;
    } else if (element === "}") {
      endCnt++;
    }
  }
  if (startCnt !== endCnt) {
    return "{ /* ERROR: Unbalanced CSS */ }";
  }
  return str;
}, "sanitizeCss");

// src/config.ts
var defaultConfig = Object.freeze(defaultConfig_default);
var siteConfig = assignWithDepth_default({}, defaultConfig);
var configFromInitialize;
var directives = [];
var currentConfig = assignWithDepth_default({}, defaultConfig);
var updateCurrentConfig = /* @__PURE__ */ __name((siteCfg, _directives) => {
  let cfg = assignWithDepth_default({}, siteCfg);
  let sumOfDirectives = {};
  for (const d of _directives) {
    sanitize(d);
    sumOfDirectives = assignWithDepth_default(sumOfDirectives, d);
  }
  cfg = assignWithDepth_default(cfg, sumOfDirectives);
  if (sumOfDirectives.theme && sumOfDirectives.theme in themes_default) {
    const tmpConfigFromInitialize = assignWithDepth_default({}, configFromInitialize);
    const themeVariables = assignWithDepth_default(
      tmpConfigFromInitialize.themeVariables || {},
      sumOfDirectives.themeVariables
    );
    if (cfg.theme && cfg.theme in themes_default) {
      cfg.themeVariables = themes_default[cfg.theme].getThemeVariables(themeVariables);
    }
  }
  currentConfig = cfg;
  checkConfig(currentConfig);
  return currentConfig;
}, "updateCurrentConfig");
var setSiteConfig = /* @__PURE__ */ __name((conf) => {
  siteConfig = assignWithDepth_default({}, defaultConfig);
  siteConfig = assignWithDepth_default(siteConfig, conf);
  if (conf.theme && themes_default[conf.theme]) {
    siteConfig.themeVariables = themes_default[conf.theme].getThemeVariables(conf.themeVariables);
  }
  updateCurrentConfig(siteConfig, directives);
  return siteConfig;
}, "setSiteConfig");
var saveConfigFromInitialize = /* @__PURE__ */ __name((conf) => {
  configFromInitialize = assignWithDepth_default({}, conf);
}, "saveConfigFromInitialize");
var updateSiteConfig = /* @__PURE__ */ __name((conf) => {
  siteConfig = assignWithDepth_default(siteConfig, conf);
  updateCurrentConfig(siteConfig, directives);
  return siteConfig;
}, "updateSiteConfig");
var getSiteConfig = /* @__PURE__ */ __name(() => {
  return assignWithDepth_default({}, siteConfig);
}, "getSiteConfig");
var setConfig = /* @__PURE__ */ __name((conf) => {
  checkConfig(conf);
  assignWithDepth_default(currentConfig, conf);
  return getConfig();
}, "setConfig");
var getConfig = /* @__PURE__ */ __name(() => {
  return assignWithDepth_default({}, currentConfig);
}, "getConfig");
var sanitize = /* @__PURE__ */ __name((options) => {
  if (!options) {
    return;
  }
  ["secure", ...siteConfig.secure ?? []].forEach((key) => {
    if (Object.hasOwn(options, key)) {
      log.debug(`Denied attempt to modify a secure key ${key}`, options[key]);
      delete options[key];
    }
  });
  Object.keys(options).forEach((key) => {
    if (key.startsWith("__")) {
      delete options[key];
    }
  });
  Object.keys(options).forEach((key) => {
    if (typeof options[key] === "string" && (options[key].includes("<") || options[key].includes(">") || options[key].includes("url(data:"))) {
      delete options[key];
    }
    if (typeof options[key] === "object") {
      sanitize(options[key]);
    }
  });
}, "sanitize");
var addDirective = /* @__PURE__ */ __name((directive) => {
  sanitizeDirective(directive);
  if (directive.fontFamily && !directive.themeVariables?.fontFamily) {
    directive.themeVariables = {
      ...directive.themeVariables,
      fontFamily: directive.fontFamily
    };
  }
  directives.push(directive);
  updateCurrentConfig(siteConfig, directives);
}, "addDirective");
var reset = /* @__PURE__ */ __name((config2 = siteConfig) => {
  directives = [];
  updateCurrentConfig(config2, directives);
}, "reset");
var ConfigWarning = {
  LAZY_LOAD_DEPRECATED: "The configuration options lazyLoadedDiagrams and loadExternalDiagramsAtStartup are deprecated. Please use registerExternalDiagrams instead."
};
var issuedWarnings = {};
var issueWarning = /* @__PURE__ */ __name((warning) => {
  if (issuedWarnings[warning]) {
    return;
  }
  log.warn(ConfigWarning[warning]);
  issuedWarnings[warning] = true;
}, "issueWarning");
var checkConfig = /* @__PURE__ */ __name((config2) => {
  if (!config2) {
    return;
  }
  if (config2.lazyLoadedDiagrams || config2.loadExternalDiagramsAtStartup) {
    issueWarning("LAZY_LOAD_DEPRECATED");
  }
}, "checkConfig");

// src/diagrams/common/common.ts

var lineBreakRegex = /<br\s*\/?>/gi;
var getRows = /* @__PURE__ */ __name((s) => {
  if (!s) {
    return [""];
  }
  const str = breakToPlaceholder(s).replace(/\\n/g, "#br#");
  return str.split("#br#");
}, "getRows");
var setupDompurifyHooksIfNotSetup = /* @__PURE__ */ (() => {
  let setup = false;
  return () => {
    if (!setup) {
      setupDompurifyHooks();
      setup = true;
    }
  };
})();
function setupDompurifyHooks() {
  const TEMPORARY_ATTRIBUTE = "data-temp-href-target";
  dompurify__WEBPACK_IMPORTED_MODULE_7__["default"].addHook("beforeSanitizeAttributes", (node) => {
    if (node instanceof Element && node.tagName === "A" && node.hasAttribute("target")) {
      node.setAttribute(TEMPORARY_ATTRIBUTE, node.getAttribute("target") ?? "");
    }
  });
  dompurify__WEBPACK_IMPORTED_MODULE_7__["default"].addHook("afterSanitizeAttributes", (node) => {
    if (node instanceof Element && node.tagName === "A" && node.hasAttribute(TEMPORARY_ATTRIBUTE)) {
      node.setAttribute("target", node.getAttribute(TEMPORARY_ATTRIBUTE) ?? "");
      node.removeAttribute(TEMPORARY_ATTRIBUTE);
      if (node.getAttribute("target") === "_blank") {
        node.setAttribute("rel", "noopener");
      }
    }
  });
}
__name(setupDompurifyHooks, "setupDompurifyHooks");
var removeScript = /* @__PURE__ */ __name((txt) => {
  setupDompurifyHooksIfNotSetup();
  const sanitizedText = dompurify__WEBPACK_IMPORTED_MODULE_7__["default"].sanitize(txt);
  return sanitizedText;
}, "removeScript");
var sanitizeMore = /* @__PURE__ */ __name((text, config2) => {
  if (config2.flowchart?.htmlLabels !== false) {
    const level = config2.securityLevel;
    if (level === "antiscript" || level === "strict") {
      text = removeScript(text);
    } else if (level !== "loose") {
      text = breakToPlaceholder(text);
      text = text.replace(/</g, "&lt;").replace(/>/g, "&gt;");
      text = text.replace(/=/g, "&equals;");
      text = placeholderToBreak(text);
    }
  }
  return text;
}, "sanitizeMore");
var sanitizeText = /* @__PURE__ */ __name((text, config2) => {
  if (!text) {
    return text;
  }
  if (config2.dompurifyConfig) {
    text = dompurify__WEBPACK_IMPORTED_MODULE_7__["default"].sanitize(sanitizeMore(text, config2), config2.dompurifyConfig).toString();
  } else {
    text = dompurify__WEBPACK_IMPORTED_MODULE_7__["default"].sanitize(sanitizeMore(text, config2), {
      FORBID_TAGS: ["style"]
    }).toString();
  }
  return text;
}, "sanitizeText");
var sanitizeTextOrArray = /* @__PURE__ */ __name((a, config2) => {
  if (typeof a === "string") {
    return sanitizeText(a, config2);
  }
  return a.flat().map((x) => sanitizeText(x, config2));
}, "sanitizeTextOrArray");
var hasBreaks = /* @__PURE__ */ __name((text) => {
  return lineBreakRegex.test(text);
}, "hasBreaks");
var splitBreaks = /* @__PURE__ */ __name((text) => {
  return text.split(lineBreakRegex);
}, "splitBreaks");
var placeholderToBreak = /* @__PURE__ */ __name((s) => {
  return s.replace(/#br#/g, "<br/>");
}, "placeholderToBreak");
var breakToPlaceholder = /* @__PURE__ */ __name((s) => {
  return s.replace(lineBreakRegex, "#br#");
}, "breakToPlaceholder");
var getUrl = /* @__PURE__ */ __name((useAbsolute) => {
  let url = "";
  if (useAbsolute) {
    url = window.location.protocol + "//" + window.location.host + window.location.pathname + window.location.search;
    url = url.replaceAll(/\(/g, "\\(");
    url = url.replaceAll(/\)/g, "\\)");
  }
  return url;
}, "getUrl");
var evaluate = /* @__PURE__ */ __name((val) => val === false || ["false", "null", "0"].includes(String(val).trim().toLowerCase()) ? false : true, "evaluate");
var getMax = /* @__PURE__ */ __name(function(...values) {
  const newValues = values.filter((value) => {
    return !isNaN(value);
  });
  return Math.max(...newValues);
}, "getMax");
var getMin = /* @__PURE__ */ __name(function(...values) {
  const newValues = values.filter((value) => {
    return !isNaN(value);
  });
  return Math.min(...newValues);
}, "getMin");
var parseGenericTypes = /* @__PURE__ */ __name(function(input) {
  const inputSets = input.split(/(,)/);
  const output = [];
  for (let i = 0; i < inputSets.length; i++) {
    let thisSet = inputSets[i];
    if (thisSet === "," && i > 0 && i + 1 < inputSets.length) {
      const previousSet = inputSets[i - 1];
      const nextSet = inputSets[i + 1];
      if (shouldCombineSets(previousSet, nextSet)) {
        thisSet = previousSet + "," + nextSet;
        i++;
        output.pop();
      }
    }
    output.push(processSet(thisSet));
  }
  return output.join("");
}, "parseGenericTypes");
var countOccurrence = /* @__PURE__ */ __name((string, substring) => {
  return Math.max(0, string.split(substring).length - 1);
}, "countOccurrence");
var shouldCombineSets = /* @__PURE__ */ __name((previousSet, nextSet) => {
  const prevCount = countOccurrence(previousSet, "~");
  const nextCount = countOccurrence(nextSet, "~");
  return prevCount === 1 && nextCount === 1;
}, "shouldCombineSets");
var processSet = /* @__PURE__ */ __name((input) => {
  const tildeCount = countOccurrence(input, "~");
  let hasStartingTilde = false;
  if (tildeCount <= 1) {
    return input;
  }
  if (tildeCount % 2 !== 0 && input.startsWith("~")) {
    input = input.substring(1);
    hasStartingTilde = true;
  }
  const chars = [...input];
  let first = chars.indexOf("~");
  let last = chars.lastIndexOf("~");
  while (first !== -1 && last !== -1 && first !== last) {
    chars[first] = "<";
    chars[last] = ">";
    first = chars.indexOf("~");
    last = chars.lastIndexOf("~");
  }
  if (hasStartingTilde) {
    chars.unshift("~");
  }
  return chars.join("");
}, "processSet");
var isMathMLSupported = /* @__PURE__ */ __name(() => window.MathMLElement !== void 0, "isMathMLSupported");
var katexRegex = /\$\$(.*)\$\$/g;
var hasKatex = /* @__PURE__ */ __name((text) => (text.match(katexRegex)?.length ?? 0) > 0, "hasKatex");
var calculateMathMLDimensions = /* @__PURE__ */ __name(async (text, config2) => {
  text = await renderKatex(text, config2);
  const divElem = document.createElement("div");
  divElem.innerHTML = text;
  divElem.id = "katex-temp";
  divElem.style.visibility = "hidden";
  divElem.style.position = "absolute";
  divElem.style.top = "0";
  const body = document.querySelector("body");
  body?.insertAdjacentElement("beforeend", divElem);
  const dim = { width: divElem.clientWidth, height: divElem.clientHeight };
  divElem.remove();
  return dim;
}, "calculateMathMLDimensions");
var renderKatex = /* @__PURE__ */ __name(async (text, config2) => {
  if (!hasKatex(text)) {
    return text;
  }
  if (!(isMathMLSupported() || config2.legacyMathML || config2.forceLegacyMathML)) {
    return text.replace(katexRegex, "MathML is unsupported in this environment.");
  }
  const { default: katex } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_katex_dist_katex_mjs").then(__webpack_require__.bind(__webpack_require__, /*! katex */ "./node_modules/katex/dist/katex.mjs"));
  const outputMode = config2.forceLegacyMathML || !isMathMLSupported() && config2.legacyMathML ? "htmlAndMathml" : "mathml";
  return text.split(lineBreakRegex).map(
    (line) => hasKatex(line) ? `<div style="display: flex; align-items: center; justify-content: center; white-space: nowrap;">${line}</div>` : `<div>${line}</div>`
  ).join("").replace(
    katexRegex,
    (_, c) => katex.renderToString(c, {
      throwOnError: true,
      displayMode: true,
      output: outputMode
    }).replace(/\n/g, " ").replace(/<annotation.*<\/annotation>/g, "")
  );
}, "renderKatex");
var common_default = {
  getRows,
  sanitizeText,
  sanitizeTextOrArray,
  hasBreaks,
  splitBreaks,
  lineBreakRegex,
  removeScript,
  getUrl,
  evaluate,
  getMax,
  getMin
};

// src/setupGraphViewbox.js
var d3Attrs = /* @__PURE__ */ __name(function(d3Elem, attrs) {
  for (let attr of attrs) {
    d3Elem.attr(attr[0], attr[1]);
  }
}, "d3Attrs");
var calculateSvgSizeAttrs = /* @__PURE__ */ __name(function(height, width, useMaxWidth) {
  let attrs = /* @__PURE__ */ new Map();
  if (useMaxWidth) {
    attrs.set("width", "100%");
    attrs.set("style", `max-width: ${width}px;`);
  } else {
    attrs.set("height", height);
    attrs.set("width", width);
  }
  return attrs;
}, "calculateSvgSizeAttrs");
var configureSvgSize = /* @__PURE__ */ __name(function(svgElem, height, width, useMaxWidth) {
  const attrs = calculateSvgSizeAttrs(height, width, useMaxWidth);
  d3Attrs(svgElem, attrs);
}, "configureSvgSize");
var setupGraphViewbox = /* @__PURE__ */ __name(function(graph, svgElem, padding, useMaxWidth) {
  const svgBounds = svgElem.node().getBBox();
  const sWidth = svgBounds.width;
  const sHeight = svgBounds.height;
  log.info(`SVG bounds: ${sWidth}x${sHeight}`, svgBounds);
  let width = 0;
  let height = 0;
  log.info(`Graph bounds: ${width}x${height}`, graph);
  width = sWidth + padding * 2;
  height = sHeight + padding * 2;
  log.info(`Calculated bounds: ${width}x${height}`);
  configureSvgSize(svgElem, height, width, useMaxWidth);
  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${svgBounds.width + 2 * padding} ${svgBounds.height + 2 * padding}`;
  svgElem.attr("viewBox", vBox);
}, "setupGraphViewbox");

// src/styles.ts
var themes = {};
var getStyles = /* @__PURE__ */ __name((type, userStyles, options) => {
  let diagramStyles = "";
  if (type in themes && themes[type]) {
    diagramStyles = themes[type](options);
  } else {
    log.warn(`No theme found for ${type}`);
  }
  return ` & {
    font-family: ${options.fontFamily};
    font-size: ${options.fontSize};
    fill: ${options.textColor}
  }
  @keyframes edge-animation-frame {
    from {
      stroke-dashoffset: 0;
    }
  }
  @keyframes dash {
    to {
      stroke-dashoffset: 0;
    }
  }
  & .edge-animation-slow {
    stroke-dasharray: 9,5 !important;
    stroke-dashoffset: 900;
    animation: dash 50s linear infinite;
    stroke-linecap: round;
  }
  & .edge-animation-fast {
    stroke-dasharray: 9,5 !important;
    stroke-dashoffset: 900;
    animation: dash 20s linear infinite;
    stroke-linecap: round;
  }
  /* Classes common for multiple diagrams */

  & .error-icon {
    fill: ${options.errorBkgColor};
  }
  & .error-text {
    fill: ${options.errorTextColor};
    stroke: ${options.errorTextColor};
  }

  & .edge-thickness-normal {
    stroke-width: 1px;
  }
  & .edge-thickness-thick {
    stroke-width: 3.5px
  }
  & .edge-pattern-solid {
    stroke-dasharray: 0;
  }
  & .edge-thickness-invisible {
    stroke-width: 0;
    fill: none;
  }
  & .edge-pattern-dashed{
    stroke-dasharray: 3;
  }
  .edge-pattern-dotted {
    stroke-dasharray: 2;
  }

  & .marker {
    fill: ${options.lineColor};
    stroke: ${options.lineColor};
  }
  & .marker.cross {
    stroke: ${options.lineColor};
  }

  & svg {
    font-family: ${options.fontFamily};
    font-size: ${options.fontSize};
  }
   & p {
    margin: 0
   }

  ${diagramStyles}

  ${userStyles}
`;
}, "getStyles");
var addStylesForDiagram = /* @__PURE__ */ __name((type, diagramTheme) => {
  if (diagramTheme !== void 0) {
    themes[type] = diagramTheme;
  }
}, "addStylesForDiagram");
var styles_default = getStyles;

// src/diagrams/common/commonDb.ts
var commonDb_exports = {};
__export(commonDb_exports, {
  clear: () => clear,
  getAccDescription: () => getAccDescription,
  getAccTitle: () => getAccTitle,
  getDiagramTitle: () => getDiagramTitle,
  setAccDescription: () => setAccDescription,
  setAccTitle: () => setAccTitle,
  setDiagramTitle: () => setDiagramTitle
});
var accTitle = "";
var diagramTitle = "";
var accDescription = "";
var sanitizeText2 = /* @__PURE__ */ __name((txt) => sanitizeText(txt, getConfig()), "sanitizeText");
var clear = /* @__PURE__ */ __name(() => {
  accTitle = "";
  accDescription = "";
  diagramTitle = "";
}, "clear");
var setAccTitle = /* @__PURE__ */ __name((txt) => {
  accTitle = sanitizeText2(txt).replace(/^\s+/g, "");
}, "setAccTitle");
var getAccTitle = /* @__PURE__ */ __name(() => accTitle, "getAccTitle");
var setAccDescription = /* @__PURE__ */ __name((txt) => {
  accDescription = sanitizeText2(txt).replace(/\n\s+/g, "\n");
}, "setAccDescription");
var getAccDescription = /* @__PURE__ */ __name(() => accDescription, "getAccDescription");
var setDiagramTitle = /* @__PURE__ */ __name((txt) => {
  diagramTitle = sanitizeText2(txt);
}, "setDiagramTitle");
var getDiagramTitle = /* @__PURE__ */ __name(() => diagramTitle, "getDiagramTitle");

// src/diagram-api/diagramAPI.ts
var log2 = log;
var setLogLevel2 = setLogLevel;
var getConfig2 = getConfig;
var setConfig2 = setConfig;
var defaultConfig2 = defaultConfig;
var sanitizeText3 = /* @__PURE__ */ __name((text) => sanitizeText(text, getConfig2()), "sanitizeText");
var setupGraphViewbox2 = setupGraphViewbox;
var getCommonDb = /* @__PURE__ */ __name(() => {
  return commonDb_exports;
}, "getCommonDb");
var diagrams = {};
var registerDiagram = /* @__PURE__ */ __name((id, diagram, detector) => {
  if (diagrams[id]) {
    log2.warn(`Diagram with id ${id} already registered. Overwriting.`);
  }
  diagrams[id] = diagram;
  if (detector) {
    addDetector(id, detector);
  }
  addStylesForDiagram(id, diagram.styles);
  diagram.injectUtils?.(
    log2,
    setLogLevel2,
    getConfig2,
    sanitizeText3,
    setupGraphViewbox2,
    getCommonDb(),
    () => {
    }
  );
}, "registerDiagram");
var getDiagram = /* @__PURE__ */ __name((name) => {
  if (name in diagrams) {
    return diagrams[name];
  }
  throw new DiagramNotFoundError(name);
}, "getDiagram");
var DiagramNotFoundError = class extends Error {
  static {
    __name(this, "DiagramNotFoundError");
  }
  constructor(name) {
    super(`Diagram ${name} not found.`);
  }
};




/***/ }),

/***/ "./node_modules/mermaid/dist/mermaid.core.mjs":
/*!****************************************************!*\
  !*** ./node_modules/mermaid/dist/mermaid.core.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mermaid_default)
/* harmony export */ });
/* harmony import */ var _chunks_mermaid_core_chunk_6JRP7KZX_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-6JRP7KZX.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-6JRP7KZX.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_TYCBKAJE_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-TYCBKAJE.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-TYCBKAJE.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-IIMUDSI4.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-IIMUDSI4.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_VV3M67IP_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-VV3M67IP.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-VV3M67IP.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-HRU6DDCH.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HRU6DDCH.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-K557N5IZ.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-K557N5IZ.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-H2D2JQ3I.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-H2D2JQ3I.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-C3MQ5ANM.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-C3MQ5ANM.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-O4NI6UNU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_5NNNAHNI_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-5NNNAHNI.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-5NNNAHNI.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_7B677QYD_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-7B677QYD.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-7B677QYD.mjs");
/* harmony import */ var _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./chunks/mermaid.core/chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var ts_dedent__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ts-dedent */ "./node_modules/ts-dedent/esm/index.js");
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! stylis */ "./node_modules/stylis/src/Serializer.js");
/* harmony import */ var stylis__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! stylis */ "./node_modules/stylis/src/Parser.js");
/* harmony import */ var dompurify__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! dompurify */ "./node_modules/dompurify/dist/purify.es.mjs");
/* harmony import */ var lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! lodash-es/isEmpty.js */ "./node_modules/lodash-es/isEmpty.js");













// src/mermaid.ts


// src/diagrams/c4/c4Detector.ts
var id = "c4";
var detector = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*C4Context|C4Container|C4Component|C4Dynamic|C4Deployment/.test(txt);
}, "detector");
var loader = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_c4Diagram-VJAJSXHY_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/c4Diagram-VJAJSXHY.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/c4Diagram-VJAJSXHY.mjs"));
  return { id, diagram: diagram2 };
}, "loader");
var plugin = {
  id,
  detector,
  loader
};
var c4Detector_default = plugin;

// src/diagrams/flowchart/flowDetector.ts
var id2 = "flowchart";
var detector2 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config) => {
  if (config?.flowchart?.defaultRenderer === "dagre-wrapper" || config?.flowchart?.defaultRenderer === "elk") {
    return false;
  }
  return /^\s*graph/.test(txt);
}, "detector");
var loader2 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_flowDiagram-4HSFHLVR_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/flowDiagram-4HSFHLVR.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/flowDiagram-4HSFHLVR.mjs"));
  return { id: id2, diagram: diagram2 };
}, "loader");
var plugin2 = {
  id: id2,
  detector: detector2,
  loader: loader2
};
var flowDetector_default = plugin2;

// src/diagrams/flowchart/flowDetector-v2.ts
var id3 = "flowchart-v2";
var detector3 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config) => {
  if (config?.flowchart?.defaultRenderer === "dagre-d3") {
    return false;
  }
  if (config?.flowchart?.defaultRenderer === "elk") {
    config.layout = "elk";
  }
  if (/^\s*graph/.test(txt) && config?.flowchart?.defaultRenderer === "dagre-wrapper") {
    return true;
  }
  return /^\s*flowchart/.test(txt);
}, "detector");
var loader3 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_flowDiagram-4HSFHLVR_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/flowDiagram-4HSFHLVR.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/flowDiagram-4HSFHLVR.mjs"));
  return { id: id3, diagram: diagram2 };
}, "loader");
var plugin3 = {
  id: id3,
  detector: detector3,
  loader: loader3
};
var flowDetector_v2_default = plugin3;

// src/diagrams/er/erDetector.ts
var id4 = "er";
var detector4 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*erDiagram/.test(txt);
}, "detector");
var loader4 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_erDiagram-Q7BY3M3F_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/erDiagram-Q7BY3M3F.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/erDiagram-Q7BY3M3F.mjs"));
  return { id: id4, diagram: diagram2 };
}, "loader");
var plugin4 = {
  id: id4,
  detector: detector4,
  loader: loader4
};
var erDetector_default = plugin4;

// src/diagrams/git/gitGraphDetector.ts
var id5 = "gitGraph";
var detector5 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*gitGraph/.test(txt);
}, "detector");
var loader5 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_mermaid-js_parser_dist_mermaid-parser_core_mjs"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_gitGraphDiagram-7IBYFJ6S_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/gitGraphDiagram-7IBYFJ6S.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/gitGraphDiagram-7IBYFJ6S.mjs"));
  return { id: id5, diagram: diagram2 };
}, "loader");
var plugin5 = {
  id: id5,
  detector: detector5,
  loader: loader5
};
var gitGraphDetector_default = plugin5;

// src/diagrams/gantt/ganttDetector.ts
var id6 = "gantt";
var detector6 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*gantt/.test(txt);
}, "detector");
var loader6 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_ganttDiagram-APWFNJXF_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/ganttDiagram-APWFNJXF.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/ganttDiagram-APWFNJXF.mjs"));
  return { id: id6, diagram: diagram2 };
}, "loader");
var plugin6 = {
  id: id6,
  detector: detector6,
  loader: loader6
};
var ganttDetector_default = plugin6;

// src/diagrams/info/infoDetector.ts
var id7 = "info";
var detector7 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*info/.test(txt);
}, "detector");
var loader7 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_mermaid-js_parser_dist_mermaid-parser_core_mjs"), __webpack_require__.e("node_modules_mermaid_dist_chunks_mermaid_core_infoDiagram-PH2N3AL5_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/infoDiagram-PH2N3AL5.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/infoDiagram-PH2N3AL5.mjs"));
  return { id: id7, diagram: diagram2 };
}, "loader");
var info = {
  id: id7,
  detector: detector7,
  loader: loader7
};

// src/diagrams/pie/pieDetector.ts
var id8 = "pie";
var detector8 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*pie/.test(txt);
}, "detector");
var loader8 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_mermaid-js_parser_dist_mermaid-parser_core_mjs"), __webpack_require__.e("node_modules_mermaid_dist_chunks_mermaid_core_pieDiagram-IB7DONF6_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/pieDiagram-IB7DONF6.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/pieDiagram-IB7DONF6.mjs"));
  return { id: id8, diagram: diagram2 };
}, "loader");
var pie = {
  id: id8,
  detector: detector8,
  loader: loader8
};

// src/diagrams/quadrant-chart/quadrantDetector.ts
var id9 = "quadrantChart";
var detector9 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*quadrantChart/.test(txt);
}, "detector");
var loader9 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_quadrantDiagram-7GDLP6J5_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/quadrantDiagram-7GDLP6J5.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/quadrantDiagram-7GDLP6J5.mjs"));
  return { id: id9, diagram: diagram2 };
}, "loader");
var plugin7 = {
  id: id9,
  detector: detector9,
  loader: loader9
};
var quadrantDetector_default = plugin7;

// src/diagrams/xychart/xychartDetector.ts
var id10 = "xychart";
var detector10 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*xychart-beta/.test(txt);
}, "detector");
var loader10 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_xychartDiagram-VJFVF3MP_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/xychartDiagram-VJFVF3MP.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/xychartDiagram-VJFVF3MP.mjs"));
  return { id: id10, diagram: diagram2 };
}, "loader");
var plugin8 = {
  id: id10,
  detector: detector10,
  loader: loader10
};
var xychartDetector_default = plugin8;

// src/diagrams/requirement/requirementDetector.ts
var id11 = "requirement";
var detector11 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*requirement(Diagram)?/.test(txt);
}, "detector");
var loader11 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_requirementDiagram-KVF5MWMF_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/requirementDiagram-KVF5MWMF.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/requirementDiagram-KVF5MWMF.mjs"));
  return { id: id11, diagram: diagram2 };
}, "loader");
var plugin9 = {
  id: id11,
  detector: detector11,
  loader: loader11
};
var requirementDetector_default = plugin9;

// src/diagrams/sequence/sequenceDetector.ts
var id12 = "sequence";
var detector12 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*sequenceDiagram/.test(txt);
}, "detector");
var loader12 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_sequenceDiagram-X6HHIX6F_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/sequenceDiagram-X6HHIX6F.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/sequenceDiagram-X6HHIX6F.mjs"));
  return { id: id12, diagram: diagram2 };
}, "loader");
var plugin10 = {
  id: id12,
  detector: detector12,
  loader: loader12
};
var sequenceDetector_default = plugin10;

// src/diagrams/class/classDetector.ts
var id13 = "class";
var detector13 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config) => {
  if (config?.class?.defaultRenderer === "dagre-wrapper") {
    return false;
  }
  return /^\s*classDiagram/.test(txt);
}, "detector");
var loader13 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_chunk-A2AXSNBT_mjs"), __webpack_require__.e("node_modules_mermaid_dist_chunks_mermaid_core_classDiagram-GIVACNV2_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/classDiagram-GIVACNV2.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/classDiagram-GIVACNV2.mjs"));
  return { id: id13, diagram: diagram2 };
}, "loader");
var plugin11 = {
  id: id13,
  detector: detector13,
  loader: loader13
};
var classDetector_default = plugin11;

// src/diagrams/class/classDetector-V2.ts
var id14 = "classDiagram";
var detector14 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config) => {
  if (/^\s*classDiagram/.test(txt) && config?.class?.defaultRenderer === "dagre-wrapper") {
    return true;
  }
  return /^\s*classDiagram-v2/.test(txt);
}, "detector");
var loader14 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_chunk-A2AXSNBT_mjs"), __webpack_require__.e("node_modules_mermaid_dist_chunks_mermaid_core_classDiagram-v2-COTLJTTW_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/classDiagram-v2-COTLJTTW.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/classDiagram-v2-COTLJTTW.mjs"));
  return { id: id14, diagram: diagram2 };
}, "loader");
var plugin12 = {
  id: id14,
  detector: detector14,
  loader: loader14
};
var classDetector_V2_default = plugin12;

// src/diagrams/state/stateDetector.ts
var id15 = "state";
var detector15 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config) => {
  if (config?.state?.defaultRenderer === "dagre-wrapper") {
    return false;
  }
  return /^\s*stateDiagram/.test(txt);
}, "detector");
var loader15 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_dagre-d3-es_src_graphlib_index_js"), __webpack_require__.e("vendors-node_modules_dagre-d3-es_src_dagre_index_js"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_chunk-AEK57VVT_mjs"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_stateDiagram-DGXRK772_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/stateDiagram-DGXRK772.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/stateDiagram-DGXRK772.mjs"));
  return { id: id15, diagram: diagram2 };
}, "loader");
var plugin13 = {
  id: id15,
  detector: detector15,
  loader: loader15
};
var stateDetector_default = plugin13;

// src/diagrams/state/stateDetector-V2.ts
var id16 = "stateDiagram";
var detector16 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config) => {
  if (/^\s*stateDiagram-v2/.test(txt)) {
    return true;
  }
  if (/^\s*stateDiagram/.test(txt) && config?.state?.defaultRenderer === "dagre-wrapper") {
    return true;
  }
  return false;
}, "detector");
var loader16 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_chunk-AEK57VVT_mjs"), __webpack_require__.e("node_modules_mermaid_dist_chunks_mermaid_core_stateDiagram-v2-YXO3MK2T_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/stateDiagram-v2-YXO3MK2T.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/stateDiagram-v2-YXO3MK2T.mjs"));
  return { id: id16, diagram: diagram2 };
}, "loader");
var plugin14 = {
  id: id16,
  detector: detector16,
  loader: loader16
};
var stateDetector_V2_default = plugin14;

// src/diagrams/user-journey/journeyDetector.ts
var id17 = "journey";
var detector17 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*journey/.test(txt);
}, "detector");
var loader17 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_journeyDiagram-U35MCT3I_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/journeyDiagram-U35MCT3I.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/journeyDiagram-U35MCT3I.mjs"));
  return { id: id17, diagram: diagram2 };
}, "loader");
var plugin15 = {
  id: id17,
  detector: detector17,
  loader: loader17
};
var journeyDetector_default = plugin15;

// src/diagrams/error/errorRenderer.ts
var draw = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((_text, id27, version) => {
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug("rendering svg for syntax error\n");
  const svg = (0,_chunks_mermaid_core_chunk_7B677QYD_mjs__WEBPACK_IMPORTED_MODULE_10__.selectSvgElement)(id27);
  const g = svg.append("g");
  svg.attr("viewBox", "0 0 2412 512");
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.configureSvgSize)(svg, 100, 512, true);
  g.append("path").attr("class", "error-icon").attr(
    "d",
    "m411.313,123.313c6.25-6.25 6.25-16.375 0-22.625s-16.375-6.25-22.625,0l-32,32-9.375,9.375-20.688-20.688c-12.484-12.5-32.766-12.5-45.25,0l-16,16c-1.261,1.261-2.304,2.648-3.31,4.051-21.739-8.561-45.324-13.426-70.065-13.426-105.867,0-192,86.133-192,192s86.133,192 192,192 192-86.133 192-192c0-24.741-4.864-48.327-13.426-70.065 1.402-1.007 2.79-2.049 4.051-3.31l16-16c12.5-12.492 12.5-32.758 0-45.25l-20.688-20.688 9.375-9.375 32.001-31.999zm-219.313,100.687c-52.938,0-96,43.063-96,96 0,8.836-7.164,16-16,16s-16-7.164-16-16c0-70.578 57.422-128 128-128 8.836,0 16,7.164 16,16s-7.164,16-16,16z"
  );
  g.append("path").attr("class", "error-icon").attr(
    "d",
    "m459.02,148.98c-6.25-6.25-16.375-6.25-22.625,0s-6.25,16.375 0,22.625l16,16c3.125,3.125 7.219,4.688 11.313,4.688 4.094,0 8.188-1.563 11.313-4.688 6.25-6.25 6.25-16.375 0-22.625l-16.001-16z"
  );
  g.append("path").attr("class", "error-icon").attr(
    "d",
    "m340.395,75.605c3.125,3.125 7.219,4.688 11.313,4.688 4.094,0 8.188-1.563 11.313-4.688 6.25-6.25 6.25-16.375 0-22.625l-16-16c-6.25-6.25-16.375-6.25-22.625,0s-6.25,16.375 0,22.625l15.999,16z"
  );
  g.append("path").attr("class", "error-icon").attr(
    "d",
    "m400,64c8.844,0 16-7.164 16-16v-32c0-8.836-7.156-16-16-16-8.844,0-16,7.164-16,16v32c0,8.836 7.156,16 16,16z"
  );
  g.append("path").attr("class", "error-icon").attr(
    "d",
    "m496,96.586h-32c-8.844,0-16,7.164-16,16 0,8.836 7.156,16 16,16h32c8.844,0 16-7.164 16-16 0-8.836-7.156-16-16-16z"
  );
  g.append("path").attr("class", "error-icon").attr(
    "d",
    "m436.98,75.605c3.125,3.125 7.219,4.688 11.313,4.688 4.094,0 8.188-1.563 11.313-4.688l32-32c6.25-6.25 6.25-16.375 0-22.625s-16.375-6.25-22.625,0l-32,32c-6.251,6.25-6.251,16.375-0.001,22.625z"
  );
  g.append("text").attr("class", "error-text").attr("x", 1440).attr("y", 250).attr("font-size", "150px").style("text-anchor", "middle").text("Syntax error in text");
  g.append("text").attr("class", "error-text").attr("x", 1250).attr("y", 400).attr("font-size", "100px").style("text-anchor", "middle").text(`mermaid version ${version}`);
}, "draw");
var renderer = { draw };
var errorRenderer_default = renderer;

// src/diagrams/error/errorDiagram.ts
var diagram = {
  db: {},
  renderer,
  parser: {
    parse: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
      return;
    }, "parse")
  }
};
var errorDiagram_default = diagram;

// src/diagrams/flowchart/elk/detector.ts
var id18 = "flowchart-elk";
var detector18 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt, config = {}) => {
  if (
    // If diagram explicitly states flowchart-elk
    /^\s*flowchart-elk/.test(txt) || // If a flowchart/graph diagram has their default renderer set to elk
    /^\s*flowchart|graph/.test(txt) && config?.flowchart?.defaultRenderer === "elk"
  ) {
    config.layout = "elk";
    return true;
  }
  return false;
}, "detector");
var loader18 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_flowDiagram-4HSFHLVR_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/flowDiagram-4HSFHLVR.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/flowDiagram-4HSFHLVR.mjs"));
  return { id: id18, diagram: diagram2 };
}, "loader");
var plugin16 = {
  id: id18,
  detector: detector18,
  loader: loader18
};
var detector_default = plugin16;

// src/diagrams/timeline/detector.ts
var id19 = "timeline";
var detector19 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*timeline/.test(txt);
}, "detector");
var loader19 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_timeline-definition-BDJGKUSR_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/timeline-definition-BDJGKUSR.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/timeline-definition-BDJGKUSR.mjs"));
  return { id: id19, diagram: diagram2 };
}, "loader");
var plugin17 = {
  id: id19,
  detector: detector19,
  loader: loader19
};
var detector_default2 = plugin17;

// src/diagrams/mindmap/detector.ts
var id20 = "mindmap";
var detector20 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*mindmap/.test(txt);
}, "detector");
var loader20 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_cytoscape_dist_cytoscape_esm_mjs"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_mindmap-definition-ALO5MXBD_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/mindmap-definition-ALO5MXBD.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/mindmap-definition-ALO5MXBD.mjs"));
  return { id: id20, diagram: diagram2 };
}, "loader");
var plugin18 = {
  id: id20,
  detector: detector20,
  loader: loader20
};
var detector_default3 = plugin18;

// src/diagrams/kanban/detector.ts
var id21 = "kanban";
var detector21 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*kanban/.test(txt);
}, "detector");
var loader21 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_kanban-definition-NDS4AKOZ_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/kanban-definition-NDS4AKOZ.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/kanban-definition-NDS4AKOZ.mjs"));
  return { id: id21, diagram: diagram2 };
}, "loader");
var plugin19 = {
  id: id21,
  detector: detector21,
  loader: loader21
};
var detector_default4 = plugin19;

// src/diagrams/sankey/sankeyDetector.ts
var id22 = "sankey";
var detector22 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*sankey-beta/.test(txt);
}, "detector");
var loader22 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await __webpack_require__.e(/*! import() */ "vendors-node_modules_mermaid_dist_chunks_mermaid_core_sankeyDiagram-QLVOVGJD_mjs").then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/sankeyDiagram-QLVOVGJD.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/sankeyDiagram-QLVOVGJD.mjs"));
  return { id: id22, diagram: diagram2 };
}, "loader");
var plugin20 = {
  id: id22,
  detector: detector22,
  loader: loader22
};
var sankeyDetector_default = plugin20;

// src/diagrams/packet/detector.ts
var id23 = "packet";
var detector23 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*packet-beta/.test(txt);
}, "detector");
var loader23 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_mermaid-js_parser_dist_mermaid-parser_core_mjs"), __webpack_require__.e("node_modules_mermaid_dist_chunks_mermaid_core_diagram-VNBRO52H_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/diagram-VNBRO52H.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/diagram-VNBRO52H.mjs"));
  return { id: id23, diagram: diagram2 };
}, "loader");
var packet = {
  id: id23,
  detector: detector23,
  loader: loader23
};

// src/diagrams/radar/detector.ts
var id24 = "radar";
var detector24 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*radar-beta/.test(txt);
}, "detector");
var loader24 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_mermaid-js_parser_dist_mermaid-parser_core_mjs"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_diagram-SSKATNLV_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/diagram-SSKATNLV.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/diagram-SSKATNLV.mjs"));
  return { id: id24, diagram: diagram2 };
}, "loader");
var radar = {
  id: id24,
  detector: detector24,
  loader: loader24
};

// src/diagrams/block/blockDetector.ts
var id25 = "block";
var detector25 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*block-beta/.test(txt);
}, "detector");
var loader25 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_dagre-d3-es_src_graphlib_index_js"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_blockDiagram-JOT3LUYC_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/blockDiagram-JOT3LUYC.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/blockDiagram-JOT3LUYC.mjs"));
  return { id: id25, diagram: diagram2 };
}, "loader");
var plugin21 = {
  id: id25,
  detector: detector25,
  loader: loader25
};
var blockDetector_default = plugin21;

// src/diagrams/architecture/architectureDetector.ts
var id26 = "architecture";
var detector26 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((txt) => {
  return /^\s*architecture/.test(txt);
}, "detector");
var loader26 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  const { diagram: diagram2 } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_lodash-es__baseClone_js-node_modules_lodash-es__baseFlatten_js-node_modu-303a91"), __webpack_require__.e("vendors-node_modules_lodash-es__basePickBy_js-node_modules_lodash-es__hasUnicode_js-node_modu-7c10ef"), __webpack_require__.e("vendors-node_modules_mermaid-js_parser_dist_mermaid-parser_core_mjs"), __webpack_require__.e("vendors-node_modules_cytoscape_dist_cytoscape_esm_mjs"), __webpack_require__.e("vendors-node_modules_mermaid_dist_chunks_mermaid_core_architectureDiagram-IEHRJDOE_mjs")]).then(__webpack_require__.bind(__webpack_require__, /*! ./chunks/mermaid.core/architectureDiagram-IEHRJDOE.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/architectureDiagram-IEHRJDOE.mjs"));
  return { id: id26, diagram: diagram2 };
}, "loader");
var architecture = {
  id: id26,
  detector: detector26,
  loader: loader26
};
var architectureDetector_default = architecture;

// src/diagram-api/diagram-orchestration.ts
var hasLoadedDiagrams = false;
var addDiagrams = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
  if (hasLoadedDiagrams) {
    return;
  }
  hasLoadedDiagrams = true;
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.registerDiagram)("error", errorDiagram_default, (text) => {
    return text.toLowerCase().trim() === "error";
  });
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.registerDiagram)(
    "---",
    // --- diagram type may appear if YAML front-matter is not parsed correctly
    {
      db: {
        clear: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
        }, "clear")
      },
      styles: {},
      // should never be used
      renderer: {
        draw: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
        }, "draw")
      },
      parser: {
        parse: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
          throw new Error(
            "Diagrams beginning with --- are not valid. If you were trying to use a YAML front-matter, please ensure that you've correctly opened and closed the YAML front-matter with un-indented `---` blocks"
          );
        }, "parse")
      },
      init: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => null, "init")
      // no op
    },
    (text) => {
      return text.toLowerCase().trimStart().startsWith("---");
    }
  );
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.registerLazyLoadedDiagrams)(
    c4Detector_default,
    detector_default4,
    classDetector_V2_default,
    classDetector_default,
    erDetector_default,
    ganttDetector_default,
    info,
    pie,
    requirementDetector_default,
    sequenceDetector_default,
    detector_default,
    flowDetector_v2_default,
    flowDetector_default,
    detector_default3,
    detector_default2,
    gitGraphDetector_default,
    stateDetector_V2_default,
    stateDetector_default,
    journeyDetector_default,
    quadrantDetector_default,
    sankeyDetector_default,
    packet,
    xychartDetector_default,
    blockDetector_default,
    architectureDetector_default,
    radar
  );
}, "addDiagrams");

// src/diagram-api/loadDiagram.ts
var loadRegisteredDiagrams = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug(`Loading registered diagrams`);
  const results = await Promise.allSettled(
    Object.entries(_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.detectors).map(async ([key, { detector: detector27, loader: loader27 }]) => {
      if (loader27) {
        try {
          (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getDiagram)(key);
        } catch {
          try {
            const { diagram: diagram2, id: id27 } = await loader27();
            (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.registerDiagram)(id27, diagram2, detector27);
          } catch (err) {
            _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error(`Failed to load external diagram with key ${key}. Removing from detectors.`);
            delete _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.detectors[key];
            throw err;
          }
        }
      }
    })
  );
  const failed = results.filter((result) => result.status === "rejected");
  if (failed.length > 0) {
    _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error(`Failed to load ${failed.length} external diagrams`);
    for (const res of failed) {
      _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error(res);
    }
    throw new Error(`Failed to load ${failed.length} external diagrams`);
  }
}, "loadRegisteredDiagrams");

// src/mermaidAPI.ts





// src/accessibility.ts
var SVG_ROLE = "graphics-document document";
function setA11yDiagramInfo(svg, diagramType) {
  svg.attr("role", SVG_ROLE);
  if (diagramType !== "") {
    svg.attr("aria-roledescription", diagramType);
  }
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(setA11yDiagramInfo, "setA11yDiagramInfo");
function addSVGa11yTitleDescription(svg, a11yTitle, a11yDesc, baseId) {
  if (svg.insert === void 0) {
    return;
  }
  if (a11yDesc) {
    const descId = `chart-desc-${baseId}`;
    svg.attr("aria-describedby", descId);
    svg.insert("desc", ":first-child").attr("id", descId).text(a11yDesc);
  }
  if (a11yTitle) {
    const titleId = `chart-title-${baseId}`;
    svg.attr("aria-labelledby", titleId);
    svg.insert("title", ":first-child").attr("id", titleId).text(a11yTitle);
  }
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(addSVGa11yTitleDescription, "addSVGa11yTitleDescription");

// src/Diagram.ts
var Diagram = class _Diagram {
  constructor(type, text, db, parser, renderer2) {
    this.type = type;
    this.text = text;
    this.db = db;
    this.parser = parser;
    this.renderer = renderer2;
  }
  static {
    (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(this, "Diagram");
  }
  static async fromText(text, metadata = {}) {
    const config = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getConfig)();
    const type = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.detectType)(text, config);
    text = (0,_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.encodeEntities)(text) + "\n";
    try {
      (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getDiagram)(type);
    } catch {
      const loader27 = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getDiagramLoader)(type);
      if (!loader27) {
        throw new _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.UnknownDiagramError(`Diagram ${type} not found.`);
      }
      const { id: id27, diagram: diagram2 } = await loader27();
      (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.registerDiagram)(id27, diagram2);
    }
    const { db, parser, renderer: renderer2, init: init2 } = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getDiagram)(type);
    if (parser.parser) {
      parser.parser.yy = db;
    }
    db.clear?.();
    init2?.(config);
    if (metadata.title) {
      db.setDiagramTitle?.(metadata.title);
    }
    await parser.parse(text);
    return new _Diagram(type, text, db, parser, renderer2);
  }
  async render(id27, version) {
    await this.renderer.draw(this.text, id27, version, this);
  }
  getParser() {
    return this.parser;
  }
  getType() {
    return this.type;
  }
};

// src/interactionDb.ts
var interactionFunctions = [];
var attachFunctions = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
  interactionFunctions.forEach((f) => {
    f();
  });
  interactionFunctions = [];
}, "attachFunctions");

// src/diagram-api/comments.ts
var cleanupComments = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((text) => {
  return text.replace(/^\s*%%(?!{)[^\n]+\n?/gm, "").trimStart();
}, "cleanupComments");

// src/diagram-api/frontmatter.ts
function extractFrontMatter(text) {
  const matches = text.match(_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.frontMatterRegex);
  if (!matches) {
    return {
      text,
      metadata: {}
    };
  }
  let parsed = (0,_chunks_mermaid_core_chunk_6JRP7KZX_mjs__WEBPACK_IMPORTED_MODULE_0__.load)(matches[1], {
    // To support config, we need JSON schema.
    // https://www.yaml.org/spec/1.2/spec.html#id2803231
    schema: _chunks_mermaid_core_chunk_6JRP7KZX_mjs__WEBPACK_IMPORTED_MODULE_0__.JSON_SCHEMA
  }) ?? {};
  parsed = typeof parsed === "object" && !Array.isArray(parsed) ? parsed : {};
  const metadata = {};
  if (parsed.displayMode) {
    metadata.displayMode = parsed.displayMode.toString();
  }
  if (parsed.title) {
    metadata.title = parsed.title.toString();
  }
  if (parsed.config) {
    metadata.config = parsed.config;
  }
  return {
    text: text.slice(matches[0].length),
    metadata
  };
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(extractFrontMatter, "extractFrontMatter");

// src/preprocess.ts
var cleanupText = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((code) => {
  return code.replace(/\r\n?/g, "\n").replace(
    /<(\w+)([^>]*)>/g,
    (match, tag, attributes) => "<" + tag + attributes.replace(/="([^"]*)"/g, "='$1'") + ">"
  );
}, "cleanupText");
var processFrontmatter = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((code) => {
  const { text, metadata } = extractFrontMatter(code);
  const { displayMode, title, config = {} } = metadata;
  if (displayMode) {
    if (!config.gantt) {
      config.gantt = {};
    }
    config.gantt.displayMode = displayMode;
  }
  return { title, config, text };
}, "processFrontmatter");
var processDirectives = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((code) => {
  const initDirective = _chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.utils_default.detectInit(code) ?? {};
  const wrapDirectives = _chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.utils_default.detectDirective(code, "wrap");
  if (Array.isArray(wrapDirectives)) {
    initDirective.wrap = wrapDirectives.some(({ type }) => type === "wrap");
  } else if (wrapDirectives?.type === "wrap") {
    initDirective.wrap = true;
  }
  return {
    text: (0,_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.removeDirectives)(code),
    directive: initDirective
  };
}, "processDirectives");
function preprocessDiagram(code) {
  const cleanedCode = cleanupText(code);
  const frontMatterResult = processFrontmatter(cleanedCode);
  const directiveResult = processDirectives(frontMatterResult.text);
  const config = (0,_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.cleanAndMerge)(frontMatterResult.config, directiveResult.directive);
  code = cleanupComments(directiveResult.text);
  return {
    code,
    title: frontMatterResult.title,
    config
  };
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(preprocessDiagram, "preprocessDiagram");

// src/utils/base64.ts
function toBase64(str) {
  const utf8Bytes = new TextEncoder().encode(str);
  const utf8Str = Array.from(utf8Bytes, (byte) => String.fromCodePoint(byte)).join("");
  return btoa(utf8Str);
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(toBase64, "toBase64");

// src/mermaidAPI.ts
var MAX_TEXTLENGTH = 5e4;
var MAX_TEXTLENGTH_EXCEEDED_MSG = "graph TB;a[Maximum text size in diagram exceeded];style a fill:#faa";
var SECURITY_LVL_SANDBOX = "sandbox";
var SECURITY_LVL_LOOSE = "loose";
var XMLNS_SVG_STD = "http://www.w3.org/2000/svg";
var XMLNS_XLINK_STD = "http://www.w3.org/1999/xlink";
var XMLNS_XHTML_STD = "http://www.w3.org/1999/xhtml";
var IFRAME_WIDTH = "100%";
var IFRAME_HEIGHT = "100%";
var IFRAME_STYLES = "border:0;margin:0;";
var IFRAME_BODY_STYLE = "margin:0";
var IFRAME_SANDBOX_OPTS = "allow-top-navigation-by-user-activation allow-popups";
var IFRAME_NOT_SUPPORTED_MSG = 'The "iframe" tag is not supported by your browser.';
var DOMPURIFY_TAGS = ["foreignobject"];
var DOMPURIFY_ATTR = ["dominant-baseline"];
function processAndSetConfigs(text) {
  const processed = preprocessDiagram(text);
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.reset)();
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.addDirective)(processed.config ?? {});
  return processed;
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(processAndSetConfigs, "processAndSetConfigs");
async function parse(text, parseOptions) {
  addDiagrams();
  try {
    const { code, config } = processAndSetConfigs(text);
    const diagram2 = await getDiagramFromText(code);
    return { diagramType: diagram2.type, config };
  } catch (error) {
    if (parseOptions?.suppressErrors) {
      return false;
    }
    throw error;
  }
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(parse, "parse");
var cssImportantStyles = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((cssClass, element, cssClasses = []) => {
  return `
.${cssClass} ${element} { ${cssClasses.join(" !important; ")} !important; }`;
}, "cssImportantStyles");
var createCssStyles = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((config, classDefs = /* @__PURE__ */ new Map()) => {
  let cssStyles = "";
  if (config.themeCSS !== void 0) {
    cssStyles += `
${config.themeCSS}`;
  }
  if (config.fontFamily !== void 0) {
    cssStyles += `
:root { --mermaid-font-family: ${config.fontFamily}}`;
  }
  if (config.altFontFamily !== void 0) {
    cssStyles += `
:root { --mermaid-alt-font-family: ${config.altFontFamily}}`;
  }
  if (classDefs instanceof Map) {
    const htmlLabels = config.htmlLabels ?? config.flowchart?.htmlLabels;
    const cssHtmlElements = ["> *", "span"];
    const cssShapeElements = ["rect", "polygon", "ellipse", "circle", "path"];
    const cssElements = htmlLabels ? cssHtmlElements : cssShapeElements;
    classDefs.forEach((styleClassDef) => {
      if (!(0,lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_15__["default"])(styleClassDef.styles)) {
        cssElements.forEach((cssElement) => {
          cssStyles += cssImportantStyles(styleClassDef.id, cssElement, styleClassDef.styles);
        });
      }
      if (!(0,lodash_es_isEmpty_js__WEBPACK_IMPORTED_MODULE_15__["default"])(styleClassDef.textStyles)) {
        cssStyles += cssImportantStyles(
          styleClassDef.id,
          "tspan",
          (styleClassDef?.textStyles || []).map((s) => s.replace("color", "fill"))
        );
      }
    });
  }
  return cssStyles;
}, "createCssStyles");
var createUserStyles = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((config, graphType, classDefs, svgId) => {
  const userCSSstyles = createCssStyles(config, classDefs);
  const allStyles = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.styles_default)(graphType, userCSSstyles, config.themeVariables);
  return (0,stylis__WEBPACK_IMPORTED_MODULE_16__.serialize)((0,stylis__WEBPACK_IMPORTED_MODULE_17__.compile)(`${svgId}{${allStyles}}`), stylis__WEBPACK_IMPORTED_MODULE_16__.stringify);
}, "createUserStyles");
var cleanUpSvgCode = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((svgCode = "", inSandboxMode, useArrowMarkerUrls) => {
  let cleanedUpSvg = svgCode;
  if (!useArrowMarkerUrls && !inSandboxMode) {
    cleanedUpSvg = cleanedUpSvg.replace(
      /marker-end="url\([\d+./:=?A-Za-z-]*?#/g,
      'marker-end="url(#'
    );
  }
  cleanedUpSvg = (0,_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.decodeEntities)(cleanedUpSvg);
  cleanedUpSvg = cleanedUpSvg.replace(/<br>/g, "<br/>");
  return cleanedUpSvg;
}, "cleanUpSvgCode");
var putIntoIFrame = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((svgCode = "", svgElement) => {
  const height = svgElement?.viewBox?.baseVal?.height ? svgElement.viewBox.baseVal.height + "px" : IFRAME_HEIGHT;
  const base64encodedSrc = toBase64(`<body style="${IFRAME_BODY_STYLE}">${svgCode}</body>`);
  return `<iframe style="width:${IFRAME_WIDTH};height:${height};${IFRAME_STYLES}" src="data:text/html;charset=UTF-8;base64,${base64encodedSrc}" sandbox="${IFRAME_SANDBOX_OPTS}">
  ${IFRAME_NOT_SUPPORTED_MSG}
</iframe>`;
}, "putIntoIFrame");
var appendDivSvgG = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((parentRoot, id27, enclosingDivId, divStyle, svgXlink) => {
  const enclosingDiv = parentRoot.append("div");
  enclosingDiv.attr("id", enclosingDivId);
  if (divStyle) {
    enclosingDiv.attr("style", divStyle);
  }
  const svgNode = enclosingDiv.append("svg").attr("id", id27).attr("width", "100%").attr("xmlns", XMLNS_SVG_STD);
  if (svgXlink) {
    svgNode.attr("xmlns:xlink", svgXlink);
  }
  svgNode.append("g");
  return parentRoot;
}, "appendDivSvgG");
function sandboxedIframe(parentNode, iFrameId) {
  return parentNode.append("iframe").attr("id", iFrameId).attr("style", "width: 100%; height: 100%;").attr("sandbox", "");
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(sandboxedIframe, "sandboxedIframe");
var removeExistingElements = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((doc, id27, divId, iFrameId) => {
  doc.getElementById(id27)?.remove();
  doc.getElementById(divId)?.remove();
  doc.getElementById(iFrameId)?.remove();
}, "removeExistingElements");
var render = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async function(id27, text, svgContainingElement) {
  addDiagrams();
  const processed = processAndSetConfigs(text);
  text = processed.code;
  const config = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getConfig)();
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug(config);
  if (text.length > (config?.maxTextSize ?? MAX_TEXTLENGTH)) {
    text = MAX_TEXTLENGTH_EXCEEDED_MSG;
  }
  const idSelector = "#" + id27;
  const iFrameID = "i" + id27;
  const iFrameID_selector = "#" + iFrameID;
  const enclosingDivID = "d" + id27;
  const enclosingDivID_selector = "#" + enclosingDivID;
  const removeTempElements = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
    const tmpElementSelector = isSandboxed ? iFrameID_selector : enclosingDivID_selector;
    const node = (0,d3__WEBPACK_IMPORTED_MODULE_13__.select)(tmpElementSelector).node();
    if (node && "remove" in node) {
      node.remove();
    }
  }, "removeTempElements");
  let root = (0,d3__WEBPACK_IMPORTED_MODULE_13__.select)("body");
  const isSandboxed = config.securityLevel === SECURITY_LVL_SANDBOX;
  const isLooseSecurityLevel = config.securityLevel === SECURITY_LVL_LOOSE;
  const fontFamily = config.fontFamily;
  if (svgContainingElement !== void 0) {
    if (svgContainingElement) {
      svgContainingElement.innerHTML = "";
    }
    if (isSandboxed) {
      const iframe = sandboxedIframe((0,d3__WEBPACK_IMPORTED_MODULE_13__.select)(svgContainingElement), iFrameID);
      root = (0,d3__WEBPACK_IMPORTED_MODULE_13__.select)(iframe.nodes()[0].contentDocument.body);
      root.node().style.margin = 0;
    } else {
      root = (0,d3__WEBPACK_IMPORTED_MODULE_13__.select)(svgContainingElement);
    }
    appendDivSvgG(root, id27, enclosingDivID, `font-family: ${fontFamily}`, XMLNS_XLINK_STD);
  } else {
    removeExistingElements(document, id27, enclosingDivID, iFrameID);
    if (isSandboxed) {
      const iframe = sandboxedIframe((0,d3__WEBPACK_IMPORTED_MODULE_13__.select)("body"), iFrameID);
      root = (0,d3__WEBPACK_IMPORTED_MODULE_13__.select)(iframe.nodes()[0].contentDocument.body);
      root.node().style.margin = 0;
    } else {
      root = (0,d3__WEBPACK_IMPORTED_MODULE_13__.select)("body");
    }
    appendDivSvgG(root, id27, enclosingDivID);
  }
  let diag;
  let parseEncounteredException;
  try {
    diag = await Diagram.fromText(text, { title: processed.title });
  } catch (error) {
    if (config.suppressErrorRendering) {
      removeTempElements();
      throw error;
    }
    diag = await Diagram.fromText("error");
    parseEncounteredException = error;
  }
  const element = root.select(enclosingDivID_selector).node();
  const diagramType = diag.type;
  const svg = element.firstChild;
  const firstChild = svg.firstChild;
  const diagramClassDefs = diag.renderer.getClasses?.(text, diag);
  const rules = createUserStyles(config, diagramType, diagramClassDefs, idSelector);
  const style1 = document.createElement("style");
  style1.innerHTML = rules;
  svg.insertBefore(style1, firstChild);
  try {
    await diag.renderer.draw(text, id27, _chunks_mermaid_core_chunk_5NNNAHNI_mjs__WEBPACK_IMPORTED_MODULE_9__.package_default.version, diag);
  } catch (e) {
    if (config.suppressErrorRendering) {
      removeTempElements();
    } else {
      errorRenderer_default.draw(text, id27, _chunks_mermaid_core_chunk_5NNNAHNI_mjs__WEBPACK_IMPORTED_MODULE_9__.package_default.version);
    }
    throw e;
  }
  const svgNode = root.select(`${enclosingDivID_selector} svg`);
  const a11yTitle = diag.db.getAccTitle?.();
  const a11yDescr = diag.db.getAccDescription?.();
  addA11yInfo(diagramType, svgNode, a11yTitle, a11yDescr);
  root.select(`[id="${id27}"]`).selectAll("foreignobject > *").attr("xmlns", XMLNS_XHTML_STD);
  let svgCode = root.select(enclosingDivID_selector).node().innerHTML;
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug("config.arrowMarkerAbsolute", config.arrowMarkerAbsolute);
  svgCode = cleanUpSvgCode(svgCode, isSandboxed, (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.evaluate)(config.arrowMarkerAbsolute));
  if (isSandboxed) {
    const svgEl = root.select(enclosingDivID_selector + " svg").node();
    svgCode = putIntoIFrame(svgCode, svgEl);
  } else if (!isLooseSecurityLevel) {
    svgCode = dompurify__WEBPACK_IMPORTED_MODULE_14__["default"].sanitize(svgCode, {
      ADD_TAGS: DOMPURIFY_TAGS,
      ADD_ATTR: DOMPURIFY_ATTR,
      HTML_INTEGRATION_POINTS: { foreignobject: true }
    });
  }
  attachFunctions();
  if (parseEncounteredException) {
    throw parseEncounteredException;
  }
  removeTempElements();
  return {
    diagramType,
    svg: svgCode,
    bindFunctions: diag.db.bindFunctions
  };
}, "render");
function initialize(userOptions = {}) {
  const options = (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.assignWithDepth_default)({}, userOptions);
  if (options?.fontFamily && !options.themeVariables?.fontFamily) {
    if (!options.themeVariables) {
      options.themeVariables = {};
    }
    options.themeVariables.fontFamily = options.fontFamily;
  }
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.saveConfigFromInitialize)(options);
  if (options?.theme && options.theme in _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.themes_default) {
    options.themeVariables = _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.themes_default[options.theme].getThemeVariables(
      options.themeVariables
    );
  } else if (options) {
    options.themeVariables = _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.themes_default.default.getThemeVariables(options.themeVariables);
  }
  const config = typeof options === "object" ? (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.setSiteConfig)(options) : (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getSiteConfig)();
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.setLogLevel)(config.logLevel);
  addDiagrams();
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(initialize, "initialize");
var getDiagramFromText = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((text, metadata = {}) => {
  const { code } = preprocessDiagram(text);
  return Diagram.fromText(code, metadata);
}, "getDiagramFromText");
function addA11yInfo(diagramType, svgNode, a11yTitle, a11yDescr) {
  setA11yDiagramInfo(svgNode, diagramType);
  addSVGa11yTitleDescription(svgNode, a11yTitle, a11yDescr, svgNode.attr("id"));
}
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(addA11yInfo, "addA11yInfo");
var mermaidAPI = Object.freeze({
  render,
  parse,
  getDiagramFromText,
  initialize,
  getConfig: _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getConfig,
  setConfig: _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.setConfig,
  getSiteConfig: _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getSiteConfig,
  updateSiteConfig: _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.updateSiteConfig,
  reset: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
    (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.reset)();
  }, "reset"),
  globalReset: /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => {
    (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.reset)(_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.defaultConfig);
  }, "globalReset"),
  defaultConfig: _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.defaultConfig
});
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.setLogLevel)((0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getConfig)().logLevel);
(0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.reset)((0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.getConfig)());

// src/mermaid.ts
var handleError = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((error, errors, parseError) => {
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.warn(error);
  if ((0,_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.isDetailedError)(error)) {
    if (parseError) {
      parseError(error.str, error.hash);
    }
    errors.push({ ...error, message: error.str, error });
  } else {
    if (parseError) {
      parseError(error);
    }
    if (error instanceof Error) {
      errors.push({
        str: error.message,
        message: error.message,
        hash: error.name,
        error
      });
    }
  }
}, "handleError");
var run = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async function(options = {
  querySelector: ".mermaid"
}) {
  try {
    await runThrowsErrors(options);
  } catch (e) {
    if ((0,_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.isDetailedError)(e)) {
      _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error(e.str);
    }
    if (mermaid.parseError) {
      mermaid.parseError(e);
    }
    if (!options.suppressErrors) {
      _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error("Use the suppressErrors option to suppress these errors");
      throw e;
    }
  }
}, "run");
var runThrowsErrors = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async function({ postRenderCallback, querySelector, nodes } = {
  querySelector: ".mermaid"
}) {
  const conf = mermaidAPI.getConfig();
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug(`${!postRenderCallback ? "No " : ""}Callback function found`);
  let nodesToProcess;
  if (nodes) {
    nodesToProcess = nodes;
  } else if (querySelector) {
    nodesToProcess = document.querySelectorAll(querySelector);
  } else {
    throw new Error("Nodes and querySelector are both undefined");
  }
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug(`Found ${nodesToProcess.length} diagrams`);
  if (conf?.startOnLoad !== void 0) {
    _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug("Start On Load: " + conf?.startOnLoad);
    mermaidAPI.updateSiteConfig({ startOnLoad: conf?.startOnLoad });
  }
  const idGenerator = new _chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.utils_default.InitIDGenerator(conf.deterministicIds, conf.deterministicIDSeed);
  let txt;
  const errors = [];
  for (const element of Array.from(nodesToProcess)) {
    _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.info("Rendering diagram: " + element.id);
    if (element.getAttribute("data-processed")) {
      continue;
    }
    element.setAttribute("data-processed", "true");
    const id27 = `mermaid-${idGenerator.next()}`;
    txt = element.innerHTML;
    txt = (0,ts_dedent__WEBPACK_IMPORTED_MODULE_12__.dedent)(_chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.utils_default.entityDecode(txt)).trim().replace(/<br\s*\/?>/gi, "<br/>");
    const init2 = _chunks_mermaid_core_chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_8__.utils_default.detectInit(txt);
    if (init2) {
      _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.debug("Detected early reinit: ", init2);
    }
    try {
      const { svg, bindFunctions } = await render2(id27, txt, element);
      element.innerHTML = svg;
      if (postRenderCallback) {
        await postRenderCallback(id27);
      }
      if (bindFunctions) {
        bindFunctions(element);
      }
    } catch (error) {
      handleError(error, errors, mermaid.parseError);
    }
  }
  if (errors.length > 0) {
    throw errors[0];
  }
}, "runThrowsErrors");
var initialize2 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(function(config) {
  mermaidAPI.initialize(config);
}, "initialize");
var init = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async function(config, nodes, callback) {
  _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.warn("mermaid.init is deprecated. Please use run instead.");
  if (config) {
    initialize2(config);
  }
  const runOptions = { postRenderCallback: callback, querySelector: ".mermaid" };
  if (typeof nodes === "string") {
    runOptions.querySelector = nodes;
  } else if (nodes) {
    if (nodes instanceof HTMLElement) {
      runOptions.nodes = [nodes];
    } else {
      runOptions.nodes = nodes;
    }
  }
  await run(runOptions);
}, "init");
var registerExternalDiagrams = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async (diagrams, {
  lazyLoad = true
} = {}) => {
  addDiagrams();
  (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.registerLazyLoadedDiagrams)(...diagrams);
  if (lazyLoad === false) {
    await loadRegisteredDiagrams();
  }
}, "registerExternalDiagrams");
var contentLoaded = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(function() {
  if (mermaid.startOnLoad) {
    const { startOnLoad } = mermaidAPI.getConfig();
    if (startOnLoad) {
      mermaid.run().catch((err) => _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error("Mermaid failed to initialize", err));
    }
  }
}, "contentLoaded");
if (typeof document !== "undefined") {
  window.addEventListener("load", contentLoaded, false);
}
var setParseErrorHandler = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(function(parseErrorHandler) {
  mermaid.parseError = parseErrorHandler;
}, "setParseErrorHandler");
var executionQueue = [];
var executionQueueRunning = false;
var executeQueue = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async () => {
  if (executionQueueRunning) {
    return;
  }
  executionQueueRunning = true;
  while (executionQueue.length > 0) {
    const f = executionQueue.shift();
    if (f) {
      try {
        await f();
      } catch (e) {
        _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error("Error executing queue", e);
      }
    }
  }
  executionQueueRunning = false;
}, "executeQueue");
var parse2 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(async (text, parseOptions) => {
  return new Promise((resolve, reject) => {
    const performCall = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => new Promise((res, rej) => {
      mermaidAPI.parse(text, parseOptions).then(
        (r) => {
          res(r);
          resolve(r);
        },
        (e) => {
          _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error("Error parsing", e);
          mermaid.parseError?.(e);
          rej(e);
          reject(e);
        }
      );
    }), "performCall");
    executionQueue.push(performCall);
    executeQueue().catch(reject);
  });
}, "parse");
var render2 = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)((id27, text, container) => {
  return new Promise((resolve, reject) => {
    const performCall = /* @__PURE__ */ (0,_chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.__name)(() => new Promise((res, rej) => {
      mermaidAPI.render(id27, text, container).then(
        (r) => {
          res(r);
          resolve(r);
        },
        (e) => {
          _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.log.error("Error parsing", e);
          mermaid.parseError?.(e);
          rej(e);
          reject(e);
        }
      );
    }), "performCall");
    executionQueue.push(performCall);
    executeQueue().catch(reject);
  });
}, "render");
var mermaid = {
  startOnLoad: true,
  mermaidAPI,
  parse: parse2,
  render: render2,
  init,
  run,
  registerExternalDiagrams,
  registerLayoutLoaders: _chunks_mermaid_core_chunk_TYCBKAJE_mjs__WEBPACK_IMPORTED_MODULE_1__.registerLayoutLoaders,
  initialize: initialize2,
  parseError: void 0,
  contentLoaded,
  setParseErrorHandler,
  detectType: _chunks_mermaid_core_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_11__.detectType,
  registerIconPacks: _chunks_mermaid_core_chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_6__.registerIconPacks
};
var mermaid_default = mermaid;

/*! Check if previously processed */
/*!
 * Wait for document loaded before starting the execution
 */


/***/ }),

/***/ "./node_modules/roughjs/bundled/rough.esm.js":
/*!***************************************************!*\
  !*** ./node_modules/roughjs/bundled/rough.esm.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ at)
/* harmony export */ });
function t(t,e,s){if(t&&t.length){const[n,o]=e,a=Math.PI/180*s,h=Math.cos(a),r=Math.sin(a);for(const e of t){const[t,s]=e;e[0]=(t-n)*h-(s-o)*r+n,e[1]=(t-n)*r+(s-o)*h+o}}}function e(t,e){return t[0]===e[0]&&t[1]===e[1]}function s(s,n,o,a=1){const h=o,r=Math.max(n,.1),i=s[0]&&s[0][0]&&"number"==typeof s[0][0]?[s]:s,c=[0,0];if(h)for(const e of i)t(e,c,h);const l=function(t,s,n){const o=[];for(const s of t){const t=[...s];e(t[0],t[t.length-1])||t.push([t[0][0],t[0][1]]),t.length>2&&o.push(t)}const a=[];s=Math.max(s,.1);const h=[];for(const t of o)for(let e=0;e<t.length-1;e++){const s=t[e],n=t[e+1];if(s[1]!==n[1]){const t=Math.min(s[1],n[1]);h.push({ymin:t,ymax:Math.max(s[1],n[1]),x:t===s[1]?s[0]:n[0],islope:(n[0]-s[0])/(n[1]-s[1])})}}if(h.sort(((t,e)=>t.ymin<e.ymin?-1:t.ymin>e.ymin?1:t.x<e.x?-1:t.x>e.x?1:t.ymax===e.ymax?0:(t.ymax-e.ymax)/Math.abs(t.ymax-e.ymax))),!h.length)return a;let r=[],i=h[0].ymin,c=0;for(;r.length||h.length;){if(h.length){let t=-1;for(let e=0;e<h.length&&!(h[e].ymin>i);e++)t=e;h.splice(0,t+1).forEach((t=>{r.push({s:i,edge:t})}))}if(r=r.filter((t=>!(t.edge.ymax<=i))),r.sort(((t,e)=>t.edge.x===e.edge.x?0:(t.edge.x-e.edge.x)/Math.abs(t.edge.x-e.edge.x))),(1!==n||c%s==0)&&r.length>1)for(let t=0;t<r.length;t+=2){const e=t+1;if(e>=r.length)break;const s=r[t].edge,n=r[e].edge;a.push([[Math.round(s.x),i],[Math.round(n.x),i]])}i+=n,r.forEach((t=>{t.edge.x=t.edge.x+n*t.edge.islope})),c++}return a}(i,r,a);if(h){for(const e of i)t(e,c,-h);!function(e,s,n){const o=[];e.forEach((t=>o.push(...t))),t(o,s,n)}(l,c,-h)}return l}function n(t,e){var n;const o=e.hachureAngle+90;let a=e.hachureGap;a<0&&(a=4*e.strokeWidth),a=Math.round(Math.max(a,.1));let h=1;return e.roughness>=1&&((null===(n=e.randomizer)||void 0===n?void 0:n.next())||Math.random())>.7&&(h=a),s(t,a,o,h||1)}class o{constructor(t){this.helper=t}fillPolygons(t,e){return this._fillPolygons(t,e)}_fillPolygons(t,e){const s=n(t,e);return{type:"fillSketch",ops:this.renderLines(s,e)}}renderLines(t,e){const s=[];for(const n of t)s.push(...this.helper.doubleLineOps(n[0][0],n[0][1],n[1][0],n[1][1],e));return s}}function a(t){const e=t[0],s=t[1];return Math.sqrt(Math.pow(e[0]-s[0],2)+Math.pow(e[1]-s[1],2))}class h extends o{fillPolygons(t,e){let s=e.hachureGap;s<0&&(s=4*e.strokeWidth),s=Math.max(s,.1);const o=n(t,Object.assign({},e,{hachureGap:s})),h=Math.PI/180*e.hachureAngle,r=[],i=.5*s*Math.cos(h),c=.5*s*Math.sin(h);for(const[t,e]of o)a([t,e])&&r.push([[t[0]-i,t[1]+c],[...e]],[[t[0]+i,t[1]-c],[...e]]);return{type:"fillSketch",ops:this.renderLines(r,e)}}}class r extends o{fillPolygons(t,e){const s=this._fillPolygons(t,e),n=Object.assign({},e,{hachureAngle:e.hachureAngle+90}),o=this._fillPolygons(t,n);return s.ops=s.ops.concat(o.ops),s}}class i{constructor(t){this.helper=t}fillPolygons(t,e){const s=n(t,e=Object.assign({},e,{hachureAngle:0}));return this.dotsOnLines(s,e)}dotsOnLines(t,e){const s=[];let n=e.hachureGap;n<0&&(n=4*e.strokeWidth),n=Math.max(n,.1);let o=e.fillWeight;o<0&&(o=e.strokeWidth/2);const h=n/4;for(const r of t){const t=a(r),i=t/n,c=Math.ceil(i)-1,l=t-c*n,u=(r[0][0]+r[1][0])/2-n/4,p=Math.min(r[0][1],r[1][1]);for(let t=0;t<c;t++){const a=p+l+t*n,r=u-h+2*Math.random()*h,i=a-h+2*Math.random()*h,c=this.helper.ellipse(r,i,o,o,e);s.push(...c.ops)}}return{type:"fillSketch",ops:s}}}class c{constructor(t){this.helper=t}fillPolygons(t,e){const s=n(t,e);return{type:"fillSketch",ops:this.dashedLine(s,e)}}dashedLine(t,e){const s=e.dashOffset<0?e.hachureGap<0?4*e.strokeWidth:e.hachureGap:e.dashOffset,n=e.dashGap<0?e.hachureGap<0?4*e.strokeWidth:e.hachureGap:e.dashGap,o=[];return t.forEach((t=>{const h=a(t),r=Math.floor(h/(s+n)),i=(h+n-r*(s+n))/2;let c=t[0],l=t[1];c[0]>l[0]&&(c=t[1],l=t[0]);const u=Math.atan((l[1]-c[1])/(l[0]-c[0]));for(let t=0;t<r;t++){const a=t*(s+n),h=a+s,r=[c[0]+a*Math.cos(u)+i*Math.cos(u),c[1]+a*Math.sin(u)+i*Math.sin(u)],l=[c[0]+h*Math.cos(u)+i*Math.cos(u),c[1]+h*Math.sin(u)+i*Math.sin(u)];o.push(...this.helper.doubleLineOps(r[0],r[1],l[0],l[1],e))}})),o}}class l{constructor(t){this.helper=t}fillPolygons(t,e){const s=e.hachureGap<0?4*e.strokeWidth:e.hachureGap,o=e.zigzagOffset<0?s:e.zigzagOffset,a=n(t,e=Object.assign({},e,{hachureGap:s+o}));return{type:"fillSketch",ops:this.zigzagLines(a,o,e)}}zigzagLines(t,e,s){const n=[];return t.forEach((t=>{const o=a(t),h=Math.round(o/(2*e));let r=t[0],i=t[1];r[0]>i[0]&&(r=t[1],i=t[0]);const c=Math.atan((i[1]-r[1])/(i[0]-r[0]));for(let t=0;t<h;t++){const o=2*t*e,a=2*(t+1)*e,h=Math.sqrt(2*Math.pow(e,2)),i=[r[0]+o*Math.cos(c),r[1]+o*Math.sin(c)],l=[r[0]+a*Math.cos(c),r[1]+a*Math.sin(c)],u=[i[0]+h*Math.cos(c+Math.PI/4),i[1]+h*Math.sin(c+Math.PI/4)];n.push(...this.helper.doubleLineOps(i[0],i[1],u[0],u[1],s),...this.helper.doubleLineOps(u[0],u[1],l[0],l[1],s))}})),n}}const u={};class p{constructor(t){this.seed=t}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))/2**31:Math.random()}}const f=0,d=1,g=2,M={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function k(t,e){return t.type===e}function b(t){const e=[],s=function(t){const e=new Array;for(;""!==t;)if(t.match(/^([ \t\r\n,]+)/))t=t.substr(RegExp.$1.length);else if(t.match(/^([aAcChHlLmMqQsStTvVzZ])/))e[e.length]={type:f,text:RegExp.$1},t=t.substr(RegExp.$1.length);else{if(!t.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/))return[];e[e.length]={type:d,text:`${parseFloat(RegExp.$1)}`},t=t.substr(RegExp.$1.length)}return e[e.length]={type:g,text:""},e}(t);let n="BOD",o=0,a=s[o];for(;!k(a,g);){let h=0;const r=[];if("BOD"===n){if("M"!==a.text&&"m"!==a.text)return b("M0,0"+t);o++,h=M[a.text],n=a.text}else k(a,d)?h=M[n]:(o++,h=M[a.text],n=a.text);if(!(o+h<s.length))throw new Error("Path data ended short");for(let t=o;t<o+h;t++){const e=s[t];if(!k(e,d))throw new Error("Param not a number: "+n+","+e.text);r[r.length]=+e.text}if("number"!=typeof M[n])throw new Error("Bad segment: "+n);{const t={key:n,data:r};e.push(t),o+=h,a=s[o],"M"===n&&(n="L"),"m"===n&&(n="l")}}return e}function y(t){let e=0,s=0,n=0,o=0;const a=[];for(const{key:h,data:r}of t)switch(h){case"M":a.push({key:"M",data:[...r]}),[e,s]=r,[n,o]=r;break;case"m":e+=r[0],s+=r[1],a.push({key:"M",data:[e,s]}),n=e,o=s;break;case"L":a.push({key:"L",data:[...r]}),[e,s]=r;break;case"l":e+=r[0],s+=r[1],a.push({key:"L",data:[e,s]});break;case"C":a.push({key:"C",data:[...r]}),e=r[4],s=r[5];break;case"c":{const t=r.map(((t,n)=>n%2?t+s:t+e));a.push({key:"C",data:t}),e=t[4],s=t[5];break}case"Q":a.push({key:"Q",data:[...r]}),e=r[2],s=r[3];break;case"q":{const t=r.map(((t,n)=>n%2?t+s:t+e));a.push({key:"Q",data:t}),e=t[2],s=t[3];break}case"A":a.push({key:"A",data:[...r]}),e=r[5],s=r[6];break;case"a":e+=r[5],s+=r[6],a.push({key:"A",data:[r[0],r[1],r[2],r[3],r[4],e,s]});break;case"H":a.push({key:"H",data:[...r]}),e=r[0];break;case"h":e+=r[0],a.push({key:"H",data:[e]});break;case"V":a.push({key:"V",data:[...r]}),s=r[0];break;case"v":s+=r[0],a.push({key:"V",data:[s]});break;case"S":a.push({key:"S",data:[...r]}),e=r[2],s=r[3];break;case"s":{const t=r.map(((t,n)=>n%2?t+s:t+e));a.push({key:"S",data:t}),e=t[2],s=t[3];break}case"T":a.push({key:"T",data:[...r]}),e=r[0],s=r[1];break;case"t":e+=r[0],s+=r[1],a.push({key:"T",data:[e,s]});break;case"Z":case"z":a.push({key:"Z",data:[]}),e=n,s=o}return a}function m(t){const e=[];let s="",n=0,o=0,a=0,h=0,r=0,i=0;for(const{key:c,data:l}of t){switch(c){case"M":e.push({key:"M",data:[...l]}),[n,o]=l,[a,h]=l;break;case"C":e.push({key:"C",data:[...l]}),n=l[4],o=l[5],r=l[2],i=l[3];break;case"L":e.push({key:"L",data:[...l]}),[n,o]=l;break;case"H":n=l[0],e.push({key:"L",data:[n,o]});break;case"V":o=l[0],e.push({key:"L",data:[n,o]});break;case"S":{let t=0,a=0;"C"===s||"S"===s?(t=n+(n-r),a=o+(o-i)):(t=n,a=o),e.push({key:"C",data:[t,a,...l]}),r=l[0],i=l[1],n=l[2],o=l[3];break}case"T":{const[t,a]=l;let h=0,c=0;"Q"===s||"T"===s?(h=n+(n-r),c=o+(o-i)):(h=n,c=o);const u=n+2*(h-n)/3,p=o+2*(c-o)/3,f=t+2*(h-t)/3,d=a+2*(c-a)/3;e.push({key:"C",data:[u,p,f,d,t,a]}),r=h,i=c,n=t,o=a;break}case"Q":{const[t,s,a,h]=l,c=n+2*(t-n)/3,u=o+2*(s-o)/3,p=a+2*(t-a)/3,f=h+2*(s-h)/3;e.push({key:"C",data:[c,u,p,f,a,h]}),r=t,i=s,n=a,o=h;break}case"A":{const t=Math.abs(l[0]),s=Math.abs(l[1]),a=l[2],h=l[3],r=l[4],i=l[5],c=l[6];if(0===t||0===s)e.push({key:"C",data:[n,o,i,c,i,c]}),n=i,o=c;else if(n!==i||o!==c){x(n,o,i,c,t,s,a,h,r).forEach((function(t){e.push({key:"C",data:t})})),n=i,o=c}break}case"Z":e.push({key:"Z",data:[]}),n=a,o=h}s=c}return e}function w(t,e,s){return[t*Math.cos(s)-e*Math.sin(s),t*Math.sin(s)+e*Math.cos(s)]}function x(t,e,s,n,o,a,h,r,i,c){const l=(u=h,Math.PI*u/180);var u;let p=[],f=0,d=0,g=0,M=0;if(c)[f,d,g,M]=c;else{[t,e]=w(t,e,-l),[s,n]=w(s,n,-l);const h=(t-s)/2,c=(e-n)/2;let u=h*h/(o*o)+c*c/(a*a);u>1&&(u=Math.sqrt(u),o*=u,a*=u);const p=o*o,k=a*a,b=p*k-p*c*c-k*h*h,y=p*c*c+k*h*h,m=(r===i?-1:1)*Math.sqrt(Math.abs(b/y));g=m*o*c/a+(t+s)/2,M=m*-a*h/o+(e+n)/2,f=Math.asin(parseFloat(((e-M)/a).toFixed(9))),d=Math.asin(parseFloat(((n-M)/a).toFixed(9))),t<g&&(f=Math.PI-f),s<g&&(d=Math.PI-d),f<0&&(f=2*Math.PI+f),d<0&&(d=2*Math.PI+d),i&&f>d&&(f-=2*Math.PI),!i&&d>f&&(d-=2*Math.PI)}let k=d-f;if(Math.abs(k)>120*Math.PI/180){const t=d,e=s,r=n;d=i&&d>f?f+120*Math.PI/180*1:f+120*Math.PI/180*-1,p=x(s=g+o*Math.cos(d),n=M+a*Math.sin(d),e,r,o,a,h,0,i,[d,t,g,M])}k=d-f;const b=Math.cos(f),y=Math.sin(f),m=Math.cos(d),P=Math.sin(d),v=Math.tan(k/4),S=4/3*o*v,O=4/3*a*v,L=[t,e],T=[t+S*y,e-O*b],D=[s+S*P,n-O*m],A=[s,n];if(T[0]=2*L[0]-T[0],T[1]=2*L[1]-T[1],c)return[T,D,A].concat(p);{p=[T,D,A].concat(p);const t=[];for(let e=0;e<p.length;e+=3){const s=w(p[e][0],p[e][1],l),n=w(p[e+1][0],p[e+1][1],l),o=w(p[e+2][0],p[e+2][1],l);t.push([s[0],s[1],n[0],n[1],o[0],o[1]])}return t}}const P={randOffset:function(t,e){return G(t,e)},randOffsetWithRange:function(t,e,s){return E(t,e,s)},ellipse:function(t,e,s,n,o){const a=T(s,n,o);return D(t,e,o,a).opset},doubleLineOps:function(t,e,s,n,o){return $(t,e,s,n,o,!0)}};function v(t,e,s,n,o){return{type:"path",ops:$(t,e,s,n,o)}}function S(t,e,s){const n=(t||[]).length;if(n>2){const o=[];for(let e=0;e<n-1;e++)o.push(...$(t[e][0],t[e][1],t[e+1][0],t[e+1][1],s));return e&&o.push(...$(t[n-1][0],t[n-1][1],t[0][0],t[0][1],s)),{type:"path",ops:o}}return 2===n?v(t[0][0],t[0][1],t[1][0],t[1][1],s):{type:"path",ops:[]}}function O(t,e,s,n,o){return function(t,e){return S(t,!0,e)}([[t,e],[t+s,e],[t+s,e+n],[t,e+n]],o)}function L(t,e){if(t.length){const s="number"==typeof t[0][0]?[t]:t,n=j(s[0],1*(1+.2*e.roughness),e),o=e.disableMultiStroke?[]:j(s[0],1.5*(1+.22*e.roughness),z(e));for(let t=1;t<s.length;t++){const a=s[t];if(a.length){const t=j(a,1*(1+.2*e.roughness),e),s=e.disableMultiStroke?[]:j(a,1.5*(1+.22*e.roughness),z(e));for(const e of t)"move"!==e.op&&n.push(e);for(const t of s)"move"!==t.op&&o.push(t)}}return{type:"path",ops:n.concat(o)}}return{type:"path",ops:[]}}function T(t,e,s){const n=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(t/2,2)+Math.pow(e/2,2))/2)),o=Math.ceil(Math.max(s.curveStepCount,s.curveStepCount/Math.sqrt(200)*n)),a=2*Math.PI/o;let h=Math.abs(t/2),r=Math.abs(e/2);const i=1-s.curveFitting;return h+=G(h*i,s),r+=G(r*i,s),{increment:a,rx:h,ry:r}}function D(t,e,s,n){const[o,a]=F(n.increment,t,e,n.rx,n.ry,1,n.increment*E(.1,E(.4,1,s),s),s);let h=q(o,null,s);if(!s.disableMultiStroke&&0!==s.roughness){const[o]=F(n.increment,t,e,n.rx,n.ry,1.5,0,s),a=q(o,null,s);h=h.concat(a)}return{estimatedPoints:a,opset:{type:"path",ops:h}}}function A(t,e,s,n,o,a,h,r,i){const c=t,l=e;let u=Math.abs(s/2),p=Math.abs(n/2);u+=G(.01*u,i),p+=G(.01*p,i);let f=o,d=a;for(;f<0;)f+=2*Math.PI,d+=2*Math.PI;d-f>2*Math.PI&&(f=0,d=2*Math.PI);const g=2*Math.PI/i.curveStepCount,M=Math.min(g/2,(d-f)/2),k=V(M,c,l,u,p,f,d,1,i);if(!i.disableMultiStroke){const t=V(M,c,l,u,p,f,d,1.5,i);k.push(...t)}return h&&(r?k.push(...$(c,l,c+u*Math.cos(f),l+p*Math.sin(f),i),...$(c,l,c+u*Math.cos(d),l+p*Math.sin(d),i)):k.push({op:"lineTo",data:[c,l]},{op:"lineTo",data:[c+u*Math.cos(f),l+p*Math.sin(f)]})),{type:"path",ops:k}}function _(t,e){const s=m(y(b(t))),n=[];let o=[0,0],a=[0,0];for(const{key:t,data:h}of s)switch(t){case"M":a=[h[0],h[1]],o=[h[0],h[1]];break;case"L":n.push(...$(a[0],a[1],h[0],h[1],e)),a=[h[0],h[1]];break;case"C":{const[t,s,o,r,i,c]=h;n.push(...Z(t,s,o,r,i,c,a,e)),a=[i,c];break}case"Z":n.push(...$(a[0],a[1],o[0],o[1],e)),a=[o[0],o[1]]}return{type:"path",ops:n}}function I(t,e){const s=[];for(const n of t)if(n.length){const t=e.maxRandomnessOffset||0,o=n.length;if(o>2){s.push({op:"move",data:[n[0][0]+G(t,e),n[0][1]+G(t,e)]});for(let a=1;a<o;a++)s.push({op:"lineTo",data:[n[a][0]+G(t,e),n[a][1]+G(t,e)]})}}return{type:"fillPath",ops:s}}function C(t,e){return function(t,e){let s=t.fillStyle||"hachure";if(!u[s])switch(s){case"zigzag":u[s]||(u[s]=new h(e));break;case"cross-hatch":u[s]||(u[s]=new r(e));break;case"dots":u[s]||(u[s]=new i(e));break;case"dashed":u[s]||(u[s]=new c(e));break;case"zigzag-line":u[s]||(u[s]=new l(e));break;default:s="hachure",u[s]||(u[s]=new o(e))}return u[s]}(e,P).fillPolygons(t,e)}function z(t){const e=Object.assign({},t);return e.randomizer=void 0,t.seed&&(e.seed=t.seed+1),e}function W(t){return t.randomizer||(t.randomizer=new p(t.seed||0)),t.randomizer.next()}function E(t,e,s,n=1){return s.roughness*n*(W(s)*(e-t)+t)}function G(t,e,s=1){return E(-t,t,e,s)}function $(t,e,s,n,o,a=!1){const h=a?o.disableMultiStrokeFill:o.disableMultiStroke,r=R(t,e,s,n,o,!0,!1);if(h)return r;const i=R(t,e,s,n,o,!0,!0);return r.concat(i)}function R(t,e,s,n,o,a,h){const r=Math.pow(t-s,2)+Math.pow(e-n,2),i=Math.sqrt(r);let c=1;c=i<200?1:i>500?.4:-.0016668*i+1.233334;let l=o.maxRandomnessOffset||0;l*l*100>r&&(l=i/10);const u=l/2,p=.2+.2*W(o);let f=o.bowing*o.maxRandomnessOffset*(n-e)/200,d=o.bowing*o.maxRandomnessOffset*(t-s)/200;f=G(f,o,c),d=G(d,o,c);const g=[],M=()=>G(u,o,c),k=()=>G(l,o,c),b=o.preserveVertices;return a&&(h?g.push({op:"move",data:[t+(b?0:M()),e+(b?0:M())]}):g.push({op:"move",data:[t+(b?0:G(l,o,c)),e+(b?0:G(l,o,c))]})),h?g.push({op:"bcurveTo",data:[f+t+(s-t)*p+M(),d+e+(n-e)*p+M(),f+t+2*(s-t)*p+M(),d+e+2*(n-e)*p+M(),s+(b?0:M()),n+(b?0:M())]}):g.push({op:"bcurveTo",data:[f+t+(s-t)*p+k(),d+e+(n-e)*p+k(),f+t+2*(s-t)*p+k(),d+e+2*(n-e)*p+k(),s+(b?0:k()),n+(b?0:k())]}),g}function j(t,e,s){if(!t.length)return[];const n=[];n.push([t[0][0]+G(e,s),t[0][1]+G(e,s)]),n.push([t[0][0]+G(e,s),t[0][1]+G(e,s)]);for(let o=1;o<t.length;o++)n.push([t[o][0]+G(e,s),t[o][1]+G(e,s)]),o===t.length-1&&n.push([t[o][0]+G(e,s),t[o][1]+G(e,s)]);return q(n,null,s)}function q(t,e,s){const n=t.length,o=[];if(n>3){const a=[],h=1-s.curveTightness;o.push({op:"move",data:[t[1][0],t[1][1]]});for(let e=1;e+2<n;e++){const s=t[e];a[0]=[s[0],s[1]],a[1]=[s[0]+(h*t[e+1][0]-h*t[e-1][0])/6,s[1]+(h*t[e+1][1]-h*t[e-1][1])/6],a[2]=[t[e+1][0]+(h*t[e][0]-h*t[e+2][0])/6,t[e+1][1]+(h*t[e][1]-h*t[e+2][1])/6],a[3]=[t[e+1][0],t[e+1][1]],o.push({op:"bcurveTo",data:[a[1][0],a[1][1],a[2][0],a[2][1],a[3][0],a[3][1]]})}if(e&&2===e.length){const t=s.maxRandomnessOffset;o.push({op:"lineTo",data:[e[0]+G(t,s),e[1]+G(t,s)]})}}else 3===n?(o.push({op:"move",data:[t[1][0],t[1][1]]}),o.push({op:"bcurveTo",data:[t[1][0],t[1][1],t[2][0],t[2][1],t[2][0],t[2][1]]})):2===n&&o.push(...R(t[0][0],t[0][1],t[1][0],t[1][1],s,!0,!0));return o}function F(t,e,s,n,o,a,h,r){const i=[],c=[];if(0===r.roughness){t/=4,c.push([e+n*Math.cos(-t),s+o*Math.sin(-t)]);for(let a=0;a<=2*Math.PI;a+=t){const t=[e+n*Math.cos(a),s+o*Math.sin(a)];i.push(t),c.push(t)}c.push([e+n*Math.cos(0),s+o*Math.sin(0)]),c.push([e+n*Math.cos(t),s+o*Math.sin(t)])}else{const l=G(.5,r)-Math.PI/2;c.push([G(a,r)+e+.9*n*Math.cos(l-t),G(a,r)+s+.9*o*Math.sin(l-t)]);const u=2*Math.PI+l-.01;for(let h=l;h<u;h+=t){const t=[G(a,r)+e+n*Math.cos(h),G(a,r)+s+o*Math.sin(h)];i.push(t),c.push(t)}c.push([G(a,r)+e+n*Math.cos(l+2*Math.PI+.5*h),G(a,r)+s+o*Math.sin(l+2*Math.PI+.5*h)]),c.push([G(a,r)+e+.98*n*Math.cos(l+h),G(a,r)+s+.98*o*Math.sin(l+h)]),c.push([G(a,r)+e+.9*n*Math.cos(l+.5*h),G(a,r)+s+.9*o*Math.sin(l+.5*h)])}return[c,i]}function V(t,e,s,n,o,a,h,r,i){const c=a+G(.1,i),l=[];l.push([G(r,i)+e+.9*n*Math.cos(c-t),G(r,i)+s+.9*o*Math.sin(c-t)]);for(let a=c;a<=h;a+=t)l.push([G(r,i)+e+n*Math.cos(a),G(r,i)+s+o*Math.sin(a)]);return l.push([e+n*Math.cos(h),s+o*Math.sin(h)]),l.push([e+n*Math.cos(h),s+o*Math.sin(h)]),q(l,null,i)}function Z(t,e,s,n,o,a,h,r){const i=[],c=[r.maxRandomnessOffset||1,(r.maxRandomnessOffset||1)+.3];let l=[0,0];const u=r.disableMultiStroke?1:2,p=r.preserveVertices;for(let f=0;f<u;f++)0===f?i.push({op:"move",data:[h[0],h[1]]}):i.push({op:"move",data:[h[0]+(p?0:G(c[0],r)),h[1]+(p?0:G(c[0],r))]}),l=p?[o,a]:[o+G(c[f],r),a+G(c[f],r)],i.push({op:"bcurveTo",data:[t+G(c[f],r),e+G(c[f],r),s+G(c[f],r),n+G(c[f],r),l[0],l[1]]});return i}function Q(t){return[...t]}function H(t,e=0){const s=t.length;if(s<3)throw new Error("A curve must have at least three points.");const n=[];if(3===s)n.push(Q(t[0]),Q(t[1]),Q(t[2]),Q(t[2]));else{const s=[];s.push(t[0],t[0]);for(let e=1;e<t.length;e++)s.push(t[e]),e===t.length-1&&s.push(t[e]);const o=[],a=1-e;n.push(Q(s[0]));for(let t=1;t+2<s.length;t++){const e=s[t];o[0]=[e[0],e[1]],o[1]=[e[0]+(a*s[t+1][0]-a*s[t-1][0])/6,e[1]+(a*s[t+1][1]-a*s[t-1][1])/6],o[2]=[s[t+1][0]+(a*s[t][0]-a*s[t+2][0])/6,s[t+1][1]+(a*s[t][1]-a*s[t+2][1])/6],o[3]=[s[t+1][0],s[t+1][1]],n.push(o[1],o[2],o[3])}}return n}function N(t,e){return Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)}function B(t,e,s){const n=N(e,s);if(0===n)return N(t,e);let o=((t[0]-e[0])*(s[0]-e[0])+(t[1]-e[1])*(s[1]-e[1]))/n;return o=Math.max(0,Math.min(1,o)),N(t,J(e,s,o))}function J(t,e,s){return[t[0]+(e[0]-t[0])*s,t[1]+(e[1]-t[1])*s]}function K(t,e,s,n){const o=n||[];if(function(t,e){const s=t[e+0],n=t[e+1],o=t[e+2],a=t[e+3];let h=3*n[0]-2*s[0]-a[0];h*=h;let r=3*n[1]-2*s[1]-a[1];r*=r;let i=3*o[0]-2*a[0]-s[0];i*=i;let c=3*o[1]-2*a[1]-s[1];return c*=c,h<i&&(h=i),r<c&&(r=c),h+r}(t,e)<s){const s=t[e+0];if(o.length){(a=o[o.length-1],h=s,Math.sqrt(N(a,h)))>1&&o.push(s)}else o.push(s);o.push(t[e+3])}else{const n=.5,a=t[e+0],h=t[e+1],r=t[e+2],i=t[e+3],c=J(a,h,n),l=J(h,r,n),u=J(r,i,n),p=J(c,l,n),f=J(l,u,n),d=J(p,f,n);K([a,c,p,d],0,s,o),K([d,f,u,i],0,s,o)}var a,h;return o}function U(t,e){return X(t,0,t.length,e)}function X(t,e,s,n,o){const a=o||[],h=t[e],r=t[s-1];let i=0,c=1;for(let n=e+1;n<s-1;++n){const e=B(t[n],h,r);e>i&&(i=e,c=n)}return Math.sqrt(i)>n?(X(t,e,c+1,n,a),X(t,c,s,n,a)):(a.length||a.push(h),a.push(r)),a}function Y(t,e=.15,s){const n=[],o=(t.length-1)/3;for(let s=0;s<o;s++){K(t,3*s,e,n)}return s&&s>0?X(n,0,n.length,s):n}const tt="none";class et{constructor(t){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:"#000",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:"hachure",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,disableMultiStroke:!1,disableMultiStrokeFill:!1,preserveVertices:!1,fillShapeRoughnessGain:.8},this.config=t||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return Math.floor(Math.random()*2**31)}_o(t){return t?Object.assign({},this.defaultOptions,t):this.defaultOptions}_d(t,e,s){return{shape:t,sets:e||[],options:s||this.defaultOptions}}line(t,e,s,n,o){const a=this._o(o);return this._d("line",[v(t,e,s,n,a)],a)}rectangle(t,e,s,n,o){const a=this._o(o),h=[],r=O(t,e,s,n,a);if(a.fill){const o=[[t,e],[t+s,e],[t+s,e+n],[t,e+n]];"solid"===a.fillStyle?h.push(I([o],a)):h.push(C([o],a))}return a.stroke!==tt&&h.push(r),this._d("rectangle",h,a)}ellipse(t,e,s,n,o){const a=this._o(o),h=[],r=T(s,n,a),i=D(t,e,a,r);if(a.fill)if("solid"===a.fillStyle){const s=D(t,e,a,r).opset;s.type="fillPath",h.push(s)}else h.push(C([i.estimatedPoints],a));return a.stroke!==tt&&h.push(i.opset),this._d("ellipse",h,a)}circle(t,e,s,n){const o=this.ellipse(t,e,s,s,n);return o.shape="circle",o}linearPath(t,e){const s=this._o(e);return this._d("linearPath",[S(t,!1,s)],s)}arc(t,e,s,n,o,a,h=!1,r){const i=this._o(r),c=[],l=A(t,e,s,n,o,a,h,!0,i);if(h&&i.fill)if("solid"===i.fillStyle){const h=Object.assign({},i);h.disableMultiStroke=!0;const r=A(t,e,s,n,o,a,!0,!1,h);r.type="fillPath",c.push(r)}else c.push(function(t,e,s,n,o,a,h){const r=t,i=e;let c=Math.abs(s/2),l=Math.abs(n/2);c+=G(.01*c,h),l+=G(.01*l,h);let u=o,p=a;for(;u<0;)u+=2*Math.PI,p+=2*Math.PI;p-u>2*Math.PI&&(u=0,p=2*Math.PI);const f=(p-u)/h.curveStepCount,d=[];for(let t=u;t<=p;t+=f)d.push([r+c*Math.cos(t),i+l*Math.sin(t)]);return d.push([r+c*Math.cos(p),i+l*Math.sin(p)]),d.push([r,i]),C([d],h)}(t,e,s,n,o,a,i));return i.stroke!==tt&&c.push(l),this._d("arc",c,i)}curve(t,e){const s=this._o(e),n=[],o=L(t,s);if(s.fill&&s.fill!==tt)if("solid"===s.fillStyle){const e=L(t,Object.assign(Object.assign({},s),{disableMultiStroke:!0,roughness:s.roughness?s.roughness+s.fillShapeRoughnessGain:0}));n.push({type:"fillPath",ops:this._mergedShape(e.ops)})}else{const e=[],o=t;if(o.length){const t="number"==typeof o[0][0]?[o]:o;for(const n of t)n.length<3?e.push(...n):3===n.length?e.push(...Y(H([n[0],n[0],n[1],n[2]]),10,(1+s.roughness)/2)):e.push(...Y(H(n),10,(1+s.roughness)/2))}e.length&&n.push(C([e],s))}return s.stroke!==tt&&n.push(o),this._d("curve",n,s)}polygon(t,e){const s=this._o(e),n=[],o=S(t,!0,s);return s.fill&&("solid"===s.fillStyle?n.push(I([t],s)):n.push(C([t],s))),s.stroke!==tt&&n.push(o),this._d("polygon",n,s)}path(t,e){const s=this._o(e),n=[];if(!t)return this._d("path",n,s);t=(t||"").replace(/\n/g," ").replace(/(-\s)/g,"-").replace("/(ss)/g"," ");const o=s.fill&&"transparent"!==s.fill&&s.fill!==tt,a=s.stroke!==tt,h=!!(s.simplification&&s.simplification<1),r=function(t,e,s){const n=m(y(b(t))),o=[];let a=[],h=[0,0],r=[];const i=()=>{r.length>=4&&a.push(...Y(r,e)),r=[]},c=()=>{i(),a.length&&(o.push(a),a=[])};for(const{key:t,data:e}of n)switch(t){case"M":c(),h=[e[0],e[1]],a.push(h);break;case"L":i(),a.push([e[0],e[1]]);break;case"C":if(!r.length){const t=a.length?a[a.length-1]:h;r.push([t[0],t[1]])}r.push([e[0],e[1]]),r.push([e[2],e[3]]),r.push([e[4],e[5]]);break;case"Z":i(),a.push([h[0],h[1]])}if(c(),!s)return o;const l=[];for(const t of o){const e=U(t,s);e.length&&l.push(e)}return l}(t,1,h?4-4*(s.simplification||1):(1+s.roughness)/2),i=_(t,s);if(o)if("solid"===s.fillStyle)if(1===r.length){const e=_(t,Object.assign(Object.assign({},s),{disableMultiStroke:!0,roughness:s.roughness?s.roughness+s.fillShapeRoughnessGain:0}));n.push({type:"fillPath",ops:this._mergedShape(e.ops)})}else n.push(I(r,s));else n.push(C(r,s));return a&&(h?r.forEach((t=>{n.push(S(t,!1,s))})):n.push(i)),this._d("path",n,s)}opsToPath(t,e){let s="";for(const n of t.ops){const t="number"==typeof e&&e>=0?n.data.map((t=>+t.toFixed(e))):n.data;switch(n.op){case"move":s+=`M${t[0]} ${t[1]} `;break;case"bcurveTo":s+=`C${t[0]} ${t[1]}, ${t[2]} ${t[3]}, ${t[4]} ${t[5]} `;break;case"lineTo":s+=`L${t[0]} ${t[1]} `}}return s.trim()}toPaths(t){const e=t.sets||[],s=t.options||this.defaultOptions,n=[];for(const t of e){let e=null;switch(t.type){case"path":e={d:this.opsToPath(t),stroke:s.stroke,strokeWidth:s.strokeWidth,fill:tt};break;case"fillPath":e={d:this.opsToPath(t),stroke:tt,strokeWidth:0,fill:s.fill||tt};break;case"fillSketch":e=this.fillSketch(t,s)}e&&n.push(e)}return n}fillSketch(t,e){let s=e.fillWeight;return s<0&&(s=e.strokeWidth/2),{d:this.opsToPath(t),stroke:e.fill||tt,strokeWidth:s,fill:tt}}_mergedShape(t){return t.filter(((t,e)=>0===e||"move"!==t.op))}}class st{constructor(t,e){this.canvas=t,this.ctx=this.canvas.getContext("2d"),this.gen=new et(e)}draw(t){const e=t.sets||[],s=t.options||this.getDefaultOptions(),n=this.ctx,o=t.options.fixedDecimalPlaceDigits;for(const a of e)switch(a.type){case"path":n.save(),n.strokeStyle="none"===s.stroke?"transparent":s.stroke,n.lineWidth=s.strokeWidth,s.strokeLineDash&&n.setLineDash(s.strokeLineDash),s.strokeLineDashOffset&&(n.lineDashOffset=s.strokeLineDashOffset),this._drawToContext(n,a,o),n.restore();break;case"fillPath":{n.save(),n.fillStyle=s.fill||"";const e="curve"===t.shape||"polygon"===t.shape||"path"===t.shape?"evenodd":"nonzero";this._drawToContext(n,a,o,e),n.restore();break}case"fillSketch":this.fillSketch(n,a,s)}}fillSketch(t,e,s){let n=s.fillWeight;n<0&&(n=s.strokeWidth/2),t.save(),s.fillLineDash&&t.setLineDash(s.fillLineDash),s.fillLineDashOffset&&(t.lineDashOffset=s.fillLineDashOffset),t.strokeStyle=s.fill||"",t.lineWidth=n,this._drawToContext(t,e,s.fixedDecimalPlaceDigits),t.restore()}_drawToContext(t,e,s,n="nonzero"){t.beginPath();for(const n of e.ops){const e="number"==typeof s&&s>=0?n.data.map((t=>+t.toFixed(s))):n.data;switch(n.op){case"move":t.moveTo(e[0],e[1]);break;case"bcurveTo":t.bezierCurveTo(e[0],e[1],e[2],e[3],e[4],e[5]);break;case"lineTo":t.lineTo(e[0],e[1])}}"fillPath"===e.type?t.fill(n):t.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(t,e,s,n,o){const a=this.gen.line(t,e,s,n,o);return this.draw(a),a}rectangle(t,e,s,n,o){const a=this.gen.rectangle(t,e,s,n,o);return this.draw(a),a}ellipse(t,e,s,n,o){const a=this.gen.ellipse(t,e,s,n,o);return this.draw(a),a}circle(t,e,s,n){const o=this.gen.circle(t,e,s,n);return this.draw(o),o}linearPath(t,e){const s=this.gen.linearPath(t,e);return this.draw(s),s}polygon(t,e){const s=this.gen.polygon(t,e);return this.draw(s),s}arc(t,e,s,n,o,a,h=!1,r){const i=this.gen.arc(t,e,s,n,o,a,h,r);return this.draw(i),i}curve(t,e){const s=this.gen.curve(t,e);return this.draw(s),s}path(t,e){const s=this.gen.path(t,e);return this.draw(s),s}}const nt="http://www.w3.org/2000/svg";class ot{constructor(t,e){this.svg=t,this.gen=new et(e)}draw(t){const e=t.sets||[],s=t.options||this.getDefaultOptions(),n=this.svg.ownerDocument||window.document,o=n.createElementNS(nt,"g"),a=t.options.fixedDecimalPlaceDigits;for(const h of e){let e=null;switch(h.type){case"path":e=n.createElementNS(nt,"path"),e.setAttribute("d",this.opsToPath(h,a)),e.setAttribute("stroke",s.stroke),e.setAttribute("stroke-width",s.strokeWidth+""),e.setAttribute("fill","none"),s.strokeLineDash&&e.setAttribute("stroke-dasharray",s.strokeLineDash.join(" ").trim()),s.strokeLineDashOffset&&e.setAttribute("stroke-dashoffset",`${s.strokeLineDashOffset}`);break;case"fillPath":e=n.createElementNS(nt,"path"),e.setAttribute("d",this.opsToPath(h,a)),e.setAttribute("stroke","none"),e.setAttribute("stroke-width","0"),e.setAttribute("fill",s.fill||""),"curve"!==t.shape&&"polygon"!==t.shape||e.setAttribute("fill-rule","evenodd");break;case"fillSketch":e=this.fillSketch(n,h,s)}e&&o.appendChild(e)}return o}fillSketch(t,e,s){let n=s.fillWeight;n<0&&(n=s.strokeWidth/2);const o=t.createElementNS(nt,"path");return o.setAttribute("d",this.opsToPath(e,s.fixedDecimalPlaceDigits)),o.setAttribute("stroke",s.fill||""),o.setAttribute("stroke-width",n+""),o.setAttribute("fill","none"),s.fillLineDash&&o.setAttribute("stroke-dasharray",s.fillLineDash.join(" ").trim()),s.fillLineDashOffset&&o.setAttribute("stroke-dashoffset",`${s.fillLineDashOffset}`),o}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(t,e){return this.gen.opsToPath(t,e)}line(t,e,s,n,o){const a=this.gen.line(t,e,s,n,o);return this.draw(a)}rectangle(t,e,s,n,o){const a=this.gen.rectangle(t,e,s,n,o);return this.draw(a)}ellipse(t,e,s,n,o){const a=this.gen.ellipse(t,e,s,n,o);return this.draw(a)}circle(t,e,s,n){const o=this.gen.circle(t,e,s,n);return this.draw(o)}linearPath(t,e){const s=this.gen.linearPath(t,e);return this.draw(s)}polygon(t,e){const s=this.gen.polygon(t,e);return this.draw(s)}arc(t,e,s,n,o,a,h=!1,r){const i=this.gen.arc(t,e,s,n,o,a,h,r);return this.draw(i)}curve(t,e){const s=this.gen.curve(t,e);return this.draw(s)}path(t,e){const s=this.gen.path(t,e);return this.draw(s)}}var at={canvas:(t,e)=>new st(t,e),svg:(t,e)=>new ot(t,e),generator:t=>new et(t),newSeed:()=>et.newSeed()};


/***/ }),

/***/ "./node_modules/stylis/src/Enum.js":
/*!*****************************************!*\
  !*** ./node_modules/stylis/src/Enum.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CHARSET: () => (/* binding */ CHARSET),
/* harmony export */   COMMENT: () => (/* binding */ COMMENT),
/* harmony export */   COUNTER_STYLE: () => (/* binding */ COUNTER_STYLE),
/* harmony export */   DECLARATION: () => (/* binding */ DECLARATION),
/* harmony export */   DOCUMENT: () => (/* binding */ DOCUMENT),
/* harmony export */   FONT_FACE: () => (/* binding */ FONT_FACE),
/* harmony export */   FONT_FEATURE_VALUES: () => (/* binding */ FONT_FEATURE_VALUES),
/* harmony export */   IMPORT: () => (/* binding */ IMPORT),
/* harmony export */   KEYFRAMES: () => (/* binding */ KEYFRAMES),
/* harmony export */   LAYER: () => (/* binding */ LAYER),
/* harmony export */   MEDIA: () => (/* binding */ MEDIA),
/* harmony export */   MOZ: () => (/* binding */ MOZ),
/* harmony export */   MS: () => (/* binding */ MS),
/* harmony export */   NAMESPACE: () => (/* binding */ NAMESPACE),
/* harmony export */   PAGE: () => (/* binding */ PAGE),
/* harmony export */   RULESET: () => (/* binding */ RULESET),
/* harmony export */   SCOPE: () => (/* binding */ SCOPE),
/* harmony export */   SUPPORTS: () => (/* binding */ SUPPORTS),
/* harmony export */   VIEWPORT: () => (/* binding */ VIEWPORT),
/* harmony export */   WEBKIT: () => (/* binding */ WEBKIT)
/* harmony export */ });
var MS = '-ms-'
var MOZ = '-moz-'
var WEBKIT = '-webkit-'

var COMMENT = 'comm'
var RULESET = 'rule'
var DECLARATION = 'decl'

var PAGE = '@page'
var MEDIA = '@media'
var IMPORT = '@import'
var CHARSET = '@charset'
var VIEWPORT = '@viewport'
var SUPPORTS = '@supports'
var DOCUMENT = '@document'
var NAMESPACE = '@namespace'
var KEYFRAMES = '@keyframes'
var FONT_FACE = '@font-face'
var COUNTER_STYLE = '@counter-style'
var FONT_FEATURE_VALUES = '@font-feature-values'
var LAYER = '@layer'
var SCOPE = '@scope'


/***/ }),

/***/ "./node_modules/stylis/src/Parser.js":
/*!*******************************************!*\
  !*** ./node_modules/stylis/src/Parser.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   comment: () => (/* binding */ comment),
/* harmony export */   compile: () => (/* binding */ compile),
/* harmony export */   declaration: () => (/* binding */ declaration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   ruleset: () => (/* binding */ ruleset)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Enum.js */ "./node_modules/stylis/src/Enum.js");
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utility.js */ "./node_modules/stylis/src/Utility.js");
/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ "./node_modules/stylis/src/Tokenizer.js");




/**
 * @param {string} value
 * @return {object[]}
 */
function compile (value) {
	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.dealloc)(parse('', null, null, null, [''], value = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.alloc)(value), 0, [0], value))
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {string[]} rule
 * @param {string[]} rules
 * @param {string[]} rulesets
 * @param {number[]} pseudo
 * @param {number[]} points
 * @param {string[]} declarations
 * @return {object}
 */
function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	var index = 0
	var offset = 0
	var length = pseudo
	var atrule = 0
	var property = 0
	var previous = 0
	var variable = 1
	var scanning = 1
	var ampersand = 1
	var character = 0
	var type = ''
	var props = rules
	var children = rulesets
	var reference = rule
	var characters = type

	while (scanning)
		switch (previous = character, character = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)()) {
			// (
			case 40:
				if (previous != 108 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, length - 1) == 58) {
					if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.indexof)(characters += (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)(character), '&', '&\f'), '&\f', (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.abs)(index ? points[index - 1] : 0)) != -1)
						ampersand = -1
					break
				}
			// " ' [
			case 34: case 39: case 91:
				characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)(character)
				break
			// \t \n \r \s
			case 9: case 10: case 13: case 32:
				characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.whitespace)(previous)
				break
			// \
			case 92:
				characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.escaping)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)() - 1, 7)
				continue
			// /
			case 47:
				switch ((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)()) {
					case 42: case 47:
						;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(comment((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.commenter)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)(), (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)()), root, parent, declarations), declarations)
						if (((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.token)(previous || 1) == 5 || (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.token)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)() || 1) == 5) && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(characters, -1, void 0) !== ' ') characters += ' '
						break
					default:
						characters += '/'
				}
				break
			// {
			case 123 * variable:
				points[index++] = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) * ampersand
			// } ; \0
			case 125 * variable: case 59: case 0:
				switch (character) {
					// \0 }
					case 0: case 125: scanning = 0
					// ;
					case 59 + offset: if (ampersand == -1) characters = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(characters, /\f/g, '')
						if (property > 0 && ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) - length || (variable === 0 && previous === 47)))
							(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(property > 32 ? declaration(characters + ';', rule, parent, length - 1, declarations) : declaration((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(characters, ' ', '') + ';', rule, parent, length - 2, declarations), declarations)
						break
					// @ ;
					case 59: characters += ';'
					// { rule/at-rule
					default:
						;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length, rulesets), rulesets)

						if (character === 123)
							if (offset === 0)
								parse(characters, root, reference, reference, props, rulesets, length, points, children)
							else {
								switch (atrule) {
									// c(ontainer)
									case 99:
										if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, 3) === 110) break
									// l(ayer)
									case 108:
										if ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.charat)(characters, 2) === 97) break
									default:
										offset = 0
									// d(ocument) m(edia) s(upports)
									case 100: case 109: case 115:
								}
								if (offset) parse(value, reference, reference, rule && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.append)(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length, children), children), rules, children, length, points, rule ? props : children)
								else parse(characters, reference, reference, reference, [''], children, 0, points, children)
							}
				}

				index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo
				break
			// :
			case 58:
				length = 1 + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters), property = previous
			default:
				if (variable < 1)
					if (character == 123)
						--variable
					else if (character == 125 && variable++ == 0 && (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.prev)() == 125)
						continue

				switch (characters += (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.from)(character), character * variable) {
					// &
					case 38:
						ampersand = offset > 0 ? 1 : (characters += '\f', -1)
						break
					// ,
					case 44:
						points[index++] = ((0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) - 1) * ampersand, ampersand = 1
						break
					// @
					case 64:
						// -
						if ((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)() === 45)
							characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.delimit)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.next)())

						atrule = (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.peek)(), offset = length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(type = characters += (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.identifier)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.caret)())), character++
						break
					// -
					case 45:
						if (previous === 45 && (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(characters) == 2)
							variable = 0
				}
		}

	return rulesets
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} index
 * @param {number} offset
 * @param {string[]} rules
 * @param {number[]} points
 * @param {string} type
 * @param {string[]} props
 * @param {string[]} children
 * @param {number} length
 * @param {object[]} siblings
 * @return {object}
 */
function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length, siblings) {
	var post = offset - 1
	var rule = offset === 0 ? rules : ['']
	var size = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.sizeof)(rule)

	for (var i = 0, j = 0, k = 0; i < index; ++i)
		for (var x = 0, y = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, post + 1, post = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.abs)(j = points[i])), z = value; x < size; ++x)
			if (z = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.trim)(j > 0 ? rule[x] + ' ' + y : (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.replace)(y, /&\f/g, rule[x])))
				props[k++] = z

	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, offset === 0 ? _Enum_js__WEBPACK_IMPORTED_MODULE_2__.RULESET : type, props, children, length, siblings)
}

/**
 * @param {number} value
 * @param {object} root
 * @param {object?} parent
 * @param {object[]} siblings
 * @return {object}
 */
function comment (value, root, parent, siblings) {
	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, _Enum_js__WEBPACK_IMPORTED_MODULE_2__.COMMENT, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.from)((0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.char)()), (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, 2, -2), 0, siblings)
}

/**
 * @param {string} value
 * @param {object} root
 * @param {object?} parent
 * @param {number} length
 * @param {object[]} siblings
 * @return {object}
 */
function declaration (value, root, parent, length, siblings) {
	return (0,_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.node)(value, root, parent, _Enum_js__WEBPACK_IMPORTED_MODULE_2__.DECLARATION, (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, 0, length), (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.substr)(value, length + 1, -1), length, siblings)
}


/***/ }),

/***/ "./node_modules/stylis/src/Serializer.js":
/*!***********************************************!*\
  !*** ./node_modules/stylis/src/Serializer.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   serialize: () => (/* binding */ serialize),
/* harmony export */   stringify: () => (/* binding */ stringify)
/* harmony export */ });
/* harmony import */ var _Enum_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Enum.js */ "./node_modules/stylis/src/Enum.js");
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utility.js */ "./node_modules/stylis/src/Utility.js");



/**
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function serialize (children, callback) {
	var output = ''

	for (var i = 0; i < children.length; i++)
		output += callback(children[i], i, children, callback) || ''

	return output
}

/**
 * @param {object} element
 * @param {number} index
 * @param {object[]} children
 * @param {function} callback
 * @return {string}
 */
function stringify (element, index, children, callback) {
	switch (element.type) {
		case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.LAYER: if (element.children.length) break
		case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.IMPORT: case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.NAMESPACE: case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.DECLARATION: return element.return = element.return || element.value
		case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.COMMENT: return ''
		case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'
		case _Enum_js__WEBPACK_IMPORTED_MODULE_0__.RULESET: if (!(0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(element.value = element.props.join(','))) return ''
	}

	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_1__.strlen)(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''
}


/***/ }),

/***/ "./node_modules/stylis/src/Tokenizer.js":
/*!**********************************************!*\
  !*** ./node_modules/stylis/src/Tokenizer.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   alloc: () => (/* binding */ alloc),
/* harmony export */   caret: () => (/* binding */ caret),
/* harmony export */   char: () => (/* binding */ char),
/* harmony export */   character: () => (/* binding */ character),
/* harmony export */   characters: () => (/* binding */ characters),
/* harmony export */   column: () => (/* binding */ column),
/* harmony export */   commenter: () => (/* binding */ commenter),
/* harmony export */   copy: () => (/* binding */ copy),
/* harmony export */   dealloc: () => (/* binding */ dealloc),
/* harmony export */   delimit: () => (/* binding */ delimit),
/* harmony export */   delimiter: () => (/* binding */ delimiter),
/* harmony export */   escaping: () => (/* binding */ escaping),
/* harmony export */   identifier: () => (/* binding */ identifier),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   lift: () => (/* binding */ lift),
/* harmony export */   line: () => (/* binding */ line),
/* harmony export */   next: () => (/* binding */ next),
/* harmony export */   node: () => (/* binding */ node),
/* harmony export */   peek: () => (/* binding */ peek),
/* harmony export */   position: () => (/* binding */ position),
/* harmony export */   prev: () => (/* binding */ prev),
/* harmony export */   slice: () => (/* binding */ slice),
/* harmony export */   token: () => (/* binding */ token),
/* harmony export */   tokenize: () => (/* binding */ tokenize),
/* harmony export */   tokenizer: () => (/* binding */ tokenizer),
/* harmony export */   whitespace: () => (/* binding */ whitespace)
/* harmony export */ });
/* harmony import */ var _Utility_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utility.js */ "./node_modules/stylis/src/Utility.js");


var line = 1
var column = 1
var length = 0
var position = 0
var character = 0
var characters = ''

/**
 * @param {string} value
 * @param {object | null} root
 * @param {object | null} parent
 * @param {string} type
 * @param {string[] | string} props
 * @param {object[] | string} children
 * @param {object[]} siblings
 * @param {number} length
 */
function node (value, root, parent, type, props, children, length, siblings) {
	return {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: '', siblings: siblings}
}

/**
 * @param {object} root
 * @param {object} props
 * @return {object}
 */
function copy (root, props) {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.assign)(node('', null, null, '', null, null, 0, root.siblings), root, {length: -root.length}, props)
}

/**
 * @param {object} root
 */
function lift (root) {
	while (root.root)
		root = copy(root.root, {children: [root]})

	;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(root, root.siblings)
}

/**
 * @return {number}
 */
function char () {
	return character
}

/**
 * @return {number}
 */
function prev () {
	character = position > 0 ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, --position) : 0

	if (column--, character === 10)
		column = 1, line--

	return character
}

/**
 * @return {number}
 */
function next () {
	character = position < length ? (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, position++) : 0

	if (column++, character === 10)
		column = 1, line++

	return character
}

/**
 * @return {number}
 */
function peek () {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.charat)(characters, position)
}

/**
 * @return {number}
 */
function caret () {
	return position
}

/**
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function slice (begin, end) {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.substr)(characters, begin, end)
}

/**
 * @param {number} type
 * @return {number}
 */
function token (type) {
	switch (type) {
		// \0 \t \n \r \s whitespace token
		case 0: case 9: case 10: case 13: case 32:
			return 5
		// ! + , / > @ ~ isolate token
		case 33: case 43: case 44: case 47: case 62: case 64: case 126:
		// ; { } breakpoint token
		case 59: case 123: case 125:
			return 4
		// : accompanied token
		case 58:
			return 3
		// " ' ( [ opening delimit token
		case 34: case 39: case 40: case 91:
			return 2
		// ) ] closing delimit token
		case 41: case 93:
			return 1
	}

	return 0
}

/**
 * @param {string} value
 * @return {any[]}
 */
function alloc (value) {
	return line = column = 1, length = (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.strlen)(characters = value), position = 0, []
}

/**
 * @param {any} value
 * @return {any}
 */
function dealloc (value) {
	return characters = '', value
}

/**
 * @param {number} type
 * @return {string}
 */
function delimit (type) {
	return (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.trim)(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))
}

/**
 * @param {string} value
 * @return {string[]}
 */
function tokenize (value) {
	return dealloc(tokenizer(alloc(value)))
}

/**
 * @param {number} type
 * @return {string}
 */
function whitespace (type) {
	while (character = peek())
		if (character < 33)
			next()
		else
			break

	return token(type) > 2 || token(character) > 3 ? '' : ' '
}

/**
 * @param {string[]} children
 * @return {string[]}
 */
function tokenizer (children) {
	while (next())
		switch (token(character)) {
			case 0: (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(identifier(position - 1), children)
				break
			case 2: ;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)(delimit(character), children)
				break
			default: ;(0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.append)((0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.from)(character), children)
		}

	return children
}

/**
 * @param {number} index
 * @param {number} count
 * @return {string}
 */
function escaping (index, count) {
	while (--count && next())
		// not 0-9 A-F a-f
		if (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))
			break

	return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))
}

/**
 * @param {number} type
 * @return {number}
 */
function delimiter (type) {
	while (next())
		switch (character) {
			// ] ) " '
			case type:
				return position
			// " '
			case 34: case 39:
				if (type !== 34 && type !== 39)
					delimiter(character)
				break
			// (
			case 40:
				if (type === 41)
					delimiter(type)
				break
			// \
			case 92:
				next()
				break
		}

	return position
}

/**
 * @param {number} type
 * @param {number} index
 * @return {number}
 */
function commenter (type, index) {
	while (next())
		// //
		if (type + character === 47 + 10)
			break
		// /*
		else if (type + character === 42 + 42 && peek() === 47)
			break

	return '/*' + slice(index, position - 1) + '*' + (0,_Utility_js__WEBPACK_IMPORTED_MODULE_0__.from)(type === 47 ? type : next())
}

/**
 * @param {number} index
 * @return {string}
 */
function identifier (index) {
	while (!token(peek()))
		next()

	return slice(index, position)
}


/***/ }),

/***/ "./node_modules/stylis/src/Utility.js":
/*!********************************************!*\
  !*** ./node_modules/stylis/src/Utility.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   abs: () => (/* binding */ abs),
/* harmony export */   append: () => (/* binding */ append),
/* harmony export */   assign: () => (/* binding */ assign),
/* harmony export */   charat: () => (/* binding */ charat),
/* harmony export */   combine: () => (/* binding */ combine),
/* harmony export */   filter: () => (/* binding */ filter),
/* harmony export */   from: () => (/* binding */ from),
/* harmony export */   hash: () => (/* binding */ hash),
/* harmony export */   indexof: () => (/* binding */ indexof),
/* harmony export */   match: () => (/* binding */ match),
/* harmony export */   replace: () => (/* binding */ replace),
/* harmony export */   sizeof: () => (/* binding */ sizeof),
/* harmony export */   strlen: () => (/* binding */ strlen),
/* harmony export */   substr: () => (/* binding */ substr),
/* harmony export */   trim: () => (/* binding */ trim)
/* harmony export */ });
/**
 * @param {number}
 * @return {number}
 */
var abs = Math.abs

/**
 * @param {number}
 * @return {string}
 */
var from = String.fromCharCode

/**
 * @param {object}
 * @return {object}
 */
var assign = Object.assign

/**
 * @param {string} value
 * @param {number} length
 * @return {number}
 */
function hash (value, length) {
	return charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0
}

/**
 * @param {string} value
 * @return {string}
 */
function trim (value) {
	return value.trim()
}

/**
 * @param {string} value
 * @param {RegExp} pattern
 * @return {string?}
 */
function match (value, pattern) {
	return (value = pattern.exec(value)) ? value[0] : value
}

/**
 * @param {string} value
 * @param {(string|RegExp)} pattern
 * @param {string} replacement
 * @return {string}
 */
function replace (value, pattern, replacement) {
	return value.replace(pattern, replacement)
}

/**
 * @param {string} value
 * @param {string} search
 * @param {number} position
 * @return {number}
 */
function indexof (value, search, position) {
	return value.indexOf(search, position)
}

/**
 * @param {string} value
 * @param {number} index
 * @return {number}
 */
function charat (value, index) {
	return value.charCodeAt(index) | 0
}

/**
 * @param {string} value
 * @param {number} begin
 * @param {number} end
 * @return {string}
 */
function substr (value, begin, end) {
	return value.slice(begin, end)
}

/**
 * @param {string} value
 * @return {number}
 */
function strlen (value) {
	return value.length
}

/**
 * @param {any[]} value
 * @return {number}
 */
function sizeof (value) {
	return value.length
}

/**
 * @param {any} value
 * @param {any[]} array
 * @return {any}
 */
function append (value, array) {
	return array.push(value), value
}

/**
 * @param {string[]} array
 * @param {function} callback
 * @return {string}
 */
function combine (array, callback) {
	return array.map(callback).join('')
}

/**
 * @param {string[]} array
 * @param {RegExp} pattern
 * @return {string[]}
 */
function filter (array, pattern) {
	return array.filter(function (value) { return !match(value, pattern) })
}


/***/ }),

/***/ "./node_modules/ts-dedent/esm/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ts-dedent/esm/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dedent: () => (/* binding */ dedent),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function dedent(templ) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    var strings = Array.from(typeof templ === 'string' ? [templ] : templ);
    strings[strings.length - 1] = strings[strings.length - 1].replace(/\r?\n([\t ]*)$/, '');
    var indentLengths = strings.reduce(function (arr, str) {
        var matches = str.match(/\n([\t ]+|(?!\s).)/g);
        if (matches) {
            return arr.concat(matches.map(function (match) { var _a, _b; return (_b = (_a = match.match(/[\t ]/g)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0; }));
        }
        return arr;
    }, []);
    if (indentLengths.length) {
        var pattern_1 = new RegExp("\n[\t ]{" + Math.min.apply(Math, indentLengths) + "}", 'g');
        strings = strings.map(function (str) { return str.replace(pattern_1, '\n'); });
    }
    strings[0] = strings[0].replace(/^\r?\n/, '');
    var string = strings[0];
    values.forEach(function (value, i) {
        var endentations = string.match(/(?:^|\n)( *)$/);
        var endentation = endentations ? endentations[1] : '';
        var indentedValue = value;
        if (typeof value === 'string' && value.includes('\n')) {
            indentedValue = String(value)
                .split('\n')
                .map(function (str, i) {
                return i === 0 ? str : "" + endentation + str;
            })
                .join('\n');
        }
        string += indentedValue + strings[i + 1];
    });
    return string;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dedent);
//# sourceMappingURL=index.js.map

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfbWVybWFpZF9kaXN0X21lcm1haWRfY29yZV9tanMuZjFjZTJlNDczNThlZTJkN2ZmZGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsK0JBQStCLEdBQUcsa0NBQWtDLEdBQUcsc0JBQXNCLEdBQUcsMkJBQTJCLEdBQUcsMkJBQTJCLEdBQUcseUJBQXlCLEdBQUcsNEJBQTRCO0FBQ3hPLDRCQUE0QjtBQUM1Qix5QkFBeUIsaUJBQWlCO0FBQzFDLDJCQUEyQixtQkFBbUI7QUFDOUMsMkJBQTJCO0FBQzNCLHNCQUFzQixpQkFBaUI7QUFDdkMsa0NBQWtDO0FBQ2xDLCtCQUErQjtBQUMvQixpQkFBaUI7Ozs7Ozs7Ozs7OztBQ1ZKO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixrQkFBa0IsbUJBQU8sQ0FBQyw2RUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hGK0M7O0FBRWxFO0FBQ0E7QUFD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RTtBQUNwRSx1RUFBdUU7QUFDdkUsMERBQTBEO0FBQzFELCtDQUErQztBQUMvQyxrREFBa0Q7QUFDbEQsMENBQTBDO0FBQzFDLDREQUE0RDtBQUM1RCw0REFBNEQ7QUFDNUQsMENBQTBDO0FBQzFDLCtDQUErQztBQUMvQyw4REFBOEQ7QUFDOUQsK0NBQStDO0FBQy9DLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFFBQVE7QUFDUjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLG9GQUFvRiw2REFBNkQ7QUFDako7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxVEFBcVQ7QUFDclQ7QUFDQTtBQUNBO0FBQ0EsTUFBTSx3Q0FBd0Msb0ZBQW9GLG9LQUFvSyxpSEFBaUg7QUFDdlo7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUU2QjtBQUM3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3p6Q0E7QUFDa0M7QUFDTDtBQUNVO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQix3QkFBd0IsZ0RBQUk7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQix5QkFBeUIsK0NBQUk7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0EscUJBQXFCLHVEQUFDO0FBQ3RCO0FBQ0EscUJBQXFCLHVEQUFDO0FBQ3RCO0FBQ0EscUJBQXFCLHVEQUFDO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixVQUFVO0FBQzFCO0FBQ0EscUJBQXFCLHVEQUFDO0FBQ3RCO0FBQ0EscUJBQXFCLHVEQUFDO0FBQ3RCO0FBQ0EscUJBQXFCLHVEQUFDO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQUk7QUFDOUI7QUFDQTtBQUNBLGVBQWUsdURBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQUk7QUFDOUI7QUFDQTtBQUNBLGVBQWUsdURBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQUk7QUFDOUI7QUFDQTtBQUNBLGVBQWUsdURBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQUk7QUFDOUI7QUFDQTtBQUNBLGVBQWUsdURBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQUk7QUFDOUI7QUFDQTtBQUNBLGVBQWUsdURBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0NBQUk7QUFDOUI7QUFDQTtBQUNBLGVBQWUsdURBQUM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLCtDQUFJO0FBQzFCO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxLQUFLLEVBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0NyQjtBQUMyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUFHO0FBQ2xCLEtBQUs7QUFDTDtBQUNBLG9C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QU07QUFDakM7O0FBRUEsaUVBQWUsYUFBYSxFQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FDL0I3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUk0Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDO0FBQ0Q7QUFDQTtBQUNBLDZCQUE2QiwyREFBTTtBQUNuQztBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBLDZCQUE2QiwyREFBTTtBQUNuQztBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsMkRBQU07QUFDckM7QUFDQSxLQUFLO0FBQ0wsK0JBQStCLDJEQUFNO0FBQ3JDO0FBQ0EsS0FBSztBQUNMLCtCQUErQiwyREFBTTtBQUNyQztBQUNBLEtBQUs7QUFDTCwrQkFBK0IsMkRBQU07QUFDckM7QUFDQSxLQUFLO0FBQ0wsMkJBQTJCLDJEQUFNO0FBQ2pDO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJEQUFNO0FBQ3JDO0FBQ0EsS0FBSztBQUNMLCtCQUErQiwyREFBTTtBQUNyQztBQUNBLEtBQUs7QUFDTCwrQkFBK0IsMkRBQU07QUFDckM7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxhQUFhO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMkRBQU07QUFDbEM7QUFDQSxLQUFLO0FBQ0wsMkJBQTJCLDJEQUFNO0FBQ2pDO0FBQ0EsS0FBSztBQUNMLDZCQUE2QiwyREFBTTtBQUNuQztBQUNBLEtBQUs7QUFDTDtBQUNBLGlDQUFpQywyREFBTTtBQUN2QztBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxnQkFBZ0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxFQUFFO0FBQ3pDO0FBQ0Esc0NBQXNDLEVBQUUsZUFBZSxFQUFFLFlBQVk7QUFDckU7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0Esd0JBQXdCLDJEQUFNO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx1QkFBdUIsMkRBQU07QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHFCQUFxQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsZ0RBQWdELGtCQUFrQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0Msa0JBQWtCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsa0JBQWtCO0FBQ3JFO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLDZFQUE2RTtBQUM3RSxRQUFRO0FBQ1I7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQSw4SEFBOEg7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsNkRBQTZELHNCQUFzQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Ysb0VBQW9FO0FBQ3BFLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUiwrREFBK0Q7QUFDL0QsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsOERBQThEO0FBQzlEO0FBQ0EsbUVBQW1FLDBCQUEwQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSwwREFBMEQsMEJBQTBCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxnQkFBZ0I7QUFDakU7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsZ0JBQWdCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLDJEQUFNO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0EsMENBQTBDLGdCQUFnQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQSwwQ0FBMEMsZ0JBQWdCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxnQkFBZ0I7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLGdEQUFnRCxnQkFBZ0I7QUFDaEU7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsV0FBVztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcHBGOEI7O0FBRTlCO0FBQzRCO0FBQzVCLHVDQUF1QywyREFBTTtBQUM3QyxVQUFVLGdCQUFnQixFQUFFLCtEQUFTO0FBQ3JDLGFBQWEsMENBQU07QUFDbkI7QUFDQSwyQkFBMkIsMENBQU0sTUFBTSxHQUFHO0FBQzFDO0FBQ0EsV0FBVywwQ0FBTTtBQUNqQjtBQUNBLDhCQUE4QixHQUFHO0FBQ2pDO0FBQ0EsQ0FBQzs7QUFJQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkI0QjtBQVFBOztBQUU5QjtBQUM0Qjs7QUFFNUI7QUFDZ0M7QUFDRztBQUNuQyx3Q0FBd0Msa0JBQWtCO0FBQzFEO0FBQ0Esd0RBQXdELEdBQUc7QUFDM0QsNkJBQTZCLGlEQUFNO0FBQ25DO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ04sOENBQThDO0FBQzlDO0FBQ0EsZ0JBQWdCLDBDQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQSxzQ0FBc0MsaUNBQWlDO0FBQ3ZFO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ04sZ0NBQWdDLG9DQUFvQztBQUNwRTtBQUNBO0FBQ0EsRUFBRSwyREFBTTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTixnQ0FBZ0Msd0NBQXdDO0FBQ3hFO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyREFBTTtBQUNOLG9DQUFvQyxtQkFBbUIsSUFBSTtBQUMzRCxnQkFBZ0IsMENBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQSxNQUFNO0FBQ04sd0JBQXdCLGtDQUFrQztBQUMxRCxNQUFNO0FBQ04sb0JBQW9CLGtDQUFrQztBQUN0RCxNQUFNO0FBQ04sbUJBQW1CLGtDQUFrQztBQUNyRCxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ04sZ0JBQWdCLFVBQVU7QUFDMUIsTUFBTTtBQUNOO0FBQ0E7QUFDQSxvQ0FBb0MsVUFBVTtBQUM5QztBQUNBLEVBQUUsMkRBQU07QUFDUjtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxRQUFRLG1DQUFtQztBQUMzQyxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxtQ0FBbUM7QUFDekMsTUFBTTtBQUNOO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0EsNEJBQTRCLGlDQUFpQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQSxzQkFBc0IsV0FBVztBQUNqQyx1QkFBdUIsV0FBVztBQUNsQztBQUNBO0FBQ0Esb0JBQW9CLDZEQUFRO0FBQzVCLGtCQUFrQixnRUFBVyxvQkFBb0IsK0RBQWMsd0JBQXdCLCtEQUFTO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWSxFQUFFLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMENBQTBDLCtCQUErQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLDJEQUFNO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTtBQUNBLDJEQUFNO0FBQ04saUNBQWlDLDJEQUFNO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxJQUFJO0FBQ04sRUFBRSxvREFBRztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxtRUFBYztBQUNuRTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDZEQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxHQUFHLGtDQUFrQyxHQUFHLDBCQUEwQixHQUFHO0FBQy9ILE1BQU0sMENBQU07QUFDWixNQUFNO0FBQ04sMERBQTBELEdBQUcsa0NBQWtDLEdBQUcsMEJBQTBCLEdBQUc7QUFDL0gsTUFBTSwwQ0FBTTtBQUNaLDBEQUEwRCxHQUFHLGtDQUFrQyxHQUFHLDBCQUEwQixHQUFHO0FBQy9ILE1BQU0sMENBQU07QUFDWjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQU1DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyVjRCOztBQUU5QjtBQUM4RjtBQUM5RjtBQUNBLCtEQUErRCxrQkFBa0IsK0RBQStELDZCQUE2QixtQkFBbUI7QUFDaE07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywyREFBTTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTixNQUFNLG9EQUFHO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDRDQUE0QywyREFBTTtBQUNsRCxlQUFlLDREQUFZO0FBQzNCO0FBQ0EsMENBQTBDLFNBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFNBQVM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxZQUFZO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLE1BQU07QUFDTixNQUFNLG9EQUFHO0FBQ1Qsa0RBQWtELFlBQVk7QUFDOUQ7QUFDQTtBQUNBLG1CQUFtQiwyREFBVztBQUM5QjtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUNBQWlDLDJEQUFNO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBLHFCQUFxQix5REFBUztBQUM5QixjQUFjLDBEQUFVLENBQUMsMERBQVU7QUFDbkM7QUFDQSxDQUFDOztBQU1DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3RTRCO0FBR0E7QUFHQTtBQU1BO0FBY0E7O0FBRTlCO0FBQzRCO0FBQzVCLGtDQUFrQywyREFBTTtBQUN4QztBQUNBLDhDQUE4Qyw2REFBUSxDQUFDLCtEQUFVO0FBQ2pFO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHdFQUFtQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHNCQUFzQiwrREFBVSxVQUFVLGlFQUFZLENBQUMsbUVBQWMsU0FBUywrREFBVTtBQUN4RjtBQUNBLHlCQUF5QiwrREFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMENBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsK0RBQVUsY0FBYywrREFBVTtBQUN2RTtBQUNBLDRDQUE0QyxzRUFBcUIsYUFBYSxrRUFBYTtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDJEQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxDQUFDO0FBQ0Qsa0NBQWtDLDJEQUFNO0FBQ3hDLGlEQUFpRCw2REFBUSxDQUFDLCtEQUFVO0FBQ3BFO0FBQ0Esc0JBQXNCLCtEQUFVLFVBQVUsaUVBQVksQ0FBQyxtRUFBYyxTQUFTLCtEQUFVO0FBQ3hGO0FBQ0EsNEJBQTRCLCtEQUFVO0FBQ3RDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLE1BQU0sNkRBQVEsQ0FBQywrREFBVTtBQUN6QjtBQUNBLGVBQWUsMENBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxDQUFDO0FBQ0QsdUNBQXVDLDJEQUFNO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxxQ0FBcUMsMkRBQU07QUFDM0M7QUFDQSwrQ0FBK0Msb0JBQW9CLEVBQUUsSUFBSSxHQUFHLElBQUk7QUFDaEY7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE1BQU07QUFDeEI7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUN1QztBQUNYOztBQUU1QjtBQUNBLG9DQUFvQywyREFBTTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsQ0FBQztBQUNEOztBQUVBO0FBQ3VDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0EsYUFBYSwwQ0FBTztBQUNwQjtBQUNBO0FBQ0Esb0JBQW9CLDZEQUFRO0FBQzVCLGtCQUFrQixnRUFBVyxvQkFBb0IsK0RBQWMsd0JBQXdCLCtEQUFVO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTixrQ0FBa0MsMkRBQU07QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDZEQUFRLENBQUMsK0RBQVU7QUFDekI7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBLGFBQWEsbUVBQWM7QUFDM0I7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQSw2Q0FBNkMsMkRBQU07QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsMkRBQU07QUFDM0MsVUFBVSxnQkFBZ0IsRUFBRSwrREFBVTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxvQ0FBb0MsMkRBQU07QUFDMUM7QUFDQSxXQUFXO0FBQ1gsQ0FBQztBQUNELGlDQUFpQywyREFBTTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRCxtQ0FBbUMsMkRBQU07QUFDekM7QUFDQSxDQUFDO0FBQ0Qsb0NBQW9DLDJEQUFNO0FBQzFDLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxvQ0FBb0M7QUFDcEMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHdDQUF3QywyREFBTTtBQUM5QyxVQUFVLGdDQUFnQyxFQUFFLCtEQUFVO0FBQ3RELFVBQVUsc0JBQXNCO0FBQ2hDLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLDJCQUEyQiwyREFBTTtBQUNqQyxFQUFFLG9EQUFHO0FBQ0wscUJBQXFCLCtEQUFVO0FBQy9CLFVBQVUsZ0NBQWdDO0FBQzFDLFVBQVUsNEJBQTRCO0FBQ3RDLFVBQVUsMERBQTBEO0FBQ3BFO0FBQ0Esd0JBQXdCLDZEQUFRO0FBQ2hDO0FBQ0Esc0JBQXNCLCtEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLE1BQU0sNkRBQVE7QUFDZDtBQUNBLGVBQWUsMENBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsb0RBQUc7QUFDTDtBQUNBO0FBQ0EsZUFBZSwrQ0FBSztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsTUFBTSxvREFBRztBQUNUO0FBQ0EsS0FBSztBQUNMLHdFQUF3RTtBQUN4RSwrREFBK0Q7QUFDL0QsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLFVBQVUseUJBQXlCLEVBQUUsNEVBQXVCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix3QkFBd0IsSUFBSSxrREFBa0Q7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLENBQUM7QUFDRCxnQ0FBZ0MsMkRBQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0NBQWdDO0FBQzNDLENBQUM7QUFDRCx1Q0FBdUMsMkRBQU07QUFDN0MscUJBQXFCLCtEQUFVO0FBQy9CLFVBQVUsZ0NBQWdDO0FBQzFDLFVBQVUsMkVBQTJFO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sNkRBQVE7QUFDZDtBQUNBLGVBQWUsMENBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssd0NBQXdDLHFCQUFxQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix3QkFBd0IsSUFBSSxTQUFTLDZEQUFRLDJDQUEyQztBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsQ0FBQztBQUNELG9DQUFvQywyREFBTTtBQUMxQyxFQUFFLG9EQUFHO0FBQ0wscUJBQXFCLCtEQUFVO0FBQy9CLFVBQVUsZ0NBQWdDO0FBQzFDLFVBQVUsNEJBQTRCO0FBQ3RDLFVBQVUsMERBQTBEO0FBQ3BFO0FBQ0Esd0JBQXdCLDZEQUFRO0FBQ2hDO0FBQ0Esc0JBQXNCLCtEQUFVO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsTUFBTSw2REFBUTtBQUNkO0FBQ0EsZUFBZSwwQ0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxvREFBRztBQUNMO0FBQ0E7QUFDQSxlQUFlLCtDQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNLG9EQUFHO0FBQ1Q7QUFDQSxLQUFLO0FBQ0wsd0VBQXdFO0FBQ3hFLCtEQUErRDtBQUMvRCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsVUFBVSx5QkFBeUIsRUFBRSw0RUFBdUI7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHdCQUF3QixJQUFJLGtEQUFrRDtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsQ0FBQztBQUNELDhCQUE4QiwyREFBTTtBQUNwQyxxQkFBcUIsK0RBQVU7QUFDL0IsVUFBVSxnQ0FBZ0M7QUFDMUMsVUFBVSxhQUFhO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywyREFBTTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw0QkFBNEIsMkRBQU07QUFDbEM7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSwyREFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLDJEQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrQkFBK0I7QUFDdkMsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQzZCO0FBQzdCO0FBQ0EsVUFBVSxjQUFjO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTTtBQUNuQiw0Q0FBNEMsbURBQW1EO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsd0VBQW1CO0FBQ3RFO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGVBQWU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsTUFBTTtBQUN4QjtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBLE1BQU0scUJBQXFCO0FBQzNCLE1BQU0sc0JBQXNCO0FBQzVCO0FBQ0EsTUFBTSxvQkFBb0I7QUFDMUI7QUFDQTtBQUNBLGFBQWEsK0NBQU07QUFDbkIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsT0FBTztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQ0E7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLDJCQUEyQjtBQUNqQyxNQUFNLGtCQUFrQjtBQUN4QixNQUFNLHFCQUFxQjtBQUMzQixNQUFNLG9CQUFvQjtBQUMxQixNQUFNLDJCQUEyQjtBQUNqQyxNQUFNO0FBQ047QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBLGVBQWUsK0NBQU07QUFDckIsOENBQThDO0FBQzlDO0FBQ0E7QUFDQSw4RkFBOEYsT0FBTyxJQUFJLE1BQU07QUFDL0c7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM2QjtBQUM3QjtBQUNBLFVBQVUsYUFBYTtBQUN2QjtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQSxNQUFNLGdCQUFnQjtBQUN0QixNQUFNLGdCQUFnQjtBQUN0QixNQUFNLGlCQUFpQjtBQUN2QixNQUFNO0FBQ047QUFDQSxhQUFhLCtDQUFNO0FBQ25CLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDNkI7QUFDN0I7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsOEJBQThCO0FBQ3hDO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFNO0FBQ3JCLDhDQUE4QztBQUM5QztBQUNBO0FBQ0Esb0VBQW9FLHdFQUFtQjtBQUN2RixJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixjQUFjLFVBQVUsR0FBRyxXQUFXLElBQUksVUFBVSxHQUFHO0FBQ3ZELHVCQUF1QixVQUFVLEdBQUcsV0FBVyxJQUFJLFVBQVUsR0FBRyxVQUFVO0FBQzFFO0FBQ0EsMkRBQU07QUFDTjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU07QUFDbkIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHLHlDQUF5QyxlQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBLE1BQU0sK0JBQStCO0FBQ3JDO0FBQ0E7QUFDQSxNQUFNLCtCQUErQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxNQUFNLDhCQUE4QjtBQUNwQyxNQUFNLCtCQUErQjtBQUNyQztBQUNBLE1BQU0sZ0NBQWdDO0FBQ3RDO0FBQ0E7QUFDQSxNQUFNLDhCQUE4QjtBQUNwQztBQUNBLE1BQU0sOEJBQThCO0FBQ3BDLE1BQU07QUFDTjtBQUNBLGFBQWEsK0NBQU07QUFDbkIsNENBQTRDLGNBQWM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxZQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELE9BQU87QUFDNUQ7QUFDQTtBQUNBLGlCQUFpQiw4Q0FBOEMsR0FBRyw4REFBOEQ7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixlQUFlO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixNQUFNO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLDJEQUFNO0FBQ047QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0EsTUFBTSwrQkFBK0I7QUFDckM7QUFDQTtBQUNBLE1BQU0sNkJBQTZCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLE1BQU0sK0JBQStCO0FBQ3JDLE1BQU0sOEJBQThCO0FBQ3BDO0FBQ0EsTUFBTSwrQkFBK0I7QUFDckM7QUFDQTtBQUNBLE1BQU0sNkJBQTZCO0FBQ25DO0FBQ0EsTUFBTSw2QkFBNkI7QUFDbkMsTUFBTTtBQUNOO0FBQ0EsYUFBYSwrQ0FBTTtBQUNuQiw0Q0FBNEMsY0FBYztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsUUFBUTtBQUM5RDtBQUNBO0FBQ0EsaUJBQWlCLCtEQUErRCxHQUFHLDhEQUE4RDtBQUNqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGVBQWU7QUFDakM7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsMkRBQU07QUFDTjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQSxNQUFNLCtCQUErQjtBQUNyQztBQUNBO0FBQ0EsTUFBTSwrQkFBK0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGtDQUFrQztBQUN4QztBQUNBO0FBQ0EsTUFBTSxtQ0FBbUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsTUFBTSw4QkFBOEI7QUFDcEMsTUFBTSwrQkFBK0I7QUFDckM7QUFDQSxNQUFNLGdDQUFnQztBQUN0QztBQUNBO0FBQ0EsTUFBTSw4QkFBOEI7QUFDcEM7QUFDQSxNQUFNLDhCQUE4QjtBQUNwQyxNQUFNLG1EQUFtRDtBQUN6RDtBQUNBLE1BQU0sa0NBQWtDO0FBQ3hDO0FBQ0E7QUFDQSxNQUFNLG1DQUFtQztBQUN6QztBQUNBO0FBQ0EsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEMsY0FBYztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQkFBb0I7QUFDdEU7QUFDQTtBQUNBLGlCQUFpQiwrREFBK0QsR0FBRyw4REFBOEQ7QUFDako7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QixhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxhQUFhO0FBQ25CLE1BQU0sYUFBYTtBQUNuQixNQUFNLDBCQUEwQjtBQUNoQyxNQUFNLHVCQUF1QjtBQUM3QixNQUFNLHVCQUF1QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsT0FBTyxJQUFJLE9BQU87QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QiwwQ0FBMEMsMkRBQU07QUFDaEQ7QUFDQSxRQUFRLEVBQUUsR0FBRyxPQUFPO0FBQ3BCLFFBQVEsR0FBRyxHQUFHLElBQUksUUFBUSxNQUFNO0FBQ2hDLFFBQVEsR0FBRyxHQUFHLElBQUksUUFBUSxPQUFPO0FBQ2pDLFVBQVUsT0FBTztBQUNqQixRQUFRLEdBQUcsR0FBRyxJQUFJLFFBQVEsTUFBTTtBQUNoQyxVQUFVLFFBQVE7QUFDbEI7QUFDQSxDQUFDO0FBQ0QsK0NBQStDLDJEQUFNO0FBQ3JEO0FBQ0EsUUFBUSxFQUFFLEdBQUcsT0FBTztBQUNwQixRQUFRLFVBQVUsR0FBRyxPQUFPO0FBQzVCLFFBQVEsR0FBRyxHQUFHLElBQUksUUFBUSxPQUFPO0FBQ2pDLFVBQVUsT0FBTztBQUNqQixRQUFRLEdBQUcsR0FBRyxJQUFJLFFBQVEsTUFBTTtBQUNoQyxVQUFVLFFBQVE7QUFDbEI7QUFDQSxDQUFDO0FBQ0QsK0NBQStDLDJEQUFNO0FBQ3JELGNBQWMsY0FBYyxHQUFHLFlBQVksT0FBTyxHQUFHLEdBQUcsSUFBSSxRQUFRLE1BQU07QUFDMUUsQ0FBQztBQUNEO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0EsZUFBZSwrQ0FBTztBQUN0QjtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFLHVFQUF1RSxjQUFjO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGlJQUFpSSx3RUFBbUI7QUFDcEo7QUFDQTtBQUNBLDJDQUEyQyxPQUFPLElBQUksY0FBYztBQUNwRTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0RBQWdELElBQUksNEVBQTRFO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sc0JBQXNCO0FBQzVCLE1BQU0sMEJBQTBCO0FBQ2hDLE1BQU0sY0FBYztBQUNwQixNQUFNLFVBQVU7QUFDaEIsTUFBTSxNQUFNO0FBQ1osTUFBTSxVQUFVO0FBQ2hCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMERBQTBELElBQUksc0VBQXNFO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSw4QkFBOEI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLG1EQUFtRCxrQ0FBa0M7QUFDckYsbURBQW1ELGtDQUFrQztBQUNyRjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0VBQW1CLGlDQUFpQyx3RUFBbUI7QUFDckc7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QixzQ0FBc0MsVUFBVSxrQkFBa0I7QUFDbEUsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQixVQUFVLGFBQWE7QUFDdkIsNENBQTRDLG9CQUFvQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELFlBQVksV0FBVztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxvREFBRyx3Q0FBd0MsZUFBZTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxhQUFhO0FBQ25CLE1BQU0sY0FBYztBQUNwQixNQUFNO0FBQ047QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkdBQTJHLE9BQU8sSUFBSSxNQUFNO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOENBQThDLElBQUksOERBQThEO0FBQ2pJO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QixrQ0FBa0MsZUFBZSxpQ0FBaUM7QUFDbEYsVUFBVSxhQUFhO0FBQ3ZCO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsK0NBQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0E7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sc0JBQXNCO0FBQzVCLE1BQU0sOEJBQThCO0FBQ3BDO0FBQ0EsTUFBTSw2QkFBNkI7QUFDbkMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxvREFBRyxnQ0FBZ0MsZUFBZTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUIseUNBQXlDLDJEQUFNO0FBQy9DO0FBQ0EsUUFBUSxNQUFNLEdBQUcsRUFBRTtBQUNuQixRQUFRLGNBQWMsR0FBRyxFQUFFO0FBQzNCLFFBQVEsVUFBVSxHQUFHLGVBQWU7QUFDcEMsUUFBUSxjQUFjLEdBQUcsV0FBVztBQUNwQyxRQUFRLE1BQU0sR0FBRyxXQUFXO0FBQzVCLFFBQVEsRUFBRSxHQUFHLGVBQWU7QUFDNUI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSxpQkFBaUI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sWUFBWTtBQUNsQixNQUFNLGdCQUFnQjtBQUN0QixNQUFNLGlCQUFpQjtBQUN2QixNQUFNLGlCQUFpQjtBQUN2QixNQUFNLGFBQWE7QUFDbkIsTUFBTTtBQUNOO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsOEZBQThGLE9BQU8sSUFBSSxNQUFNO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQTtBQUNBLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLFlBQVk7QUFDbEIsTUFBTSxZQUFZO0FBQ2xCLE1BQU0sWUFBWTtBQUNsQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxPQUFPLElBQUksT0FBTztBQUMzRDtBQUNBO0FBQ0EsSUFBSSxvREFBRyxnQ0FBZ0MsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUIsb0NBQW9DLFVBQVUsNkJBQTZCO0FBQzNFLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxVQUFVLGFBQWE7QUFDdkIsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDLDhCQUE4QjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE1BQU0sK0RBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsT0FBTyxFQUFFO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1QkFBdUIsR0FBRyxzSUFBc0k7QUFDbkw7QUFDQSxxQ0FBcUMsdUNBQXVDO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw4Q0FBOEMsR0FBRyw0REFBNEQ7QUFDOUg7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEVBQUUsR0FBRyxvRkFBb0Y7QUFDMUc7QUFDQTtBQUNBO0FBQ0EsSUFBSSxvREFBRztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsZ0RBQWdEO0FBQzFELFVBQVUsZ0RBQWdEO0FBQzFELFVBQVUsNkVBQTZFO0FBQ3ZGLFVBQVUsd0VBQXdFO0FBQ2xGLFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUsd0VBQXdFO0FBQ2xGLFVBQVU7QUFDVjtBQUNBLE1BQU07QUFDTjtBQUNBLFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUsMkNBQTJDO0FBQ3JELFVBQVUsb0RBQW9EO0FBQzlELFVBQVUseURBQXlEO0FBQ25FLFVBQVUsb0RBQW9EO0FBQzlELFVBQVUsZ0RBQWdEO0FBQzFELFVBQVUseURBQXlEO0FBQ25FLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCLDBDQUEwQyxVQUFVLDZCQUE2QjtBQUNqRixVQUFVLGNBQWM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxzQkFBc0I7QUFDaEMsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTSwrREFBVTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxPQUFPLEVBQUU7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsdUJBQXVCLEdBQUcsc0lBQXNJO0FBQ2pMO0FBQ0EsbUNBQW1DLHVDQUF1QztBQUMxRTtBQUNBO0FBQ0EsaUJBQWlCLDhDQUE4QyxHQUFHLDREQUE0RDtBQUM5SDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsRUFBRSxHQUFHLG9GQUFvRjtBQUMxRztBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCLDJDQUEyQyxVQUFVLDZCQUE2QjtBQUNsRixVQUFVLGNBQWM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxxQ0FBcUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHNCQUFzQjtBQUNoQyxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTSwrREFBVTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxPQUFPLEVBQUU7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QixHQUFHLHNJQUFzSTtBQUNuTDtBQUNBLHFDQUFxQyx1Q0FBdUM7QUFDNUU7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhDQUE4QyxHQUFHLDREQUE0RDtBQUM5SDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsRUFBRSxHQUFHLG9GQUFvRjtBQUMxRztBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxnREFBZ0Q7QUFDMUQsVUFBVSxnREFBZ0Q7QUFDMUQsVUFBVSw2RUFBNkU7QUFDdkYsVUFBVSx3RUFBd0U7QUFDbEYsVUFBVSwyQ0FBMkM7QUFDckQsVUFBVSwyQ0FBMkM7QUFDckQsVUFBVSx3RUFBd0U7QUFDbEYsVUFBVTtBQUNWO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsVUFBVSwyQ0FBMkM7QUFDckQsVUFBVSwyQ0FBMkM7QUFDckQsVUFBVSxvREFBb0Q7QUFDOUQsVUFBVSx5REFBeUQ7QUFDbkUsVUFBVSxvREFBb0Q7QUFDOUQsVUFBVSxnREFBZ0Q7QUFDMUQsVUFBVSx5REFBeUQ7QUFDbkUsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUIsMENBQTBDLFVBQVUsNkJBQTZCO0FBQ2pGLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHFDQUFxQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsc0JBQXNCO0FBQ2hDLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNLCtEQUFVO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLE9BQU8sRUFBRTtBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCLEdBQUcsc0lBQXNJO0FBQ25MO0FBQ0EscUNBQXFDLHVDQUF1QztBQUM1RTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOENBQThDLEdBQUcsNERBQTREO0FBQzlIO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixFQUFFLEdBQUcsb0ZBQW9GO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLElBQUksb0RBQUc7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDZFQUE2RTtBQUN2RixVQUFVLHdFQUF3RTtBQUNsRixVQUFVLDJDQUEyQztBQUNyRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLHdFQUF3RTtBQUNsRixVQUFVO0FBQ1Y7QUFDQSxNQUFNO0FBQ047QUFDQSxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLDJDQUEyQztBQUNyRCxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLHlEQUF5RDtBQUNuRSxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLHlEQUF5RDtBQUNuRSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QiwyQ0FBMkMsVUFBVSxhQUFhO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0IsR0FBRyw0REFBNEQ7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOENBQThDLEdBQUcsd0hBQXdIO0FBQzFMO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixFQUFFLEdBQUcsb0ZBQW9GO0FBQzFHO0FBQ0E7QUFDQTtBQUNBLElBQUksb0RBQUc7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDZFQUE2RTtBQUN2RixVQUFVLDZFQUE2RTtBQUN2RixVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDZFQUE2RTtBQUN2RixVQUFVO0FBQ1Y7QUFDQSxNQUFNO0FBQ047QUFDQSxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDhEQUE4RDtBQUN4RSxVQUFVLDhEQUE4RDtBQUN4RSxVQUFVLG9EQUFvRDtBQUM5RCxVQUFVLGdEQUFnRDtBQUMxRCxVQUFVLDhEQUE4RDtBQUN4RSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSxpQkFBaUI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsTUFBTSxZQUFZO0FBQ2xCLE1BQU0sWUFBWTtBQUNsQixNQUFNLHlCQUF5QjtBQUMvQixNQUFNO0FBQ047QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBLGVBQWUsK0NBQU87QUFDdEIsOENBQThDO0FBQzlDO0FBQ0E7QUFDQSw4RkFBOEYsT0FBTyxJQUFJLE1BQU07QUFDL0c7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7QUFDakIsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLCtDQUErQztBQUMvQztBQUNBO0FBQ0EsK0RBQStELHdFQUFtQjtBQUNsRixJQUFJO0FBQ0o7QUFDQSxzRkFBc0Ysd0VBQW1CLGlCQUFpQix3RUFBbUI7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUNBO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0RBQWdELElBQUksZ0RBQWdEO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sWUFBWTtBQUNsQixNQUFNLHdCQUF3QjtBQUM5QixNQUFNLGFBQWE7QUFDbkIsTUFBTTtBQUNOO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsOEZBQThGLE9BQU8sSUFBSSxNQUFNO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFCQUFxQjtBQUMzQixNQUFNLFlBQVk7QUFDbEIsTUFBTSx5QkFBeUI7QUFDL0IsTUFBTTtBQUNOO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsOEZBQThGLE9BQU8sSUFBSSxNQUFNO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxnQkFBZ0I7QUFDdEIsTUFBTSwyQkFBMkI7QUFDakMsTUFBTSx5Q0FBeUM7QUFDL0MsTUFBTSxxQkFBcUI7QUFDM0IsTUFBTSwrQkFBK0I7QUFDckMsTUFBTTtBQUNOO0FBQ0EsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsVUFBVSxHQUFHLFFBQVE7QUFDdEU7QUFDQTtBQUNBLElBQUksb0RBQUc7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUIsMkNBQTJDLDJEQUFNO0FBQ2pEO0FBQ0EsUUFBUSxFQUFFLEdBQUcsT0FBTztBQUNwQixRQUFRLEdBQUcsR0FBRyxJQUFJLFFBQVEsTUFBTTtBQUNoQyxRQUFRLEdBQUcsR0FBRyxJQUFJLFFBQVEsT0FBTztBQUNqQyxVQUFVLE9BQU87QUFDakIsUUFBUSxHQUFHLEdBQUcsSUFBSSxRQUFRLE1BQU07QUFDaEMsVUFBVSxRQUFRO0FBQ2xCLFFBQVEsRUFBRSxHQUFHLHFCQUFxQjtBQUNsQyxRQUFRLEdBQUcsR0FBRyxJQUFJLFFBQVEsTUFBTTtBQUNoQztBQUNBLENBQUM7QUFDRCxnREFBZ0QsMkRBQU07QUFDdEQ7QUFDQSxRQUFRLEVBQUUsR0FBRyxPQUFPO0FBQ3BCLFFBQVEsVUFBVSxHQUFHLE9BQU87QUFDNUIsUUFBUSxHQUFHLEdBQUcsSUFBSSxRQUFRLE9BQU87QUFDakMsVUFBVSxPQUFPO0FBQ2pCLFFBQVEsR0FBRyxHQUFHLElBQUksUUFBUSxNQUFNO0FBQ2hDLFVBQVUsUUFBUTtBQUNsQixRQUFRLEVBQUUsR0FBRyxxQkFBcUI7QUFDbEMsUUFBUSxHQUFHLEdBQUcsSUFBSSxRQUFRLE1BQU07QUFDaEM7QUFDQSxDQUFDO0FBQ0QsZ0RBQWdELDJEQUFNO0FBQ3RELGNBQWMsY0FBYyxHQUFHLFlBQVksT0FBTyxHQUFHLEdBQUcsSUFBSSxRQUFRLE1BQU07QUFDMUUsQ0FBQztBQUNEO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsaUlBQWlJLHdFQUFtQjtBQUNwSjtBQUNBO0FBQ0EsMkNBQTJDLE9BQU8sSUFBSSxjQUFjO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnREFBZ0QsSUFBSSxxREFBcUQ7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0seUNBQXlDO0FBQy9DLE1BQU0sd0NBQXdDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHdDQUF3QztBQUM5QyxNQUFNLHlDQUF5QztBQUMvQyxNQUFNLDJCQUEyQjtBQUNqQyxNQUFNLGdDQUFnQztBQUN0QyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsbUJBQW1CO0FBQ25FO0FBQ0E7QUFDQSxpQkFBaUIsNkVBQTZFLEdBQUcsOEVBQThFO0FBQy9LO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QixhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBLE1BQU0sc0NBQXNDO0FBQzVDLE1BQU0sMENBQTBDO0FBQ2hELE1BQU0sOENBQThDO0FBQ3BELE1BQU0saUNBQWlDO0FBQ3ZDLE1BQU0sb0JBQW9CO0FBQzFCLE1BQU0saUNBQWlDO0FBQ3ZDLE1BQU0sOENBQThDO0FBQ3BELE1BQU0sMENBQTBDO0FBQ2hELE1BQU0sc0NBQXNDO0FBQzVDLE1BQU0sc0JBQXNCO0FBQzVCLE1BQU0sTUFBTTtBQUNaLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTSxzQkFBc0I7QUFDNUIsTUFBTSwwQ0FBMEM7QUFDaEQsTUFBTSxpQ0FBaUM7QUFDdkMsTUFBTSxvQkFBb0I7QUFDMUIsTUFBTSxhQUFhO0FBQ25CLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDBCQUEwQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDZEQUE2RCxJQUFJLDZEQUE2RDtBQUMvSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsd0JBQXdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxzQ0FBc0M7QUFDNUMsTUFBTSwrQ0FBK0M7QUFDckQ7QUFDQSxNQUFNLHdEQUF3RDtBQUM5RCxNQUFNLDJDQUEyQztBQUNqRCxNQUFNLCtDQUErQztBQUNyRCxNQUFNLDREQUE0RDtBQUNsRSxNQUFNLDBDQUEwQztBQUNoRCxNQUFNLHNDQUFzQztBQUM1QyxNQUFNLHNCQUFzQjtBQUM1QixNQUFNLE1BQU07QUFDWixNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU0sc0JBQXNCO0FBQzVCLE1BQU0sMENBQTBDO0FBQ2hELE1BQU0sd0RBQXdEO0FBQzlELE1BQU0sMkNBQTJDO0FBQ2pELE1BQU0sYUFBYTtBQUNuQixNQUFNO0FBQ047QUFDQSxhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1CQUFtQjtBQUM1RDtBQUNBO0FBQ0EsaUJBQWlCLDZEQUE2RCxJQUFJLGlGQUFpRjtBQUNuSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUIsb0NBQW9DLFVBQVUsa0JBQWtCO0FBQ2hFLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsOENBQThDLDhEQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUIsNkNBQTZDLDJEQUFNO0FBQ25EO0FBQ0EsUUFBUSxhQUFhLEdBQUcsRUFBRTtBQUMxQixRQUFRLFNBQVMsR0FBRyxhQUFhO0FBQ2pDLFFBQVEsYUFBYSxHQUFHLFNBQVM7QUFDakMsUUFBUSxFQUFFLEdBQUcsYUFBYTtBQUMxQjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sZ0JBQWdCO0FBQ3RCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU07QUFDTjtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0EsZUFBZSwrQ0FBTztBQUN0Qiw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLDhGQUE4RixPQUFPLElBQUksTUFBTTtBQUMvRztBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGlCQUFpQjtBQUN2QixNQUFNLFNBQVM7QUFDZixNQUFNLHFCQUFxQjtBQUMzQixNQUFNLGNBQWM7QUFDcEIsTUFBTTtBQUNOO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsV0FBVztBQUNwRDtBQUNBO0FBQ0EsaUJBQWlCLDBEQUEwRCxJQUFJLGdEQUFnRDtBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQ3VDO0FBQ1Q7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLE1BQU0sNkRBQVEsQ0FBQywrREFBVTtBQUN6QjtBQUNBLGdCQUFnQiwwQ0FBTztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsb0RBQUc7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQ0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsMENBQU87QUFDVDtBQUNBO0FBQ0E7QUFDQSxFQUFFLDBDQUFPO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrQ0FBTztBQUN0Qiw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxvREFBRztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsTUFBTSxvREFBRztBQUNUO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLE1BQU07QUFDWixNQUFNLGlCQUFpQjtBQUN2QixNQUFNLHdCQUF3QjtBQUM5QixNQUFNLG9CQUFvQjtBQUMxQixNQUFNLGFBQWE7QUFDbkIsTUFBTSxNQUFNO0FBQ1osTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCx3RUFBbUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwrREFBK0QsR0FBRywwREFBMEQ7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sTUFBTTtBQUNaLE1BQU0sYUFBYTtBQUNuQixNQUFNLG9CQUFvQjtBQUMxQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxNQUFNO0FBQ2xEO0FBQ0E7QUFDQSxpQkFBaUIsMkRBQTJELElBQUksMERBQTBEO0FBQzFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBLGVBQWUsK0NBQU87QUFDdEIsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCx3RUFBbUI7QUFDbEYsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCLGtDQUFrQyxVQUFVLGtCQUFrQjtBQUM5RCxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsWUFBWTtBQUN0QixVQUFVLHFDQUFxQztBQUMvQztBQUNBLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCLG9DQUFvQyxVQUFVLGtCQUFrQjtBQUNoRSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrQ0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sWUFBWTtBQUNsQixNQUFNLFlBQVk7QUFDbEIsTUFBTSxhQUFhO0FBQ25CLE1BQU0sYUFBYTtBQUNuQixNQUFNLFlBQVk7QUFDbEIsTUFBTSxhQUFhO0FBQ25CLE1BQU0sZ0JBQWdCO0FBQ3RCLE1BQU0saUJBQWlCO0FBQ3ZCLE1BQU0sY0FBYztBQUNwQixNQUFNO0FBQ047QUFDQTtBQUNBLGVBQWUsK0NBQU87QUFDdEIsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QiwrREFBK0Qsd0VBQW1CO0FBQ2xGO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSxpQkFBaUI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0EsTUFBTSx3QkFBd0I7QUFDOUIsTUFBTSw0QkFBNEI7QUFDbEMsTUFBTSxtQ0FBbUM7QUFDekMsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNLG1DQUFtQztBQUN6QyxNQUFNLG1DQUFtQztBQUN6QyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxnQ0FBZ0M7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLHdDQUF3QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx3Q0FBd0M7QUFDOUMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx1Q0FBdUM7QUFDN0MsTUFBTSxnQ0FBZ0M7QUFDdEMsTUFBTSw0QkFBNEI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxtQkFBbUI7QUFDbkU7QUFDQTtBQUNBLGlCQUFpQiwyREFBMkQsR0FBRyw4RUFBOEU7QUFDN0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQ0E7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCLDJDQUEyQywyREFBTTtBQUNqRCxhQUFhLEVBQUUsR0FBRztBQUNsQixPQUFPLEdBQUcsR0FBRyxJQUFJLFFBQVEsRUFBRSxHQUFHO0FBQzlCLE9BQU8sTUFBTSxHQUFHO0FBQ2hCLE9BQU8sR0FBRyxHQUFHLElBQUksUUFBUSxFQUFFLEdBQUc7QUFDOUIsT0FBTyxNQUFNLEdBQUc7QUFDaEIsT0FBTyxHQUFHLEdBQUcsSUFBSSxRQUFRLEVBQUUsR0FBRztBQUM5QixPQUFPLE9BQU8sR0FBRyxFQUFFO0FBQ25CLENBQUM7QUFDRCxnREFBZ0QsMkRBQU07QUFDdEQ7QUFDQSxRQUFRLEVBQUUsR0FBRyxFQUFFO0FBQ2YsUUFBUSxVQUFVLEdBQUcsRUFBRTtBQUN2QixRQUFRLEdBQUcsR0FBRyxJQUFJLFFBQVEsRUFBRSxHQUFHLFFBQVE7QUFDdkMsUUFBUSxPQUFPO0FBQ2YsUUFBUSxHQUFHLEdBQUcsSUFBSSxRQUFRLEVBQUUsR0FBRyxPQUFPO0FBQ3RDLFFBQVEsTUFBTTtBQUNkO0FBQ0EsQ0FBQztBQUNELGdEQUFnRCwyREFBTTtBQUN0RCxjQUFjLGNBQWMsR0FBRyxZQUFZLE9BQU8sR0FBRyxHQUFHLElBQUksVUFBVSxPQUFPO0FBQzdFLENBQUM7QUFDRDtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSxxQ0FBcUM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCO0FBQ0E7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCO0FBQ0E7QUFDQSx1RUFBdUU7QUFDdkUsdUVBQXVFLGNBQWM7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsaUlBQWlJLHdFQUFtQjtBQUNwSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsT0FBTyxJQUFJLE9BQU87QUFDN0Q7QUFDQTtBQUNBLGlCQUFpQixxREFBcUQsSUFBSSxnREFBZ0Q7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxNQUFNLHFCQUFxQjtBQUMzQixNQUFNLHdCQUF3QjtBQUM5QixNQUFNLGFBQWE7QUFDbkIsTUFBTTtBQUNOO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsOEZBQThGLE9BQU8sSUFBSSxNQUFNO0FBQy9HO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLGlCQUFpQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sNEJBQTRCO0FBQ2xDLE1BQU0sMkJBQTJCO0FBQ2pDLE1BQU0sMkJBQTJCO0FBQ2pDLE1BQU0sb0JBQW9CO0FBQzFCLE1BQU0scUJBQXFCO0FBQzNCLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEMsd0JBQXdCLDZEQUFRLENBQUMsK0RBQVU7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLFlBQVk7QUFDbEIsTUFBTSxhQUFhO0FBQ25CLE1BQU07QUFDTjtBQUNBLFVBQVUsWUFBWTtBQUN0QixhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrR0FBa0csT0FBTyxJQUFJLE1BQU07QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw4Q0FBOEMsSUFBSSxtR0FBbUc7QUFDdEs7QUFDQTtBQUNBLElBQUksb0RBQUc7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQzlCO0FBQ0EsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQSxVQUFVLHdCQUF3QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxtQ0FBbUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sbUNBQW1DO0FBQ3pDLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELG1CQUFtQjtBQUNuRTtBQUNBO0FBQ0EsaUJBQWlCLDJEQUEyRCxHQUFHLDBFQUEwRTtBQUN6SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDOUI7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBLFVBQVUsaUJBQWlCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEIsYUFBYSwrQ0FBTztBQUNwQiw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sMEJBQTBCO0FBQ2hDO0FBQ0EsTUFBTSwwQkFBMEI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5QjtBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0EsVUFBVSx3QkFBd0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QixhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBLE1BQU0sc0NBQXNDO0FBQzVDLE1BQU0sNkJBQTZCO0FBQ25DLE1BQU0sb0JBQW9CO0FBQzFCLE1BQU07QUFDTjtBQUNBLG1CQUFtQixlQUFlLEdBQUcsZ0JBQWdCLEdBQUcsTUFBTSxHQUFHLGdCQUFnQixHQUFHLE1BQU0sR0FBRyxPQUFPLEdBQUcsZUFBZSxHQUFHLE9BQU8sR0FBRyxlQUFlLEdBQUc7QUFDckosbUJBQW1CLGVBQWUsR0FBRyxHQUFHLEdBQUcsTUFBTSxHQUFHO0FBQ3BELG1CQUFtQixFQUFFLEdBQUcsZ0JBQWdCLEdBQUcsRUFBRSxHQUFHLE1BQU07QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGVBQWUsSUFBSSxlQUFlO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpRUFBaUUsSUFBSSxpRUFBaUU7QUFDdko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQzhCO0FBQ1M7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQ0FBa0MsRUFBRSw4REFBUztBQUN6RCxZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsV0FBVztBQUN0RDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsOERBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1RUFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsU0FBUyw2REFBUTtBQUNqQjtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwQ0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2QkFBNkIsSUFBSSxvREFBb0Q7QUFDeEc7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQkFBaUIsRUFBRSw4REFBUztBQUN0QyxVQUFVLDhCQUE4QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCw2R0FBNkcsNkJBQTZCO0FBQzFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0EsNERBQTRELGtCQUFrQixrQ0FBa0MsV0FBVyxJQUFJLFdBQVc7QUFDMUksb0JBQW9CLHNFQUFpQjtBQUNyQyxnQkFBZ0Isc0VBQWlCO0FBQ2pDLCtDQUErQyx3QkFBd0I7QUFDdkU7QUFDQTtBQUNBLFVBQVUsK0RBQVU7QUFDcEI7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1RUFBa0I7QUFDakM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsOEJBQThCO0FBQzVEO0FBQ0EsMERBQTBELHdCQUF3QjtBQUNsRjtBQUNBO0FBQ0EsNERBQTRELHdCQUF3QjtBQUNwRjtBQUNBO0FBQ0E7QUFDQSxNQUFNLDZEQUFRO0FBQ2Q7QUFDQTtBQUNBLGVBQWUsMENBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDdUM7QUFDVDs7QUFFOUI7QUFDdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsYUFBYSxXQUFXLE9BQU87QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCwrQkFBK0I7QUFDbEY7QUFDQSw0Q0FBNEMsMEJBQTBCLElBQUksc0JBQXNCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixFQUFFLElBQUksbURBQW1EO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEVBQUUsSUFBSSx5R0FBeUc7QUFDaEk7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLDJEQUFNO0FBQ047QUFDQSw2RkFBNkY7QUFDN0YsaUJBQWlCLDhEQUFTO0FBQzFCLHFFQUFxRSw2REFBUTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sNkRBQVE7QUFDZDtBQUNBO0FBQ0Esc0JBQXNCLCtEQUFVO0FBQ2hDO0FBQ0EsSUFBSSxrRUFBYSxDQUFDLG1FQUFjO0FBQ2hDO0FBQ0EsYUFBYSx1RUFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sMENBQU87QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3Rix3QkFBd0I7QUFDaEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsZUFBZSwwQ0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMkRBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUFNOztBQUVOO0FBQ0E7QUFDQSxpQkFBaUIsK0RBQVU7QUFDM0I7QUFDQTtBQUNBLDhDQUE4Qyw2REFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBLGFBQWEsK0NBQU87QUFDcEIsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBDQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSx5Q0FBeUMsY0FBYyxJQUFJLGNBQWM7QUFDekUsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDOEI7QUFDUztBQUN2QztBQUNBLFVBQVUsMEJBQTBCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsSUFBSSxFQUFFLHFCQUFxQixJQUFJLElBQUk7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLCtDQUErQyxJQUFJLFdBQVcsSUFBSTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLHVDQUF1Qyw4QkFBOEIsT0FBTztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdDQUFnQyxxQkFBcUIsT0FBTztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdDQUFnQyxxQkFBcUIsT0FBTztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdEQUFnRCw2QkFBNkIsT0FBTztBQUM3RjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLFNBQVMsNEJBQTRCLGlCQUFpQixPQUFPO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsaUNBQWlDLG1CQUFtQixPQUFPO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLCtDQUFPO0FBQ3BCLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBDQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGNBQWMsSUFBSSx3QkFBd0I7QUFDbkYsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0RBQVU7QUFDM0I7QUFDQSxzQkFBc0IsK0RBQVU7QUFDaEM7QUFDQSxJQUFJLGtFQUFhLENBQUMsbUVBQWM7QUFDaEM7QUFDQSxhQUFhLHVFQUFrQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsd0JBQXdCO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLGVBQWUsMENBQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsZ0JBQWdCLEdBQUcsMkJBQTJCO0FBQ3RGO0FBQ0E7QUFDQSwyREFBTTs7QUFFTjtBQUM4QjtBQUM5Qix3Q0FBd0MsMkRBQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsZ0RBQWdELFFBQVE7QUFDeEQsVUFBVSwwQkFBMEI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyw4QkFBOEI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osT0FBTyw4QkFBOEI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsNkNBQTZDO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsU0FBUztBQUNuQixVQUFVLFlBQVk7QUFDdEI7QUFDQSxlQUFlLCtDQUFPO0FBQ3RCLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QywyREFB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QW1DLGtEQUFPO0FBQzFDLG1DQUFtQyxrREFBTztBQUMxQyxtQ0FBbUMsa0RBQU87QUFDMUMsbUNBQW1DLGtEQUFPO0FBQzFDLG1DQUFtQyxrREFBTztBQUMxQyxtQ0FBbUMsa0RBQU87QUFDMUMsbUNBQW1DLGtEQUFPO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2QkFBNkI7QUFDN0M7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxNQUFNLHVCQUF1QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNkJBQTZCO0FBQzNDO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RDtBQUM5RDtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsbURBQW1EO0FBQ25ELENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLG1DQUFtQztBQUNuQyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxtQ0FBbUM7QUFDbkMsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxJQUFJO0FBQzdEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsRUFBRSxpREFBUztBQUNYO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFLGlEQUFTO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaURBQVM7QUFDakM7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLHFDQUFxQyxzQkFBc0I7QUFDM0QseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlEQUFTO0FBQ3BCLElBQUk7QUFDSixXQUFXLGlEQUFTO0FBQ3BCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlCQUFpQixRQUFRLDBMQUFlO0FBQ2xEO0FBQ0E7QUFDQSwyREFBMkQscUJBQXFCLHlCQUF5QixvQkFBb0IsSUFBSSxLQUFLLGtCQUFrQixLQUFLO0FBQzdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE1BQU0sR0FBRztBQUM5QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE9BQU8sR0FBRyxRQUFRO0FBQzVDO0FBQ0E7QUFDQSw0QkFBNEIsTUFBTSxHQUFHLE9BQU87QUFDNUM7QUFDQTtBQUNBLGlDQUFpQyxNQUFNLEdBQUcsT0FBTztBQUNqRDtBQUNBLGtCQUFrQix1QkFBdUIsRUFBRSx1QkFBdUIsRUFBRSwrQkFBK0IsRUFBRSwrQkFBK0I7QUFDcEk7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixtQ0FBbUMsS0FBSztBQUN4QztBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1osY0FBYztBQUNkOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkOztBQUVBO0FBQ0EsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJOztBQUVKLElBQUk7QUFDSjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsSUFBSTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsTUFBTTtBQUMzQjtBQUNBOztBQXNERTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQy9oR2dEO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFRQTtBQUdBO0FBR0E7QUEyQkE7O0FBRWxEO0FBQ21DOztBQUVuQztBQUNBO0FBQ0EsK0JBQStCLGdGQUFNO0FBQ3JDO0FBQ0EsQ0FBQztBQUNELDZCQUE2QixnRkFBTTtBQUNuQyxVQUFVLG9CQUFvQixRQUFRLHVTQUFzRDtBQUM1RixXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLGdGQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhCQUE4QixnRkFBTTtBQUNwQyxVQUFVLG9CQUFvQixRQUFRLDZTQUF3RDtBQUM5RixXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLGdGQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhCQUE4QixnRkFBTTtBQUNwQyxVQUFVLG9CQUFvQixRQUFRLDZTQUF3RDtBQUM5RixXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLGdGQUFNO0FBQ3RDO0FBQ0EsQ0FBQztBQUNELDhCQUE4QixnRkFBTTtBQUNwQyxVQUFVLG9CQUFvQixRQUFRLHVTQUFzRDtBQUM1RixXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLGdGQUFNO0FBQ3RDO0FBQ0EsQ0FBQztBQUNELDhCQUE4QixnRkFBTTtBQUNwQyxVQUFVLG9CQUFvQixRQUFRLG1xQkFBNEQ7QUFDbEcsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxnRkFBTTtBQUN0QztBQUNBLENBQUM7QUFDRCw4QkFBOEIsZ0ZBQU07QUFDcEMsVUFBVSxvQkFBb0IsUUFBUSxnVEFBeUQ7QUFDL0YsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyxnRkFBTTtBQUN0QztBQUNBLENBQUM7QUFDRCw4QkFBOEIsZ0ZBQU07QUFDcEMsVUFBVSxvQkFBb0IsUUFBUSwrb0JBQXdEO0FBQzlGLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0NBQWdDLGdGQUFNO0FBQ3RDO0FBQ0EsQ0FBQztBQUNELDhCQUE4QixnRkFBTTtBQUNwQyxVQUFVLG9CQUFvQixRQUFRLDRvQkFBdUQ7QUFDN0YsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0ZBQU07QUFDdEM7QUFDQSxDQUFDO0FBQ0QsOEJBQThCLGdGQUFNO0FBQ3BDLFVBQVUsb0JBQW9CLFFBQVEseVRBQTREO0FBQ2xHLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEsc1RBQTJEO0FBQ2pHLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEsa1VBQStEO0FBQ3JHLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEseVRBQTREO0FBQ2xHLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEseVpBQXlEO0FBQy9GLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEsa2FBQTREO0FBQ2xHLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEsOHpCQUF5RDtBQUMvRixXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGdGQUFNO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELCtCQUErQixnRkFBTTtBQUNyQyxVQUFVLG9CQUFvQixRQUFRLGthQUE0RDtBQUNsRyxXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGdGQUFNO0FBQ3ZDO0FBQ0EsQ0FBQztBQUNELCtCQUErQixnRkFBTTtBQUNyQyxVQUFVLG9CQUFvQixRQUFRLHNUQUEyRDtBQUNqRyxXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQixnRkFBTTtBQUNqQyxFQUFFLHlFQUFHO0FBQ0wsY0FBYywwRkFBZ0I7QUFDOUI7QUFDQTtBQUNBLEVBQUUsMEZBQWdCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0tBQWdLLFFBQVE7QUFDeEssQ0FBQztBQUNELGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSwyQkFBMkIsZ0ZBQU07QUFDakM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU0sa0JBQWtCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCwrQkFBK0IsZ0ZBQU07QUFDckMsVUFBVSxvQkFBb0IsUUFBUSw2U0FBd0Q7QUFDOUYsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxnRkFBTTtBQUN2QztBQUNBLENBQUM7QUFDRCwrQkFBK0IsZ0ZBQU07QUFDckMsVUFBVSxvQkFBb0IsUUFBUSxxVUFBZ0U7QUFDdEcsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxnRkFBTTtBQUN2QztBQUNBLENBQUM7QUFDRCwrQkFBK0IsZ0ZBQU07QUFDckMsVUFBVSxvQkFBb0IsUUFBUSxnYUFBK0Q7QUFDckcsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxnRkFBTTtBQUN2QztBQUNBLENBQUM7QUFDRCwrQkFBK0IsZ0ZBQU07QUFDckMsVUFBVSxvQkFBb0IsUUFBUSwrVEFBOEQ7QUFDcEcsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxnRkFBTTtBQUN2QztBQUNBLENBQUM7QUFDRCwrQkFBK0IsZ0ZBQU07QUFDckMsVUFBVSxvQkFBb0IsUUFBUSxtVEFBMEQ7QUFDaEcsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxnRkFBTTtBQUN2QztBQUNBLENBQUM7QUFDRCwrQkFBK0IsZ0ZBQU07QUFDckMsVUFBVSxvQkFBb0IsUUFBUSxtb0JBQW9EO0FBQzFGLFdBQVc7QUFDWCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGdGQUFNO0FBQ3ZDO0FBQ0EsQ0FBQztBQUNELCtCQUErQixnRkFBTTtBQUNyQyxVQUFVLG9CQUFvQixRQUFRLDJvQkFBb0Q7QUFDMUYsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsZ0ZBQU07QUFDdkM7QUFDQSxDQUFDO0FBQ0QsK0JBQStCLGdGQUFNO0FBQ3JDLFVBQVUsb0JBQW9CLFFBQVEsOGdCQUF5RDtBQUMvRixXQUFXO0FBQ1gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLGdGQUFNO0FBQ3ZDO0FBQ0EsQ0FBQztBQUNELCtCQUErQixnRkFBTTtBQUNyQyxVQUFVLG9CQUFvQixRQUFRLCt2QkFBZ0U7QUFDdEcsV0FBVztBQUNYLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxnRkFBTTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUseUZBQWU7QUFDakI7QUFDQSxHQUFHO0FBQ0gsRUFBRSx5RkFBZTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixnRkFBTTtBQUNyQyxTQUFTO0FBQ1QsT0FBTztBQUNQLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsOEJBQThCLGdGQUFNO0FBQ3BDLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSwrQkFBK0IsZ0ZBQU07QUFDckM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCw0QkFBNEIsZ0ZBQU07QUFDbEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLG9HQUEwQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0EsNkNBQTZDLGdGQUFNO0FBQ25ELEVBQUUseUVBQUc7QUFDTDtBQUNBLG1CQUFtQiwrRUFBUyxxQkFBcUIsd0NBQXdDO0FBQ3pGO0FBQ0E7QUFDQSxVQUFVLG9GQUFVO0FBQ3BCLFVBQVU7QUFDVjtBQUNBLG9CQUFvQiw4QkFBOEI7QUFDbEQsWUFBWSx5RkFBZTtBQUMzQixZQUFZO0FBQ1osWUFBWSx5RUFBRyxtREFBbUQsSUFBSTtBQUN0RSxtQkFBbUIsK0VBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5RUFBRyx5QkFBeUIsZUFBZTtBQUMvQztBQUNBLE1BQU0seUVBQUc7QUFDVDtBQUNBLHNDQUFzQyxlQUFlO0FBQ3JEO0FBQ0EsQ0FBQzs7QUFFRDtBQUM0QjtBQUMyQjtBQUNyQjtBQUNTOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLE9BQU87QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxnRkFBTTtBQUNWO0FBQ0EsMkNBQTJDO0FBQzNDLG1CQUFtQixtRkFBUztBQUM1QixpQkFBaUIsb0ZBQVU7QUFDM0IsV0FBVyx1RkFBYztBQUN6QjtBQUNBLE1BQU0sb0ZBQVU7QUFDaEIsTUFBTTtBQUNOLHVCQUF1QiwwRkFBZ0I7QUFDdkM7QUFDQSxrQkFBa0IseUZBQW1CLFlBQVksTUFBTTtBQUN2RDtBQUNBLGNBQWMsOEJBQThCO0FBQzVDLE1BQU0seUZBQWU7QUFDckI7QUFDQSxZQUFZLCtDQUErQyxFQUFFLG9GQUFVO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDLGdGQUFNO0FBQzVDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0Esc0NBQXNDLGdGQUFNO0FBQzVDLGlDQUFpQztBQUNqQyxDQUFDOztBQUVEO0FBQ0E7QUFDQSw2QkFBNkIsc0ZBQWdCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkVBQUk7QUFDbkI7QUFDQTtBQUNBLFlBQVksZ0ZBQVc7QUFDdkIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQU07O0FBRU47QUFDQSxrQ0FBa0MsZ0ZBQU07QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QseUNBQXlDLGdGQUFNO0FBQy9DLFVBQVUsaUJBQWlCO0FBQzNCLFVBQVUsa0NBQWtDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxDQUFDO0FBQ0Qsd0NBQXdDLGdGQUFNO0FBQzlDLHdCQUF3QixrRkFBYTtBQUNyQyx5QkFBeUIsa0ZBQWE7QUFDdEM7QUFDQSxnREFBZ0QsTUFBTTtBQUN0RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsVUFBVSx5RkFBZ0I7QUFDMUI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixzRkFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFNOztBQUVOO0FBQ0E7QUFDQSw0Q0FBNEMseUNBQXlDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFNBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLCtFQUFLO0FBQ1AsRUFBRSxzRkFBWSx1QkFBdUI7QUFDckM7QUFDQTtBQUNBLGdGQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlO0FBQzNCO0FBQ0EsYUFBYTtBQUNiLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBTTtBQUNOLHlDQUF5QyxnRkFBTTtBQUMvQztBQUNBLEdBQUcsVUFBVSxFQUFFLFdBQVcsRUFBRSw4QkFBOEIsSUFBSSxhQUFhO0FBQzNFLENBQUM7QUFDRCxzQ0FBc0MsZ0ZBQU07QUFDNUM7QUFDQTtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0EsUUFBUSx5QkFBeUIsbUJBQW1CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsNkJBQTZCLHNCQUFzQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUVBQU87QUFDbEI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFdBQVcsaUVBQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUNBQXVDLGdGQUFNO0FBQzdDO0FBQ0Esb0JBQW9CLHdGQUFjO0FBQ2xDLFNBQVMsa0RBQVMsQ0FBQyxnREFBTyxJQUFJLE9BQU8sRUFBRSxXQUFXLElBQUksOENBQVM7QUFDL0QsQ0FBQztBQUNELHFDQUFxQyxnRkFBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix1RkFBYztBQUMvQjtBQUNBO0FBQ0EsQ0FBQztBQUNELG9DQUFvQyxnRkFBTTtBQUMxQztBQUNBLG9EQUFvRCxrQkFBa0IsSUFBSSxRQUFRO0FBQ2xGLGlDQUFpQyxjQUFjLFNBQVMsUUFBUSxFQUFFLGNBQWMsc0JBQXNCLGNBQWMsU0FBUyxpQkFBaUIsYUFBYSxvQkFBb0I7QUFDL0ssSUFBSTtBQUNKO0FBQ0EsQ0FBQztBQUNELG9DQUFvQyxnRkFBTTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esc0ZBQXNGLGFBQWE7QUFDbkc7QUFDQSxnRkFBTTtBQUNOLDZDQUE2QyxnRkFBTTtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNkJBQTZCLGdGQUFNO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtRkFBUztBQUMxQixFQUFFLHlFQUFHO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxnRkFBTTtBQUNuRDtBQUNBLGlCQUFpQiwyQ0FBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsYUFBYSwyQ0FBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDJDQUFNO0FBQzNDLGFBQWEsMkNBQU07QUFDbkI7QUFDQSxNQUFNO0FBQ04sYUFBYSwyQ0FBTTtBQUNuQjtBQUNBLDhEQUE4RCxXQUFXO0FBQ3pFLElBQUk7QUFDSjtBQUNBO0FBQ0EscUNBQXFDLDJDQUFNO0FBQzNDLGFBQWEsMkNBQU07QUFDbkI7QUFDQSxNQUFNO0FBQ04sYUFBYSwyQ0FBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsd0JBQXdCO0FBQ2xFLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG9GQUFlO0FBQ3hELElBQUk7QUFDSjtBQUNBO0FBQ0EsTUFBTTtBQUNOLDZDQUE2QyxvRkFBZTtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMseUJBQXlCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixLQUFLO0FBQzNCO0FBQ0EsRUFBRSx5RUFBRztBQUNMLGlEQUFpRCxrRkFBUTtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osY0FBYyxrREFBUztBQUN2QjtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9DQUFvQztBQUNwQyxrQkFBa0IsaUdBQXVCLEdBQUc7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxrR0FBd0I7QUFDMUIseUNBQXlDLG9GQUFjO0FBQ3ZELDZCQUE2QixvRkFBYztBQUMzQztBQUNBO0FBQ0EsSUFBSTtBQUNKLDZCQUE2QixvRkFBYztBQUMzQztBQUNBLCtDQUErQyx1RkFBYSxZQUFZLHVGQUFhO0FBQ3JGLEVBQUUscUZBQVc7QUFDYjtBQUNBO0FBQ0EsZ0ZBQU07QUFDTix5Q0FBeUMsZ0ZBQU0scUJBQXFCO0FBQ3BFLFVBQVUsT0FBTztBQUNqQjtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxXQUFXO0FBQ1gsZUFBZTtBQUNmLGtCQUFrQjtBQUNsQix5QkFBeUIsZ0ZBQU07QUFDL0IsSUFBSSwrRUFBSztBQUNULEdBQUc7QUFDSCwrQkFBK0IsZ0ZBQU07QUFDckMsSUFBSSwrRUFBSyxDQUFDLG1GQUFhO0FBQ3ZCLEdBQUc7QUFDSCxlQUFlO0FBQ2YsQ0FBQztBQUNELHFGQUFXLENBQUMsbUZBQVM7QUFDckIsK0VBQUssQ0FBQyxtRkFBUzs7QUFFZjtBQUNBLGtDQUFrQyxnRkFBTTtBQUN4QyxFQUFFLHlFQUFHO0FBQ0wsTUFBTSx3RkFBZTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscUNBQXFDO0FBQ3ZELElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLENBQUM7QUFDRCwwQkFBMEIsZ0ZBQU07QUFDaEM7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLElBQUk7QUFDSixRQUFRLHdGQUFlO0FBQ3ZCLE1BQU0seUVBQUc7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx5RUFBRztBQUNUO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxzQ0FBc0MsZ0ZBQU0sa0JBQWtCLDJDQUEyQztBQUN6RztBQUNBLENBQUM7QUFDRDtBQUNBLEVBQUUseUVBQUcsVUFBVSxpQ0FBaUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxFQUFFLHlFQUFHLGdCQUFnQix1QkFBdUI7QUFDNUM7QUFDQSxJQUFJLHlFQUFHO0FBQ1Asa0NBQWtDLGdDQUFnQztBQUNsRTtBQUNBLDBCQUEwQixrRkFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQSxJQUFJLHlFQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0EsVUFBVSxrREFBTSxDQUFDLGtGQUFhO0FBQzlCLGtCQUFrQixrRkFBYTtBQUMvQjtBQUNBLE1BQU0seUVBQUc7QUFDVDtBQUNBO0FBQ0EsY0FBYyxxQkFBcUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtDQUFrQyxnRkFBTTtBQUN4QztBQUNBLENBQUM7QUFDRCwyQkFBMkIsZ0ZBQU07QUFDakMsRUFBRSx5RUFBRztBQUNMO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsK0NBQStDLGdGQUFNO0FBQ3JEO0FBQ0EsRUFBRSxJQUFJO0FBQ047QUFDQSxFQUFFLG9HQUEwQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsb0NBQW9DLGdGQUFNO0FBQzFDO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0EsbUNBQW1DLHlFQUFHO0FBQ3RDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGdGQUFNO0FBQ2pEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxtQ0FBbUMsZ0ZBQU07QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLFFBQVEseUVBQUc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw2QkFBNkIsZ0ZBQU07QUFDbkM7QUFDQSx3Q0FBd0MsZ0ZBQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxVQUFVLHlFQUFHO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRCw4QkFBOEIsZ0ZBQU07QUFDcEM7QUFDQSx3Q0FBd0MsZ0ZBQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxVQUFVLHlFQUFHO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLG1CQUFtQjtBQUNuQjtBQUNBO0FBR0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ3B6Q0Esa0JBQWtCLGdCQUFnQix5REFBeUQsa0JBQWtCLGFBQWEsZ0RBQWdELGdCQUFnQixnQ0FBZ0Msc0JBQXNCLG1GQUFtRiwrQkFBK0Isd0JBQXdCLFdBQVcsa0JBQWtCLGVBQWUsdUVBQXVFLFdBQVcsaUJBQWlCLFdBQVcsNkJBQTZCLGFBQWEsS0FBSyxzQkFBc0IsZ0JBQWdCLDRCQUE0QixRQUFRLG9GQUFvRixHQUFHLHVKQUF1Six5QkFBeUIsS0FBSyxtQkFBbUIsRUFBRSxhQUFhLFNBQVMsWUFBWSwyQkFBMkIsUUFBUSw2QkFBNkIsUUFBUSxXQUFXLEVBQUUsR0FBRyxxS0FBcUssV0FBVyxNQUFNLFlBQVkscUJBQXFCLDhCQUE4QixrREFBa0Qsb0JBQW9CLGtDQUFrQyxPQUFPLFNBQVMsUUFBUSxNQUFNLDJCQUEyQixpQkFBaUIsV0FBVyxzQ0FBc0MsU0FBUyxTQUFTLGdCQUFnQixNQUFNLDBCQUEwQixtQkFBbUIsc0RBQXNELFFBQVEsc0hBQXNILFFBQVEsZUFBZSxjQUFjLGtCQUFrQiwrQkFBK0IsbUJBQW1CLGVBQWUsT0FBTyw2Q0FBNkMsaUJBQWlCLFdBQVcseUZBQXlGLFVBQVUsY0FBYyxvQkFBb0IsOERBQThELGtCQUFrQixrQkFBa0IsbUJBQW1CLDBDQUEwQyw0QkFBNEIsSUFBSSxhQUFhLDJFQUEyRSx1RkFBdUYsT0FBTyw4Q0FBOEMsa0JBQWtCLGtCQUFrQixrREFBa0QsSUFBSSwrQkFBK0IsNEJBQTRCLG9DQUFvQyxRQUFRLGVBQWUsY0FBYyxrQkFBa0IsOEJBQThCLElBQUksZUFBZSxHQUFHLDZCQUE2QixpQkFBaUIsV0FBVyxtQkFBbUIsMENBQTBDLG1CQUFtQix5QkFBeUIsWUFBWSxrQkFBa0Isa0dBQWtHLFlBQVksSUFBSSxLQUFLLGlHQUFpRyxrQkFBa0IsT0FBTywwQkFBMEIsUUFBUSxlQUFlLGNBQWMsa0JBQWtCLGVBQWUsT0FBTyw0Q0FBNEMsZ0JBQWdCLHlKQUF5SixzQkFBc0IscURBQXFELGtCQUFrQiwyQkFBMkIsMkNBQTJDLFlBQVksSUFBSSxLQUFLLGtLQUFrSyw2REFBNkQsTUFBTSxRQUFRLGVBQWUsY0FBYyxrQkFBa0IsZ0hBQWdILElBQUksZUFBZSxHQUFHLE9BQU8sK0NBQStDLG1CQUFtQixXQUFXLHNCQUFzQixtQ0FBbUMsa0JBQWtCLDJCQUEyQiwyQ0FBMkMsWUFBWSxJQUFJLEtBQUsseU1BQXlNLGlIQUFpSCxNQUFNLFdBQVcsUUFBUSxlQUFlLFlBQVksT0FBTyx1RkFBdUYscUJBQXFCLGlGQUFpRixnQkFBZ0Isa0JBQWtCLGNBQWMseUJBQXlCLGtCQUFrQixLQUFLLE9BQU8sMkRBQTJELDBEQUEwRCxzQkFBc0IsOEJBQThCLEtBQUssb0ZBQW9GLGFBQWEsZUFBZSxzQkFBc0IsRUFBRSw4QkFBOEIsb0JBQW9CLGVBQWUsR0FBRyxJQUFJLHVCQUF1QixLQUFLLFFBQVEsRUFBRSxRQUFRLFdBQVcsY0FBYyxpREFBaUQseUJBQXlCLDhDQUE4Qyw0REFBNEQsWUFBWSxNQUFNLEtBQUssYUFBYSxnRUFBZ0Usb0JBQW9CLDZEQUE2RCxTQUFTLGNBQWMseURBQXlELFNBQVMsY0FBYyxvQkFBb0IsV0FBVyxVQUFVLGFBQWEsZUFBZSxnQkFBZ0Isb0JBQW9CLGtCQUFrQixNQUFNLGdDQUFnQyxtQkFBbUIsVUFBVSxNQUFNLGdCQUFnQixvQkFBb0IsVUFBVSxNQUFNLGdDQUFnQyxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixvQkFBb0IsZ0JBQWdCLE1BQU0sU0FBUyxvQ0FBb0MsUUFBUSxlQUFlLGdCQUFnQixNQUFNLGdCQUFnQixvQkFBb0IsZ0JBQWdCLE1BQU0sU0FBUyxvQ0FBb0MsUUFBUSxlQUFlLGdCQUFnQixNQUFNLGdCQUFnQixvQkFBb0IsZ0JBQWdCLE1BQU0sZ0NBQWdDLDRDQUE0QyxFQUFFLE1BQU0sZ0JBQWdCLG9CQUFvQixTQUFTLE1BQU0sd0JBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLG9CQUFvQixTQUFTLE1BQU0sd0JBQXdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLG9CQUFvQixnQkFBZ0IsTUFBTSxTQUFTLG9DQUFvQyxRQUFRLGVBQWUsZ0JBQWdCLE1BQU0sZ0JBQWdCLG9CQUFvQixnQkFBZ0IsTUFBTSxnQ0FBZ0MsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsZ0JBQWdCLFVBQVUsU0FBUyxjQUFjLFdBQVcsaUNBQWlDLFVBQVUsYUFBYSxNQUFNLFVBQVUsZ0JBQWdCLG9CQUFvQixrQkFBa0IsTUFBTSxnQkFBZ0Isb0JBQW9CLDhCQUE4QixNQUFNLGdCQUFnQixvQkFBb0IsVUFBVSxNQUFNLHVCQUF1QixtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixtQkFBbUIsRUFBRSxNQUFNLFNBQVMsWUFBWSx5REFBeUQsd0JBQXdCLDhCQUE4QixNQUFNLFNBQVMsYUFBYSxZQUFZLGlEQUFpRCw4REFBOEQsUUFBUSwyQkFBMkIsa0JBQWtCLE1BQU0sU0FBUyx5RUFBeUUsUUFBUSwyQkFBMkIsa0JBQWtCLE1BQU0sU0FBUywyRUFBMkUsd0JBQXdCLDJCQUEyQixVQUFVLHNCQUFzQiwwQ0FBMEMsUUFBUSxlQUFlLEVBQUUsV0FBVyxNQUFNLGdCQUFnQixnQkFBZ0IsVUFBVSxJQUFJLFNBQVMsa0JBQWtCLGdFQUFnRSxnQ0FBZ0MsNEJBQTRCLE1BQU0seUJBQXlCLGlCQUFpQixLQUFLLGdDQUFnQywwQkFBMEIsMEJBQTBCLGdDQUFnQywwRkFBMEYsZ1FBQWdRLFVBQVUsZ0NBQWdDLGtCQUFrQixtSEFBbUgsTUFBTSxrSkFBa0osZ0VBQWdFLG9CQUFvQixXQUFXLFlBQVksV0FBVyxNQUFNLG1GQUFtRix3Q0FBd0MsVUFBVSxTQUFTLHlCQUF5QixjQUFjLHFDQUFxQyxnQkFBZ0IsNkJBQTZCLGlCQUFpQix3QkFBd0IsbUNBQW1DLHlCQUF5QixzQkFBc0IsT0FBTyw4QkFBOEIsa0JBQWtCLHVCQUF1QixRQUFRLFdBQVcsWUFBWSxNQUFNLHdEQUF3RCwrREFBK0QsbUJBQW1CLG1EQUFtRCxvQkFBb0Isc0JBQXNCLHFCQUFxQixpQkFBaUIsc0NBQXNDLGdCQUFnQixhQUFhLHVJQUF1SSxZQUFZLFdBQVcsS0FBSyxhQUFhLGFBQWEsZ0dBQWdHLDBDQUEwQywyQ0FBMkMsT0FBTyw2QkFBNkIsT0FBTyxvQkFBb0Isa0JBQWtCLG9LQUFvSyxvQ0FBb0MseUJBQXlCLGdDQUFnQyx1QkFBdUIsb0JBQW9CLDBFQUEwRSxrQkFBa0IsMkNBQTJDLDREQUE0RCxjQUFjLE9BQU8seUJBQXlCLG9CQUFvQiw4QkFBOEIsY0FBYyxvQ0FBb0MsNEJBQTRCLFlBQVksS0FBSyxJQUFJLDJCQUEyQixpQ0FBaUMsa0ZBQWtGLDBCQUEwQiwrQkFBK0IsYUFBYSxxSEFBcUgsdUJBQXVCLEVBQUUsbURBQW1ELElBQUksbUJBQW1CLGdCQUFnQix3QkFBd0Isb0JBQW9CLFVBQVUsYUFBYSxlQUFlLG9DQUFvQyxNQUFNLDBEQUEwRCxNQUFNLFNBQVMscUJBQXFCLHNDQUFzQyxNQUFNLDBEQUEwRCxPQUFPLG1CQUFtQixnQkFBZ0IsV0FBVyw4QkFBOEIsNENBQTRDLFFBQVEsUUFBUSwrQ0FBK0MsRUFBRSxZQUFZLElBQUksWUFBWSxpREFBaUQsR0FBRyxPQUFPLHVCQUF1QixnQkFBZ0IscUJBQXFCLDZCQUE2QixtQkFBbUIsbUNBQW1DLE1BQU0sd0NBQXdDLE1BQU0saUNBQWlDLE1BQU0sbUNBQW1DLE1BQU0sd0NBQXdDLE1BQU0sMENBQTBDLFlBQVksd0JBQXdCLGNBQWMsd0JBQXdCLElBQUksdURBQXVELGNBQWMseUVBQXlFLHNCQUFzQixvQ0FBb0Msb0JBQW9CLG1CQUFtQiwyQkFBMkIsNkVBQTZFLGNBQWMsMkJBQTJCLG1CQUFtQiwwQkFBMEIsdURBQXVELFFBQVEsd0NBQXdDLCtCQUErQixvQkFBb0IseUJBQXlCLDBGQUEwRixzQkFBc0IsOERBQThELHFCQUFxQix5Q0FBeUMsVUFBVSxtREFBbUQsYUFBYSxpSEFBaUgsVUFBVSxpSEFBaUgsSUFBSSxrQkFBa0Isc0JBQXNCLFdBQVcsZ0ZBQWdGLFlBQVksV0FBVyxvR0FBb0csbUJBQW1CLGtCQUFrQixzQkFBc0IsUUFBUSxnQ0FBZ0MsUUFBUSxpQ0FBaUMsRUFBRSxZQUFZLE1BQU0sS0FBSyxhQUFhLDRNQUE0TSxxRUFBcUUsRUFBRSxvQkFBb0IsOEJBQThCLFFBQVEsMkNBQTJDLEdBQUcsb0JBQW9CLGlDQUFpQyxVQUFVLHFFQUFxRSxnRUFBZ0UsU0FBUyw0QkFBNEIsZ0JBQWdCLG9CQUFvQixpREFBaUQsWUFBWSxhQUFhLE1BQU0sMENBQTBDLG9CQUFvQixvRkFBb0YsS0FBSywwQkFBMEIsa0VBQWtFLHdCQUF3QixZQUFZLElBQUksTUFBTSx3REFBd0Qsb0JBQW9CLGtPQUFrTyxZQUFZLDhCQUE4Qix1QkFBdUIsa0VBQWtFLFlBQVksS0FBSyw2REFBNkQsdUdBQXVHLDRCQUE0QixzRUFBc0UsWUFBWSxzREFBc0QsWUFBWSxJQUFJLGtCQUFrQiwyQkFBMkIsVUFBVSwyREFBMkQsOENBQThDLCtFQUErRSxFQUFFLFNBQVMsY0FBYyxhQUFhLGtCQUFrQixpQkFBaUIsbUVBQW1FLFdBQVcsaURBQWlELEtBQUssV0FBVyxrQkFBa0IsWUFBWSxXQUFXLDhDQUE4QyxpQkFBaUIsZ0JBQWdCLFlBQVksYUFBYSxLQUFLLGFBQWEsNE5BQTROLFNBQVMsZ0JBQWdCLG1EQUFtRCxrQkFBa0IsZUFBZSx1QkFBdUIsMERBQTBELGlEQUFpRCxrQkFBa0IsOENBQThDLG9CQUFvQixjQUFjLGlCQUFpQiwwQ0FBMEMseUJBQXlCLEtBQUsseUJBQXlCLEtBQUsseUJBQXlCLEtBQUsseUJBQXlCLHNDQUFzQyxTQUFTLGVBQWUsYUFBYSxxREFBcUQsZUFBZSxlQUFlLEtBQUssaUhBQWlILHNDQUFzQyxRQUFRLFNBQVMsZ0JBQWdCLHlCQUF5QixzQkFBc0IsOEJBQThCLFlBQVksY0FBYyxNQUFNLEtBQUssb0JBQW9CLGVBQWUsc0ZBQXNGLHNCQUFzQiw0QkFBNEIsWUFBWSxJQUFJLEtBQUssYUFBYSxrQ0FBa0MsZ0JBQWdCLFNBQVMsZUFBZSxxQkFBcUIseVVBQXlVLGtCQUFrQix5RUFBeUUsaUJBQWlCLHVDQUF1QyxNQUFNLHlCQUF5Qiw0Q0FBNEMsVUFBVSxPQUFPLG1EQUFtRCxnQkFBZ0IsbUJBQW1CLHdDQUF3QyxxQkFBcUIsdUNBQXVDLFdBQVcsMENBQTBDLHdEQUF3RCx5REFBeUQsbUJBQW1CLGdEQUFnRCxvQ0FBb0MseUJBQXlCLDRCQUE0QixzQ0FBc0MsNkRBQTZELGdCQUFnQixnQ0FBZ0MsMEJBQTBCLGdCQUFnQixtQkFBbUIsMkNBQTJDLHdCQUF3QixnREFBZ0QsdUNBQXVDLHdCQUF3QixJQUFJLHdCQUF3QiwrQkFBK0IsNEJBQTRCLG9DQUFvQyxjQUFjLG9DQUFvQyw0QkFBNEIsWUFBWSxLQUFLLElBQUksMkJBQTJCLGlDQUFpQyxvQ0FBb0MsWUFBWSxLQUFLLCtDQUErQyx3RUFBd0UsaUJBQWlCLG1EQUFtRCxXQUFXLGlDQUFpQyxpREFBaUQsMENBQTBDLEtBQUssbUZBQW1GLEdBQUcsUUFBUSw2Q0FBNkMsRUFBRSxLQUFLLGVBQWUsYUFBYSx1Q0FBdUMsMEpBQTBKLDJCQUEyQixxREFBcUQsYUFBYSxvQ0FBb0MseUhBQXlILFVBQVUsd0JBQXdCLGlDQUFpQywwRUFBMEUsaUlBQWlJLHdCQUF3QixzQkFBc0IsYUFBYSxvQ0FBb0MsUUFBUSxnQ0FBZ0MsVUFBVSxhQUFhLGVBQWUsb0NBQW9DLE1BQU0sZ0NBQWdDLE1BQU0sc0JBQXNCLGlDQUFpQyxvQkFBb0IsNERBQTRELE1BQU0sZ0NBQWdDLG1CQUFtQixXQUFXLGtCQUFrQixlQUFlLG9CQUFvQixTQUFTLDZEQUE2RCwrQ0FBK0MsMENBQTBDLEtBQUssbUZBQW1GLEdBQUcsUUFBUSw2Q0FBNkMsRUFBRSxvQkFBb0Isb0JBQW9CLDRCQUE0QixrQkFBa0Isa0NBQWtDLGVBQWUsU0FBUyxzQkFBc0IsdUVBQXVFLGFBQWEsa0JBQWtCLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxzQkFBc0IsTUFBTSxFQUFFLEtBQUssSUFBSSxNQUFNLEVBQUUsS0FBSyxJQUFJLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsTUFBTSxFQUFFLE1BQU0sR0FBRyxnQkFBZ0IsV0FBVyx5REFBeUQsa0JBQWtCLFdBQVcsZUFBZSxjQUFjLHVFQUF1RSxNQUFNLGtCQUFrQiw2REFBNkQsTUFBTSx3Q0FBd0MsYUFBYSxTQUFTLGdCQUFnQixtQkFBbUIsaUNBQWlDLDZEQUE2RCxnQkFBZ0IsZ0RBQWdELFNBQVMsaUJBQWlCLHVFQUF1RSxRQUFRLHdHQUF3RyxnQ0FBZ0MsZ1FBQWdRLE1BQU0sZ0JBQWdCLGdDQUFnQyxxRkFBcUYseUNBQXlDLE1BQU0seUNBQXlDLGtCQUFrQixtQkFBbUIsb1BBQW9QLGtDQUFrQyxjQUFjLHNCQUFzQix1RUFBdUUsYUFBYSwrQkFBK0IsTUFBTSw4REFBOEQsTUFBTSxrQ0FBa0MseUNBQXlDLGdCQUFnQixnQkFBZ0Isb0JBQW9CLCtCQUErQixnQkFBZ0IsaUNBQWlDLHNCQUFzQixxQkFBcUIsc0NBQXNDLHNCQUFzQixtQkFBbUIsb0NBQW9DLHNCQUFzQixnQkFBZ0IsaUNBQWlDLHNCQUFzQixnQkFBZ0IsaUNBQWlDLHNCQUFzQixhQUFhLDhCQUE4QixzQkFBc0Isd0JBQXdCLHNDQUFzQyxzQkFBc0IsV0FBVyw0QkFBNEIsc0JBQXNCLFVBQVUsMkJBQTJCLHVCQUF1QixzQ0FBc0MsU0FBUyxpQkFBaUIsOEJBQThCLFFBQVEsbUtBQW1LLGtCQUFrQixXQUFXLGVBQWUsdVZBQXVWLHVCQUF1QixHQUFHLE1BQU0seVFBQXlRLE1BQU0sMENBQTBDLG9CQUFvQixTQUFTLGtCQUFrQixtQkFBbUIseUJBQXlCLHFDQUFxQyw0VEFBNFQscUJBQXFCLEtBQUssZ0JBQWdCLGdCQUFnQixvQkFBb0IsK0JBQStCLGVBQWUsK0JBQStCLGdCQUFnQixpQ0FBaUMsb0JBQW9CLHFCQUFxQixzQ0FBc0Msb0JBQW9CLG1CQUFtQixvQ0FBb0Msb0JBQW9CLGdCQUFnQixpQ0FBaUMsb0JBQW9CLGdCQUFnQixpQ0FBaUMsb0JBQW9CLGFBQWEsOEJBQThCLG9CQUFvQix3QkFBd0Isc0NBQXNDLG9CQUFvQixXQUFXLDRCQUE0QixvQkFBb0IsVUFBVSwyQkFBMkIscUJBQXFCLFFBQVEsa0dBQXdIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0E1bDJCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyQmdEO0FBQytDO0FBQ3lDOztBQUUvSTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQLFFBQVEsc0RBQU8sMkNBQTJDLG9EQUFLO0FBQy9EOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMsbURBQUk7QUFDaEQ7QUFDQTtBQUNBLDJCQUEyQixtREFBTTtBQUNqQyxTQUFTLG9EQUFPLGVBQWUsb0RBQU8sQ0FBQyxzREFBTyxpQ0FBaUMsZ0RBQUc7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzREFBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseURBQVU7QUFDNUI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVEQUFRLENBQUMsb0RBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtREFBSTtBQUNoQjtBQUNBLE1BQU0sb0RBQU0sU0FBUyx3REFBUyxDQUFDLG1EQUFJLElBQUksb0RBQUs7QUFDNUMsV0FBVyxvREFBSyx3QkFBd0Isb0RBQUssQ0FBQyxtREFBSSxrQkFBa0IsbURBQU0sZ0JBQWdCLG1EQUFNO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1EQUFNO0FBQzVCLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELG9EQUFPO0FBQ2hFLDJCQUEyQixtREFBTTtBQUNqQyxPQUFPLG1EQUFNLDRDQUE0Qyx5REFBeUQsb0RBQU8sMEJBQTBCO0FBQ25KO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUIsVUFBVTtBQUNWO0FBQ0EsTUFBTSxvREFBTTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsbURBQU07QUFDcEI7QUFDQTtBQUNBLGNBQWMsbURBQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxtREFBTTtBQUNyRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbURBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsbURBQUk7QUFDekQ7O0FBRUEsMEJBQTBCLGlEQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtREFBTTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsbURBQUk7QUFDZCxxQkFBcUIsc0RBQU8sQ0FBQyxtREFBSTs7QUFFakMsZUFBZSxtREFBSSxzQkFBc0IsbURBQU0sc0JBQXNCLHlEQUFVLENBQUMsb0RBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLG1EQUFNO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0EsWUFBWSxtREFBTTs7QUFFbEIsK0JBQStCLFdBQVc7QUFDMUMsc0JBQXNCLG1EQUFNLHlCQUF5QixnREFBRyw2QkFBNkIsVUFBVTtBQUMvRixXQUFXLGlEQUFJLDZCQUE2QixvREFBTztBQUNuRDs7QUFFQSxRQUFRLG1EQUFJLHFDQUFxQyw2Q0FBTztBQUN4RDs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDTztBQUNQLFFBQVEsbURBQUksc0JBQXNCLDZDQUFPLEVBQUUsaURBQUksQ0FBQyxtREFBSSxLQUFLLG1EQUFNO0FBQy9EOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDTztBQUNQLFFBQVEsbURBQUksc0JBQXNCLGlEQUFXLEVBQUUsbURBQU0sb0JBQW9CLG1EQUFNO0FBQy9FOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDek00RjtBQUN6RDs7QUFFbkM7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNPO0FBQ1A7O0FBRUEsaUJBQWlCLHFCQUFxQjtBQUN0Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQSxPQUFPLDJDQUFLO0FBQ1osT0FBTyw0Q0FBTSxPQUFPLCtDQUFTLE9BQU8saURBQVc7QUFDL0MsT0FBTyw2Q0FBTztBQUNkLE9BQU8sK0NBQVMsNENBQTRDLDhDQUE4QztBQUMxRyxPQUFPLDZDQUFPLE9BQU8sbURBQU07QUFDM0I7O0FBRUEsUUFBUSxtREFBTSx3RkFBd0YsaUJBQWlCO0FBQ3ZIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQytFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVA7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1AsU0FBUztBQUNUOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQLFFBQVEsbURBQU0sZ0VBQWdFLHFCQUFxQjtBQUNuRzs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNPO0FBQ1A7QUFDQSwwQkFBMEIsaUJBQWlCOztBQUUzQyxDQUFDLG9EQUFNO0FBQ1A7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDTztBQUNQLDRCQUE0QixtREFBTTs7QUFFbEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUCxpQ0FBaUMsbURBQU07O0FBRXZDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNPO0FBQ1AsUUFBUSxtREFBTTtBQUNkOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQLFFBQVEsbURBQU07QUFDZDs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQLG9DQUFvQyxtREFBTTtBQUMxQzs7QUFFQTtBQUNBLFdBQVcsS0FBSztBQUNoQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUCxRQUFRLGlEQUFJO0FBQ1o7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTtBQUNBLFdBQVcsbURBQU07QUFDakI7QUFDQSxXQUFXLG9EQUFNO0FBQ2pCO0FBQ0EsWUFBWSxvREFBTSxDQUFDLGlEQUFJO0FBQ3ZCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrREFBa0QsaURBQUk7QUFDdEQ7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hRQTtBQUNBLFdBQVc7QUFDWCxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBLFdBQVc7QUFDWCxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBLFdBQVc7QUFDWCxZQUFZO0FBQ1o7QUFDTzs7QUFFUDtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ087QUFDUDtBQUNBOztBQUVBO0FBQ0EsV0FBVyxLQUFLO0FBQ2hCLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ087QUFDUCx3Q0FBd0MsK0JBQStCO0FBQ3ZFOzs7Ozs7Ozs7Ozs7Ozs7OztBQzVITztBQUNQO0FBQ0EscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxZQUFZLCtIQUErSDtBQUN4TTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsNENBQTRDLDRDQUE0QztBQUN4RiwrQ0FBK0Msc0NBQXNDO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlFQUFlLE1BQU0sRUFBQztBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AYnJhaW50cmVlL3Nhbml0aXplLXVybC9kaXN0L2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGJyYWludHJlZS9zYW5pdGl6ZS11cmwvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGljb25pZnkvdXRpbHMvbGliL2N1c3RvbWlzYXRpb25zL2RlZmF1bHRzLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGljb25pZnkvdXRpbHMvbGliL2ljb24tc2V0L2dldC1pY29uLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGljb25pZnkvdXRpbHMvbGliL2ljb24tc2V0L3RyZWUubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AaWNvbmlmeS91dGlscy9saWIvaWNvbi9kZWZhdWx0cy5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL0BpY29uaWZ5L3V0aWxzL2xpYi9pY29uL21lcmdlLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGljb25pZnkvdXRpbHMvbGliL2ljb24vbmFtZS5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL0BpY29uaWZ5L3V0aWxzL2xpYi9pY29uL3RyYW5zZm9ybWF0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL0BpY29uaWZ5L3V0aWxzL2xpYi9zdmcvYnVpbGQubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AaWNvbmlmeS91dGlscy9saWIvc3ZnL2RlZnMubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AaWNvbmlmeS91dGlscy9saWIvc3ZnL2h0bWwubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AaWNvbmlmeS91dGlscy9saWIvc3ZnL2lkLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvQGljb25pZnkvdXRpbHMvbGliL3N2Zy9zaXplLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9kb21wdXJpZnkvZGlzdC9wdXJpZnkuZXMubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9jaGFubmVscy9pbmRleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMva2hyb21hL2Rpc3QvY2hhbm5lbHMvcmV1c2FibGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L2NoYW5uZWxzL3R5cGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L2NvbG9yL2hleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMva2hyb21hL2Rpc3QvY29sb3IvaHNsLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9jb2xvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMva2hyb21hL2Rpc3QvY29sb3Iva2V5d29yZC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMva2hyb21hL2Rpc3QvY29sb3IvcmdiLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L21ldGhvZHMvYWRqdXN0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9tZXRob2RzL2FkanVzdF9jaGFubmVsLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9tZXRob2RzL2NoYW5nZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMva2hyb21hL2Rpc3QvbWV0aG9kcy9kYXJrZW4uanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L21ldGhvZHMvaW52ZXJ0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9tZXRob2RzL2lzX2RhcmsuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L21ldGhvZHMvaXNfbGlnaHQuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L21ldGhvZHMvbGlnaHRlbi5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMva2hyb21hL2Rpc3QvbWV0aG9kcy9sdW1pbmFuY2UuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L21ldGhvZHMvbWl4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC9tZXRob2RzL3JnYmEuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L3V0aWxzL2NoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2tocm9tYS9kaXN0L3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC91dGlscy9sYW5nLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9raHJvbWEvZGlzdC91dGlscy91bml0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0RhdGFWaWV3LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0hhc2guanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTGlzdENhY2hlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19Qcm9taXNlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1NldC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TdGFjay5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19XZWFrTWFwLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FwcGx5LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzaWduTWVyZ2VWYWx1ZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VNZXJnZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWVyZ2VEZWVwLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VSZXN0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVUeXBlZEFycmF5LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TmF0aXZlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VGFnLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzSXRlcmF0ZWVDYWxsLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NhZmVHZXQuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2NvbnN0YW50LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXEuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2VPYmplY3QuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9tZW1vaXplLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay01Tk5OQUhOSS5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL21lcm1haWQvZGlzdC9jaHVua3MvbWVybWFpZC5jb3JlL2NodW5rLTZKUlA3S1pYLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbWVybWFpZC9kaXN0L2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstN0I2NzdRWUQubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1DM01RNUFOTS5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL21lcm1haWQvZGlzdC9jaHVua3MvbWVybWFpZC5jb3JlL2NodW5rLUgyRDJKUTNJLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbWVybWFpZC9kaXN0L2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstSFJVNkREQ0gubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1JSU1VRFNJNC5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL21lcm1haWQvZGlzdC9jaHVua3MvbWVybWFpZC5jb3JlL2NodW5rLUs1NTdONUlaLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbWVybWFpZC9kaXN0L2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstTzROSTZVTlUubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1UWUNCS0FKRS5tanMiLCJ3ZWJwYWNrOi8vQGp1cHl0ZXJsYWIvYXBwbGljYXRpb24tdG9wLy4vbm9kZV9tb2R1bGVzL21lcm1haWQvZGlzdC9jaHVua3MvbWVybWFpZC5jb3JlL2NodW5rLVZWM002N0lQLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvbWVybWFpZC9kaXN0L2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstWVRKTlQ3RFUubWpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9tZXJtYWlkL2Rpc3QvbWVybWFpZC5jb3JlLm1qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvcm91Z2hqcy9idW5kbGVkL3JvdWdoLmVzbS5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9FbnVtLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9TZXJpYWxpemVyLmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9AanVweXRlcmxhYi9hcHBsaWNhdGlvbi10b3AvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy90cy1kZWRlbnQvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CTEFOS19VUkwgPSBleHBvcnRzLnJlbGF0aXZlRmlyc3RDaGFyYWN0ZXJzID0gZXhwb3J0cy53aGl0ZXNwYWNlRXNjYXBlQ2hhcnNSZWdleCA9IGV4cG9ydHMudXJsU2NoZW1lUmVnZXggPSBleHBvcnRzLmN0cmxDaGFyYWN0ZXJzUmVnZXggPSBleHBvcnRzLmh0bWxDdHJsRW50aXR5UmVnZXggPSBleHBvcnRzLmh0bWxFbnRpdGllc1JlZ2V4ID0gZXhwb3J0cy5pbnZhbGlkUHJvdG9jb2xSZWdleCA9IHZvaWQgMDtcbmV4cG9ydHMuaW52YWxpZFByb3RvY29sUmVnZXggPSAvXihbXlxcd10qKShqYXZhc2NyaXB0fGRhdGF8dmJzY3JpcHQpL2ltO1xuZXhwb3J0cy5odG1sRW50aXRpZXNSZWdleCA9IC8mIyhcXHcrKSheXFx3fDspPy9nO1xuZXhwb3J0cy5odG1sQ3RybEVudGl0eVJlZ2V4ID0gLyYobmV3bGluZXx0YWIpOy9naTtcbmV4cG9ydHMuY3RybENoYXJhY3RlcnNSZWdleCA9IC9bXFx1MDAwMC1cXHUwMDFGXFx1MDA3Ri1cXHUwMDlGXFx1MjAwMC1cXHUyMDBEXFx1RkVGRl0vZ2ltO1xuZXhwb3J0cy51cmxTY2hlbWVSZWdleCA9IC9eLisoOnwmY29sb247KS9naW07XG5leHBvcnRzLndoaXRlc3BhY2VFc2NhcGVDaGFyc1JlZ2V4ID0gLyhcXFxcfCU1W2NDXSkoKCUoNltlRV18NzJ8NzQpKXxbbnJ0XSkvZztcbmV4cG9ydHMucmVsYXRpdmVGaXJzdENoYXJhY3RlcnMgPSBbXCIuXCIsIFwiL1wiXTtcbmV4cG9ydHMuQkxBTktfVVJMID0gXCJhYm91dDpibGFua1wiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNhbml0aXplVXJsID0gdm9pZCAwO1xudmFyIGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuZnVuY3Rpb24gaXNSZWxhdGl2ZVVybFdpdGhvdXRQcm90b2NvbCh1cmwpIHtcbiAgICByZXR1cm4gY29uc3RhbnRzXzEucmVsYXRpdmVGaXJzdENoYXJhY3RlcnMuaW5kZXhPZih1cmxbMF0pID4gLTE7XG59XG5mdW5jdGlvbiBkZWNvZGVIdG1sQ2hhcmFjdGVycyhzdHIpIHtcbiAgICB2YXIgcmVtb3ZlZE51bGxCeXRlID0gc3RyLnJlcGxhY2UoY29uc3RhbnRzXzEuY3RybENoYXJhY3RlcnNSZWdleCwgXCJcIik7XG4gICAgcmV0dXJuIHJlbW92ZWROdWxsQnl0ZS5yZXBsYWNlKGNvbnN0YW50c18xLmh0bWxFbnRpdGllc1JlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIGRlYykge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShkZWMpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNWYWxpZFVybCh1cmwpIHtcbiAgICByZXR1cm4gVVJMLmNhblBhcnNlKHVybCk7XG59XG5mdW5jdGlvbiBkZWNvZGVVUkkodXJpKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh1cmkpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZ25vcmluZyBlcnJvclxuICAgICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0aGF0IHRoZSBVUkkgY29udGFpbnMgYSBgJWAgbm90IGFzc29jaWF0ZWRcbiAgICAgICAgLy8gd2l0aCBVUkkvVVJMLWVuY29kaW5nLlxuICAgICAgICByZXR1cm4gdXJpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNhbml0aXplVXJsKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiBjb25zdGFudHNfMS5CTEFOS19VUkw7XG4gICAgfVxuICAgIHZhciBjaGFyc1RvRGVjb2RlO1xuICAgIHZhciBkZWNvZGVkVXJsID0gZGVjb2RlVVJJKHVybC50cmltKCkpO1xuICAgIGRvIHtcbiAgICAgICAgZGVjb2RlZFVybCA9IGRlY29kZUh0bWxDaGFyYWN0ZXJzKGRlY29kZWRVcmwpXG4gICAgICAgICAgICAucmVwbGFjZShjb25zdGFudHNfMS5odG1sQ3RybEVudGl0eVJlZ2V4LCBcIlwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoY29uc3RhbnRzXzEuY3RybENoYXJhY3RlcnNSZWdleCwgXCJcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKGNvbnN0YW50c18xLndoaXRlc3BhY2VFc2NhcGVDaGFyc1JlZ2V4LCBcIlwiKVxuICAgICAgICAgICAgLnRyaW0oKTtcbiAgICAgICAgZGVjb2RlZFVybCA9IGRlY29kZVVSSShkZWNvZGVkVXJsKTtcbiAgICAgICAgY2hhcnNUb0RlY29kZSA9XG4gICAgICAgICAgICBkZWNvZGVkVXJsLm1hdGNoKGNvbnN0YW50c18xLmN0cmxDaGFyYWN0ZXJzUmVnZXgpIHx8XG4gICAgICAgICAgICAgICAgZGVjb2RlZFVybC5tYXRjaChjb25zdGFudHNfMS5odG1sRW50aXRpZXNSZWdleCkgfHxcbiAgICAgICAgICAgICAgICBkZWNvZGVkVXJsLm1hdGNoKGNvbnN0YW50c18xLmh0bWxDdHJsRW50aXR5UmVnZXgpIHx8XG4gICAgICAgICAgICAgICAgZGVjb2RlZFVybC5tYXRjaChjb25zdGFudHNfMS53aGl0ZXNwYWNlRXNjYXBlQ2hhcnNSZWdleCk7XG4gICAgfSB3aGlsZSAoY2hhcnNUb0RlY29kZSAmJiBjaGFyc1RvRGVjb2RlLmxlbmd0aCA+IDApO1xuICAgIHZhciBzYW5pdGl6ZWRVcmwgPSBkZWNvZGVkVXJsO1xuICAgIGlmICghc2FuaXRpemVkVXJsKSB7XG4gICAgICAgIHJldHVybiBjb25zdGFudHNfMS5CTEFOS19VUkw7XG4gICAgfVxuICAgIGlmIChpc1JlbGF0aXZlVXJsV2l0aG91dFByb3RvY29sKHNhbml0aXplZFVybCkpIHtcbiAgICAgICAgcmV0dXJuIHNhbml0aXplZFVybDtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFueSBsZWFkaW5nIHdoaXRlc3BhY2UgYmVmb3JlIGNoZWNraW5nIHRoZSBVUkwgc2NoZW1lXG4gICAgdmFyIHRyaW1tZWRVcmwgPSBzYW5pdGl6ZWRVcmwudHJpbVN0YXJ0KCk7XG4gICAgdmFyIHVybFNjaGVtZVBhcnNlUmVzdWx0cyA9IHRyaW1tZWRVcmwubWF0Y2goY29uc3RhbnRzXzEudXJsU2NoZW1lUmVnZXgpO1xuICAgIGlmICghdXJsU2NoZW1lUGFyc2VSZXN1bHRzKSB7XG4gICAgICAgIHJldHVybiBzYW5pdGl6ZWRVcmw7XG4gICAgfVxuICAgIHZhciB1cmxTY2hlbWUgPSB1cmxTY2hlbWVQYXJzZVJlc3VsdHNbMF0udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgaWYgKGNvbnN0YW50c18xLmludmFsaWRQcm90b2NvbFJlZ2V4LnRlc3QodXJsU2NoZW1lKSkge1xuICAgICAgICByZXR1cm4gY29uc3RhbnRzXzEuQkxBTktfVVJMO1xuICAgIH1cbiAgICB2YXIgYmFja1Nhbml0aXplZCA9IHRyaW1tZWRVcmwucmVwbGFjZSgvXFxcXC9nLCBcIi9cIik7XG4gICAgLy8gSGFuZGxlIHNwZWNpYWwgY2FzZXMgZm9yIG1haWx0bzogYW5kIGN1c3RvbSBkZWVwLWxpbmsgcHJvdG9jb2xzXG4gICAgaWYgKHVybFNjaGVtZSA9PT0gXCJtYWlsdG86XCIgfHwgdXJsU2NoZW1lLmluY2x1ZGVzKFwiOi8vXCIpKSB7XG4gICAgICAgIHJldHVybiBiYWNrU2FuaXRpemVkO1xuICAgIH1cbiAgICAvLyBGb3IgaHR0cCBhbmQgaHR0cHMgVVJMcywgcGVyZm9ybSBhZGRpdGlvbmFsIHZhbGlkYXRpb25cbiAgICBpZiAodXJsU2NoZW1lID09PSBcImh0dHA6XCIgfHwgdXJsU2NoZW1lID09PSBcImh0dHBzOlwiKSB7XG4gICAgICAgIGlmICghaXNWYWxpZFVybChiYWNrU2FuaXRpemVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50c18xLkJMQU5LX1VSTDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsXzEgPSBuZXcgVVJMKGJhY2tTYW5pdGl6ZWQpO1xuICAgICAgICB1cmxfMS5wcm90b2NvbCA9IHVybF8xLnByb3RvY29sLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHVybF8xLmhvc3RuYW1lID0gdXJsXzEuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIHVybF8xLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBiYWNrU2FuaXRpemVkO1xufVxuZXhwb3J0cy5zYW5pdGl6ZVVybCA9IHNhbml0aXplVXJsO1xuIiwiaW1wb3J0IHsgZGVmYXVsdEljb25UcmFuc2Zvcm1hdGlvbnMgfSBmcm9tICcuLi9pY29uL2RlZmF1bHRzLm1qcyc7XG5cbmNvbnN0IGRlZmF1bHRJY29uU2l6ZUN1c3RvbWlzYXRpb25zID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGxcbn0pO1xuY29uc3QgZGVmYXVsdEljb25DdXN0b21pc2F0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xuICAvLyBEaW1lbnNpb25zXG4gIC4uLmRlZmF1bHRJY29uU2l6ZUN1c3RvbWlzYXRpb25zLFxuICAvLyBUcmFuc2Zvcm1hdGlvbnNcbiAgLi4uZGVmYXVsdEljb25UcmFuc2Zvcm1hdGlvbnNcbn0pO1xuXG5leHBvcnQgeyBkZWZhdWx0SWNvbkN1c3RvbWlzYXRpb25zLCBkZWZhdWx0SWNvblNpemVDdXN0b21pc2F0aW9ucyB9O1xuIiwiaW1wb3J0IHsgbWVyZ2VJY29uRGF0YSB9IGZyb20gJy4uL2ljb24vbWVyZ2UubWpzJztcbmltcG9ydCB7IGdldEljb25zVHJlZSB9IGZyb20gJy4vdHJlZS5tanMnO1xuaW1wb3J0ICcuLi9pY29uL2RlZmF1bHRzLm1qcyc7XG5pbXBvcnQgJy4uL2ljb24vdHJhbnNmb3JtYXRpb25zLm1qcyc7XG5cbmZ1bmN0aW9uIGludGVybmFsR2V0SWNvbkRhdGEoZGF0YSwgbmFtZSwgdHJlZSkge1xuICBjb25zdCBpY29ucyA9IGRhdGEuaWNvbnM7XG4gIGNvbnN0IGFsaWFzZXMgPSBkYXRhLmFsaWFzZXMgfHwgLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGxldCBjdXJyZW50UHJvcHMgPSB7fTtcbiAgZnVuY3Rpb24gcGFyc2UobmFtZTIpIHtcbiAgICBjdXJyZW50UHJvcHMgPSBtZXJnZUljb25EYXRhKFxuICAgICAgaWNvbnNbbmFtZTJdIHx8IGFsaWFzZXNbbmFtZTJdLFxuICAgICAgY3VycmVudFByb3BzXG4gICAgKTtcbiAgfVxuICBwYXJzZShuYW1lKTtcbiAgdHJlZS5mb3JFYWNoKHBhcnNlKTtcbiAgcmV0dXJuIG1lcmdlSWNvbkRhdGEoZGF0YSwgY3VycmVudFByb3BzKTtcbn1cbmZ1bmN0aW9uIGdldEljb25EYXRhKGRhdGEsIG5hbWUpIHtcbiAgaWYgKGRhdGEuaWNvbnNbbmFtZV0pIHtcbiAgICByZXR1cm4gaW50ZXJuYWxHZXRJY29uRGF0YShkYXRhLCBuYW1lLCBbXSk7XG4gIH1cbiAgY29uc3QgdHJlZSA9IGdldEljb25zVHJlZShkYXRhLCBbbmFtZV0pW25hbWVdO1xuICByZXR1cm4gdHJlZSA/IGludGVybmFsR2V0SWNvbkRhdGEoZGF0YSwgbmFtZSwgdHJlZSkgOiBudWxsO1xufVxuXG5leHBvcnQgeyBnZXRJY29uRGF0YSwgaW50ZXJuYWxHZXRJY29uRGF0YSB9O1xuIiwiZnVuY3Rpb24gZ2V0SWNvbnNUcmVlKGRhdGEsIG5hbWVzKSB7XG4gIGNvbnN0IGljb25zID0gZGF0YS5pY29ucztcbiAgY29uc3QgYWxpYXNlcyA9IGRhdGEuYWxpYXNlcyB8fCAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgcmVzb2x2ZWQgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZnVuY3Rpb24gcmVzb2x2ZShuYW1lKSB7XG4gICAgaWYgKGljb25zW25hbWVdKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZWRbbmFtZV0gPSBbXTtcbiAgICB9XG4gICAgaWYgKCEobmFtZSBpbiByZXNvbHZlZCkpIHtcbiAgICAgIHJlc29sdmVkW25hbWVdID0gbnVsbDtcbiAgICAgIGNvbnN0IHBhcmVudCA9IGFsaWFzZXNbbmFtZV0gJiYgYWxpYXNlc1tuYW1lXS5wYXJlbnQ7XG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcmVudCAmJiByZXNvbHZlKHBhcmVudCk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZWRbbmFtZV0gPSBbcGFyZW50XS5jb25jYXQodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRbbmFtZV07XG4gIH1cbiAgKG5hbWVzIHx8IE9iamVjdC5rZXlzKGljb25zKS5jb25jYXQoT2JqZWN0LmtleXMoYWxpYXNlcykpKS5mb3JFYWNoKHJlc29sdmUpO1xuICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5cbmV4cG9ydCB7IGdldEljb25zVHJlZSB9O1xuIiwiY29uc3QgZGVmYXVsdEljb25EaW1lbnNpb25zID0gT2JqZWN0LmZyZWV6ZShcbiAge1xuICAgIGxlZnQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIHdpZHRoOiAxNixcbiAgICBoZWlnaHQ6IDE2XG4gIH1cbik7XG5jb25zdCBkZWZhdWx0SWNvblRyYW5zZm9ybWF0aW9ucyA9IE9iamVjdC5mcmVlemUoe1xuICByb3RhdGU6IDAsXG4gIHZGbGlwOiBmYWxzZSxcbiAgaEZsaXA6IGZhbHNlXG59KTtcbmNvbnN0IGRlZmF1bHRJY29uUHJvcHMgPSBPYmplY3QuZnJlZXplKHtcbiAgLi4uZGVmYXVsdEljb25EaW1lbnNpb25zLFxuICAuLi5kZWZhdWx0SWNvblRyYW5zZm9ybWF0aW9uc1xufSk7XG5jb25zdCBkZWZhdWx0RXh0ZW5kZWRJY29uUHJvcHMgPSBPYmplY3QuZnJlZXplKHtcbiAgLi4uZGVmYXVsdEljb25Qcm9wcyxcbiAgYm9keTogXCJcIixcbiAgaGlkZGVuOiBmYWxzZVxufSk7XG5cbmV4cG9ydCB7IGRlZmF1bHRFeHRlbmRlZEljb25Qcm9wcywgZGVmYXVsdEljb25EaW1lbnNpb25zLCBkZWZhdWx0SWNvblByb3BzLCBkZWZhdWx0SWNvblRyYW5zZm9ybWF0aW9ucyB9O1xuIiwiaW1wb3J0IHsgZGVmYXVsdEV4dGVuZGVkSWNvblByb3BzLCBkZWZhdWx0SWNvblRyYW5zZm9ybWF0aW9ucyB9IGZyb20gJy4vZGVmYXVsdHMubWpzJztcbmltcG9ydCB7IG1lcmdlSWNvblRyYW5zZm9ybWF0aW9ucyB9IGZyb20gJy4vdHJhbnNmb3JtYXRpb25zLm1qcyc7XG5cbmZ1bmN0aW9uIG1lcmdlSWNvbkRhdGEocGFyZW50LCBjaGlsZCkge1xuICBjb25zdCByZXN1bHQgPSBtZXJnZUljb25UcmFuc2Zvcm1hdGlvbnMocGFyZW50LCBjaGlsZCk7XG4gIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRFeHRlbmRlZEljb25Qcm9wcykge1xuICAgIGlmIChrZXkgaW4gZGVmYXVsdEljb25UcmFuc2Zvcm1hdGlvbnMpIHtcbiAgICAgIGlmIChrZXkgaW4gcGFyZW50ICYmICEoa2V5IGluIHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBkZWZhdWx0SWNvblRyYW5zZm9ybWF0aW9uc1trZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoa2V5IGluIGNoaWxkKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGNoaWxkW2tleV07XG4gICAgfSBlbHNlIGlmIChrZXkgaW4gcGFyZW50KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHBhcmVudFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBtZXJnZUljb25EYXRhIH07XG4iLCJjb25zdCBtYXRjaEljb25OYW1lID0gL15bYS16MC05XSsoLVthLXowLTldKykqJC87XG5jb25zdCBzdHJpbmdUb0ljb24gPSAodmFsdWUsIHZhbGlkYXRlLCBhbGxvd1NpbXBsZU5hbWUsIHByb3ZpZGVyID0gXCJcIikgPT4ge1xuICBjb25zdCBjb2xvblNlcGFyYXRlZCA9IHZhbHVlLnNwbGl0KFwiOlwiKTtcbiAgaWYgKHZhbHVlLnNsaWNlKDAsIDEpID09PSBcIkBcIikge1xuICAgIGlmIChjb2xvblNlcGFyYXRlZC5sZW5ndGggPCAyIHx8IGNvbG9uU2VwYXJhdGVkLmxlbmd0aCA+IDMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwcm92aWRlciA9IGNvbG9uU2VwYXJhdGVkLnNoaWZ0KCkuc2xpY2UoMSk7XG4gIH1cbiAgaWYgKGNvbG9uU2VwYXJhdGVkLmxlbmd0aCA+IDMgfHwgIWNvbG9uU2VwYXJhdGVkLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChjb2xvblNlcGFyYXRlZC5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgbmFtZTIgPSBjb2xvblNlcGFyYXRlZC5wb3AoKTtcbiAgICBjb25zdCBwcmVmaXggPSBjb2xvblNlcGFyYXRlZC5wb3AoKTtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAvLyBBbGxvdyBwcm92aWRlciB3aXRob3V0ICdAJzogXCJwcm92aWRlcjpwcmVmaXg6bmFtZVwiXG4gICAgICBwcm92aWRlcjogY29sb25TZXBhcmF0ZWQubGVuZ3RoID4gMCA/IGNvbG9uU2VwYXJhdGVkWzBdIDogcHJvdmlkZXIsXG4gICAgICBwcmVmaXgsXG4gICAgICBuYW1lOiBuYW1lMlxuICAgIH07XG4gICAgcmV0dXJuIHZhbGlkYXRlICYmICF2YWxpZGF0ZUljb25OYW1lKHJlc3VsdCkgPyBudWxsIDogcmVzdWx0O1xuICB9XG4gIGNvbnN0IG5hbWUgPSBjb2xvblNlcGFyYXRlZFswXTtcbiAgY29uc3QgZGFzaFNlcGFyYXRlZCA9IG5hbWUuc3BsaXQoXCItXCIpO1xuICBpZiAoZGFzaFNlcGFyYXRlZC5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgcHJvdmlkZXIsXG4gICAgICBwcmVmaXg6IGRhc2hTZXBhcmF0ZWQuc2hpZnQoKSxcbiAgICAgIG5hbWU6IGRhc2hTZXBhcmF0ZWQuam9pbihcIi1cIilcbiAgICB9O1xuICAgIHJldHVybiB2YWxpZGF0ZSAmJiAhdmFsaWRhdGVJY29uTmFtZShyZXN1bHQpID8gbnVsbCA6IHJlc3VsdDtcbiAgfVxuICBpZiAoYWxsb3dTaW1wbGVOYW1lICYmIHByb3ZpZGVyID09PSBcIlwiKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgcHJvdmlkZXIsXG4gICAgICBwcmVmaXg6IFwiXCIsXG4gICAgICBuYW1lXG4gICAgfTtcbiAgICByZXR1cm4gdmFsaWRhdGUgJiYgIXZhbGlkYXRlSWNvbk5hbWUocmVzdWx0LCBhbGxvd1NpbXBsZU5hbWUpID8gbnVsbCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCB2YWxpZGF0ZUljb25OYW1lID0gKGljb24sIGFsbG93U2ltcGxlTmFtZSkgPT4ge1xuICBpZiAoIWljb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuICEhLy8gQ2hlY2sgcHJlZml4OiBjYW5ub3QgYmUgZW1wdHksIHVubGVzcyBhbGxvd1NpbXBsZU5hbWUgaXMgZW5hYmxlZFxuICAvLyBDaGVjayBuYW1lOiBjYW5ub3QgYmUgZW1wdHlcbiAgKChhbGxvd1NpbXBsZU5hbWUgJiYgaWNvbi5wcmVmaXggPT09IFwiXCIgfHwgISFpY29uLnByZWZpeCkgJiYgISFpY29uLm5hbWUpO1xufTtcblxuZXhwb3J0IHsgbWF0Y2hJY29uTmFtZSwgc3RyaW5nVG9JY29uLCB2YWxpZGF0ZUljb25OYW1lIH07XG4iLCJmdW5jdGlvbiBtZXJnZUljb25UcmFuc2Zvcm1hdGlvbnMob2JqMSwgb2JqMikge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgaWYgKCFvYmoxLmhGbGlwICE9PSAhb2JqMi5oRmxpcCkge1xuICAgIHJlc3VsdC5oRmxpcCA9IHRydWU7XG4gIH1cbiAgaWYgKCFvYmoxLnZGbGlwICE9PSAhb2JqMi52RmxpcCkge1xuICAgIHJlc3VsdC52RmxpcCA9IHRydWU7XG4gIH1cbiAgY29uc3Qgcm90YXRlID0gKChvYmoxLnJvdGF0ZSB8fCAwKSArIChvYmoyLnJvdGF0ZSB8fCAwKSkgJSA0O1xuICBpZiAocm90YXRlKSB7XG4gICAgcmVzdWx0LnJvdGF0ZSA9IHJvdGF0ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyBtZXJnZUljb25UcmFuc2Zvcm1hdGlvbnMgfTtcbiIsImltcG9ydCB7IGRlZmF1bHRJY29uUHJvcHMgfSBmcm9tICcuLi9pY29uL2RlZmF1bHRzLm1qcyc7XG5pbXBvcnQgeyBkZWZhdWx0SWNvbkN1c3RvbWlzYXRpb25zIH0gZnJvbSAnLi4vY3VzdG9taXNhdGlvbnMvZGVmYXVsdHMubWpzJztcbmltcG9ydCB7IGNhbGN1bGF0ZVNpemUgfSBmcm9tICcuL3NpemUubWpzJztcbmltcG9ydCB7IHdyYXBTVkdDb250ZW50IH0gZnJvbSAnLi9kZWZzLm1qcyc7XG5cbmNvbnN0IGlzVW5zZXRLZXl3b3JkID0gKHZhbHVlKSA9PiB2YWx1ZSA9PT0gXCJ1bnNldFwiIHx8IHZhbHVlID09PSBcInVuZGVmaW5lZFwiIHx8IHZhbHVlID09PSBcIm5vbmVcIjtcbmZ1bmN0aW9uIGljb25Ub1NWRyhpY29uLCBjdXN0b21pc2F0aW9ucykge1xuICBjb25zdCBmdWxsSWNvbiA9IHtcbiAgICAuLi5kZWZhdWx0SWNvblByb3BzLFxuICAgIC4uLmljb25cbiAgfTtcbiAgY29uc3QgZnVsbEN1c3RvbWlzYXRpb25zID0ge1xuICAgIC4uLmRlZmF1bHRJY29uQ3VzdG9taXNhdGlvbnMsXG4gICAgLi4uY3VzdG9taXNhdGlvbnNcbiAgfTtcbiAgY29uc3QgYm94ID0ge1xuICAgIGxlZnQ6IGZ1bGxJY29uLmxlZnQsXG4gICAgdG9wOiBmdWxsSWNvbi50b3AsXG4gICAgd2lkdGg6IGZ1bGxJY29uLndpZHRoLFxuICAgIGhlaWdodDogZnVsbEljb24uaGVpZ2h0XG4gIH07XG4gIGxldCBib2R5ID0gZnVsbEljb24uYm9keTtcbiAgW2Z1bGxJY29uLCBmdWxsQ3VzdG9taXNhdGlvbnNdLmZvckVhY2goKHByb3BzKSA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtYXRpb25zID0gW107XG4gICAgY29uc3QgaEZsaXAgPSBwcm9wcy5oRmxpcDtcbiAgICBjb25zdCB2RmxpcCA9IHByb3BzLnZGbGlwO1xuICAgIGxldCByb3RhdGlvbiA9IHByb3BzLnJvdGF0ZTtcbiAgICBpZiAoaEZsaXApIHtcbiAgICAgIGlmICh2RmxpcCkge1xuICAgICAgICByb3RhdGlvbiArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNmb3JtYXRpb25zLnB1c2goXG4gICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyAoYm94LndpZHRoICsgYm94LmxlZnQpLnRvU3RyaW5nKCkgKyBcIiBcIiArICgwIC0gYm94LnRvcCkudG9TdHJpbmcoKSArIFwiKVwiXG4gICAgICAgICk7XG4gICAgICAgIHRyYW5zZm9ybWF0aW9ucy5wdXNoKFwic2NhbGUoLTEgMSlcIik7XG4gICAgICAgIGJveC50b3AgPSBib3gubGVmdCA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2RmxpcCkge1xuICAgICAgdHJhbnNmb3JtYXRpb25zLnB1c2goXG4gICAgICAgIFwidHJhbnNsYXRlKFwiICsgKDAgLSBib3gubGVmdCkudG9TdHJpbmcoKSArIFwiIFwiICsgKGJveC5oZWlnaHQgKyBib3gudG9wKS50b1N0cmluZygpICsgXCIpXCJcbiAgICAgICk7XG4gICAgICB0cmFuc2Zvcm1hdGlvbnMucHVzaChcInNjYWxlKDEgLTEpXCIpO1xuICAgICAgYm94LnRvcCA9IGJveC5sZWZ0ID0gMDtcbiAgICB9XG4gICAgbGV0IHRlbXBWYWx1ZTtcbiAgICBpZiAocm90YXRpb24gPCAwKSB7XG4gICAgICByb3RhdGlvbiAtPSBNYXRoLmZsb29yKHJvdGF0aW9uIC8gNCkgKiA0O1xuICAgIH1cbiAgICByb3RhdGlvbiA9IHJvdGF0aW9uICUgNDtcbiAgICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHRlbXBWYWx1ZSA9IGJveC5oZWlnaHQgLyAyICsgYm94LnRvcDtcbiAgICAgICAgdHJhbnNmb3JtYXRpb25zLnVuc2hpZnQoXG4gICAgICAgICAgXCJyb3RhdGUoOTAgXCIgKyB0ZW1wVmFsdWUudG9TdHJpbmcoKSArIFwiIFwiICsgdGVtcFZhbHVlLnRvU3RyaW5nKCkgKyBcIilcIlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdHJhbnNmb3JtYXRpb25zLnVuc2hpZnQoXG4gICAgICAgICAgXCJyb3RhdGUoMTgwIFwiICsgKGJveC53aWR0aCAvIDIgKyBib3gubGVmdCkudG9TdHJpbmcoKSArIFwiIFwiICsgKGJveC5oZWlnaHQgLyAyICsgYm94LnRvcCkudG9TdHJpbmcoKSArIFwiKVwiXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICB0ZW1wVmFsdWUgPSBib3gud2lkdGggLyAyICsgYm94LmxlZnQ7XG4gICAgICAgIHRyYW5zZm9ybWF0aW9ucy51bnNoaWZ0KFxuICAgICAgICAgIFwicm90YXRlKC05MCBcIiArIHRlbXBWYWx1ZS50b1N0cmluZygpICsgXCIgXCIgKyB0ZW1wVmFsdWUudG9TdHJpbmcoKSArIFwiKVwiXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAocm90YXRpb24gJSAyID09PSAxKSB7XG4gICAgICBpZiAoYm94LmxlZnQgIT09IGJveC50b3ApIHtcbiAgICAgICAgdGVtcFZhbHVlID0gYm94LmxlZnQ7XG4gICAgICAgIGJveC5sZWZ0ID0gYm94LnRvcDtcbiAgICAgICAgYm94LnRvcCA9IHRlbXBWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChib3gud2lkdGggIT09IGJveC5oZWlnaHQpIHtcbiAgICAgICAgdGVtcFZhbHVlID0gYm94LndpZHRoO1xuICAgICAgICBib3gud2lkdGggPSBib3guaGVpZ2h0O1xuICAgICAgICBib3guaGVpZ2h0ID0gdGVtcFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHJhbnNmb3JtYXRpb25zLmxlbmd0aCkge1xuICAgICAgYm9keSA9IHdyYXBTVkdDb250ZW50KFxuICAgICAgICBib2R5LFxuICAgICAgICAnPGcgdHJhbnNmb3JtPVwiJyArIHRyYW5zZm9ybWF0aW9ucy5qb2luKFwiIFwiKSArICdcIj4nLFxuICAgICAgICBcIjwvZz5cIlxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjdXN0b21pc2F0aW9uc1dpZHRoID0gZnVsbEN1c3RvbWlzYXRpb25zLndpZHRoO1xuICBjb25zdCBjdXN0b21pc2F0aW9uc0hlaWdodCA9IGZ1bGxDdXN0b21pc2F0aW9ucy5oZWlnaHQ7XG4gIGNvbnN0IGJveFdpZHRoID0gYm94LndpZHRoO1xuICBjb25zdCBib3hIZWlnaHQgPSBib3guaGVpZ2h0O1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGlmIChjdXN0b21pc2F0aW9uc1dpZHRoID09PSBudWxsKSB7XG4gICAgaGVpZ2h0ID0gY3VzdG9taXNhdGlvbnNIZWlnaHQgPT09IG51bGwgPyBcIjFlbVwiIDogY3VzdG9taXNhdGlvbnNIZWlnaHQgPT09IFwiYXV0b1wiID8gYm94SGVpZ2h0IDogY3VzdG9taXNhdGlvbnNIZWlnaHQ7XG4gICAgd2lkdGggPSBjYWxjdWxhdGVTaXplKGhlaWdodCwgYm94V2lkdGggLyBib3hIZWlnaHQpO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gY3VzdG9taXNhdGlvbnNXaWR0aCA9PT0gXCJhdXRvXCIgPyBib3hXaWR0aCA6IGN1c3RvbWlzYXRpb25zV2lkdGg7XG4gICAgaGVpZ2h0ID0gY3VzdG9taXNhdGlvbnNIZWlnaHQgPT09IG51bGwgPyBjYWxjdWxhdGVTaXplKHdpZHRoLCBib3hIZWlnaHQgLyBib3hXaWR0aCkgOiBjdXN0b21pc2F0aW9uc0hlaWdodCA9PT0gXCJhdXRvXCIgPyBib3hIZWlnaHQgOiBjdXN0b21pc2F0aW9uc0hlaWdodDtcbiAgfVxuICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gIGNvbnN0IHNldEF0dHIgPSAocHJvcCwgdmFsdWUpID0+IHtcbiAgICBpZiAoIWlzVW5zZXRLZXl3b3JkKHZhbHVlKSkge1xuICAgICAgYXR0cmlidXRlc1twcm9wXSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9O1xuICBzZXRBdHRyKFwid2lkdGhcIiwgd2lkdGgpO1xuICBzZXRBdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gIGNvbnN0IHZpZXdCb3ggPSBbYm94LmxlZnQsIGJveC50b3AsIGJveFdpZHRoLCBib3hIZWlnaHRdO1xuICBhdHRyaWJ1dGVzLnZpZXdCb3ggPSB2aWV3Qm94LmpvaW4oXCIgXCIpO1xuICByZXR1cm4ge1xuICAgIGF0dHJpYnV0ZXMsXG4gICAgdmlld0JveCxcbiAgICBib2R5XG4gIH07XG59XG5cbmV4cG9ydCB7IGljb25Ub1NWRywgaXNVbnNldEtleXdvcmQgfTtcbiIsImZ1bmN0aW9uIHNwbGl0U1ZHRGVmcyhjb250ZW50LCB0YWcgPSBcImRlZnNcIikge1xuICBsZXQgZGVmcyA9IFwiXCI7XG4gIGNvbnN0IGluZGV4ID0gY29udGVudC5pbmRleE9mKFwiPFwiICsgdGFnKTtcbiAgd2hpbGUgKGluZGV4ID49IDApIHtcbiAgICBjb25zdCBzdGFydCA9IGNvbnRlbnQuaW5kZXhPZihcIj5cIiwgaW5kZXgpO1xuICAgIGNvbnN0IGVuZCA9IGNvbnRlbnQuaW5kZXhPZihcIjwvXCIgKyB0YWcpO1xuICAgIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGVuZEVuZCA9IGNvbnRlbnQuaW5kZXhPZihcIj5cIiwgZW5kKTtcbiAgICBpZiAoZW5kRW5kID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZnMgKz0gY29udGVudC5zbGljZShzdGFydCArIDEsIGVuZCkudHJpbSgpO1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDAsIGluZGV4KS50cmltKCkgKyBjb250ZW50LnNsaWNlKGVuZEVuZCArIDEpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGVmcyxcbiAgICBjb250ZW50XG4gIH07XG59XG5mdW5jdGlvbiBtZXJnZURlZnNBbmRDb250ZW50KGRlZnMsIGNvbnRlbnQpIHtcbiAgcmV0dXJuIGRlZnMgPyBcIjxkZWZzPlwiICsgZGVmcyArIFwiPC9kZWZzPlwiICsgY29udGVudCA6IGNvbnRlbnQ7XG59XG5mdW5jdGlvbiB3cmFwU1ZHQ29udGVudChib2R5LCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IHNwbGl0ID0gc3BsaXRTVkdEZWZzKGJvZHkpO1xuICByZXR1cm4gbWVyZ2VEZWZzQW5kQ29udGVudChzcGxpdC5kZWZzLCBzdGFydCArIHNwbGl0LmNvbnRlbnQgKyBlbmQpO1xufVxuXG5leHBvcnQgeyBtZXJnZURlZnNBbmRDb250ZW50LCBzcGxpdFNWR0RlZnMsIHdyYXBTVkdDb250ZW50IH07XG4iLCJmdW5jdGlvbiBpY29uVG9IVE1MKGJvZHksIGF0dHJpYnV0ZXMpIHtcbiAgbGV0IHJlbmRlckF0dHJpYnNIVE1MID0gYm9keS5pbmRleE9mKFwieGxpbms6XCIpID09PSAtMSA/IFwiXCIgOiAnIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiJztcbiAgZm9yIChjb25zdCBhdHRyIGluIGF0dHJpYnV0ZXMpIHtcbiAgICByZW5kZXJBdHRyaWJzSFRNTCArPSBcIiBcIiArIGF0dHIgKyAnPVwiJyArIGF0dHJpYnV0ZXNbYXR0cl0gKyAnXCInO1xuICB9XG4gIHJldHVybiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCInICsgcmVuZGVyQXR0cmlic0hUTUwgKyBcIj5cIiArIGJvZHkgKyBcIjwvc3ZnPlwiO1xufVxuXG5leHBvcnQgeyBpY29uVG9IVE1MIH07XG4iLCJjb25zdCByZWdleCA9IC9cXHNpZD1cIihcXFMrKVwiL2c7XG5jb25zdCByYW5kb21QcmVmaXggPSBcIkljb25pZnlJZFwiICsgRGF0ZS5ub3coKS50b1N0cmluZygxNikgKyAoTWF0aC5yYW5kb20oKSAqIDE2Nzc3MjE2IHwgMCkudG9TdHJpbmcoMTYpO1xubGV0IGNvdW50ZXIgPSAwO1xuZnVuY3Rpb24gcmVwbGFjZUlEcyhib2R5LCBwcmVmaXggPSByYW5kb21QcmVmaXgpIHtcbiAgY29uc3QgaWRzID0gW107XG4gIGxldCBtYXRjaDtcbiAgd2hpbGUgKG1hdGNoID0gcmVnZXguZXhlYyhib2R5KSkge1xuICAgIGlkcy5wdXNoKG1hdGNoWzFdKTtcbiAgfVxuICBpZiAoIWlkcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYm9keTtcbiAgfVxuICBjb25zdCBzdWZmaXggPSBcInN1ZmZpeFwiICsgKE1hdGgucmFuZG9tKCkgKiAxNjc3NzIxNiB8IERhdGUubm93KCkpLnRvU3RyaW5nKDE2KTtcbiAgaWRzLmZvckVhY2goKGlkKSA9PiB7XG4gICAgY29uc3QgbmV3SUQgPSB0eXBlb2YgcHJlZml4ID09PSBcImZ1bmN0aW9uXCIgPyBwcmVmaXgoaWQpIDogcHJlZml4ICsgKGNvdW50ZXIrKykudG9TdHJpbmcoKTtcbiAgICBjb25zdCBlc2NhcGVkSUQgPSBpZC5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgXCJcXFxcJCZcIik7XG4gICAgYm9keSA9IGJvZHkucmVwbGFjZShcbiAgICAgIC8vIEFsbG93ZWQgY2hhcmFjdGVycyBiZWZvcmUgaWQ6IFsjO1wiXVxuICAgICAgLy8gQWxsb3dlZCBjaGFyYWN0ZXJzIGFmdGVyIGlkOiBbKVwiXSwgLlthLXpdXG4gICAgICBuZXcgUmVnRXhwKCcoWyM7XCJdKSgnICsgZXNjYXBlZElEICsgJykoW1wiKV18XFxcXC5bYS16XSknLCBcImdcIiksXG4gICAgICBcIiQxXCIgKyBuZXdJRCArIHN1ZmZpeCArIFwiJDNcIlxuICAgICk7XG4gIH0pO1xuICBib2R5ID0gYm9keS5yZXBsYWNlKG5ldyBSZWdFeHAoc3VmZml4LCBcImdcIiksIFwiXCIpO1xuICByZXR1cm4gYm9keTtcbn1cblxuZXhwb3J0IHsgcmVwbGFjZUlEcyB9O1xuIiwiY29uc3QgdW5pdHNTcGxpdCA9IC8oLT9bMC05Ll0qWzAtOV0rWzAtOS5dKikvZztcbmNvbnN0IHVuaXRzVGVzdCA9IC9eLT9bMC05Ll0qWzAtOV0rWzAtOS5dKiQvZztcbmZ1bmN0aW9uIGNhbGN1bGF0ZVNpemUoc2l6ZSwgcmF0aW8sIHByZWNpc2lvbikge1xuICBpZiAocmF0aW8gPT09IDEpIHtcbiAgICByZXR1cm4gc2l6ZTtcbiAgfVxuICBwcmVjaXNpb24gPSBwcmVjaXNpb24gfHwgMTAwO1xuICBpZiAodHlwZW9mIHNpemUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHNpemUgKiByYXRpbyAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gIH1cbiAgaWYgKHR5cGVvZiBzaXplICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHNpemU7XG4gIH1cbiAgY29uc3Qgb2xkUGFydHMgPSBzaXplLnNwbGl0KHVuaXRzU3BsaXQpO1xuICBpZiAob2xkUGFydHMgPT09IG51bGwgfHwgIW9sZFBhcnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBzaXplO1xuICB9XG4gIGNvbnN0IG5ld1BhcnRzID0gW107XG4gIGxldCBjb2RlID0gb2xkUGFydHMuc2hpZnQoKTtcbiAgbGV0IGlzTnVtYmVyID0gdW5pdHNUZXN0LnRlc3QoY29kZSk7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGlzTnVtYmVyKSB7XG4gICAgICBjb25zdCBudW0gPSBwYXJzZUZsb2F0KGNvZGUpO1xuICAgICAgaWYgKGlzTmFOKG51bSkpIHtcbiAgICAgICAgbmV3UGFydHMucHVzaChjb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1BhcnRzLnB1c2goTWF0aC5jZWlsKG51bSAqIHJhdGlvICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1BhcnRzLnB1c2goY29kZSk7XG4gICAgfVxuICAgIGNvZGUgPSBvbGRQYXJ0cy5zaGlmdCgpO1xuICAgIGlmIChjb2RlID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBuZXdQYXJ0cy5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBpc051bWJlciA9ICFpc051bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgeyBjYWxjdWxhdGVTaXplIH07XG4iLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmRheWpzPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD0xZTMsZT02ZTQsbj0zNmU1LHI9XCJtaWxsaXNlY29uZFwiLGk9XCJzZWNvbmRcIixzPVwibWludXRlXCIsdT1cImhvdXJcIixhPVwiZGF5XCIsbz1cIndlZWtcIixjPVwibW9udGhcIixmPVwicXVhcnRlclwiLGg9XCJ5ZWFyXCIsZD1cImRhdGVcIixsPVwiSW52YWxpZCBEYXRlXCIsJD0vXihcXGR7NH0pWy0vXT8oXFxkezEsMn0pP1stL10/KFxcZHswLDJ9KVtUdFxcc10qKFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Oj8oXFxkezEsMn0pP1suOl0/KFxcZCspPyQvLHk9L1xcWyhbXlxcXV0rKV18WXsxLDR9fE17MSw0fXxEezEsMn18ZHsxLDR9fEh7MSwyfXxoezEsMn18YXxBfG17MSwyfXxzezEsMn18WnsxLDJ9fFNTUy9nLE09e25hbWU6XCJlblwiLHdlZWtkYXlzOlwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksbW9udGhzOlwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxvcmRpbmFsOmZ1bmN0aW9uKHQpe3ZhciBlPVtcInRoXCIsXCJzdFwiLFwibmRcIixcInJkXCJdLG49dCUxMDA7cmV0dXJuXCJbXCIrdCsoZVsobi0yMCklMTBdfHxlW25dfHxlWzBdKStcIl1cIn19LG09ZnVuY3Rpb24odCxlLG4pe3ZhciByPVN0cmluZyh0KTtyZXR1cm4hcnx8ci5sZW5ndGg+PWU/dDpcIlwiK0FycmF5KGUrMS1yLmxlbmd0aCkuam9pbihuKSt0fSx2PXtzOm0sejpmdW5jdGlvbih0KXt2YXIgZT0tdC51dGNPZmZzZXQoKSxuPU1hdGguYWJzKGUpLHI9TWF0aC5mbG9vcihuLzYwKSxpPW4lNjA7cmV0dXJuKGU8PTA/XCIrXCI6XCItXCIpK20ociwyLFwiMFwiKStcIjpcIittKGksMixcIjBcIil9LG06ZnVuY3Rpb24gdChlLG4pe2lmKGUuZGF0ZSgpPG4uZGF0ZSgpKXJldHVybi10KG4sZSk7dmFyIHI9MTIqKG4ueWVhcigpLWUueWVhcigpKSsobi5tb250aCgpLWUubW9udGgoKSksaT1lLmNsb25lKCkuYWRkKHIsYykscz1uLWk8MCx1PWUuY2xvbmUoKS5hZGQocisocz8tMToxKSxjKTtyZXR1cm4rKC0ocisobi1pKS8ocz9pLXU6dS1pKSl8fDApfSxhOmZ1bmN0aW9uKHQpe3JldHVybiB0PDA/TWF0aC5jZWlsKHQpfHwwOk1hdGguZmxvb3IodCl9LHA6ZnVuY3Rpb24odCl7cmV0dXJue006Yyx5OmgsdzpvLGQ6YSxEOmQsaDp1LG06cyxzOmksbXM6cixROmZ9W3RdfHxTdHJpbmcodHx8XCJcIikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9zJC8sXCJcIil9LHU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXR9fSxnPVwiZW5cIixEPXt9O0RbZ109TTt2YXIgcD1cIiRpc0RheWpzT2JqZWN0XCIsUz1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIF98fCEoIXR8fCF0W3BdKX0sdz1mdW5jdGlvbiB0KGUsbixyKXt2YXIgaTtpZighZSlyZXR1cm4gZztpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7dmFyIHM9ZS50b0xvd2VyQ2FzZSgpO0Rbc10mJihpPXMpLG4mJihEW3NdPW4saT1zKTt2YXIgdT1lLnNwbGl0KFwiLVwiKTtpZighaSYmdS5sZW5ndGg+MSlyZXR1cm4gdCh1WzBdKX1lbHNle3ZhciBhPWUubmFtZTtEW2FdPWUsaT1hfXJldHVybiFyJiZpJiYoZz1pKSxpfHwhciYmZ30sTz1mdW5jdGlvbih0LGUpe2lmKFModCkpcmV0dXJuIHQuY2xvbmUoKTt2YXIgbj1cIm9iamVjdFwiPT10eXBlb2YgZT9lOnt9O3JldHVybiBuLmRhdGU9dCxuLmFyZ3M9YXJndW1lbnRzLG5ldyBfKG4pfSxiPXY7Yi5sPXcsYi5pPVMsYi53PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE8odCx7bG9jYWxlOmUuJEwsdXRjOmUuJHUseDplLiR4LCRvZmZzZXQ6ZS4kb2Zmc2V0fSl9O3ZhciBfPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gTSh0KXt0aGlzLiRMPXcodC5sb2NhbGUsbnVsbCwhMCksdGhpcy5wYXJzZSh0KSx0aGlzLiR4PXRoaXMuJHh8fHQueHx8e30sdGhpc1twXT0hMH12YXIgbT1NLnByb3RvdHlwZTtyZXR1cm4gbS5wYXJzZT1mdW5jdGlvbih0KXt0aGlzLiRkPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0ZSxuPXQudXRjO2lmKG51bGw9PT1lKXJldHVybiBuZXcgRGF0ZShOYU4pO2lmKGIudShlKSlyZXR1cm4gbmV3IERhdGU7aWYoZSBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKGUpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlJiYhL1okL2kudGVzdChlKSl7dmFyIHI9ZS5tYXRjaCgkKTtpZihyKXt2YXIgaT1yWzJdLTF8fDAscz0ocls3XXx8XCIwXCIpLnN1YnN0cmluZygwLDMpO3JldHVybiBuP25ldyBEYXRlKERhdGUuVVRDKHJbMV0saSxyWzNdfHwxLHJbNF18fDAscls1XXx8MCxyWzZdfHwwLHMpKTpuZXcgRGF0ZShyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKX19cmV0dXJuIG5ldyBEYXRlKGUpfSh0KSx0aGlzLmluaXQoKX0sbS5pbml0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kZDt0aGlzLiR5PXQuZ2V0RnVsbFllYXIoKSx0aGlzLiRNPXQuZ2V0TW9udGgoKSx0aGlzLiREPXQuZ2V0RGF0ZSgpLHRoaXMuJFc9dC5nZXREYXkoKSx0aGlzLiRIPXQuZ2V0SG91cnMoKSx0aGlzLiRtPXQuZ2V0TWludXRlcygpLHRoaXMuJHM9dC5nZXRTZWNvbmRzKCksdGhpcy4kbXM9dC5nZXRNaWxsaXNlY29uZHMoKX0sbS4kdXRpbHM9ZnVuY3Rpb24oKXtyZXR1cm4gYn0sbS5pc1ZhbGlkPWZ1bmN0aW9uKCl7cmV0dXJuISh0aGlzLiRkLnRvU3RyaW5nKCk9PT1sKX0sbS5pc1NhbWU9ZnVuY3Rpb24odCxlKXt2YXIgbj1PKHQpO3JldHVybiB0aGlzLnN0YXJ0T2YoZSk8PW4mJm48PXRoaXMuZW5kT2YoZSl9LG0uaXNBZnRlcj1mdW5jdGlvbih0LGUpe3JldHVybiBPKHQpPHRoaXMuc3RhcnRPZihlKX0sbS5pc0JlZm9yZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmVuZE9mKGUpPE8odCl9LG0uJGc9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBiLnUodCk/dGhpc1tlXTp0aGlzLnNldChuLHQpfSxtLnVuaXg9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcih0aGlzLnZhbHVlT2YoKS8xZTMpfSxtLnZhbHVlT2Y9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC5nZXRUaW1lKCl9LG0uc3RhcnRPZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMscj0hIWIudShlKXx8ZSxmPWIucCh0KSxsPWZ1bmN0aW9uKHQsZSl7dmFyIGk9Yi53KG4uJHU/RGF0ZS5VVEMobi4keSxlLHQpOm5ldyBEYXRlKG4uJHksZSx0KSxuKTtyZXR1cm4gcj9pOmkuZW5kT2YoYSl9LCQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gYi53KG4udG9EYXRlKClbdF0uYXBwbHkobi50b0RhdGUoXCJzXCIpLChyP1swLDAsMCwwXTpbMjMsNTksNTksOTk5XSkuc2xpY2UoZSkpLG4pfSx5PXRoaXMuJFcsTT10aGlzLiRNLG09dGhpcy4kRCx2PVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKTtzd2l0Y2goZil7Y2FzZSBoOnJldHVybiByP2woMSwwKTpsKDMxLDExKTtjYXNlIGM6cmV0dXJuIHI/bCgxLE0pOmwoMCxNKzEpO2Nhc2Ugbzp2YXIgZz10aGlzLiRsb2NhbGUoKS53ZWVrU3RhcnR8fDAsRD0oeTxnP3krNzp5KS1nO3JldHVybiBsKHI/bS1EOm0rKDYtRCksTSk7Y2FzZSBhOmNhc2UgZDpyZXR1cm4gJCh2K1wiSG91cnNcIiwwKTtjYXNlIHU6cmV0dXJuICQoditcIk1pbnV0ZXNcIiwxKTtjYXNlIHM6cmV0dXJuICQoditcIlNlY29uZHNcIiwyKTtjYXNlIGk6cmV0dXJuICQoditcIk1pbGxpc2Vjb25kc1wiLDMpO2RlZmF1bHQ6cmV0dXJuIHRoaXMuY2xvbmUoKX19LG0uZW5kT2Y9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RhcnRPZih0LCExKX0sbS4kc2V0PWZ1bmN0aW9uKHQsZSl7dmFyIG4sbz1iLnAodCksZj1cInNldFwiKyh0aGlzLiR1P1wiVVRDXCI6XCJcIiksbD0obj17fSxuW2FdPWYrXCJEYXRlXCIsbltkXT1mK1wiRGF0ZVwiLG5bY109ZitcIk1vbnRoXCIsbltoXT1mK1wiRnVsbFllYXJcIixuW3VdPWYrXCJIb3Vyc1wiLG5bc109ZitcIk1pbnV0ZXNcIixuW2ldPWYrXCJTZWNvbmRzXCIsbltyXT1mK1wiTWlsbGlzZWNvbmRzXCIsbilbb10sJD1vPT09YT90aGlzLiREKyhlLXRoaXMuJFcpOmU7aWYobz09PWN8fG89PT1oKXt2YXIgeT10aGlzLmNsb25lKCkuc2V0KGQsMSk7eS4kZFtsXSgkKSx5LmluaXQoKSx0aGlzLiRkPXkuc2V0KGQsTWF0aC5taW4odGhpcy4kRCx5LmRheXNJbk1vbnRoKCkpKS4kZH1lbHNlIGwmJnRoaXMuJGRbbF0oJCk7cmV0dXJuIHRoaXMuaW5pdCgpLHRoaXN9LG0uc2V0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuY2xvbmUoKS4kc2V0KHQsZSl9LG0uZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzW2IucCh0KV0oKX0sbS5hZGQ9ZnVuY3Rpb24ocixmKXt2YXIgZCxsPXRoaXM7cj1OdW1iZXIocik7dmFyICQ9Yi5wKGYpLHk9ZnVuY3Rpb24odCl7dmFyIGU9TyhsKTtyZXR1cm4gYi53KGUuZGF0ZShlLmRhdGUoKStNYXRoLnJvdW5kKHQqcikpLGwpfTtpZigkPT09YylyZXR1cm4gdGhpcy5zZXQoYyx0aGlzLiRNK3IpO2lmKCQ9PT1oKXJldHVybiB0aGlzLnNldChoLHRoaXMuJHkrcik7aWYoJD09PWEpcmV0dXJuIHkoMSk7aWYoJD09PW8pcmV0dXJuIHkoNyk7dmFyIE09KGQ9e30sZFtzXT1lLGRbdV09bixkW2ldPXQsZClbJF18fDEsbT10aGlzLiRkLmdldFRpbWUoKStyKk07cmV0dXJuIGIudyhtLHRoaXMpfSxtLnN1YnRyYWN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYWRkKC0xKnQsZSl9LG0uZm9ybWF0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLiRsb2NhbGUoKTtpZighdGhpcy5pc1ZhbGlkKCkpcmV0dXJuIG4uaW52YWxpZERhdGV8fGw7dmFyIHI9dHx8XCJZWVlZLU1NLUREVEhIOm1tOnNzWlwiLGk9Yi56KHRoaXMpLHM9dGhpcy4kSCx1PXRoaXMuJG0sYT10aGlzLiRNLG89bi53ZWVrZGF5cyxjPW4ubW9udGhzLGY9bi5tZXJpZGllbSxoPWZ1bmN0aW9uKHQsbixpLHMpe3JldHVybiB0JiYodFtuXXx8dChlLHIpKXx8aVtuXS5zbGljZSgwLHMpfSxkPWZ1bmN0aW9uKHQpe3JldHVybiBiLnMocyUxMnx8MTIsdCxcIjBcIil9LCQ9Znx8ZnVuY3Rpb24odCxlLG4pe3ZhciByPXQ8MTI/XCJBTVwiOlwiUE1cIjtyZXR1cm4gbj9yLnRvTG93ZXJDYXNlKCk6cn07cmV0dXJuIHIucmVwbGFjZSh5LChmdW5jdGlvbih0LHIpe3JldHVybiByfHxmdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZVwiWVlcIjpyZXR1cm4gU3RyaW5nKGUuJHkpLnNsaWNlKC0yKTtjYXNlXCJZWVlZXCI6cmV0dXJuIGIucyhlLiR5LDQsXCIwXCIpO2Nhc2VcIk1cIjpyZXR1cm4gYSsxO2Nhc2VcIk1NXCI6cmV0dXJuIGIucyhhKzEsMixcIjBcIik7Y2FzZVwiTU1NXCI6cmV0dXJuIGgobi5tb250aHNTaG9ydCxhLGMsMyk7Y2FzZVwiTU1NTVwiOnJldHVybiBoKGMsYSk7Y2FzZVwiRFwiOnJldHVybiBlLiREO2Nhc2VcIkREXCI6cmV0dXJuIGIucyhlLiRELDIsXCIwXCIpO2Nhc2VcImRcIjpyZXR1cm4gU3RyaW5nKGUuJFcpO2Nhc2VcImRkXCI6cmV0dXJuIGgobi53ZWVrZGF5c01pbixlLiRXLG8sMik7Y2FzZVwiZGRkXCI6cmV0dXJuIGgobi53ZWVrZGF5c1Nob3J0LGUuJFcsbywzKTtjYXNlXCJkZGRkXCI6cmV0dXJuIG9bZS4kV107Y2FzZVwiSFwiOnJldHVybiBTdHJpbmcocyk7Y2FzZVwiSEhcIjpyZXR1cm4gYi5zKHMsMixcIjBcIik7Y2FzZVwiaFwiOnJldHVybiBkKDEpO2Nhc2VcImhoXCI6cmV0dXJuIGQoMik7Y2FzZVwiYVwiOnJldHVybiAkKHMsdSwhMCk7Y2FzZVwiQVwiOnJldHVybiAkKHMsdSwhMSk7Y2FzZVwibVwiOnJldHVybiBTdHJpbmcodSk7Y2FzZVwibW1cIjpyZXR1cm4gYi5zKHUsMixcIjBcIik7Y2FzZVwic1wiOnJldHVybiBTdHJpbmcoZS4kcyk7Y2FzZVwic3NcIjpyZXR1cm4gYi5zKGUuJHMsMixcIjBcIik7Y2FzZVwiU1NTXCI6cmV0dXJuIGIucyhlLiRtcywzLFwiMFwiKTtjYXNlXCJaXCI6cmV0dXJuIGl9cmV0dXJuIG51bGx9KHQpfHxpLnJlcGxhY2UoXCI6XCIsXCJcIil9KSl9LG0udXRjT2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuIDE1Ki1NYXRoLnJvdW5kKHRoaXMuJGQuZ2V0VGltZXpvbmVPZmZzZXQoKS8xNSl9LG0uZGlmZj1mdW5jdGlvbihyLGQsbCl7dmFyICQseT10aGlzLE09Yi5wKGQpLG09TyhyKSx2PShtLnV0Y09mZnNldCgpLXRoaXMudXRjT2Zmc2V0KCkpKmUsZz10aGlzLW0sRD1mdW5jdGlvbigpe3JldHVybiBiLm0oeSxtKX07c3dpdGNoKE0pe2Nhc2UgaDokPUQoKS8xMjticmVhaztjYXNlIGM6JD1EKCk7YnJlYWs7Y2FzZSBmOiQ9RCgpLzM7YnJlYWs7Y2FzZSBvOiQ9KGctdikvNjA0OGU1O2JyZWFrO2Nhc2UgYTokPShnLXYpLzg2NGU1O2JyZWFrO2Nhc2UgdTokPWcvbjticmVhaztjYXNlIHM6JD1nL2U7YnJlYWs7Y2FzZSBpOiQ9Zy90O2JyZWFrO2RlZmF1bHQ6JD1nfXJldHVybiBsPyQ6Yi5hKCQpfSxtLmRheXNJbk1vbnRoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kT2YoYykuJER9LG0uJGxvY2FsZT1mdW5jdGlvbigpe3JldHVybiBEW3RoaXMuJExdfSxtLmxvY2FsZT1mdW5jdGlvbih0LGUpe2lmKCF0KXJldHVybiB0aGlzLiRMO3ZhciBuPXRoaXMuY2xvbmUoKSxyPXcodCxlLCEwKTtyZXR1cm4gciYmKG4uJEw9ciksbn0sbS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBiLncodGhpcy4kZCx0aGlzKX0sbS50b0RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpfSxtLnRvSlNPTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmlzVmFsaWQoKT90aGlzLnRvSVNPU3RyaW5nKCk6bnVsbH0sbS50b0lTT1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLnRvSVNPU3RyaW5nKCl9LG0udG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b1VUQ1N0cmluZygpfSxNfSgpLGs9Xy5wcm90b3R5cGU7cmV0dXJuIE8ucHJvdG90eXBlPWssW1tcIiRtc1wiLHJdLFtcIiRzXCIsaV0sW1wiJG1cIixzXSxbXCIkSFwiLHVdLFtcIiRXXCIsYV0sW1wiJE1cIixjXSxbXCIkeVwiLGhdLFtcIiREXCIsZF1dLmZvckVhY2goKGZ1bmN0aW9uKHQpe2tbdFsxXV09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuJGcoZSx0WzBdLHRbMV0pfX0pKSxPLmV4dGVuZD1mdW5jdGlvbih0LGUpe3JldHVybiB0LiRpfHwodChlLF8sTyksdC4kaT0hMCksT30sTy5sb2NhbGU9dyxPLmlzRGF5anM9UyxPLnVuaXg9ZnVuY3Rpb24odCl7cmV0dXJuIE8oMWUzKnQpfSxPLmVuPURbZ10sTy5Mcz1ELE8ucD17fSxPfSkpOyIsIi8qISBAbGljZW5zZSBET01QdXJpZnkgMy4yLjQgfCAoYykgQ3VyZTUzIGFuZCBvdGhlciBjb250cmlidXRvcnMgfCBSZWxlYXNlZCB1bmRlciB0aGUgQXBhY2hlIGxpY2Vuc2UgMi4wIGFuZCBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlIDIuMCB8IGdpdGh1Yi5jb20vY3VyZTUzL0RPTVB1cmlmeS9ibG9iLzMuMi40L0xJQ0VOU0UgKi9cblxuY29uc3Qge1xuICBlbnRyaWVzLFxuICBzZXRQcm90b3R5cGVPZixcbiAgaXNGcm96ZW4sXG4gIGdldFByb3RvdHlwZU9mLFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0gPSBPYmplY3Q7XG5sZXQge1xuICBmcmVlemUsXG4gIHNlYWwsXG4gIGNyZWF0ZVxufSA9IE9iamVjdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBpbXBvcnQvbm8tbXV0YWJsZS1leHBvcnRzXG5sZXQge1xuICBhcHBseSxcbiAgY29uc3RydWN0XG59ID0gdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3Q7XG5pZiAoIWZyZWV6ZSkge1xuICBmcmVlemUgPSBmdW5jdGlvbiBmcmVlemUoeCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuaWYgKCFzZWFsKSB7XG4gIHNlYWwgPSBmdW5jdGlvbiBzZWFsKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbmlmICghYXBwbHkpIHtcbiAgYXBwbHkgPSBmdW5jdGlvbiBhcHBseShmdW4sIHRoaXNWYWx1ZSwgYXJncykge1xuICAgIHJldHVybiBmdW4uYXBwbHkodGhpc1ZhbHVlLCBhcmdzKTtcbiAgfTtcbn1cbmlmICghY29uc3RydWN0KSB7XG4gIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIGNvbnN0cnVjdChGdW5jLCBhcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBGdW5jKC4uLmFyZ3MpO1xuICB9O1xufVxuY29uc3QgYXJyYXlGb3JFYWNoID0gdW5hcHBseShBcnJheS5wcm90b3R5cGUuZm9yRWFjaCk7XG5jb25zdCBhcnJheUxhc3RJbmRleE9mID0gdW5hcHBseShBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YpO1xuY29uc3QgYXJyYXlQb3AgPSB1bmFwcGx5KEFycmF5LnByb3RvdHlwZS5wb3ApO1xuY29uc3QgYXJyYXlQdXNoID0gdW5hcHBseShBcnJheS5wcm90b3R5cGUucHVzaCk7XG5jb25zdCBhcnJheVNwbGljZSA9IHVuYXBwbHkoQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG5jb25zdCBzdHJpbmdUb0xvd2VyQ2FzZSA9IHVuYXBwbHkoU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZSk7XG5jb25zdCBzdHJpbmdUb1N0cmluZyA9IHVuYXBwbHkoU3RyaW5nLnByb3RvdHlwZS50b1N0cmluZyk7XG5jb25zdCBzdHJpbmdNYXRjaCA9IHVuYXBwbHkoU3RyaW5nLnByb3RvdHlwZS5tYXRjaCk7XG5jb25zdCBzdHJpbmdSZXBsYWNlID0gdW5hcHBseShTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xuY29uc3Qgc3RyaW5nSW5kZXhPZiA9IHVuYXBwbHkoU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mKTtcbmNvbnN0IHN0cmluZ1RyaW0gPSB1bmFwcGx5KFN0cmluZy5wcm90b3R5cGUudHJpbSk7XG5jb25zdCBvYmplY3RIYXNPd25Qcm9wZXJ0eSA9IHVuYXBwbHkoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5jb25zdCByZWdFeHBUZXN0ID0gdW5hcHBseShSZWdFeHAucHJvdG90eXBlLnRlc3QpO1xuY29uc3QgdHlwZUVycm9yQ3JlYXRlID0gdW5jb25zdHJ1Y3QoVHlwZUVycm9yKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZSBnaXZlbiBmdW5jdGlvbiB3aXRoIGEgc3BlY2lmaWVkIHRoaXNBcmcgYW5kIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbiB0byBiZSB3cmFwcGVkIGFuZCBjYWxsZWQuXG4gKiBAcmV0dXJucyBBIG5ldyBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZSBnaXZlbiBmdW5jdGlvbiB3aXRoIGEgc3BlY2lmaWVkIHRoaXNBcmcgYW5kIGFyZ3VtZW50cy5cbiAqL1xuZnVuY3Rpb24gdW5hcHBseShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhpc0FyZykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncyk7XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZnVuY3Rpb24gdGhhdCBjb25zdHJ1Y3RzIGFuIGluc3RhbmNlIG9mIHRoZSBnaXZlbiBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIGZ1bmMgLSBUaGUgY29uc3RydWN0b3IgZnVuY3Rpb24gdG8gYmUgd3JhcHBlZCBhbmQgY2FsbGVkLlxuICogQHJldHVybnMgQSBuZXcgZnVuY3Rpb24gdGhhdCBjb25zdHJ1Y3RzIGFuIGluc3RhbmNlIG9mIHRoZSBnaXZlbiBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIHVuY29uc3RydWN0KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdChmdW5jLCBhcmdzKTtcbiAgfTtcbn1cbi8qKlxuICogQWRkIHByb3BlcnRpZXMgdG8gYSBsb29rdXAgdGFibGVcbiAqXG4gKiBAcGFyYW0gc2V0IC0gVGhlIHNldCB0byB3aGljaCBlbGVtZW50cyB3aWxsIGJlIGFkZGVkLlxuICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5IGNvbnRhaW5pbmcgZWxlbWVudHMgdG8gYmUgYWRkZWQgdG8gdGhlIHNldC5cbiAqIEBwYXJhbSB0cmFuc2Zvcm1DYXNlRnVuYyAtIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSB0aGUgY2FzZSBvZiBlYWNoIGVsZW1lbnQgYmVmb3JlIGFkZGluZyB0byB0aGUgc2V0LlxuICogQHJldHVybnMgVGhlIG1vZGlmaWVkIHNldCB3aXRoIGFkZGVkIGVsZW1lbnRzLlxuICovXG5mdW5jdGlvbiBhZGRUb1NldChzZXQsIGFycmF5KSB7XG4gIGxldCB0cmFuc2Zvcm1DYXNlRnVuYyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogc3RyaW5nVG9Mb3dlckNhc2U7XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIC8vIE1ha2UgJ2luJyBhbmQgdHJ1dGh5IGNoZWNrcyBsaWtlIEJvb2xlYW4oc2V0LmNvbnN0cnVjdG9yKVxuICAgIC8vIGluZGVwZW5kZW50IG9mIGFueSBwcm9wZXJ0aWVzIGRlZmluZWQgb24gT2JqZWN0LnByb3RvdHlwZS5cbiAgICAvLyBQcmV2ZW50IHByb3RvdHlwZSBzZXR0ZXJzIGZyb20gaW50ZXJjZXB0aW5nIHNldCBhcyBhIHRoaXMgdmFsdWUuXG4gICAgc2V0UHJvdG90eXBlT2Yoc2V0LCBudWxsKTtcbiAgfVxuICBsZXQgbCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGwtLSkge1xuICAgIGxldCBlbGVtZW50ID0gYXJyYXlbbF07XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgbGNFbGVtZW50ID0gdHJhbnNmb3JtQ2FzZUZ1bmMoZWxlbWVudCk7XG4gICAgICBpZiAobGNFbGVtZW50ICE9PSBlbGVtZW50KSB7XG4gICAgICAgIC8vIENvbmZpZyBwcmVzZXRzIChlLmcuIHRhZ3MuanMsIGF0dHJzLmpzKSBhcmUgaW1tdXRhYmxlLlxuICAgICAgICBpZiAoIWlzRnJvemVuKGFycmF5KSkge1xuICAgICAgICAgIGFycmF5W2xdID0gbGNFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQgPSBsY0VsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHNldFtlbGVtZW50XSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn1cbi8qKlxuICogQ2xlYW4gdXAgYW4gYXJyYXkgdG8gaGFyZGVuIGFnYWluc3QgQ1NQUFxuICpcbiAqIEBwYXJhbSBhcnJheSAtIFRoZSBhcnJheSB0byBiZSBjbGVhbmVkLlxuICogQHJldHVybnMgVGhlIGNsZWFuZWQgdmVyc2lvbiBvZiB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gY2xlYW5BcnJheShhcnJheSkge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgaXNQcm9wZXJ0eUV4aXN0ID0gb2JqZWN0SGFzT3duUHJvcGVydHkoYXJyYXksIGluZGV4KTtcbiAgICBpZiAoIWlzUHJvcGVydHlFeGlzdCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuLyoqXG4gKiBTaGFsbG93IGNsb25lIGFuIG9iamVjdFxuICpcbiAqIEBwYXJhbSBvYmplY3QgLSBUaGUgb2JqZWN0IHRvIGJlIGNsb25lZC5cbiAqIEByZXR1cm5zIEEgbmV3IG9iamVjdCB0aGF0IGNvcGllcyB0aGUgb3JpZ2luYWwuXG4gKi9cbmZ1bmN0aW9uIGNsb25lKG9iamVjdCkge1xuICBjb25zdCBuZXdPYmplY3QgPSBjcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3QgW3Byb3BlcnR5LCB2YWx1ZV0gb2YgZW50cmllcyhvYmplY3QpKSB7XG4gICAgY29uc3QgaXNQcm9wZXJ0eUV4aXN0ID0gb2JqZWN0SGFzT3duUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgaWYgKGlzUHJvcGVydHlFeGlzdCkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIG5ld09iamVjdFtwcm9wZXJ0eV0gPSBjbGVhbkFycmF5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIG5ld09iamVjdFtwcm9wZXJ0eV0gPSBjbG9uZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdPYmplY3RbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdPYmplY3Q7XG59XG4vKipcbiAqIFRoaXMgbWV0aG9kIGF1dG9tYXRpY2FsbHkgY2hlY2tzIGlmIHRoZSBwcm9wIGlzIGZ1bmN0aW9uIG9yIGdldHRlciBhbmQgYmVoYXZlcyBhY2NvcmRpbmdseS5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IC0gVGhlIG9iamVjdCB0byBsb29rIHVwIHRoZSBnZXR0ZXIgZnVuY3Rpb24gaW4gaXRzIHByb3RvdHlwZSBjaGFpbi5cbiAqIEBwYXJhbSBwcm9wIC0gVGhlIHByb3BlcnR5IG5hbWUgZm9yIHdoaWNoIHRvIGZpbmQgdGhlIGdldHRlciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBnZXR0ZXIgZnVuY3Rpb24gZm91bmQgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBvciBhIGZhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBsb29rdXBHZXR0ZXIob2JqZWN0LCBwcm9wKSB7XG4gIHdoaWxlIChvYmplY3QgIT09IG51bGwpIHtcbiAgICBjb25zdCBkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XG4gICAgaWYgKGRlc2MpIHtcbiAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICByZXR1cm4gdW5hcHBseShkZXNjLmdldCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGRlc2MudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHVuYXBwbHkoZGVzYy52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gIH1cbiAgZnVuY3Rpb24gZmFsbGJhY2tWYWx1ZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZmFsbGJhY2tWYWx1ZTtcbn1cblxuY29uc3QgaHRtbCQxID0gZnJlZXplKFsnYScsICdhYmJyJywgJ2Fjcm9ueW0nLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiZGknLCAnYmRvJywgJ2JpZycsICdibGluaycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NlbnRlcicsICdjaXRlJywgJ2NvZGUnLCAnY29sJywgJ2NvbGdyb3VwJywgJ2NvbnRlbnQnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWNvcmF0b3InLCAnZGVsJywgJ2RldGFpbHMnLCAnZGZuJywgJ2RpYWxvZycsICdkaXInLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VsZW1lbnQnLCAnZW0nLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9udCcsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2xhYmVsJywgJ2xlZ2VuZCcsICdsaScsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRlcicsICduYXYnLCAnbm9icicsICdvbCcsICdvcHRncm91cCcsICdvcHRpb24nLCAnb3V0cHV0JywgJ3AnLCAncGljdHVyZScsICdwcmUnLCAncHJvZ3Jlc3MnLCAncScsICdycCcsICdydCcsICdydWJ5JywgJ3MnLCAnc2FtcCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzaGFkb3cnLCAnc21hbGwnLCAnc291cmNlJywgJ3NwYWNlcicsICdzcGFuJywgJ3N0cmlrZScsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndHInLCAndHJhY2snLCAndHQnLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJ10pO1xuY29uc3Qgc3ZnJDEgPSBmcmVlemUoWydzdmcnLCAnYScsICdhbHRnbHlwaCcsICdhbHRnbHlwaGRlZicsICdhbHRnbHlwaGl0ZW0nLCAnYW5pbWF0ZWNvbG9yJywgJ2FuaW1hdGVtb3Rpb24nLCAnYW5pbWF0ZXRyYW5zZm9ybScsICdjaXJjbGUnLCAnY2xpcHBhdGgnLCAnZGVmcycsICdkZXNjJywgJ2VsbGlwc2UnLCAnZmlsdGVyJywgJ2ZvbnQnLCAnZycsICdnbHlwaCcsICdnbHlwaHJlZicsICdoa2VybicsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhcmdyYWRpZW50JywgJ21hcmtlcicsICdtYXNrJywgJ21ldGFkYXRhJywgJ21wYXRoJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbGdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdHlsZScsICdzd2l0Y2gnLCAnc3ltYm9sJywgJ3RleHQnLCAndGV4dHBhdGgnLCAndGl0bGUnLCAndHJlZicsICd0c3BhbicsICd2aWV3JywgJ3ZrZXJuJ10pO1xuY29uc3Qgc3ZnRmlsdGVycyA9IGZyZWV6ZShbJ2ZlQmxlbmQnLCAnZmVDb2xvck1hdHJpeCcsICdmZUNvbXBvbmVudFRyYW5zZmVyJywgJ2ZlQ29tcG9zaXRlJywgJ2ZlQ29udm9sdmVNYXRyaXgnLCAnZmVEaWZmdXNlTGlnaHRpbmcnLCAnZmVEaXNwbGFjZW1lbnRNYXAnLCAnZmVEaXN0YW50TGlnaHQnLCAnZmVEcm9wU2hhZG93JywgJ2ZlRmxvb2QnLCAnZmVGdW5jQScsICdmZUZ1bmNCJywgJ2ZlRnVuY0cnLCAnZmVGdW5jUicsICdmZUdhdXNzaWFuQmx1cicsICdmZUltYWdlJywgJ2ZlTWVyZ2UnLCAnZmVNZXJnZU5vZGUnLCAnZmVNb3JwaG9sb2d5JywgJ2ZlT2Zmc2V0JywgJ2ZlUG9pbnRMaWdodCcsICdmZVNwZWN1bGFyTGlnaHRpbmcnLCAnZmVTcG90TGlnaHQnLCAnZmVUaWxlJywgJ2ZlVHVyYnVsZW5jZSddKTtcbi8vIExpc3Qgb2YgU1ZHIGVsZW1lbnRzIHRoYXQgYXJlIGRpc2FsbG93ZWQgYnkgZGVmYXVsdC5cbi8vIFdlIHN0aWxsIG5lZWQgdG8ga25vdyB0aGVtIHNvIHRoYXQgd2UgY2FuIGRvIG5hbWVzcGFjZVxuLy8gY2hlY2tzIHByb3Blcmx5IGluIGNhc2Ugb25lIHdhbnRzIHRvIGFkZCB0aGVtIHRvXG4vLyBhbGxvdy1saXN0LlxuY29uc3Qgc3ZnRGlzYWxsb3dlZCA9IGZyZWV6ZShbJ2FuaW1hdGUnLCAnY29sb3ItcHJvZmlsZScsICdjdXJzb3InLCAnZGlzY2FyZCcsICdmb250LWZhY2UnLCAnZm9udC1mYWNlLWZvcm1hdCcsICdmb250LWZhY2UtbmFtZScsICdmb250LWZhY2Utc3JjJywgJ2ZvbnQtZmFjZS11cmknLCAnZm9yZWlnbm9iamVjdCcsICdoYXRjaCcsICdoYXRjaHBhdGgnLCAnbWVzaCcsICdtZXNoZ3JhZGllbnQnLCAnbWVzaHBhdGNoJywgJ21lc2hyb3cnLCAnbWlzc2luZy1nbHlwaCcsICdzY3JpcHQnLCAnc2V0JywgJ3NvbGlkY29sb3InLCAndW5rbm93bicsICd1c2UnXSk7XG5jb25zdCBtYXRoTWwkMSA9IGZyZWV6ZShbJ21hdGgnLCAnbWVuY2xvc2UnLCAnbWVycm9yJywgJ21mZW5jZWQnLCAnbWZyYWMnLCAnbWdseXBoJywgJ21pJywgJ21sYWJlbGVkdHInLCAnbW11bHRpc2NyaXB0cycsICdtbicsICdtbycsICdtb3ZlcicsICdtcGFkZGVkJywgJ21waGFudG9tJywgJ21yb290JywgJ21yb3cnLCAnbXMnLCAnbXNwYWNlJywgJ21zcXJ0JywgJ21zdHlsZScsICdtc3ViJywgJ21zdXAnLCAnbXN1YnN1cCcsICdtdGFibGUnLCAnbXRkJywgJ210ZXh0JywgJ210cicsICdtdW5kZXInLCAnbXVuZGVyb3ZlcicsICdtcHJlc2NyaXB0cyddKTtcbi8vIFNpbWlsYXJseSB0byBTVkcsIHdlIHdhbnQgdG8ga25vdyBhbGwgTWF0aE1MIGVsZW1lbnRzLFxuLy8gZXZlbiB0aG9zZSB0aGF0IHdlIGRpc2FsbG93IGJ5IGRlZmF1bHQuXG5jb25zdCBtYXRoTWxEaXNhbGxvd2VkID0gZnJlZXplKFsnbWFjdGlvbicsICdtYWxpZ25ncm91cCcsICdtYWxpZ25tYXJrJywgJ21sb25nZGl2JywgJ21zY2FycmllcycsICdtc2NhcnJ5JywgJ21zZ3JvdXAnLCAnbXN0YWNrJywgJ21zbGluZScsICdtc3JvdycsICdzZW1hbnRpY3MnLCAnYW5ub3RhdGlvbicsICdhbm5vdGF0aW9uLXhtbCcsICdtcHJlc2NyaXB0cycsICdub25lJ10pO1xuY29uc3QgdGV4dCA9IGZyZWV6ZShbJyN0ZXh0J10pO1xuXG5jb25zdCBodG1sID0gZnJlZXplKFsnYWNjZXB0JywgJ2FjdGlvbicsICdhbGlnbicsICdhbHQnLCAnYXV0b2NhcGl0YWxpemUnLCAnYXV0b2NvbXBsZXRlJywgJ2F1dG9waWN0dXJlaW5waWN0dXJlJywgJ2F1dG9wbGF5JywgJ2JhY2tncm91bmQnLCAnYmdjb2xvcicsICdib3JkZXInLCAnY2FwdHVyZScsICdjZWxscGFkZGluZycsICdjZWxsc3BhY2luZycsICdjaGVja2VkJywgJ2NpdGUnLCAnY2xhc3MnLCAnY2xlYXInLCAnY29sb3InLCAnY29scycsICdjb2xzcGFuJywgJ2NvbnRyb2xzJywgJ2NvbnRyb2xzbGlzdCcsICdjb29yZHMnLCAnY3Jvc3NvcmlnaW4nLCAnZGF0ZXRpbWUnLCAnZGVjb2RpbmcnLCAnZGVmYXVsdCcsICdkaXInLCAnZGlzYWJsZWQnLCAnZGlzYWJsZXBpY3R1cmVpbnBpY3R1cmUnLCAnZGlzYWJsZXJlbW90ZXBsYXliYWNrJywgJ2Rvd25sb2FkJywgJ2RyYWdnYWJsZScsICdlbmN0eXBlJywgJ2VudGVya2V5aGludCcsICdmYWNlJywgJ2ZvcicsICdoZWFkZXJzJywgJ2hlaWdodCcsICdoaWRkZW4nLCAnaGlnaCcsICdocmVmJywgJ2hyZWZsYW5nJywgJ2lkJywgJ2lucHV0bW9kZScsICdpbnRlZ3JpdHknLCAnaXNtYXAnLCAna2luZCcsICdsYWJlbCcsICdsYW5nJywgJ2xpc3QnLCAnbG9hZGluZycsICdsb29wJywgJ2xvdycsICdtYXgnLCAnbWF4bGVuZ3RoJywgJ21lZGlhJywgJ21ldGhvZCcsICdtaW4nLCAnbWlubGVuZ3RoJywgJ211bHRpcGxlJywgJ211dGVkJywgJ25hbWUnLCAnbm9uY2UnLCAnbm9zaGFkZScsICdub3ZhbGlkYXRlJywgJ25vd3JhcCcsICdvcGVuJywgJ29wdGltdW0nLCAncGF0dGVybicsICdwbGFjZWhvbGRlcicsICdwbGF5c2lubGluZScsICdwb3BvdmVyJywgJ3BvcG92ZXJ0YXJnZXQnLCAncG9wb3ZlcnRhcmdldGFjdGlvbicsICdwb3N0ZXInLCAncHJlbG9hZCcsICdwdWJkYXRlJywgJ3JhZGlvZ3JvdXAnLCAncmVhZG9ubHknLCAncmVsJywgJ3JlcXVpcmVkJywgJ3JldicsICdyZXZlcnNlZCcsICdyb2xlJywgJ3Jvd3MnLCAncm93c3BhbicsICdzcGVsbGNoZWNrJywgJ3Njb3BlJywgJ3NlbGVjdGVkJywgJ3NoYXBlJywgJ3NpemUnLCAnc2l6ZXMnLCAnc3BhbicsICdzcmNsYW5nJywgJ3N0YXJ0JywgJ3NyYycsICdzcmNzZXQnLCAnc3RlcCcsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmluZGV4JywgJ3RpdGxlJywgJ3RyYW5zbGF0ZScsICd0eXBlJywgJ3VzZW1hcCcsICd2YWxpZ24nLCAndmFsdWUnLCAnd2lkdGgnLCAnd3JhcCcsICd4bWxucycsICdzbG90J10pO1xuY29uc3Qgc3ZnID0gZnJlZXplKFsnYWNjZW50LWhlaWdodCcsICdhY2N1bXVsYXRlJywgJ2FkZGl0aXZlJywgJ2FsaWdubWVudC1iYXNlbGluZScsICdhbXBsaXR1ZGUnLCAnYXNjZW50JywgJ2F0dHJpYnV0ZW5hbWUnLCAnYXR0cmlidXRldHlwZScsICdhemltdXRoJywgJ2Jhc2VmcmVxdWVuY3knLCAnYmFzZWxpbmUtc2hpZnQnLCAnYmVnaW4nLCAnYmlhcycsICdieScsICdjbGFzcycsICdjbGlwJywgJ2NsaXBwYXRodW5pdHMnLCAnY2xpcC1wYXRoJywgJ2NsaXAtcnVsZScsICdjb2xvcicsICdjb2xvci1pbnRlcnBvbGF0aW9uJywgJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdjb2xvci1wcm9maWxlJywgJ2NvbG9yLXJlbmRlcmluZycsICdjeCcsICdjeScsICdkJywgJ2R4JywgJ2R5JywgJ2RpZmZ1c2Vjb25zdGFudCcsICdkaXJlY3Rpb24nLCAnZGlzcGxheScsICdkaXZpc29yJywgJ2R1cicsICdlZGdlbW9kZScsICdlbGV2YXRpb24nLCAnZW5kJywgJ2V4cG9uZW50JywgJ2ZpbGwnLCAnZmlsbC1vcGFjaXR5JywgJ2ZpbGwtcnVsZScsICdmaWx0ZXInLCAnZmlsdGVydW5pdHMnLCAnZmxvb2QtY29sb3InLCAnZmxvb2Qtb3BhY2l0eScsICdmb250LWZhbWlseScsICdmb250LXNpemUnLCAnZm9udC1zaXplLWFkanVzdCcsICdmb250LXN0cmV0Y2gnLCAnZm9udC1zdHlsZScsICdmb250LXZhcmlhbnQnLCAnZm9udC13ZWlnaHQnLCAnZngnLCAnZnknLCAnZzEnLCAnZzInLCAnZ2x5cGgtbmFtZScsICdnbHlwaHJlZicsICdncmFkaWVudHVuaXRzJywgJ2dyYWRpZW50dHJhbnNmb3JtJywgJ2hlaWdodCcsICdocmVmJywgJ2lkJywgJ2ltYWdlLXJlbmRlcmluZycsICdpbicsICdpbjInLCAnaW50ZXJjZXB0JywgJ2snLCAnazEnLCAnazInLCAnazMnLCAnazQnLCAna2VybmluZycsICdrZXlwb2ludHMnLCAna2V5c3BsaW5lcycsICdrZXl0aW1lcycsICdsYW5nJywgJ2xlbmd0aGFkanVzdCcsICdsZXR0ZXItc3BhY2luZycsICdrZXJuZWxtYXRyaXgnLCAna2VybmVsdW5pdGxlbmd0aCcsICdsaWdodGluZy1jb2xvcicsICdsb2NhbCcsICdtYXJrZXItZW5kJywgJ21hcmtlci1taWQnLCAnbWFya2VyLXN0YXJ0JywgJ21hcmtlcmhlaWdodCcsICdtYXJrZXJ1bml0cycsICdtYXJrZXJ3aWR0aCcsICdtYXNrY29udGVudHVuaXRzJywgJ21hc2t1bml0cycsICdtYXgnLCAnbWFzaycsICdtZWRpYScsICdtZXRob2QnLCAnbW9kZScsICdtaW4nLCAnbmFtZScsICdudW1vY3RhdmVzJywgJ29mZnNldCcsICdvcGVyYXRvcicsICdvcGFjaXR5JywgJ29yZGVyJywgJ29yaWVudCcsICdvcmllbnRhdGlvbicsICdvcmlnaW4nLCAnb3ZlcmZsb3cnLCAncGFpbnQtb3JkZXInLCAncGF0aCcsICdwYXRobGVuZ3RoJywgJ3BhdHRlcm5jb250ZW50dW5pdHMnLCAncGF0dGVybnRyYW5zZm9ybScsICdwYXR0ZXJudW5pdHMnLCAncG9pbnRzJywgJ3ByZXNlcnZlYWxwaGEnLCAncHJlc2VydmVhc3BlY3RyYXRpbycsICdwcmltaXRpdmV1bml0cycsICdyJywgJ3J4JywgJ3J5JywgJ3JhZGl1cycsICdyZWZ4JywgJ3JlZnknLCAncmVwZWF0Y291bnQnLCAncmVwZWF0ZHVyJywgJ3Jlc3RhcnQnLCAncmVzdWx0JywgJ3JvdGF0ZScsICdzY2FsZScsICdzZWVkJywgJ3NoYXBlLXJlbmRlcmluZycsICdzbG9wZScsICdzcGVjdWxhcmNvbnN0YW50JywgJ3NwZWN1bGFyZXhwb25lbnQnLCAnc3ByZWFkbWV0aG9kJywgJ3N0YXJ0b2Zmc2V0JywgJ3N0ZGRldmlhdGlvbicsICdzdGl0Y2h0aWxlcycsICdzdG9wLWNvbG9yJywgJ3N0b3Atb3BhY2l0eScsICdzdHJva2UtZGFzaGFycmF5JywgJ3N0cm9rZS1kYXNob2Zmc2V0JywgJ3N0cm9rZS1saW5lY2FwJywgJ3N0cm9rZS1saW5lam9pbicsICdzdHJva2UtbWl0ZXJsaW1pdCcsICdzdHJva2Utb3BhY2l0eScsICdzdHJva2UnLCAnc3Ryb2tlLXdpZHRoJywgJ3N0eWxlJywgJ3N1cmZhY2VzY2FsZScsICdzeXN0ZW1sYW5ndWFnZScsICd0YWJpbmRleCcsICd0YWJsZXZhbHVlcycsICd0YXJnZXR4JywgJ3RhcmdldHknLCAndHJhbnNmb3JtJywgJ3RyYW5zZm9ybS1vcmlnaW4nLCAndGV4dC1hbmNob3InLCAndGV4dC1kZWNvcmF0aW9uJywgJ3RleHQtcmVuZGVyaW5nJywgJ3RleHRsZW5ndGgnLCAndHlwZScsICd1MScsICd1MicsICd1bmljb2RlJywgJ3ZhbHVlcycsICd2aWV3Ym94JywgJ3Zpc2liaWxpdHknLCAndmVyc2lvbicsICd2ZXJ0LWFkdi15JywgJ3ZlcnQtb3JpZ2luLXgnLCAndmVydC1vcmlnaW4teScsICd3aWR0aCcsICd3b3JkLXNwYWNpbmcnLCAnd3JhcCcsICd3cml0aW5nLW1vZGUnLCAneGNoYW5uZWxzZWxlY3RvcicsICd5Y2hhbm5lbHNlbGVjdG9yJywgJ3gnLCAneDEnLCAneDInLCAneG1sbnMnLCAneScsICd5MScsICd5MicsICd6JywgJ3pvb21hbmRwYW4nXSk7XG5jb25zdCBtYXRoTWwgPSBmcmVlemUoWydhY2NlbnQnLCAnYWNjZW50dW5kZXInLCAnYWxpZ24nLCAnYmV2ZWxsZWQnLCAnY2xvc2UnLCAnY29sdW1uc2FsaWduJywgJ2NvbHVtbmxpbmVzJywgJ2NvbHVtbnNwYW4nLCAnZGVub21hbGlnbicsICdkZXB0aCcsICdkaXInLCAnZGlzcGxheScsICdkaXNwbGF5c3R5bGUnLCAnZW5jb2RpbmcnLCAnZmVuY2UnLCAnZnJhbWUnLCAnaGVpZ2h0JywgJ2hyZWYnLCAnaWQnLCAnbGFyZ2VvcCcsICdsZW5ndGgnLCAnbGluZXRoaWNrbmVzcycsICdsc3BhY2UnLCAnbHF1b3RlJywgJ21hdGhiYWNrZ3JvdW5kJywgJ21hdGhjb2xvcicsICdtYXRoc2l6ZScsICdtYXRodmFyaWFudCcsICdtYXhzaXplJywgJ21pbnNpemUnLCAnbW92YWJsZWxpbWl0cycsICdub3RhdGlvbicsICdudW1hbGlnbicsICdvcGVuJywgJ3Jvd2FsaWduJywgJ3Jvd2xpbmVzJywgJ3Jvd3NwYWNpbmcnLCAncm93c3BhbicsICdyc3BhY2UnLCAncnF1b3RlJywgJ3NjcmlwdGxldmVsJywgJ3NjcmlwdG1pbnNpemUnLCAnc2NyaXB0c2l6ZW11bHRpcGxpZXInLCAnc2VsZWN0aW9uJywgJ3NlcGFyYXRvcicsICdzZXBhcmF0b3JzJywgJ3N0cmV0Y2h5JywgJ3N1YnNjcmlwdHNoaWZ0JywgJ3N1cHNjcmlwdHNoaWZ0JywgJ3N5bW1ldHJpYycsICd2b2Zmc2V0JywgJ3dpZHRoJywgJ3htbG5zJ10pO1xuY29uc3QgeG1sID0gZnJlZXplKFsneGxpbms6aHJlZicsICd4bWw6aWQnLCAneGxpbms6dGl0bGUnLCAneG1sOnNwYWNlJywgJ3htbG5zOnhsaW5rJ10pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9iZXR0ZXItcmVnZXhcbmNvbnN0IE1VU1RBQ0hFX0VYUFIgPSBzZWFsKC9cXHtcXHtbXFx3XFxXXSp8W1xcd1xcV10qXFx9XFx9L2dtKTsgLy8gU3BlY2lmeSB0ZW1wbGF0ZSBkZXRlY3Rpb24gcmVnZXggZm9yIFNBRkVfRk9SX1RFTVBMQVRFUyBtb2RlXG5jb25zdCBFUkJfRVhQUiA9IHNlYWwoLzwlW1xcd1xcV10qfFtcXHdcXFddKiU+L2dtKTtcbmNvbnN0IFRNUExJVF9FWFBSID0gc2VhbCgvXFwkXFx7W1xcd1xcV10qL2dtKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSB1bmljb3JuL2JldHRlci1yZWdleFxuY29uc3QgREFUQV9BVFRSID0gc2VhbCgvXmRhdGEtW1xcLVxcdy5cXHUwMEI3LVxcdUZGRkZdKyQvKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuY29uc3QgQVJJQV9BVFRSID0gc2VhbCgvXmFyaWEtW1xcLVxcd10rJC8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5jb25zdCBJU19BTExPV0VEX1VSSSA9IHNlYWwoL14oPzooPzooPzpmfGh0KXRwcz98bWFpbHRvfHRlbHxjYWxsdG98c21zfGNpZHx4bXBwKTp8W15hLXpdfFthLXorLlxcLV0rKD86W15hLXorLlxcLTpdfCQpKS9pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbik7XG5jb25zdCBJU19TQ1JJUFRfT1JfREFUQSA9IHNlYWwoL14oPzpcXHcrc2NyaXB0fGRhdGEpOi9pKTtcbmNvbnN0IEFUVFJfV0hJVEVTUEFDRSA9IHNlYWwoL1tcXHUwMDAwLVxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwLVxcdTIwMjlcXHUyMDVGXFx1MzAwMF0vZyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbik7XG5jb25zdCBET0NUWVBFX05BTUUgPSBzZWFsKC9eaHRtbCQvaSk7XG5jb25zdCBDVVNUT01fRUxFTUVOVCA9IHNlYWwoL15bYS16XVsuXFx3XSooLVsuXFx3XSspKyQvaSk7XG5cbnZhciBFWFBSRVNTSU9OUyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBUklBX0FUVFI6IEFSSUFfQVRUUixcbiAgQVRUUl9XSElURVNQQUNFOiBBVFRSX1dISVRFU1BBQ0UsXG4gIENVU1RPTV9FTEVNRU5UOiBDVVNUT01fRUxFTUVOVCxcbiAgREFUQV9BVFRSOiBEQVRBX0FUVFIsXG4gIERPQ1RZUEVfTkFNRTogRE9DVFlQRV9OQU1FLFxuICBFUkJfRVhQUjogRVJCX0VYUFIsXG4gIElTX0FMTE9XRURfVVJJOiBJU19BTExPV0VEX1VSSSxcbiAgSVNfU0NSSVBUX09SX0RBVEE6IElTX1NDUklQVF9PUl9EQVRBLFxuICBNVVNUQUNIRV9FWFBSOiBNVVNUQUNIRV9FWFBSLFxuICBUTVBMSVRfRVhQUjogVE1QTElUX0VYUFJcbn0pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvaW5kZW50ICovXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9ub2RlVHlwZVxuY29uc3QgTk9ERV9UWVBFID0ge1xuICBlbGVtZW50OiAxLFxuICBhdHRyaWJ1dGU6IDIsXG4gIHRleHQ6IDMsXG4gIGNkYXRhU2VjdGlvbjogNCxcbiAgZW50aXR5UmVmZXJlbmNlOiA1LFxuICAvLyBEZXByZWNhdGVkXG4gIGVudGl0eU5vZGU6IDYsXG4gIC8vIERlcHJlY2F0ZWRcbiAgcHJvZ3Jlc3NpbmdJbnN0cnVjdGlvbjogNyxcbiAgY29tbWVudDogOCxcbiAgZG9jdW1lbnQ6IDksXG4gIGRvY3VtZW50VHlwZTogMTAsXG4gIGRvY3VtZW50RnJhZ21lbnQ6IDExLFxuICBub3RhdGlvbjogMTIgLy8gRGVwcmVjYXRlZFxufTtcbmNvbnN0IGdldEdsb2JhbCA9IGZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IHdpbmRvdztcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuby1vcCBwb2xpY3kgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICogRG9uJ3QgZXhwb3J0IHRoaXMgZnVuY3Rpb24gb3V0c2lkZSB0aGlzIG1vZHVsZSFcbiAqIEBwYXJhbSB0cnVzdGVkVHlwZXMgVGhlIHBvbGljeSBmYWN0b3J5LlxuICogQHBhcmFtIHB1cmlmeUhvc3RFbGVtZW50IFRoZSBTY3JpcHQgZWxlbWVudCB1c2VkIHRvIGxvYWQgRE9NUHVyaWZ5ICh0byBkZXRlcm1pbmUgcG9saWN5IG5hbWUgc3VmZml4KS5cbiAqIEByZXR1cm4gVGhlIHBvbGljeSBjcmVhdGVkIChvciBudWxsLCBpZiBUcnVzdGVkIFR5cGVzXG4gKiBhcmUgbm90IHN1cHBvcnRlZCBvciBjcmVhdGluZyB0aGUgcG9saWN5IGZhaWxlZCkuXG4gKi9cbmNvbnN0IF9jcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3kgPSBmdW5jdGlvbiBfY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5KHRydXN0ZWRUeXBlcywgcHVyaWZ5SG9zdEVsZW1lbnQpIHtcbiAgaWYgKHR5cGVvZiB0cnVzdGVkVHlwZXMgIT09ICdvYmplY3QnIHx8IHR5cGVvZiB0cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gQWxsb3cgdGhlIGNhbGxlcnMgdG8gY29udHJvbCB0aGUgdW5pcXVlIHBvbGljeSBuYW1lXG4gIC8vIGJ5IGFkZGluZyBhIGRhdGEtdHQtcG9saWN5LXN1ZmZpeCB0byB0aGUgc2NyaXB0IGVsZW1lbnQgd2l0aCB0aGUgRE9NUHVyaWZ5LlxuICAvLyBQb2xpY3kgY3JlYXRpb24gd2l0aCBkdXBsaWNhdGUgbmFtZXMgdGhyb3dzIGluIFRydXN0ZWQgVHlwZXMuXG4gIGxldCBzdWZmaXggPSBudWxsO1xuICBjb25zdCBBVFRSX05BTUUgPSAnZGF0YS10dC1wb2xpY3ktc3VmZml4JztcbiAgaWYgKHB1cmlmeUhvc3RFbGVtZW50ICYmIHB1cmlmeUhvc3RFbGVtZW50Lmhhc0F0dHJpYnV0ZShBVFRSX05BTUUpKSB7XG4gICAgc3VmZml4ID0gcHVyaWZ5SG9zdEVsZW1lbnQuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSk7XG4gIH1cbiAgY29uc3QgcG9saWN5TmFtZSA9ICdkb21wdXJpZnknICsgKHN1ZmZpeCA/ICcjJyArIHN1ZmZpeCA6ICcnKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeShwb2xpY3lOYW1lLCB7XG4gICAgICBjcmVhdGVIVE1MKGh0bWwpIHtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICB9LFxuICAgICAgY3JlYXRlU2NyaXB0VVJMKHNjcmlwdFVybCkge1xuICAgICAgICByZXR1cm4gc2NyaXB0VXJsO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7XG4gICAgLy8gUG9saWN5IGNyZWF0aW9uIGZhaWxlZCAobW9zdCBsaWtlbHkgYW5vdGhlciBET01QdXJpZnkgc2NyaXB0IGhhc1xuICAgIC8vIGFscmVhZHkgcnVuKS4gU2tpcCBjcmVhdGluZyB0aGUgcG9saWN5LCBhcyB0aGlzIHdpbGwgb25seSBjYXVzZSBlcnJvcnNcbiAgICAvLyBpZiBUVCBhcmUgZW5mb3JjZWQuXG4gICAgY29uc29sZS53YXJuKCdUcnVzdGVkVHlwZXMgcG9saWN5ICcgKyBwb2xpY3lOYW1lICsgJyBjb3VsZCBub3QgYmUgY3JlYXRlZC4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbmNvbnN0IF9jcmVhdGVIb29rc01hcCA9IGZ1bmN0aW9uIF9jcmVhdGVIb29rc01hcCgpIHtcbiAgcmV0dXJuIHtcbiAgICBhZnRlclNhbml0aXplQXR0cmlidXRlczogW10sXG4gICAgYWZ0ZXJTYW5pdGl6ZUVsZW1lbnRzOiBbXSxcbiAgICBhZnRlclNhbml0aXplU2hhZG93RE9NOiBbXSxcbiAgICBiZWZvcmVTYW5pdGl6ZUF0dHJpYnV0ZXM6IFtdLFxuICAgIGJlZm9yZVNhbml0aXplRWxlbWVudHM6IFtdLFxuICAgIGJlZm9yZVNhbml0aXplU2hhZG93RE9NOiBbXSxcbiAgICB1cG9uU2FuaXRpemVBdHRyaWJ1dGU6IFtdLFxuICAgIHVwb25TYW5pdGl6ZUVsZW1lbnQ6IFtdLFxuICAgIHVwb25TYW5pdGl6ZVNoYWRvd05vZGU6IFtdXG4gIH07XG59O1xuZnVuY3Rpb24gY3JlYXRlRE9NUHVyaWZ5KCkge1xuICBsZXQgd2luZG93ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRHbG9iYWwoKTtcbiAgY29uc3QgRE9NUHVyaWZ5ID0gcm9vdCA9PiBjcmVhdGVET01QdXJpZnkocm9vdCk7XG4gIERPTVB1cmlmeS52ZXJzaW9uID0gJzMuMi40JztcbiAgRE9NUHVyaWZ5LnJlbW92ZWQgPSBbXTtcbiAgaWYgKCF3aW5kb3cgfHwgIXdpbmRvdy5kb2N1bWVudCB8fCB3aW5kb3cuZG9jdW1lbnQubm9kZVR5cGUgIT09IE5PREVfVFlQRS5kb2N1bWVudCB8fCAhd2luZG93LkVsZW1lbnQpIHtcbiAgICAvLyBOb3QgcnVubmluZyBpbiBhIGJyb3dzZXIsIHByb3ZpZGUgYSBmYWN0b3J5IGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCB5b3UgY2FuIHBhc3MgeW91ciBvd24gV2luZG93XG4gICAgRE9NUHVyaWZ5LmlzU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIERPTVB1cmlmeTtcbiAgfVxuICBsZXQge1xuICAgIGRvY3VtZW50XG4gIH0gPSB3aW5kb3c7XG4gIGNvbnN0IG9yaWdpbmFsRG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgY29uc3QgY3VycmVudFNjcmlwdCA9IG9yaWdpbmFsRG9jdW1lbnQuY3VycmVudFNjcmlwdDtcbiAgY29uc3Qge1xuICAgIERvY3VtZW50RnJhZ21lbnQsXG4gICAgSFRNTFRlbXBsYXRlRWxlbWVudCxcbiAgICBOb2RlLFxuICAgIEVsZW1lbnQsXG4gICAgTm9kZUZpbHRlcixcbiAgICBOYW1lZE5vZGVNYXAgPSB3aW5kb3cuTmFtZWROb2RlTWFwIHx8IHdpbmRvdy5Nb3pOYW1lZEF0dHJNYXAsXG4gICAgSFRNTEZvcm1FbGVtZW50LFxuICAgIERPTVBhcnNlcixcbiAgICB0cnVzdGVkVHlwZXNcbiAgfSA9IHdpbmRvdztcbiAgY29uc3QgRWxlbWVudFByb3RvdHlwZSA9IEVsZW1lbnQucHJvdG90eXBlO1xuICBjb25zdCBjbG9uZU5vZGUgPSBsb29rdXBHZXR0ZXIoRWxlbWVudFByb3RvdHlwZSwgJ2Nsb25lTm9kZScpO1xuICBjb25zdCByZW1vdmUgPSBsb29rdXBHZXR0ZXIoRWxlbWVudFByb3RvdHlwZSwgJ3JlbW92ZScpO1xuICBjb25zdCBnZXROZXh0U2libGluZyA9IGxvb2t1cEdldHRlcihFbGVtZW50UHJvdG90eXBlLCAnbmV4dFNpYmxpbmcnKTtcbiAgY29uc3QgZ2V0Q2hpbGROb2RlcyA9IGxvb2t1cEdldHRlcihFbGVtZW50UHJvdG90eXBlLCAnY2hpbGROb2RlcycpO1xuICBjb25zdCBnZXRQYXJlbnROb2RlID0gbG9va3VwR2V0dGVyKEVsZW1lbnRQcm90b3R5cGUsICdwYXJlbnROb2RlJyk7XG4gIC8vIEFzIHBlciBpc3N1ZSAjNDcsIHRoZSB3ZWItY29tcG9uZW50cyByZWdpc3RyeSBpcyBpbmhlcml0ZWQgYnkgYVxuICAvLyBuZXcgZG9jdW1lbnQgY3JlYXRlZCB2aWEgY3JlYXRlSFRNTERvY3VtZW50LiBBcyBwZXIgdGhlIHNwZWNcbiAgLy8gKGh0dHA6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9jdXN0b20vI2NyZWF0aW5nLWFuZC1wYXNzaW5nLXJlZ2lzdHJpZXMpXG4gIC8vIGEgbmV3IGVtcHR5IHJlZ2lzdHJ5IGlzIHVzZWQgd2hlbiBjcmVhdGluZyBhIHRlbXBsYXRlIGNvbnRlbnRzIG93bmVyXG4gIC8vIGRvY3VtZW50LCBzbyB3ZSB1c2UgdGhhdCBhcyBvdXIgcGFyZW50IGRvY3VtZW50IHRvIGVuc3VyZSBub3RoaW5nXG4gIC8vIGlzIGluaGVyaXRlZC5cbiAgaWYgKHR5cGVvZiBIVE1MVGVtcGxhdGVFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIGlmICh0ZW1wbGF0ZS5jb250ZW50ICYmIHRlbXBsYXRlLmNvbnRlbnQub3duZXJEb2N1bWVudCkge1xuICAgICAgZG9jdW1lbnQgPSB0ZW1wbGF0ZS5jb250ZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuICB9XG4gIGxldCB0cnVzdGVkVHlwZXNQb2xpY3k7XG4gIGxldCBlbXB0eUhUTUwgPSAnJztcbiAgY29uc3Qge1xuICAgIGltcGxlbWVudGF0aW9uLFxuICAgIGNyZWF0ZU5vZGVJdGVyYXRvcixcbiAgICBjcmVhdGVEb2N1bWVudEZyYWdtZW50LFxuICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lXG4gIH0gPSBkb2N1bWVudDtcbiAgY29uc3Qge1xuICAgIGltcG9ydE5vZGVcbiAgfSA9IG9yaWdpbmFsRG9jdW1lbnQ7XG4gIGxldCBob29rcyA9IF9jcmVhdGVIb29rc01hcCgpO1xuICAvKipcbiAgICogRXhwb3NlIHdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHJ1bm5pbmcgdGhlIGZ1bGwgRE9NUHVyaWZ5LlxuICAgKi9cbiAgRE9NUHVyaWZ5LmlzU3VwcG9ydGVkID0gdHlwZW9mIGVudHJpZXMgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGdldFBhcmVudE5vZGUgPT09ICdmdW5jdGlvbicgJiYgaW1wbGVtZW50YXRpb24gJiYgaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50ICE9PSB1bmRlZmluZWQ7XG4gIGNvbnN0IHtcbiAgICBNVVNUQUNIRV9FWFBSLFxuICAgIEVSQl9FWFBSLFxuICAgIFRNUExJVF9FWFBSLFxuICAgIERBVEFfQVRUUixcbiAgICBBUklBX0FUVFIsXG4gICAgSVNfU0NSSVBUX09SX0RBVEEsXG4gICAgQVRUUl9XSElURVNQQUNFLFxuICAgIENVU1RPTV9FTEVNRU5UXG4gIH0gPSBFWFBSRVNTSU9OUztcbiAgbGV0IHtcbiAgICBJU19BTExPV0VEX1VSSTogSVNfQUxMT1dFRF9VUkkkMVxuICB9ID0gRVhQUkVTU0lPTlM7XG4gIC8qKlxuICAgKiBXZSBjb25zaWRlciB0aGUgZWxlbWVudHMgYW5kIGF0dHJpYnV0ZXMgYmVsb3cgdG8gYmUgc2FmZS4gSWRlYWxseVxuICAgKiBkb24ndCBhZGQgYW55IG5ldyBvbmVzIGJ1dCBmZWVsIGZyZWUgdG8gcmVtb3ZlIHVud2FudGVkIG9uZXMuXG4gICAqL1xuICAvKiBhbGxvd2VkIGVsZW1lbnQgbmFtZXMgKi9cbiAgbGV0IEFMTE9XRURfVEFHUyA9IG51bGw7XG4gIGNvbnN0IERFRkFVTFRfQUxMT1dFRF9UQUdTID0gYWRkVG9TZXQoe30sIFsuLi5odG1sJDEsIC4uLnN2ZyQxLCAuLi5zdmdGaWx0ZXJzLCAuLi5tYXRoTWwkMSwgLi4udGV4dF0pO1xuICAvKiBBbGxvd2VkIGF0dHJpYnV0ZSBuYW1lcyAqL1xuICBsZXQgQUxMT1dFRF9BVFRSID0gbnVsbDtcbiAgY29uc3QgREVGQVVMVF9BTExPV0VEX0FUVFIgPSBhZGRUb1NldCh7fSwgWy4uLmh0bWwsIC4uLnN2ZywgLi4ubWF0aE1sLCAuLi54bWxdKTtcbiAgLypcbiAgICogQ29uZmlndXJlIGhvdyBET01QdXJpZnkgc2hvdWxkIGhhbmRsZSBjdXN0b20gZWxlbWVudHMgYW5kIHRoZWlyIGF0dHJpYnV0ZXMgYXMgd2VsbCBhcyBjdXN0b21pemVkIGJ1aWx0LWluIGVsZW1lbnRzLlxuICAgKiBAcHJvcGVydHkge1JlZ0V4cHxGdW5jdGlvbnxudWxsfSB0YWdOYW1lQ2hlY2sgb25lIG9mIFtudWxsLCByZWdleFBhdHRlcm4sIHByZWRpY2F0ZV0uIERlZmF1bHQ6IGBudWxsYCAoZGlzYWxsb3cgYW55IGN1c3RvbSBlbGVtZW50cylcbiAgICogQHByb3BlcnR5IHtSZWdFeHB8RnVuY3Rpb258bnVsbH0gYXR0cmlidXRlTmFtZUNoZWNrIG9uZSBvZiBbbnVsbCwgcmVnZXhQYXR0ZXJuLCBwcmVkaWNhdGVdLiBEZWZhdWx0OiBgbnVsbGAgKGRpc2FsbG93IGFueSBhdHRyaWJ1dGVzIG5vdCBvbiB0aGUgYWxsb3cgbGlzdClcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBhbGxvd0N1c3RvbWl6ZWRCdWlsdEluRWxlbWVudHMgYWxsb3cgY3VzdG9tIGVsZW1lbnRzIGRlcml2ZWQgZnJvbSBidWlsdC1pbnMgaWYgdGhleSBwYXNzIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjay4gRGVmYXVsdDogYGZhbHNlYC5cbiAgICovXG4gIGxldCBDVVNUT01fRUxFTUVOVF9IQU5ETElORyA9IE9iamVjdC5zZWFsKGNyZWF0ZShudWxsLCB7XG4gICAgdGFnTmFtZUNoZWNrOiB7XG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG51bGxcbiAgICB9LFxuICAgIGF0dHJpYnV0ZU5hbWVDaGVjazoge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBudWxsXG4gICAgfSxcbiAgICBhbGxvd0N1c3RvbWl6ZWRCdWlsdEluRWxlbWVudHM6IHtcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogZmFsc2VcbiAgICB9XG4gIH0pKTtcbiAgLyogRXhwbGljaXRseSBmb3JiaWRkZW4gdGFncyAob3ZlcnJpZGVzIEFMTE9XRURfVEFHUy9BRERfVEFHUykgKi9cbiAgbGV0IEZPUkJJRF9UQUdTID0gbnVsbDtcbiAgLyogRXhwbGljaXRseSBmb3JiaWRkZW4gYXR0cmlidXRlcyAob3ZlcnJpZGVzIEFMTE9XRURfQVRUUi9BRERfQVRUUikgKi9cbiAgbGV0IEZPUkJJRF9BVFRSID0gbnVsbDtcbiAgLyogRGVjaWRlIGlmIEFSSUEgYXR0cmlidXRlcyBhcmUgb2theSAqL1xuICBsZXQgQUxMT1dfQVJJQV9BVFRSID0gdHJ1ZTtcbiAgLyogRGVjaWRlIGlmIGN1c3RvbSBkYXRhIGF0dHJpYnV0ZXMgYXJlIG9rYXkgKi9cbiAgbGV0IEFMTE9XX0RBVEFfQVRUUiA9IHRydWU7XG4gIC8qIERlY2lkZSBpZiB1bmtub3duIHByb3RvY29scyBhcmUgb2theSAqL1xuICBsZXQgQUxMT1dfVU5LTk9XTl9QUk9UT0NPTFMgPSBmYWxzZTtcbiAgLyogRGVjaWRlIGlmIHNlbGYtY2xvc2luZyB0YWdzIGluIGF0dHJpYnV0ZXMgYXJlIGFsbG93ZWQuXG4gICAqIFVzdWFsbHkgcmVtb3ZlZCBkdWUgdG8gYSBtWFNTIGlzc3VlIGluIGpRdWVyeSAzLjAgKi9cbiAgbGV0IEFMTE9XX1NFTEZfQ0xPU0VfSU5fQVRUUiA9IHRydWU7XG4gIC8qIE91dHB1dCBzaG91bGQgYmUgc2FmZSBmb3IgY29tbW9uIHRlbXBsYXRlIGVuZ2luZXMuXG4gICAqIFRoaXMgbWVhbnMsIERPTVB1cmlmeSByZW1vdmVzIGRhdGEgYXR0cmlidXRlcywgbXVzdGFjaGVzIGFuZCBFUkJcbiAgICovXG4gIGxldCBTQUZFX0ZPUl9URU1QTEFURVMgPSBmYWxzZTtcbiAgLyogT3V0cHV0IHNob3VsZCBiZSBzYWZlIGV2ZW4gZm9yIFhNTCB1c2VkIHdpdGhpbiBIVE1MIGFuZCBhbGlrZS5cbiAgICogVGhpcyBtZWFucywgRE9NUHVyaWZ5IHJlbW92ZXMgY29tbWVudHMgd2hlbiBjb250YWluaW5nIHJpc2t5IGNvbnRlbnQuXG4gICAqL1xuICBsZXQgU0FGRV9GT1JfWE1MID0gdHJ1ZTtcbiAgLyogRGVjaWRlIGlmIGRvY3VtZW50IHdpdGggPGh0bWw+Li4uIHNob3VsZCBiZSByZXR1cm5lZCAqL1xuICBsZXQgV0hPTEVfRE9DVU1FTlQgPSBmYWxzZTtcbiAgLyogVHJhY2sgd2hldGhlciBjb25maWcgaXMgYWxyZWFkeSBzZXQgb24gdGhpcyBpbnN0YW5jZSBvZiBET01QdXJpZnkuICovXG4gIGxldCBTRVRfQ09ORklHID0gZmFsc2U7XG4gIC8qIERlY2lkZSBpZiBhbGwgZWxlbWVudHMgKGUuZy4gc3R5bGUsIHNjcmlwdCkgbXVzdCBiZSBjaGlsZHJlbiBvZlxuICAgKiBkb2N1bWVudC5ib2R5LiBCeSBkZWZhdWx0LCBicm93c2VycyBtaWdodCBtb3ZlIHRoZW0gdG8gZG9jdW1lbnQuaGVhZCAqL1xuICBsZXQgRk9SQ0VfQk9EWSA9IGZhbHNlO1xuICAvKiBEZWNpZGUgaWYgYSBET00gYEhUTUxCb2R5RWxlbWVudGAgc2hvdWxkIGJlIHJldHVybmVkLCBpbnN0ZWFkIG9mIGEgaHRtbFxuICAgKiBzdHJpbmcgKG9yIGEgVHJ1c3RlZEhUTUwgb2JqZWN0IGlmIFRydXN0ZWQgVHlwZXMgYXJlIHN1cHBvcnRlZCkuXG4gICAqIElmIGBXSE9MRV9ET0NVTUVOVGAgaXMgZW5hYmxlZCBhIGBIVE1MSHRtbEVsZW1lbnRgIHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZFxuICAgKi9cbiAgbGV0IFJFVFVSTl9ET00gPSBmYWxzZTtcbiAgLyogRGVjaWRlIGlmIGEgRE9NIGBEb2N1bWVudEZyYWdtZW50YCBzaG91bGQgYmUgcmV0dXJuZWQsIGluc3RlYWQgb2YgYSBodG1sXG4gICAqIHN0cmluZyAgKG9yIGEgVHJ1c3RlZEhUTUwgb2JqZWN0IGlmIFRydXN0ZWQgVHlwZXMgYXJlIHN1cHBvcnRlZCkgKi9cbiAgbGV0IFJFVFVSTl9ET01fRlJBR01FTlQgPSBmYWxzZTtcbiAgLyogVHJ5IHRvIHJldHVybiBhIFRydXN0ZWQgVHlwZSBvYmplY3QgaW5zdGVhZCBvZiBhIHN0cmluZywgcmV0dXJuIGEgc3RyaW5nIGluXG4gICAqIGNhc2UgVHJ1c3RlZCBUeXBlcyBhcmUgbm90IHN1cHBvcnRlZCAgKi9cbiAgbGV0IFJFVFVSTl9UUlVTVEVEX1RZUEUgPSBmYWxzZTtcbiAgLyogT3V0cHV0IHNob3VsZCBiZSBmcmVlIGZyb20gRE9NIGNsb2JiZXJpbmcgYXR0YWNrcz9cbiAgICogVGhpcyBzYW5pdGl6ZXMgbWFya3VwcyBuYW1lZCB3aXRoIGNvbGxpZGluZywgY2xvYmJlcmFibGUgYnVpbHQtaW4gRE9NIEFQSXMuXG4gICAqL1xuICBsZXQgU0FOSVRJWkVfRE9NID0gdHJ1ZTtcbiAgLyogQWNoaWV2ZSBmdWxsIERPTSBDbG9iYmVyaW5nIHByb3RlY3Rpb24gYnkgaXNvbGF0aW5nIHRoZSBuYW1lc3BhY2Ugb2YgbmFtZWRcbiAgICogcHJvcGVydGllcyBhbmQgSlMgdmFyaWFibGVzLCBtaXRpZ2F0aW5nIGF0dGFja3MgdGhhdCBhYnVzZSB0aGUgSFRNTC9ET00gc3BlYyBydWxlcy5cbiAgICpcbiAgICogSFRNTC9ET00gc3BlYyBydWxlcyB0aGF0IGVuYWJsZSBET00gQ2xvYmJlcmluZzpcbiAgICogICAtIE5hbWVkIEFjY2VzcyBvbiBXaW5kb3cgKMKnNy4zLjMpXG4gICAqICAgLSBET00gVHJlZSBBY2Nlc3NvcnMgKMKnMy4xLjUpXG4gICAqICAgLSBGb3JtIEVsZW1lbnQgUGFyZW50LUNoaWxkIFJlbGF0aW9ucyAowqc0LjEwLjMpXG4gICAqICAgLSBJZnJhbWUgc3JjZG9jIC8gTmVzdGVkIFdpbmRvd1Byb3hpZXMgKMKnNC44LjUpXG4gICAqICAgLSBIVE1MQ29sbGVjdGlvbiAowqc0LjIuMTAuMilcbiAgICpcbiAgICogTmFtZXNwYWNlIGlzb2xhdGlvbiBpcyBpbXBsZW1lbnRlZCBieSBwcmVmaXhpbmcgYGlkYCBhbmQgYG5hbWVgIGF0dHJpYnV0ZXNcbiAgICogd2l0aCBhIGNvbnN0YW50IHN0cmluZywgaS5lLiwgYHVzZXItY29udGVudC1gXG4gICAqL1xuICBsZXQgU0FOSVRJWkVfTkFNRURfUFJPUFMgPSBmYWxzZTtcbiAgY29uc3QgU0FOSVRJWkVfTkFNRURfUFJPUFNfUFJFRklYID0gJ3VzZXItY29udGVudC0nO1xuICAvKiBLZWVwIGVsZW1lbnQgY29udGVudCB3aGVuIHJlbW92aW5nIGVsZW1lbnQ/ICovXG4gIGxldCBLRUVQX0NPTlRFTlQgPSB0cnVlO1xuICAvKiBJZiBhIGBOb2RlYCBpcyBwYXNzZWQgdG8gc2FuaXRpemUoKSwgdGhlbiBwZXJmb3JtcyBzYW5pdGl6YXRpb24gaW4tcGxhY2UgaW5zdGVhZFxuICAgKiBvZiBpbXBvcnRpbmcgaXQgaW50byBhIG5ldyBEb2N1bWVudCBhbmQgcmV0dXJuaW5nIGEgc2FuaXRpemVkIGNvcHkgKi9cbiAgbGV0IElOX1BMQUNFID0gZmFsc2U7XG4gIC8qIEFsbG93IHVzYWdlIG9mIHByb2ZpbGVzIGxpa2UgaHRtbCwgc3ZnIGFuZCBtYXRoTWwgKi9cbiAgbGV0IFVTRV9QUk9GSUxFUyA9IHt9O1xuICAvKiBUYWdzIHRvIGlnbm9yZSBjb250ZW50IG9mIHdoZW4gS0VFUF9DT05URU5UIGlzIHRydWUgKi9cbiAgbGV0IEZPUkJJRF9DT05URU5UUyA9IG51bGw7XG4gIGNvbnN0IERFRkFVTFRfRk9SQklEX0NPTlRFTlRTID0gYWRkVG9TZXQoe30sIFsnYW5ub3RhdGlvbi14bWwnLCAnYXVkaW8nLCAnY29sZ3JvdXAnLCAnZGVzYycsICdmb3JlaWdub2JqZWN0JywgJ2hlYWQnLCAnaWZyYW1lJywgJ21hdGgnLCAnbWknLCAnbW4nLCAnbW8nLCAnbXMnLCAnbXRleHQnLCAnbm9lbWJlZCcsICdub2ZyYW1lcycsICdub3NjcmlwdCcsICdwbGFpbnRleHQnLCAnc2NyaXB0JywgJ3N0eWxlJywgJ3N2ZycsICd0ZW1wbGF0ZScsICd0aGVhZCcsICd0aXRsZScsICd2aWRlbycsICd4bXAnXSk7XG4gIC8qIFRhZ3MgdGhhdCBhcmUgc2FmZSBmb3IgZGF0YTogVVJJcyAqL1xuICBsZXQgREFUQV9VUklfVEFHUyA9IG51bGw7XG4gIGNvbnN0IERFRkFVTFRfREFUQV9VUklfVEFHUyA9IGFkZFRvU2V0KHt9LCBbJ2F1ZGlvJywgJ3ZpZGVvJywgJ2ltZycsICdzb3VyY2UnLCAnaW1hZ2UnLCAndHJhY2snXSk7XG4gIC8qIEF0dHJpYnV0ZXMgc2FmZSBmb3IgdmFsdWVzIGxpa2UgXCJqYXZhc2NyaXB0OlwiICovXG4gIGxldCBVUklfU0FGRV9BVFRSSUJVVEVTID0gbnVsbDtcbiAgY29uc3QgREVGQVVMVF9VUklfU0FGRV9BVFRSSUJVVEVTID0gYWRkVG9TZXQoe30sIFsnYWx0JywgJ2NsYXNzJywgJ2ZvcicsICdpZCcsICdsYWJlbCcsICduYW1lJywgJ3BhdHRlcm4nLCAncGxhY2Vob2xkZXInLCAncm9sZScsICdzdW1tYXJ5JywgJ3RpdGxlJywgJ3ZhbHVlJywgJ3N0eWxlJywgJ3htbG5zJ10pO1xuICBjb25zdCBNQVRITUxfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnO1xuICBjb25zdCBTVkdfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgY29uc3QgSFRNTF9OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG4gIC8qIERvY3VtZW50IG5hbWVzcGFjZSAqL1xuICBsZXQgTkFNRVNQQUNFID0gSFRNTF9OQU1FU1BBQ0U7XG4gIGxldCBJU19FTVBUWV9JTlBVVCA9IGZhbHNlO1xuICAvKiBBbGxvd2VkIFhIVE1MK1hNTCBuYW1lc3BhY2VzICovXG4gIGxldCBBTExPV0VEX05BTUVTUEFDRVMgPSBudWxsO1xuICBjb25zdCBERUZBVUxUX0FMTE9XRURfTkFNRVNQQUNFUyA9IGFkZFRvU2V0KHt9LCBbTUFUSE1MX05BTUVTUEFDRSwgU1ZHX05BTUVTUEFDRSwgSFRNTF9OQU1FU1BBQ0VdLCBzdHJpbmdUb1N0cmluZyk7XG4gIGxldCBNQVRITUxfVEVYVF9JTlRFR1JBVElPTl9QT0lOVFMgPSBhZGRUb1NldCh7fSwgWydtaScsICdtbycsICdtbicsICdtcycsICdtdGV4dCddKTtcbiAgbGV0IEhUTUxfSU5URUdSQVRJT05fUE9JTlRTID0gYWRkVG9TZXQoe30sIFsnYW5ub3RhdGlvbi14bWwnXSk7XG4gIC8vIENlcnRhaW4gZWxlbWVudHMgYXJlIGFsbG93ZWQgaW4gYm90aCBTVkcgYW5kIEhUTUxcbiAgLy8gbmFtZXNwYWNlLiBXZSBuZWVkIHRvIHNwZWNpZnkgdGhlbSBleHBsaWNpdGx5XG4gIC8vIHNvIHRoYXQgdGhleSBkb24ndCBnZXQgZXJyb25lb3VzbHkgZGVsZXRlZCBmcm9tXG4gIC8vIEhUTUwgbmFtZXNwYWNlLlxuICBjb25zdCBDT01NT05fU1ZHX0FORF9IVE1MX0VMRU1FTlRTID0gYWRkVG9TZXQoe30sIFsndGl0bGUnLCAnc3R5bGUnLCAnZm9udCcsICdhJywgJ3NjcmlwdCddKTtcbiAgLyogUGFyc2luZyBvZiBzdHJpY3QgWEhUTUwgZG9jdW1lbnRzICovXG4gIGxldCBQQVJTRVJfTUVESUFfVFlQRSA9IG51bGw7XG4gIGNvbnN0IFNVUFBPUlRFRF9QQVJTRVJfTUVESUFfVFlQRVMgPSBbJ2FwcGxpY2F0aW9uL3hodG1sK3htbCcsICd0ZXh0L2h0bWwnXTtcbiAgY29uc3QgREVGQVVMVF9QQVJTRVJfTUVESUFfVFlQRSA9ICd0ZXh0L2h0bWwnO1xuICBsZXQgdHJhbnNmb3JtQ2FzZUZ1bmMgPSBudWxsO1xuICAvKiBLZWVwIGEgcmVmZXJlbmNlIHRvIGNvbmZpZyB0byBwYXNzIHRvIGhvb2tzICovXG4gIGxldCBDT05GSUcgPSBudWxsO1xuICAvKiBJZGVhbGx5LCBkbyBub3QgdG91Y2ggYW55dGhpbmcgYmVsb3cgdGhpcyBsaW5lICovXG4gIC8qIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gKi9cbiAgY29uc3QgZm9ybUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gIGNvbnN0IGlzUmVnZXhPckZ1bmN0aW9uID0gZnVuY3Rpb24gaXNSZWdleE9yRnVuY3Rpb24odGVzdFZhbHVlKSB7XG4gICAgcmV0dXJuIHRlc3RWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCB8fCB0ZXN0VmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbjtcbiAgfTtcbiAgLyoqXG4gICAqIF9wYXJzZUNvbmZpZ1xuICAgKlxuICAgKiBAcGFyYW0gY2ZnIG9wdGlvbmFsIGNvbmZpZyBsaXRlcmFsXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuICBjb25zdCBfcGFyc2VDb25maWcgPSBmdW5jdGlvbiBfcGFyc2VDb25maWcoKSB7XG4gICAgbGV0IGNmZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKENPTkZJRyAmJiBDT05GSUcgPT09IGNmZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKiBTaGllbGQgY29uZmlndXJhdGlvbiBvYmplY3QgZnJvbSB0YW1wZXJpbmcgKi9cbiAgICBpZiAoIWNmZyB8fCB0eXBlb2YgY2ZnICE9PSAnb2JqZWN0Jykge1xuICAgICAgY2ZnID0ge307XG4gICAgfVxuICAgIC8qIFNoaWVsZCBjb25maWd1cmF0aW9uIG9iamVjdCBmcm9tIHByb3RvdHlwZSBwb2xsdXRpb24gKi9cbiAgICBjZmcgPSBjbG9uZShjZmcpO1xuICAgIFBBUlNFUl9NRURJQV9UWVBFID1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItaW5jbHVkZXNcbiAgICBTVVBQT1JURURfUEFSU0VSX01FRElBX1RZUEVTLmluZGV4T2YoY2ZnLlBBUlNFUl9NRURJQV9UWVBFKSA9PT0gLTEgPyBERUZBVUxUX1BBUlNFUl9NRURJQV9UWVBFIDogY2ZnLlBBUlNFUl9NRURJQV9UWVBFO1xuICAgIC8vIEhUTUwgdGFncyBhbmQgYXR0cmlidXRlcyBhcmUgbm90IGNhc2Utc2Vuc2l0aXZlLCBjb252ZXJ0aW5nIHRvIGxvd2VyY2FzZS4gS2VlcGluZyBYSFRNTCBhcyBpcy5cbiAgICB0cmFuc2Zvcm1DYXNlRnVuYyA9IFBBUlNFUl9NRURJQV9UWVBFID09PSAnYXBwbGljYXRpb24veGh0bWwreG1sJyA/IHN0cmluZ1RvU3RyaW5nIDogc3RyaW5nVG9Mb3dlckNhc2U7XG4gICAgLyogU2V0IGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyAqL1xuICAgIEFMTE9XRURfVEFHUyA9IG9iamVjdEhhc093blByb3BlcnR5KGNmZywgJ0FMTE9XRURfVEFHUycpID8gYWRkVG9TZXQoe30sIGNmZy5BTExPV0VEX1RBR1MsIHRyYW5zZm9ybUNhc2VGdW5jKSA6IERFRkFVTFRfQUxMT1dFRF9UQUdTO1xuICAgIEFMTE9XRURfQVRUUiA9IG9iamVjdEhhc093blByb3BlcnR5KGNmZywgJ0FMTE9XRURfQVRUUicpID8gYWRkVG9TZXQoe30sIGNmZy5BTExPV0VEX0FUVFIsIHRyYW5zZm9ybUNhc2VGdW5jKSA6IERFRkFVTFRfQUxMT1dFRF9BVFRSO1xuICAgIEFMTE9XRURfTkFNRVNQQUNFUyA9IG9iamVjdEhhc093blByb3BlcnR5KGNmZywgJ0FMTE9XRURfTkFNRVNQQUNFUycpID8gYWRkVG9TZXQoe30sIGNmZy5BTExPV0VEX05BTUVTUEFDRVMsIHN0cmluZ1RvU3RyaW5nKSA6IERFRkFVTFRfQUxMT1dFRF9OQU1FU1BBQ0VTO1xuICAgIFVSSV9TQUZFX0FUVFJJQlVURVMgPSBvYmplY3RIYXNPd25Qcm9wZXJ0eShjZmcsICdBRERfVVJJX1NBRkVfQVRUUicpID8gYWRkVG9TZXQoY2xvbmUoREVGQVVMVF9VUklfU0FGRV9BVFRSSUJVVEVTKSwgY2ZnLkFERF9VUklfU0FGRV9BVFRSLCB0cmFuc2Zvcm1DYXNlRnVuYykgOiBERUZBVUxUX1VSSV9TQUZFX0FUVFJJQlVURVM7XG4gICAgREFUQV9VUklfVEFHUyA9IG9iamVjdEhhc093blByb3BlcnR5KGNmZywgJ0FERF9EQVRBX1VSSV9UQUdTJykgPyBhZGRUb1NldChjbG9uZShERUZBVUxUX0RBVEFfVVJJX1RBR1MpLCBjZmcuQUREX0RBVEFfVVJJX1RBR1MsIHRyYW5zZm9ybUNhc2VGdW5jKSA6IERFRkFVTFRfREFUQV9VUklfVEFHUztcbiAgICBGT1JCSURfQ09OVEVOVFMgPSBvYmplY3RIYXNPd25Qcm9wZXJ0eShjZmcsICdGT1JCSURfQ09OVEVOVFMnKSA/IGFkZFRvU2V0KHt9LCBjZmcuRk9SQklEX0NPTlRFTlRTLCB0cmFuc2Zvcm1DYXNlRnVuYykgOiBERUZBVUxUX0ZPUkJJRF9DT05URU5UUztcbiAgICBGT1JCSURfVEFHUyA9IG9iamVjdEhhc093blByb3BlcnR5KGNmZywgJ0ZPUkJJRF9UQUdTJykgPyBhZGRUb1NldCh7fSwgY2ZnLkZPUkJJRF9UQUdTLCB0cmFuc2Zvcm1DYXNlRnVuYykgOiB7fTtcbiAgICBGT1JCSURfQVRUUiA9IG9iamVjdEhhc093blByb3BlcnR5KGNmZywgJ0ZPUkJJRF9BVFRSJykgPyBhZGRUb1NldCh7fSwgY2ZnLkZPUkJJRF9BVFRSLCB0cmFuc2Zvcm1DYXNlRnVuYykgOiB7fTtcbiAgICBVU0VfUFJPRklMRVMgPSBvYmplY3RIYXNPd25Qcm9wZXJ0eShjZmcsICdVU0VfUFJPRklMRVMnKSA/IGNmZy5VU0VfUFJPRklMRVMgOiBmYWxzZTtcbiAgICBBTExPV19BUklBX0FUVFIgPSBjZmcuQUxMT1dfQVJJQV9BVFRSICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgQUxMT1dfREFUQV9BVFRSID0gY2ZnLkFMTE9XX0RBVEFfQVRUUiAhPT0gZmFsc2U7IC8vIERlZmF1bHQgdHJ1ZVxuICAgIEFMTE9XX1VOS05PV05fUFJPVE9DT0xTID0gY2ZnLkFMTE9XX1VOS05PV05fUFJPVE9DT0xTIHx8IGZhbHNlOyAvLyBEZWZhdWx0IGZhbHNlXG4gICAgQUxMT1dfU0VMRl9DTE9TRV9JTl9BVFRSID0gY2ZnLkFMTE9XX1NFTEZfQ0xPU0VfSU5fQVRUUiAhPT0gZmFsc2U7IC8vIERlZmF1bHQgdHJ1ZVxuICAgIFNBRkVfRk9SX1RFTVBMQVRFUyA9IGNmZy5TQUZFX0ZPUl9URU1QTEFURVMgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBTQUZFX0ZPUl9YTUwgPSBjZmcuU0FGRV9GT1JfWE1MICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgV0hPTEVfRE9DVU1FTlQgPSBjZmcuV0hPTEVfRE9DVU1FTlQgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBSRVRVUk5fRE9NID0gY2ZnLlJFVFVSTl9ET00gfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBSRVRVUk5fRE9NX0ZSQUdNRU5UID0gY2ZnLlJFVFVSTl9ET01fRlJBR01FTlQgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBSRVRVUk5fVFJVU1RFRF9UWVBFID0gY2ZnLlJFVFVSTl9UUlVTVEVEX1RZUEUgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBGT1JDRV9CT0RZID0gY2ZnLkZPUkNFX0JPRFkgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBTQU5JVElaRV9ET00gPSBjZmcuU0FOSVRJWkVfRE9NICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgU0FOSVRJWkVfTkFNRURfUFJPUFMgPSBjZmcuU0FOSVRJWkVfTkFNRURfUFJPUFMgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBLRUVQX0NPTlRFTlQgPSBjZmcuS0VFUF9DT05URU5UICE9PSBmYWxzZTsgLy8gRGVmYXVsdCB0cnVlXG4gICAgSU5fUExBQ0UgPSBjZmcuSU5fUExBQ0UgfHwgZmFsc2U7IC8vIERlZmF1bHQgZmFsc2VcbiAgICBJU19BTExPV0VEX1VSSSQxID0gY2ZnLkFMTE9XRURfVVJJX1JFR0VYUCB8fCBJU19BTExPV0VEX1VSSTtcbiAgICBOQU1FU1BBQ0UgPSBjZmcuTkFNRVNQQUNFIHx8IEhUTUxfTkFNRVNQQUNFO1xuICAgIE1BVEhNTF9URVhUX0lOVEVHUkFUSU9OX1BPSU5UUyA9IGNmZy5NQVRITUxfVEVYVF9JTlRFR1JBVElPTl9QT0lOVFMgfHwgTUFUSE1MX1RFWFRfSU5URUdSQVRJT05fUE9JTlRTO1xuICAgIEhUTUxfSU5URUdSQVRJT05fUE9JTlRTID0gY2ZnLkhUTUxfSU5URUdSQVRJT05fUE9JTlRTIHx8IEhUTUxfSU5URUdSQVRJT05fUE9JTlRTO1xuICAgIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HID0gY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HIHx8IHt9O1xuICAgIGlmIChjZmcuQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcgJiYgaXNSZWdleE9yRnVuY3Rpb24oY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjaykpIHtcbiAgICAgIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVjayA9IGNmZy5DVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2s7XG4gICAgfVxuICAgIGlmIChjZmcuQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcgJiYgaXNSZWdleE9yRnVuY3Rpb24oY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVjaykpIHtcbiAgICAgIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVjayA9IGNmZy5DVVNUT01fRUxFTUVOVF9IQU5ETElORy5hdHRyaWJ1dGVOYW1lQ2hlY2s7XG4gICAgfVxuICAgIGlmIChjZmcuQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcgJiYgdHlwZW9mIGNmZy5DVVNUT01fRUxFTUVOVF9IQU5ETElORy5hbGxvd0N1c3RvbWl6ZWRCdWlsdEluRWxlbWVudHMgPT09ICdib29sZWFuJykge1xuICAgICAgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcuYWxsb3dDdXN0b21pemVkQnVpbHRJbkVsZW1lbnRzID0gY2ZnLkNVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmFsbG93Q3VzdG9taXplZEJ1aWx0SW5FbGVtZW50cztcbiAgICB9XG4gICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUykge1xuICAgICAgQUxMT1dfREFUQV9BVFRSID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChSRVRVUk5fRE9NX0ZSQUdNRU5UKSB7XG4gICAgICBSRVRVUk5fRE9NID0gdHJ1ZTtcbiAgICB9XG4gICAgLyogUGFyc2UgcHJvZmlsZSBpbmZvICovXG4gICAgaWYgKFVTRV9QUk9GSUxFUykge1xuICAgICAgQUxMT1dFRF9UQUdTID0gYWRkVG9TZXQoe30sIHRleHQpO1xuICAgICAgQUxMT1dFRF9BVFRSID0gW107XG4gICAgICBpZiAoVVNFX1BST0ZJTEVTLmh0bWwgPT09IHRydWUpIHtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9UQUdTLCBodG1sJDEpO1xuICAgICAgICBhZGRUb1NldChBTExPV0VEX0FUVFIsIGh0bWwpO1xuICAgICAgfVxuICAgICAgaWYgKFVTRV9QUk9GSUxFUy5zdmcgPT09IHRydWUpIHtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9UQUdTLCBzdmckMSk7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgc3ZnKTtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCB4bWwpO1xuICAgICAgfVxuICAgICAgaWYgKFVTRV9QUk9GSUxFUy5zdmdGaWx0ZXJzID09PSB0cnVlKSB7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfVEFHUywgc3ZnRmlsdGVycyk7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgc3ZnKTtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCB4bWwpO1xuICAgICAgfVxuICAgICAgaWYgKFVTRV9QUk9GSUxFUy5tYXRoTWwgPT09IHRydWUpIHtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9UQUdTLCBtYXRoTWwkMSk7XG4gICAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgbWF0aE1sKTtcbiAgICAgICAgYWRkVG9TZXQoQUxMT1dFRF9BVFRSLCB4bWwpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBNZXJnZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgKi9cbiAgICBpZiAoY2ZnLkFERF9UQUdTKSB7XG4gICAgICBpZiAoQUxMT1dFRF9UQUdTID09PSBERUZBVUxUX0FMTE9XRURfVEFHUykge1xuICAgICAgICBBTExPV0VEX1RBR1MgPSBjbG9uZShBTExPV0VEX1RBR1MpO1xuICAgICAgfVxuICAgICAgYWRkVG9TZXQoQUxMT1dFRF9UQUdTLCBjZmcuQUREX1RBR1MsIHRyYW5zZm9ybUNhc2VGdW5jKTtcbiAgICB9XG4gICAgaWYgKGNmZy5BRERfQVRUUikge1xuICAgICAgaWYgKEFMTE9XRURfQVRUUiA9PT0gREVGQVVMVF9BTExPV0VEX0FUVFIpIHtcbiAgICAgICAgQUxMT1dFRF9BVFRSID0gY2xvbmUoQUxMT1dFRF9BVFRSKTtcbiAgICAgIH1cbiAgICAgIGFkZFRvU2V0KEFMTE9XRURfQVRUUiwgY2ZnLkFERF9BVFRSLCB0cmFuc2Zvcm1DYXNlRnVuYyk7XG4gICAgfVxuICAgIGlmIChjZmcuQUREX1VSSV9TQUZFX0FUVFIpIHtcbiAgICAgIGFkZFRvU2V0KFVSSV9TQUZFX0FUVFJJQlVURVMsIGNmZy5BRERfVVJJX1NBRkVfQVRUUiwgdHJhbnNmb3JtQ2FzZUZ1bmMpO1xuICAgIH1cbiAgICBpZiAoY2ZnLkZPUkJJRF9DT05URU5UUykge1xuICAgICAgaWYgKEZPUkJJRF9DT05URU5UUyA9PT0gREVGQVVMVF9GT1JCSURfQ09OVEVOVFMpIHtcbiAgICAgICAgRk9SQklEX0NPTlRFTlRTID0gY2xvbmUoRk9SQklEX0NPTlRFTlRTKTtcbiAgICAgIH1cbiAgICAgIGFkZFRvU2V0KEZPUkJJRF9DT05URU5UUywgY2ZnLkZPUkJJRF9DT05URU5UUywgdHJhbnNmb3JtQ2FzZUZ1bmMpO1xuICAgIH1cbiAgICAvKiBBZGQgI3RleHQgaW4gY2FzZSBLRUVQX0NPTlRFTlQgaXMgc2V0IHRvIHRydWUgKi9cbiAgICBpZiAoS0VFUF9DT05URU5UKSB7XG4gICAgICBBTExPV0VEX1RBR1NbJyN0ZXh0J10gPSB0cnVlO1xuICAgIH1cbiAgICAvKiBBZGQgaHRtbCwgaGVhZCBhbmQgYm9keSB0byBBTExPV0VEX1RBR1MgaW4gY2FzZSBXSE9MRV9ET0NVTUVOVCBpcyB0cnVlICovXG4gICAgaWYgKFdIT0xFX0RPQ1VNRU5UKSB7XG4gICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIFsnaHRtbCcsICdoZWFkJywgJ2JvZHknXSk7XG4gICAgfVxuICAgIC8qIEFkZCB0Ym9keSB0byBBTExPV0VEX1RBR1MgaW4gY2FzZSB0YWJsZXMgYXJlIHBlcm1pdHRlZCwgc2VlICMyODYsICMzNjUgKi9cbiAgICBpZiAoQUxMT1dFRF9UQUdTLnRhYmxlKSB7XG4gICAgICBhZGRUb1NldChBTExPV0VEX1RBR1MsIFsndGJvZHknXSk7XG4gICAgICBkZWxldGUgRk9SQklEX1RBR1MudGJvZHk7XG4gICAgfVxuICAgIGlmIChjZmcuVFJVU1RFRF9UWVBFU19QT0xJQ1kpIHtcbiAgICAgIGlmICh0eXBlb2YgY2ZnLlRSVVNURURfVFlQRVNfUE9MSUNZLmNyZWF0ZUhUTUwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgdHlwZUVycm9yQ3JlYXRlKCdUUlVTVEVEX1RZUEVTX1BPTElDWSBjb25maWd1cmF0aW9uIG9wdGlvbiBtdXN0IHByb3ZpZGUgYSBcImNyZWF0ZUhUTUxcIiBob29rLicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjZmcuVFJVU1RFRF9UWVBFU19QT0xJQ1kuY3JlYXRlU2NyaXB0VVJMICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IHR5cGVFcnJvckNyZWF0ZSgnVFJVU1RFRF9UWVBFU19QT0xJQ1kgY29uZmlndXJhdGlvbiBvcHRpb24gbXVzdCBwcm92aWRlIGEgXCJjcmVhdGVTY3JpcHRVUkxcIiBob29rLicpO1xuICAgICAgfVxuICAgICAgLy8gT3ZlcndyaXRlIGV4aXN0aW5nIFRydXN0ZWRUeXBlcyBwb2xpY3kuXG4gICAgICB0cnVzdGVkVHlwZXNQb2xpY3kgPSBjZmcuVFJVU1RFRF9UWVBFU19QT0xJQ1k7XG4gICAgICAvLyBTaWduIGxvY2FsIHZhcmlhYmxlcyByZXF1aXJlZCBieSBgc2FuaXRpemVgLlxuICAgICAgZW1wdHlIVE1MID0gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVbmluaXRpYWxpemVkIHBvbGljeSwgYXR0ZW1wdCB0byBpbml0aWFsaXplIHRoZSBpbnRlcm5hbCBkb21wdXJpZnkgcG9saWN5LlxuICAgICAgaWYgKHRydXN0ZWRUeXBlc1BvbGljeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRydXN0ZWRUeXBlc1BvbGljeSA9IF9jcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3kodHJ1c3RlZFR5cGVzLCBjdXJyZW50U2NyaXB0KTtcbiAgICAgIH1cbiAgICAgIC8vIElmIGNyZWF0aW5nIHRoZSBpbnRlcm5hbCBwb2xpY3kgc3VjY2VlZGVkIHNpZ24gaW50ZXJuYWwgdmFyaWFibGVzLlxuICAgICAgaWYgKHRydXN0ZWRUeXBlc1BvbGljeSAhPT0gbnVsbCAmJiB0eXBlb2YgZW1wdHlIVE1MID09PSAnc3RyaW5nJykge1xuICAgICAgICBlbXB0eUhUTUwgPSB0cnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTCgnJyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFByZXZlbnQgZnVydGhlciBtYW5pcHVsYXRpb24gb2YgY29uZmlndXJhdGlvbi5cbiAgICAvLyBOb3QgYXZhaWxhYmxlIGluIElFOCwgU2FmYXJpIDUsIGV0Yy5cbiAgICBpZiAoZnJlZXplKSB7XG4gICAgICBmcmVlemUoY2ZnKTtcbiAgICB9XG4gICAgQ09ORklHID0gY2ZnO1xuICB9O1xuICAvKiBLZWVwIHRyYWNrIG9mIGFsbCBwb3NzaWJsZSBTVkcgYW5kIE1hdGhNTCB0YWdzXG4gICAqIHNvIHRoYXQgd2UgY2FuIHBlcmZvcm0gdGhlIG5hbWVzcGFjZSBjaGVja3NcbiAgICogY29ycmVjdGx5LiAqL1xuICBjb25zdCBBTExfU1ZHX1RBR1MgPSBhZGRUb1NldCh7fSwgWy4uLnN2ZyQxLCAuLi5zdmdGaWx0ZXJzLCAuLi5zdmdEaXNhbGxvd2VkXSk7XG4gIGNvbnN0IEFMTF9NQVRITUxfVEFHUyA9IGFkZFRvU2V0KHt9LCBbLi4ubWF0aE1sJDEsIC4uLm1hdGhNbERpc2FsbG93ZWRdKTtcbiAgLyoqXG4gICAqIEBwYXJhbSBlbGVtZW50IGEgRE9NIGVsZW1lbnQgd2hvc2UgbmFtZXNwYWNlIGlzIGJlaW5nIGNoZWNrZWRcbiAgICogQHJldHVybnMgUmV0dXJuIGZhbHNlIGlmIHRoZSBlbGVtZW50IGhhcyBhXG4gICAqICBuYW1lc3BhY2UgdGhhdCBhIHNwZWMtY29tcGxpYW50IHBhcnNlciB3b3VsZCBuZXZlclxuICAgKiAgcmV0dXJuLiBSZXR1cm4gdHJ1ZSBvdGhlcndpc2UuXG4gICAqL1xuICBjb25zdCBfY2hlY2tWYWxpZE5hbWVzcGFjZSA9IGZ1bmN0aW9uIF9jaGVja1ZhbGlkTmFtZXNwYWNlKGVsZW1lbnQpIHtcbiAgICBsZXQgcGFyZW50ID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgICAvLyBJbiBKU0RPTSwgaWYgd2UncmUgaW5zaWRlIHNoYWRvdyBET00sIHRoZW4gcGFyZW50Tm9kZVxuICAgIC8vIGNhbiBiZSBudWxsLiBXZSBqdXN0IHNpbXVsYXRlIHBhcmVudCBpbiB0aGlzIGNhc2UuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXBhcmVudC50YWdOYW1lKSB7XG4gICAgICBwYXJlbnQgPSB7XG4gICAgICAgIG5hbWVzcGFjZVVSSTogTkFNRVNQQUNFLFxuICAgICAgICB0YWdOYW1lOiAndGVtcGxhdGUnXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB0YWdOYW1lID0gc3RyaW5nVG9Mb3dlckNhc2UoZWxlbWVudC50YWdOYW1lKTtcbiAgICBjb25zdCBwYXJlbnRUYWdOYW1lID0gc3RyaW5nVG9Mb3dlckNhc2UocGFyZW50LnRhZ05hbWUpO1xuICAgIGlmICghQUxMT1dFRF9OQU1FU1BBQ0VTW2VsZW1lbnQubmFtZXNwYWNlVVJJXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IFNWR19OQU1FU1BBQ0UpIHtcbiAgICAgIC8vIFRoZSBvbmx5IHdheSB0byBzd2l0Y2ggZnJvbSBIVE1MIG5hbWVzcGFjZSB0byBTVkdcbiAgICAgIC8vIGlzIHZpYSA8c3ZnPi4gSWYgaXQgaGFwcGVucyB2aWEgYW55IG90aGVyIHRhZywgdGhlblxuICAgICAgLy8gaXQgc2hvdWxkIGJlIGtpbGxlZC5cbiAgICAgIGlmIChwYXJlbnQubmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ3N2Zyc7XG4gICAgICB9XG4gICAgICAvLyBUaGUgb25seSB3YXkgdG8gc3dpdGNoIGZyb20gTWF0aE1MIHRvIFNWRyBpcyB2aWFgXG4gICAgICAvLyBzdmcgaWYgcGFyZW50IGlzIGVpdGhlciA8YW5ub3RhdGlvbi14bWw+IG9yIE1hdGhNTFxuICAgICAgLy8gdGV4dCBpbnRlZ3JhdGlvbiBwb2ludHMuXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gTUFUSE1MX05BTUVTUEFDRSkge1xuICAgICAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ3N2ZycgJiYgKHBhcmVudFRhZ05hbWUgPT09ICdhbm5vdGF0aW9uLXhtbCcgfHwgTUFUSE1MX1RFWFRfSU5URUdSQVRJT05fUE9JTlRTW3BhcmVudFRhZ05hbWVdKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIG9ubHkgYWxsb3cgZWxlbWVudHMgdGhhdCBhcmUgZGVmaW5lZCBpbiBTVkdcbiAgICAgIC8vIHNwZWMuIEFsbCBvdGhlcnMgYXJlIGRpc2FsbG93ZWQgaW4gU1ZHIG5hbWVzcGFjZS5cbiAgICAgIHJldHVybiBCb29sZWFuKEFMTF9TVkdfVEFHU1t0YWdOYW1lXSk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0gTUFUSE1MX05BTUVTUEFDRSkge1xuICAgICAgLy8gVGhlIG9ubHkgd2F5IHRvIHN3aXRjaCBmcm9tIEhUTUwgbmFtZXNwYWNlIHRvIE1hdGhNTFxuICAgICAgLy8gaXMgdmlhIDxtYXRoPi4gSWYgaXQgaGFwcGVucyB2aWEgYW55IG90aGVyIHRhZywgdGhlblxuICAgICAgLy8gaXQgc2hvdWxkIGJlIGtpbGxlZC5cbiAgICAgIGlmIChwYXJlbnQubmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ21hdGgnO1xuICAgICAgfVxuICAgICAgLy8gVGhlIG9ubHkgd2F5IHRvIHN3aXRjaCBmcm9tIFNWRyB0byBNYXRoTUwgaXMgdmlhXG4gICAgICAvLyA8bWF0aD4gYW5kIEhUTUwgaW50ZWdyYXRpb24gcG9pbnRzXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRSkge1xuICAgICAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ21hdGgnICYmIEhUTUxfSU5URUdSQVRJT05fUE9JTlRTW3BhcmVudFRhZ05hbWVdO1xuICAgICAgfVxuICAgICAgLy8gV2Ugb25seSBhbGxvdyBlbGVtZW50cyB0aGF0IGFyZSBkZWZpbmVkIGluIE1hdGhNTFxuICAgICAgLy8gc3BlYy4gQWxsIG90aGVycyBhcmUgZGlzYWxsb3dlZCBpbiBNYXRoTUwgbmFtZXNwYWNlLlxuICAgICAgcmV0dXJuIEJvb2xlYW4oQUxMX01BVEhNTF9UQUdTW3RhZ05hbWVdKTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQubmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgLy8gVGhlIG9ubHkgd2F5IHRvIHN3aXRjaCBmcm9tIFNWRyB0byBIVE1MIGlzIHZpYVxuICAgICAgLy8gSFRNTCBpbnRlZ3JhdGlvbiBwb2ludHMsIGFuZCBmcm9tIE1hdGhNTCB0byBIVE1MXG4gICAgICAvLyBpcyB2aWEgTWF0aE1MIHRleHQgaW50ZWdyYXRpb24gcG9pbnRzXG4gICAgICBpZiAocGFyZW50Lm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRSAmJiAhSFRNTF9JTlRFR1JBVElPTl9QT0lOVFNbcGFyZW50VGFnTmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmVudC5uYW1lc3BhY2VVUkkgPT09IE1BVEhNTF9OQU1FU1BBQ0UgJiYgIU1BVEhNTF9URVhUX0lOVEVHUkFUSU9OX1BPSU5UU1twYXJlbnRUYWdOYW1lXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBXZSBkaXNhbGxvdyB0YWdzIHRoYXQgYXJlIHNwZWNpZmljIGZvciBNYXRoTUxcbiAgICAgIC8vIG9yIFNWRyBhbmQgc2hvdWxkIG5ldmVyIGFwcGVhciBpbiBIVE1MIG5hbWVzcGFjZVxuICAgICAgcmV0dXJuICFBTExfTUFUSE1MX1RBR1NbdGFnTmFtZV0gJiYgKENPTU1PTl9TVkdfQU5EX0hUTUxfRUxFTUVOVFNbdGFnTmFtZV0gfHwgIUFMTF9TVkdfVEFHU1t0YWdOYW1lXSk7XG4gICAgfVxuICAgIC8vIEZvciBYSFRNTCBhbmQgWE1MIGRvY3VtZW50cyB0aGF0IHN1cHBvcnQgY3VzdG9tIG5hbWVzcGFjZXNcbiAgICBpZiAoUEFSU0VSX01FRElBX1RZUEUgPT09ICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnICYmIEFMTE9XRURfTkFNRVNQQUNFU1tlbGVtZW50Lm5hbWVzcGFjZVVSSV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGUgY29kZSBzaG91bGQgbmV2ZXIgcmVhY2ggdGhpcyBwbGFjZSAodGhpcyBtZWFuc1xuICAgIC8vIHRoYXQgdGhlIGVsZW1lbnQgc29tZWhvdyBnb3QgbmFtZXNwYWNlIHRoYXQgaXMgbm90XG4gICAgLy8gSFRNTCwgU1ZHLCBNYXRoTUwgb3IgYWxsb3dlZCB2aWEgQUxMT1dFRF9OQU1FU1BBQ0VTKS5cbiAgICAvLyBSZXR1cm4gZmFsc2UganVzdCBpbiBjYXNlLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbiAgLyoqXG4gICAqIF9mb3JjZVJlbW92ZVxuICAgKlxuICAgKiBAcGFyYW0gbm9kZSBhIERPTSBub2RlXG4gICAqL1xuICBjb25zdCBfZm9yY2VSZW1vdmUgPSBmdW5jdGlvbiBfZm9yY2VSZW1vdmUobm9kZSkge1xuICAgIGFycmF5UHVzaChET01QdXJpZnkucmVtb3ZlZCwge1xuICAgICAgZWxlbWVudDogbm9kZVxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItZG9tLW5vZGUtcmVtb3ZlXG4gICAgICBnZXRQYXJlbnROb2RlKG5vZGUpLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgIHJlbW92ZShub2RlKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBfcmVtb3ZlQXR0cmlidXRlXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIGFuIEF0dHJpYnV0ZSBuYW1lXG4gICAqIEBwYXJhbSBlbGVtZW50IGEgRE9NIG5vZGVcbiAgICovXG4gIGNvbnN0IF9yZW1vdmVBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfcmVtb3ZlQXR0cmlidXRlKG5hbWUsIGVsZW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgYXJyYXlQdXNoKERPTVB1cmlmeS5yZW1vdmVkLCB7XG4gICAgICAgIGF0dHJpYnV0ZTogZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpLFxuICAgICAgICBmcm9tOiBlbGVtZW50XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICBhcnJheVB1c2goRE9NUHVyaWZ5LnJlbW92ZWQsIHtcbiAgICAgICAgYXR0cmlidXRlOiBudWxsLFxuICAgICAgICBmcm9tOiBlbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgLy8gV2Ugdm9pZCBhdHRyaWJ1dGUgdmFsdWVzIGZvciB1bnJlbW92YWJsZSBcImlzXCIgYXR0cmlidXRlc1xuICAgIGlmIChuYW1lID09PSAnaXMnKSB7XG4gICAgICBpZiAoUkVUVVJOX0RPTSB8fCBSRVRVUk5fRE9NX0ZSQUdNRU5UKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgX2ZvcmNlUmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICB9IGNhdGNoIChfKSB7fVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCAnJyk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogX2luaXREb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0gZGlydHkgLSBhIHN0cmluZyBvZiBkaXJ0eSBtYXJrdXBcbiAgICogQHJldHVybiBhIERPTSwgZmlsbGVkIHdpdGggdGhlIGRpcnR5IG1hcmt1cFxuICAgKi9cbiAgY29uc3QgX2luaXREb2N1bWVudCA9IGZ1bmN0aW9uIF9pbml0RG9jdW1lbnQoZGlydHkpIHtcbiAgICAvKiBDcmVhdGUgYSBIVE1MIGRvY3VtZW50ICovXG4gICAgbGV0IGRvYyA9IG51bGw7XG4gICAgbGV0IGxlYWRpbmdXaGl0ZXNwYWNlID0gbnVsbDtcbiAgICBpZiAoRk9SQ0VfQk9EWSkge1xuICAgICAgZGlydHkgPSAnPHJlbW92ZT48L3JlbW92ZT4nICsgZGlydHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIElmIEZPUkNFX0JPRFkgaXNuJ3QgdXNlZCwgbGVhZGluZyB3aGl0ZXNwYWNlIG5lZWRzIHRvIGJlIHByZXNlcnZlZCBtYW51YWxseSAqL1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHN0cmluZ01hdGNoKGRpcnR5LCAvXltcXHJcXG5cXHQgXSsvKTtcbiAgICAgIGxlYWRpbmdXaGl0ZXNwYWNlID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzBdO1xuICAgIH1cbiAgICBpZiAoUEFSU0VSX01FRElBX1RZUEUgPT09ICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnICYmIE5BTUVTUEFDRSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICAgIC8vIFJvb3Qgb2YgWEhUTUwgZG9jIG11c3QgY29udGFpbiB4bWxucyBkZWNsYXJhdGlvbiAoc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94aHRtbDEvbm9ybWF0aXZlLmh0bWwjc3RyaWN0KVxuICAgICAgZGlydHkgPSAnPGh0bWwgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI+PGhlYWQ+PC9oZWFkPjxib2R5PicgKyBkaXJ0eSArICc8L2JvZHk+PC9odG1sPic7XG4gICAgfVxuICAgIGNvbnN0IGRpcnR5UGF5bG9hZCA9IHRydXN0ZWRUeXBlc1BvbGljeSA/IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKGRpcnR5KSA6IGRpcnR5O1xuICAgIC8qXG4gICAgICogVXNlIHRoZSBET01QYXJzZXIgQVBJIGJ5IGRlZmF1bHQsIGZhbGxiYWNrIGxhdGVyIGlmIG5lZWRzIGJlXG4gICAgICogRE9NUGFyc2VyIG5vdCB3b3JrIGZvciBzdmcgd2hlbiBoYXMgbXVsdGlwbGUgcm9vdCBlbGVtZW50LlxuICAgICAqL1xuICAgIGlmIChOQU1FU1BBQ0UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGRpcnR5UGF5bG9hZCwgUEFSU0VSX01FRElBX1RZUEUpO1xuICAgICAgfSBjYXRjaCAoXykge31cbiAgICB9XG4gICAgLyogVXNlIGNyZWF0ZUhUTUxEb2N1bWVudCBpbiBjYXNlIERPTVBhcnNlciBpcyBub3QgYXZhaWxhYmxlICovXG4gICAgaWYgKCFkb2MgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGRvYyA9IGltcGxlbWVudGF0aW9uLmNyZWF0ZURvY3VtZW50KE5BTUVTUEFDRSwgJ3RlbXBsYXRlJywgbnVsbCk7XG4gICAgICB0cnkge1xuICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCA9IElTX0VNUFRZX0lOUFVUID8gZW1wdHlIVE1MIDogZGlydHlQYXlsb2FkO1xuICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAvLyBTeW50YXggZXJyb3IgaWYgZGlydHlQYXlsb2FkIGlzIGludmFsaWQgeG1sXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGJvZHkgPSBkb2MuYm9keSB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgIGlmIChkaXJ0eSAmJiBsZWFkaW5nV2hpdGVzcGFjZSkge1xuICAgICAgYm9keS5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobGVhZGluZ1doaXRlc3BhY2UpLCBib2R5LmNoaWxkTm9kZXNbMF0gfHwgbnVsbCk7XG4gICAgfVxuICAgIC8qIFdvcmsgb24gd2hvbGUgZG9jdW1lbnQgb3IganVzdCBpdHMgYm9keSAqL1xuICAgIGlmIChOQU1FU1BBQ0UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICByZXR1cm4gZ2V0RWxlbWVudHNCeVRhZ05hbWUuY2FsbChkb2MsIFdIT0xFX0RPQ1VNRU5UID8gJ2h0bWwnIDogJ2JvZHknKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIFdIT0xFX0RPQ1VNRU5UID8gZG9jLmRvY3VtZW50RWxlbWVudCA6IGJvZHk7XG4gIH07XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgTm9kZUl0ZXJhdG9yIG9iamVjdCB0aGF0IHlvdSBjYW4gdXNlIHRvIHRyYXZlcnNlIGZpbHRlcmVkIGxpc3RzIG9mIG5vZGVzIG9yIGVsZW1lbnRzIGluIGEgZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSByb290IFRoZSByb290IGVsZW1lbnQgb3Igbm9kZSB0byBzdGFydCB0cmF2ZXJzaW5nIG9uLlxuICAgKiBAcmV0dXJuIFRoZSBjcmVhdGVkIE5vZGVJdGVyYXRvclxuICAgKi9cbiAgY29uc3QgX2NyZWF0ZU5vZGVJdGVyYXRvciA9IGZ1bmN0aW9uIF9jcmVhdGVOb2RlSXRlcmF0b3Iocm9vdCkge1xuICAgIHJldHVybiBjcmVhdGVOb2RlSXRlcmF0b3IuY2FsbChyb290Lm93bmVyRG9jdW1lbnQgfHwgcm9vdCwgcm9vdCxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5UIHwgTm9kZUZpbHRlci5TSE9XX0NPTU1FTlQgfCBOb2RlRmlsdGVyLlNIT1dfVEVYVCB8IE5vZGVGaWx0ZXIuU0hPV19QUk9DRVNTSU5HX0lOU1RSVUNUSU9OIHwgTm9kZUZpbHRlci5TSE9XX0NEQVRBX1NFQ1RJT04sIG51bGwpO1xuICB9O1xuICAvKipcbiAgICogX2lzQ2xvYmJlcmVkXG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50IGVsZW1lbnQgdG8gY2hlY2sgZm9yIGNsb2JiZXJpbmcgYXR0YWNrc1xuICAgKiBAcmV0dXJuIHRydWUgaWYgY2xvYmJlcmVkLCBmYWxzZSBpZiBzYWZlXG4gICAqL1xuICBjb25zdCBfaXNDbG9iYmVyZWQgPSBmdW5jdGlvbiBfaXNDbG9iYmVyZWQoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEZvcm1FbGVtZW50ICYmICh0eXBlb2YgZWxlbWVudC5ub2RlTmFtZSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsZW1lbnQudGV4dENvbnRlbnQgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlbGVtZW50LnJlbW92ZUNoaWxkICE9PSAnZnVuY3Rpb24nIHx8ICEoZWxlbWVudC5hdHRyaWJ1dGVzIGluc3RhbmNlb2YgTmFtZWROb2RlTWFwKSB8fCB0eXBlb2YgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVsZW1lbnQuc2V0QXR0cmlidXRlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbGVtZW50Lm5hbWVzcGFjZVVSSSAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsZW1lbnQuaW5zZXJ0QmVmb3JlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbGVtZW50Lmhhc0NoaWxkTm9kZXMgIT09ICdmdW5jdGlvbicpO1xuICB9O1xuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgb2JqZWN0IHRvIGNoZWNrIHdoZXRoZXIgaXQncyBhIERPTSBub2RlXG4gICAqIEByZXR1cm4gdHJ1ZSBpcyBvYmplY3QgaXMgYSBET00gbm9kZVxuICAgKi9cbiAgY29uc3QgX2lzTm9kZSA9IGZ1bmN0aW9uIF9pc05vZGUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIE5vZGUgPT09ICdmdW5jdGlvbicgJiYgdmFsdWUgaW5zdGFuY2VvZiBOb2RlO1xuICB9O1xuICBmdW5jdGlvbiBfZXhlY3V0ZUhvb2tzKGhvb2tzLCBjdXJyZW50Tm9kZSwgZGF0YSkge1xuICAgIGFycmF5Rm9yRWFjaChob29rcywgaG9vayA9PiB7XG4gICAgICBob29rLmNhbGwoRE9NUHVyaWZ5LCBjdXJyZW50Tm9kZSwgZGF0YSwgQ09ORklHKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogX3Nhbml0aXplRWxlbWVudHNcbiAgICpcbiAgICogQHByb3RlY3Qgbm9kZU5hbWVcbiAgICogQHByb3RlY3QgdGV4dENvbnRlbnRcbiAgICogQHByb3RlY3QgcmVtb3ZlQ2hpbGRcbiAgICogQHBhcmFtIGN1cnJlbnROb2RlIHRvIGNoZWNrIGZvciBwZXJtaXNzaW9uIHRvIGV4aXN0XG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBub2RlIHdhcyBraWxsZWQsIGZhbHNlIGlmIGxlZnQgYWxpdmVcbiAgICovXG4gIGNvbnN0IF9zYW5pdGl6ZUVsZW1lbnRzID0gZnVuY3Rpb24gX3Nhbml0aXplRWxlbWVudHMoY3VycmVudE5vZGUpIHtcbiAgICBsZXQgY29udGVudCA9IG51bGw7XG4gICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgIF9leGVjdXRlSG9va3MoaG9va3MuYmVmb3JlU2FuaXRpemVFbGVtZW50cywgY3VycmVudE5vZGUsIG51bGwpO1xuICAgIC8qIENoZWNrIGlmIGVsZW1lbnQgaXMgY2xvYmJlcmVkIG9yIGNhbiBjbG9iYmVyICovXG4gICAgaWYgKF9pc0Nsb2JiZXJlZChjdXJyZW50Tm9kZSkpIHtcbiAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyogTm93IGxldCdzIGNoZWNrIHRoZSBlbGVtZW50J3MgdHlwZSBhbmQgbmFtZSAqL1xuICAgIGNvbnN0IHRhZ05hbWUgPSB0cmFuc2Zvcm1DYXNlRnVuYyhjdXJyZW50Tm9kZS5ub2RlTmFtZSk7XG4gICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgIF9leGVjdXRlSG9va3MoaG9va3MudXBvblNhbml0aXplRWxlbWVudCwgY3VycmVudE5vZGUsIHtcbiAgICAgIHRhZ05hbWUsXG4gICAgICBhbGxvd2VkVGFnczogQUxMT1dFRF9UQUdTXG4gICAgfSk7XG4gICAgLyogRGV0ZWN0IG1YU1MgYXR0ZW1wdHMgYWJ1c2luZyBuYW1lc3BhY2UgY29uZnVzaW9uICovXG4gICAgaWYgKGN1cnJlbnROb2RlLmhhc0NoaWxkTm9kZXMoKSAmJiAhX2lzTm9kZShjdXJyZW50Tm9kZS5maXJzdEVsZW1lbnRDaGlsZCkgJiYgcmVnRXhwVGVzdCgvPFsvXFx3XS9nLCBjdXJyZW50Tm9kZS5pbm5lckhUTUwpICYmIHJlZ0V4cFRlc3QoLzxbL1xcd10vZywgY3VycmVudE5vZGUudGV4dENvbnRlbnQpKSB7XG4gICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qIFJlbW92ZSBhbnkgb2NjdXJyZW5jZSBvZiBwcm9jZXNzaW5nIGluc3RydWN0aW9ucyAqL1xuICAgIGlmIChjdXJyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFLnByb2dyZXNzaW5nSW5zdHJ1Y3Rpb24pIHtcbiAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyogUmVtb3ZlIGFueSBraW5kIG9mIHBvc3NpYmx5IGhhcm1mdWwgY29tbWVudHMgKi9cbiAgICBpZiAoU0FGRV9GT1JfWE1MICYmIGN1cnJlbnROb2RlLm5vZGVUeXBlID09PSBOT0RFX1RZUEUuY29tbWVudCAmJiByZWdFeHBUZXN0KC88Wy9cXHddL2csIGN1cnJlbnROb2RlLmRhdGEpKSB7XG4gICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qIFJlbW92ZSBlbGVtZW50IGlmIGFueXRoaW5nIGZvcmJpZHMgaXRzIHByZXNlbmNlICovXG4gICAgaWYgKCFBTExPV0VEX1RBR1NbdGFnTmFtZV0gfHwgRk9SQklEX1RBR1NbdGFnTmFtZV0pIHtcbiAgICAgIC8qIENoZWNrIGlmIHdlIGhhdmUgYSBjdXN0b20gZWxlbWVudCB0byBoYW5kbGUgKi9cbiAgICAgIGlmICghRk9SQklEX1RBR1NbdGFnTmFtZV0gJiYgX2lzQmFzaWNDdXN0b21FbGVtZW50KHRhZ05hbWUpKSB7XG4gICAgICAgIGlmIChDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2sgaW5zdGFuY2VvZiBSZWdFeHAgJiYgcmVnRXhwVGVzdChDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2ssIHRhZ05hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2sgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBDVVNUT01fRUxFTUVOVF9IQU5ETElORy50YWdOYW1lQ2hlY2sodGFnTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qIEtlZXAgY29udGVudCBleGNlcHQgZm9yIGJhZC1saXN0ZWQgZWxlbWVudHMgKi9cbiAgICAgIGlmIChLRUVQX0NPTlRFTlQgJiYgIUZPUkJJRF9DT05URU5UU1t0YWdOYW1lXSkge1xuICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShjdXJyZW50Tm9kZSkgfHwgY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgY2hpbGROb2RlcyA9IGdldENoaWxkTm9kZXMoY3VycmVudE5vZGUpIHx8IGN1cnJlbnROb2RlLmNoaWxkTm9kZXM7XG4gICAgICAgIGlmIChjaGlsZE5vZGVzICYmIHBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZENvdW50ID0gY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGNoaWxkQ291bnQgLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRDbG9uZSA9IGNsb25lTm9kZShjaGlsZE5vZGVzW2ldLCB0cnVlKTtcbiAgICAgICAgICAgIGNoaWxkQ2xvbmUuX19yZW1vdmFsQ291bnQgPSAoY3VycmVudE5vZGUuX19yZW1vdmFsQ291bnQgfHwgMCkgKyAxO1xuICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGRDbG9uZSwgZ2V0TmV4dFNpYmxpbmcoY3VycmVudE5vZGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9mb3JjZVJlbW92ZShjdXJyZW50Tm9kZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyogQ2hlY2sgd2hldGhlciBlbGVtZW50IGhhcyBhIHZhbGlkIG5hbWVzcGFjZSAqL1xuICAgIGlmIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgIV9jaGVja1ZhbGlkTmFtZXNwYWNlKGN1cnJlbnROb2RlKSkge1xuICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKiBNYWtlIHN1cmUgdGhhdCBvbGRlciBicm93c2VycyBkb24ndCBnZXQgZmFsbGJhY2stdGFnIG1YU1MgKi9cbiAgICBpZiAoKHRhZ05hbWUgPT09ICdub3NjcmlwdCcgfHwgdGFnTmFtZSA9PT0gJ25vZW1iZWQnIHx8IHRhZ05hbWUgPT09ICdub2ZyYW1lcycpICYmIHJlZ0V4cFRlc3QoLzxcXC9ubyhzY3JpcHR8ZW1iZWR8ZnJhbWVzKS9pLCBjdXJyZW50Tm9kZS5pbm5lckhUTUwpKSB7XG4gICAgICBfZm9yY2VSZW1vdmUoY3VycmVudE5vZGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qIFNhbml0aXplIGVsZW1lbnQgY29udGVudCB0byBiZSB0ZW1wbGF0ZS1zYWZlICovXG4gICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUyAmJiBjdXJyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFLnRleHQpIHtcbiAgICAgIC8qIEdldCB0aGUgZWxlbWVudCdzIHRleHQgY29udGVudCAqL1xuICAgICAgY29udGVudCA9IGN1cnJlbnROb2RlLnRleHRDb250ZW50O1xuICAgICAgYXJyYXlGb3JFYWNoKFtNVVNUQUNIRV9FWFBSLCBFUkJfRVhQUiwgVE1QTElUX0VYUFJdLCBleHByID0+IHtcbiAgICAgICAgY29udGVudCA9IHN0cmluZ1JlcGxhY2UoY29udGVudCwgZXhwciwgJyAnKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGN1cnJlbnROb2RlLnRleHRDb250ZW50ICE9PSBjb250ZW50KSB7XG4gICAgICAgIGFycmF5UHVzaChET01QdXJpZnkucmVtb3ZlZCwge1xuICAgICAgICAgIGVsZW1lbnQ6IGN1cnJlbnROb2RlLmNsb25lTm9kZSgpXG4gICAgICAgIH0pO1xuICAgICAgICBjdXJyZW50Tm9kZS50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICBfZXhlY3V0ZUhvb2tzKGhvb2tzLmFmdGVyU2FuaXRpemVFbGVtZW50cywgY3VycmVudE5vZGUsIG51bGwpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbiAgLyoqXG4gICAqIF9pc1ZhbGlkQXR0cmlidXRlXG4gICAqXG4gICAqIEBwYXJhbSBsY1RhZyBMb3dlcmNhc2UgdGFnIG5hbWUgb2YgY29udGFpbmluZyBlbGVtZW50LlxuICAgKiBAcGFyYW0gbGNOYW1lIExvd2VyY2FzZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICogQHBhcmFtIHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogQHJldHVybiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyB2YWxpZCwgb3RoZXJ3aXNlIGZhbHNlLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgY29uc3QgX2lzVmFsaWRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBfaXNWYWxpZEF0dHJpYnV0ZShsY1RhZywgbGNOYW1lLCB2YWx1ZSkge1xuICAgIC8qIE1ha2Ugc3VyZSBhdHRyaWJ1dGUgY2Fubm90IGNsb2JiZXIgKi9cbiAgICBpZiAoU0FOSVRJWkVfRE9NICYmIChsY05hbWUgPT09ICdpZCcgfHwgbGNOYW1lID09PSAnbmFtZScpICYmICh2YWx1ZSBpbiBkb2N1bWVudCB8fCB2YWx1ZSBpbiBmb3JtRWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyogQWxsb3cgdmFsaWQgZGF0YS0qIGF0dHJpYnV0ZXM6IEF0IGxlYXN0IG9uZSBjaGFyYWN0ZXIgYWZ0ZXIgXCItXCJcbiAgICAgICAgKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2RvbS5odG1sI2VtYmVkZGluZy1jdXN0b20tbm9uLXZpc2libGUtZGF0YS13aXRoLXRoZS1kYXRhLSotYXR0cmlidXRlcylcbiAgICAgICAgWE1MLWNvbXBhdGlibGUgKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjeG1sLWNvbXBhdGlibGUgYW5kIGh0dHA6Ly93d3cudzMub3JnL1RSL3htbC8jZDBlODA0KVxuICAgICAgICBXZSBkb24ndCBuZWVkIHRvIGNoZWNrIHRoZSB2YWx1ZTsgaXQncyBhbHdheXMgVVJJIHNhZmUuICovXG4gICAgaWYgKEFMTE9XX0RBVEFfQVRUUiAmJiAhRk9SQklEX0FUVFJbbGNOYW1lXSAmJiByZWdFeHBUZXN0KERBVEFfQVRUUiwgbGNOYW1lKSkgOyBlbHNlIGlmIChBTExPV19BUklBX0FUVFIgJiYgcmVnRXhwVGVzdChBUklBX0FUVFIsIGxjTmFtZSkpIDsgZWxzZSBpZiAoIUFMTE9XRURfQVRUUltsY05hbWVdIHx8IEZPUkJJRF9BVFRSW2xjTmFtZV0pIHtcbiAgICAgIGlmIChcbiAgICAgIC8vIEZpcnN0IGNvbmRpdGlvbiBkb2VzIGEgdmVyeSBiYXNpYyBjaGVjayBpZiBhKSBpdCdzIGJhc2ljYWxseSBhIHZhbGlkIGN1c3RvbSBlbGVtZW50IHRhZ25hbWUgQU5EXG4gICAgICAvLyBiKSBpZiB0aGUgdGFnTmFtZSBwYXNzZXMgd2hhdGV2ZXIgdGhlIHVzZXIgaGFzIGNvbmZpZ3VyZWQgZm9yIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVja1xuICAgICAgLy8gYW5kIGMpIGlmIHRoZSBhdHRyaWJ1dGUgbmFtZSBwYXNzZXMgd2hhdGV2ZXIgdGhlIHVzZXIgaGFzIGNvbmZpZ3VyZWQgZm9yIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVja1xuICAgICAgX2lzQmFzaWNDdXN0b21FbGVtZW50KGxjVGFnKSAmJiAoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrIGluc3RhbmNlb2YgUmVnRXhwICYmIHJlZ0V4cFRlc3QoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrLCBsY1RhZykgfHwgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrKGxjVGFnKSkgJiYgKENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVjayBpbnN0YW5jZW9mIFJlZ0V4cCAmJiByZWdFeHBUZXN0KENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmF0dHJpYnV0ZU5hbWVDaGVjaywgbGNOYW1lKSB8fCBDVVNUT01fRUxFTUVOVF9IQU5ETElORy5hdHRyaWJ1dGVOYW1lQ2hlY2sgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiBDVVNUT01fRUxFTUVOVF9IQU5ETElORy5hdHRyaWJ1dGVOYW1lQ2hlY2sobGNOYW1lKSkgfHxcbiAgICAgIC8vIEFsdGVybmF0aXZlLCBzZWNvbmQgY29uZGl0aW9uIGNoZWNrcyBpZiBpdCdzIGFuIGBpc2AtYXR0cmlidXRlLCBBTkRcbiAgICAgIC8vIHRoZSB2YWx1ZSBwYXNzZXMgd2hhdGV2ZXIgdGhlIHVzZXIgaGFzIGNvbmZpZ3VyZWQgZm9yIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLnRhZ05hbWVDaGVja1xuICAgICAgbGNOYW1lID09PSAnaXMnICYmIENVU1RPTV9FTEVNRU5UX0hBTkRMSU5HLmFsbG93Q3VzdG9taXplZEJ1aWx0SW5FbGVtZW50cyAmJiAoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrIGluc3RhbmNlb2YgUmVnRXhwICYmIHJlZ0V4cFRlc3QoQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrLCB2YWx1ZSkgfHwgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgQ1VTVE9NX0VMRU1FTlRfSEFORExJTkcudGFnTmFtZUNoZWNrKHZhbHVlKSkpIDsgZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8qIENoZWNrIHZhbHVlIGlzIHNhZmUuIEZpcnN0LCBpcyBhdHRyIGluZXJ0PyBJZiBzbywgaXMgc2FmZSAqL1xuICAgIH0gZWxzZSBpZiAoVVJJX1NBRkVfQVRUUklCVVRFU1tsY05hbWVdKSA7IGVsc2UgaWYgKHJlZ0V4cFRlc3QoSVNfQUxMT1dFRF9VUkkkMSwgc3RyaW5nUmVwbGFjZSh2YWx1ZSwgQVRUUl9XSElURVNQQUNFLCAnJykpKSA7IGVsc2UgaWYgKChsY05hbWUgPT09ICdzcmMnIHx8IGxjTmFtZSA9PT0gJ3hsaW5rOmhyZWYnIHx8IGxjTmFtZSA9PT0gJ2hyZWYnKSAmJiBsY1RhZyAhPT0gJ3NjcmlwdCcgJiYgc3RyaW5nSW5kZXhPZih2YWx1ZSwgJ2RhdGE6JykgPT09IDAgJiYgREFUQV9VUklfVEFHU1tsY1RhZ10pIDsgZWxzZSBpZiAoQUxMT1dfVU5LTk9XTl9QUk9UT0NPTFMgJiYgIXJlZ0V4cFRlc3QoSVNfU0NSSVBUX09SX0RBVEEsIHN0cmluZ1JlcGxhY2UodmFsdWUsIEFUVFJfV0hJVEVTUEFDRSwgJycpKSkgOyBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSA7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIC8qKlxuICAgKiBfaXNCYXNpY0N1c3RvbUVsZW1lbnRcbiAgICogY2hlY2tzIGlmIGF0IGxlYXN0IG9uZSBkYXNoIGlzIGluY2x1ZGVkIGluIHRhZ05hbWUsIGFuZCBpdCdzIG5vdCB0aGUgZmlyc3QgY2hhclxuICAgKiBmb3IgbW9yZSBzb3BoaXN0aWNhdGVkIGNoZWNraW5nIHNlZSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3ZhbGlkYXRlLWVsZW1lbnQtbmFtZVxuICAgKlxuICAgKiBAcGFyYW0gdGFnTmFtZSBuYW1lIG9mIHRoZSB0YWcgb2YgdGhlIG5vZGUgdG8gc2FuaXRpemVcbiAgICogQHJldHVybnMgUmV0dXJucyB0cnVlIGlmIHRoZSB0YWcgbmFtZSBtZWV0cyB0aGUgYmFzaWMgY3JpdGVyaWEgZm9yIGEgY3VzdG9tIGVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICovXG4gIGNvbnN0IF9pc0Jhc2ljQ3VzdG9tRWxlbWVudCA9IGZ1bmN0aW9uIF9pc0Jhc2ljQ3VzdG9tRWxlbWVudCh0YWdOYW1lKSB7XG4gICAgcmV0dXJuIHRhZ05hbWUgIT09ICdhbm5vdGF0aW9uLXhtbCcgJiYgc3RyaW5nTWF0Y2godGFnTmFtZSwgQ1VTVE9NX0VMRU1FTlQpO1xuICB9O1xuICAvKipcbiAgICogX3Nhbml0aXplQXR0cmlidXRlc1xuICAgKlxuICAgKiBAcHJvdGVjdCBhdHRyaWJ1dGVzXG4gICAqIEBwcm90ZWN0IG5vZGVOYW1lXG4gICAqIEBwcm90ZWN0IHJlbW92ZUF0dHJpYnV0ZVxuICAgKiBAcHJvdGVjdCBzZXRBdHRyaWJ1dGVcbiAgICpcbiAgICogQHBhcmFtIGN1cnJlbnROb2RlIHRvIHNhbml0aXplXG4gICAqL1xuICBjb25zdCBfc2FuaXRpemVBdHRyaWJ1dGVzID0gZnVuY3Rpb24gX3Nhbml0aXplQXR0cmlidXRlcyhjdXJyZW50Tm9kZSkge1xuICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICBfZXhlY3V0ZUhvb2tzKGhvb2tzLmJlZm9yZVNhbml0aXplQXR0cmlidXRlcywgY3VycmVudE5vZGUsIG51bGwpO1xuICAgIGNvbnN0IHtcbiAgICAgIGF0dHJpYnV0ZXNcbiAgICB9ID0gY3VycmVudE5vZGU7XG4gICAgLyogQ2hlY2sgaWYgd2UgaGF2ZSBhdHRyaWJ1dGVzOyBpZiBub3Qgd2UgbWlnaHQgaGF2ZSBhIHRleHQgbm9kZSAqL1xuICAgIGlmICghYXR0cmlidXRlcyB8fCBfaXNDbG9iYmVyZWQoY3VycmVudE5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhvb2tFdmVudCA9IHtcbiAgICAgIGF0dHJOYW1lOiAnJyxcbiAgICAgIGF0dHJWYWx1ZTogJycsXG4gICAgICBrZWVwQXR0cjogdHJ1ZSxcbiAgICAgIGFsbG93ZWRBdHRyaWJ1dGVzOiBBTExPV0VEX0FUVFIsXG4gICAgICBmb3JjZUtlZXBBdHRyOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIGxldCBsID0gYXR0cmlidXRlcy5sZW5ndGg7XG4gICAgLyogR28gYmFja3dhcmRzIG92ZXIgYWxsIGF0dHJpYnV0ZXM7IHNhZmVseSByZW1vdmUgYmFkIG9uZXMgKi9cbiAgICB3aGlsZSAobC0tKSB7XG4gICAgICBjb25zdCBhdHRyID0gYXR0cmlidXRlc1tsXTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbmFtZXNwYWNlVVJJLFxuICAgICAgICB2YWx1ZTogYXR0clZhbHVlXG4gICAgICB9ID0gYXR0cjtcbiAgICAgIGNvbnN0IGxjTmFtZSA9IHRyYW5zZm9ybUNhc2VGdW5jKG5hbWUpO1xuICAgICAgbGV0IHZhbHVlID0gbmFtZSA9PT0gJ3ZhbHVlJyA/IGF0dHJWYWx1ZSA6IHN0cmluZ1RyaW0oYXR0clZhbHVlKTtcbiAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgIGhvb2tFdmVudC5hdHRyTmFtZSA9IGxjTmFtZTtcbiAgICAgIGhvb2tFdmVudC5hdHRyVmFsdWUgPSB2YWx1ZTtcbiAgICAgIGhvb2tFdmVudC5rZWVwQXR0ciA9IHRydWU7XG4gICAgICBob29rRXZlbnQuZm9yY2VLZWVwQXR0ciA9IHVuZGVmaW5lZDsgLy8gQWxsb3dzIGRldmVsb3BlcnMgdG8gc2VlIHRoaXMgaXMgYSBwcm9wZXJ0eSB0aGV5IGNhbiBzZXRcbiAgICAgIF9leGVjdXRlSG9va3MoaG9va3MudXBvblNhbml0aXplQXR0cmlidXRlLCBjdXJyZW50Tm9kZSwgaG9va0V2ZW50KTtcbiAgICAgIHZhbHVlID0gaG9va0V2ZW50LmF0dHJWYWx1ZTtcbiAgICAgIC8qIEZ1bGwgRE9NIENsb2JiZXJpbmcgcHJvdGVjdGlvbiB2aWEgbmFtZXNwYWNlIGlzb2xhdGlvbixcbiAgICAgICAqIFByZWZpeCBpZCBhbmQgbmFtZSBhdHRyaWJ1dGVzIHdpdGggYHVzZXItY29udGVudC1gXG4gICAgICAgKi9cbiAgICAgIGlmIChTQU5JVElaRV9OQU1FRF9QUk9QUyAmJiAobGNOYW1lID09PSAnaWQnIHx8IGxjTmFtZSA9PT0gJ25hbWUnKSkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGF0dHJpYnV0ZSB3aXRoIHRoaXMgdmFsdWVcbiAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZShuYW1lLCBjdXJyZW50Tm9kZSk7XG4gICAgICAgIC8vIFByZWZpeCB0aGUgdmFsdWUgYW5kIGxhdGVyIHJlLWNyZWF0ZSB0aGUgYXR0cmlidXRlIHdpdGggdGhlIHNhbml0aXplZCB2YWx1ZVxuICAgICAgICB2YWx1ZSA9IFNBTklUSVpFX05BTUVEX1BST1BTX1BSRUZJWCArIHZhbHVlO1xuICAgICAgfVxuICAgICAgLyogV29yayBhcm91bmQgYSBzZWN1cml0eSBpc3N1ZSB3aXRoIGNvbW1lbnRzIGluc2lkZSBhdHRyaWJ1dGVzICovXG4gICAgICBpZiAoU0FGRV9GT1JfWE1MICYmIHJlZ0V4cFRlc3QoLygoLS0hP3xdKT4pfDxcXC8oc3R5bGV8dGl0bGUpL2ksIHZhbHVlKSkge1xuICAgICAgICBfcmVtb3ZlQXR0cmlidXRlKG5hbWUsIGN1cnJlbnROb2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvKiBEaWQgdGhlIGhvb2tzIGFwcHJvdmUgb2YgdGhlIGF0dHJpYnV0ZT8gKi9cbiAgICAgIGlmIChob29rRXZlbnQuZm9yY2VLZWVwQXR0cikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8qIFJlbW92ZSBhdHRyaWJ1dGUgKi9cbiAgICAgIF9yZW1vdmVBdHRyaWJ1dGUobmFtZSwgY3VycmVudE5vZGUpO1xuICAgICAgLyogRGlkIHRoZSBob29rcyBhcHByb3ZlIG9mIHRoZSBhdHRyaWJ1dGU/ICovXG4gICAgICBpZiAoIWhvb2tFdmVudC5rZWVwQXR0cikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8qIFdvcmsgYXJvdW5kIGEgc2VjdXJpdHkgaXNzdWUgaW4galF1ZXJ5IDMuMCAqL1xuICAgICAgaWYgKCFBTExPV19TRUxGX0NMT1NFX0lOX0FUVFIgJiYgcmVnRXhwVGVzdCgvXFwvPi9pLCB2YWx1ZSkpIHtcbiAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZShuYW1lLCBjdXJyZW50Tm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLyogU2FuaXRpemUgYXR0cmlidXRlIGNvbnRlbnQgdG8gYmUgdGVtcGxhdGUtc2FmZSAqL1xuICAgICAgaWYgKFNBRkVfRk9SX1RFTVBMQVRFUykge1xuICAgICAgICBhcnJheUZvckVhY2goW01VU1RBQ0hFX0VYUFIsIEVSQl9FWFBSLCBUTVBMSVRfRVhQUl0sIGV4cHIgPT4ge1xuICAgICAgICAgIHZhbHVlID0gc3RyaW5nUmVwbGFjZSh2YWx1ZSwgZXhwciwgJyAnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKiBJcyBgdmFsdWVgIHZhbGlkIGZvciB0aGlzIGF0dHJpYnV0ZT8gKi9cbiAgICAgIGNvbnN0IGxjVGFnID0gdHJhbnNmb3JtQ2FzZUZ1bmMoY3VycmVudE5vZGUubm9kZU5hbWUpO1xuICAgICAgaWYgKCFfaXNWYWxpZEF0dHJpYnV0ZShsY1RhZywgbGNOYW1lLCB2YWx1ZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvKiBIYW5kbGUgYXR0cmlidXRlcyB0aGF0IHJlcXVpcmUgVHJ1c3RlZCBUeXBlcyAqL1xuICAgICAgaWYgKHRydXN0ZWRUeXBlc1BvbGljeSAmJiB0eXBlb2YgdHJ1c3RlZFR5cGVzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdHJ1c3RlZFR5cGVzLmdldEF0dHJpYnV0ZVR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaWYgKG5hbWVzcGFjZVVSSSkgOyBlbHNlIHtcbiAgICAgICAgICBzd2l0Y2ggKHRydXN0ZWRUeXBlcy5nZXRBdHRyaWJ1dGVUeXBlKGxjVGFnLCBsY05hbWUpKSB7XG4gICAgICAgICAgICBjYXNlICdUcnVzdGVkSFRNTCc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnVHJ1c3RlZFNjcmlwdFVSTCc6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVTY3JpcHRVUkwodmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKiBIYW5kbGUgaW52YWxpZCBkYXRhLSogYXR0cmlidXRlIHNldCBieSB0cnktY2F0Y2hpbmcgaXQgKi9cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChuYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2VVUkksIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBGYWxsYmFjayB0byBzZXRBdHRyaWJ1dGUoKSBmb3IgYnJvd3Nlci11bnJlY29nbml6ZWQgbmFtZXNwYWNlcyBlLmcuIFwieC1zY2hlbWFcIi4gKi9cbiAgICAgICAgICBjdXJyZW50Tm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfaXNDbG9iYmVyZWQoY3VycmVudE5vZGUpKSB7XG4gICAgICAgICAgX2ZvcmNlUmVtb3ZlKGN1cnJlbnROb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnJheVBvcChET01QdXJpZnkucmVtb3ZlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKF8pIHt9XG4gICAgfVxuICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICBfZXhlY3V0ZUhvb2tzKGhvb2tzLmFmdGVyU2FuaXRpemVBdHRyaWJ1dGVzLCBjdXJyZW50Tm9kZSwgbnVsbCk7XG4gIH07XG4gIC8qKlxuICAgKiBfc2FuaXRpemVTaGFkb3dET01cbiAgICpcbiAgICogQHBhcmFtIGZyYWdtZW50IHRvIGl0ZXJhdGUgb3ZlciByZWN1cnNpdmVseVxuICAgKi9cbiAgY29uc3QgX3Nhbml0aXplU2hhZG93RE9NID0gZnVuY3Rpb24gX3Nhbml0aXplU2hhZG93RE9NKGZyYWdtZW50KSB7XG4gICAgbGV0IHNoYWRvd05vZGUgPSBudWxsO1xuICAgIGNvbnN0IHNoYWRvd0l0ZXJhdG9yID0gX2NyZWF0ZU5vZGVJdGVyYXRvcihmcmFnbWVudCk7XG4gICAgLyogRXhlY3V0ZSBhIGhvb2sgaWYgcHJlc2VudCAqL1xuICAgIF9leGVjdXRlSG9va3MoaG9va3MuYmVmb3JlU2FuaXRpemVTaGFkb3dET00sIGZyYWdtZW50LCBudWxsKTtcbiAgICB3aGlsZSAoc2hhZG93Tm9kZSA9IHNoYWRvd0l0ZXJhdG9yLm5leHROb2RlKCkpIHtcbiAgICAgIC8qIEV4ZWN1dGUgYSBob29rIGlmIHByZXNlbnQgKi9cbiAgICAgIF9leGVjdXRlSG9va3MoaG9va3MudXBvblNhbml0aXplU2hhZG93Tm9kZSwgc2hhZG93Tm9kZSwgbnVsbCk7XG4gICAgICAvKiBTYW5pdGl6ZSB0YWdzIGFuZCBlbGVtZW50cyAqL1xuICAgICAgX3Nhbml0aXplRWxlbWVudHMoc2hhZG93Tm9kZSk7XG4gICAgICAvKiBDaGVjayBhdHRyaWJ1dGVzIG5leHQgKi9cbiAgICAgIF9zYW5pdGl6ZUF0dHJpYnV0ZXMoc2hhZG93Tm9kZSk7XG4gICAgICAvKiBEZWVwIHNoYWRvdyBET00gZGV0ZWN0ZWQgKi9cbiAgICAgIGlmIChzaGFkb3dOb2RlLmNvbnRlbnQgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KSB7XG4gICAgICAgIF9zYW5pdGl6ZVNoYWRvd0RPTShzaGFkb3dOb2RlLmNvbnRlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKiBFeGVjdXRlIGEgaG9vayBpZiBwcmVzZW50ICovXG4gICAgX2V4ZWN1dGVIb29rcyhob29rcy5hZnRlclNhbml0aXplU2hhZG93RE9NLCBmcmFnbWVudCwgbnVsbCk7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG4gIERPTVB1cmlmeS5zYW5pdGl6ZSA9IGZ1bmN0aW9uIChkaXJ0eSkge1xuICAgIGxldCBjZmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGxldCBib2R5ID0gbnVsbDtcbiAgICBsZXQgaW1wb3J0ZWROb2RlID0gbnVsbDtcbiAgICBsZXQgY3VycmVudE5vZGUgPSBudWxsO1xuICAgIGxldCByZXR1cm5Ob2RlID0gbnVsbDtcbiAgICAvKiBNYWtlIHN1cmUgd2UgaGF2ZSBhIHN0cmluZyB0byBzYW5pdGl6ZS5cbiAgICAgIERPIE5PVCByZXR1cm4gZWFybHksIGFzIHRoaXMgd2lsbCByZXR1cm4gdGhlIHdyb25nIHR5cGUgaWZcbiAgICAgIHRoZSB1c2VyIGhhcyByZXF1ZXN0ZWQgYSBET00gb2JqZWN0IHJhdGhlciB0aGFuIGEgc3RyaW5nICovXG4gICAgSVNfRU1QVFlfSU5QVVQgPSAhZGlydHk7XG4gICAgaWYgKElTX0VNUFRZX0lOUFVUKSB7XG4gICAgICBkaXJ0eSA9ICc8IS0tPic7XG4gICAgfVxuICAgIC8qIFN0cmluZ2lmeSwgaW4gY2FzZSBkaXJ0eSBpcyBhbiBvYmplY3QgKi9cbiAgICBpZiAodHlwZW9mIGRpcnR5ICE9PSAnc3RyaW5nJyAmJiAhX2lzTm9kZShkaXJ0eSkpIHtcbiAgICAgIGlmICh0eXBlb2YgZGlydHkudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlydHkgPSBkaXJ0eS50b1N0cmluZygpO1xuICAgICAgICBpZiAodHlwZW9mIGRpcnR5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93IHR5cGVFcnJvckNyZWF0ZSgnZGlydHkgaXMgbm90IGEgc3RyaW5nLCBhYm9ydGluZycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyB0eXBlRXJyb3JDcmVhdGUoJ3RvU3RyaW5nIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIFJldHVybiBkaXJ0eSBIVE1MIGlmIERPTVB1cmlmeSBjYW5ub3QgcnVuICovXG4gICAgaWYgKCFET01QdXJpZnkuaXNTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybiBkaXJ0eTtcbiAgICB9XG4gICAgLyogQXNzaWduIGNvbmZpZyB2YXJzICovXG4gICAgaWYgKCFTRVRfQ09ORklHKSB7XG4gICAgICBfcGFyc2VDb25maWcoY2ZnKTtcbiAgICB9XG4gICAgLyogQ2xlYW4gdXAgcmVtb3ZlZCBlbGVtZW50cyAqL1xuICAgIERPTVB1cmlmeS5yZW1vdmVkID0gW107XG4gICAgLyogQ2hlY2sgaWYgZGlydHkgaXMgY29ycmVjdGx5IHR5cGVkIGZvciBJTl9QTEFDRSAqL1xuICAgIGlmICh0eXBlb2YgZGlydHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBJTl9QTEFDRSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoSU5fUExBQ0UpIHtcbiAgICAgIC8qIERvIHNvbWUgZWFybHkgcHJlLXNhbml0aXphdGlvbiB0byBhdm9pZCB1bnNhZmUgcm9vdCBub2RlcyAqL1xuICAgICAgaWYgKGRpcnR5Lm5vZGVOYW1lKSB7XG4gICAgICAgIGNvbnN0IHRhZ05hbWUgPSB0cmFuc2Zvcm1DYXNlRnVuYyhkaXJ0eS5ub2RlTmFtZSk7XG4gICAgICAgIGlmICghQUxMT1dFRF9UQUdTW3RhZ05hbWVdIHx8IEZPUkJJRF9UQUdTW3RhZ05hbWVdKSB7XG4gICAgICAgICAgdGhyb3cgdHlwZUVycm9yQ3JlYXRlKCdyb290IG5vZGUgaXMgZm9yYmlkZGVuIGFuZCBjYW5ub3QgYmUgc2FuaXRpemVkIGluLXBsYWNlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpcnR5IGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgLyogSWYgZGlydHkgaXMgYSBET00gZWxlbWVudCwgYXBwZW5kIHRvIGFuIGVtcHR5IGRvY3VtZW50IHRvIGF2b2lkXG4gICAgICAgICBlbGVtZW50cyBiZWluZyBzdHJpcHBlZCBieSB0aGUgcGFyc2VyICovXG4gICAgICBib2R5ID0gX2luaXREb2N1bWVudCgnPCEtLS0tPicpO1xuICAgICAgaW1wb3J0ZWROb2RlID0gYm9keS5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoZGlydHksIHRydWUpO1xuICAgICAgaWYgKGltcG9ydGVkTm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFLmVsZW1lbnQgJiYgaW1wb3J0ZWROb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgLyogTm9kZSBpcyBhbHJlYWR5IGEgYm9keSwgdXNlIGFzIGlzICovXG4gICAgICAgIGJvZHkgPSBpbXBvcnRlZE5vZGU7XG4gICAgICB9IGVsc2UgaWYgKGltcG9ydGVkTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICAgIGJvZHkgPSBpbXBvcnRlZE5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItZG9tLW5vZGUtYXBwZW5kXG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoaW1wb3J0ZWROb2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLyogRXhpdCBkaXJlY3RseSBpZiB3ZSBoYXZlIG5vdGhpbmcgdG8gZG8gKi9cbiAgICAgIGlmICghUkVUVVJOX0RPTSAmJiAhU0FGRV9GT1JfVEVNUExBVEVTICYmICFXSE9MRV9ET0NVTUVOVCAmJlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcHJlZmVyLWluY2x1ZGVzXG4gICAgICBkaXJ0eS5pbmRleE9mKCc8JykgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkVHlwZXNQb2xpY3kgJiYgUkVUVVJOX1RSVVNURURfVFlQRSA/IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKGRpcnR5KSA6IGRpcnR5O1xuICAgICAgfVxuICAgICAgLyogSW5pdGlhbGl6ZSB0aGUgZG9jdW1lbnQgdG8gd29yayBvbiAqL1xuICAgICAgYm9keSA9IF9pbml0RG9jdW1lbnQoZGlydHkpO1xuICAgICAgLyogQ2hlY2sgd2UgaGF2ZSBhIERPTSBub2RlIGZyb20gdGhlIGRhdGEgKi9cbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICByZXR1cm4gUkVUVVJOX0RPTSA/IG51bGwgOiBSRVRVUk5fVFJVU1RFRF9UWVBFID8gZW1wdHlIVE1MIDogJyc7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIFJlbW92ZSBmaXJzdCBlbGVtZW50IG5vZGUgKG91cnMpIGlmIEZPUkNFX0JPRFkgaXMgc2V0ICovXG4gICAgaWYgKGJvZHkgJiYgRk9SQ0VfQk9EWSkge1xuICAgICAgX2ZvcmNlUmVtb3ZlKGJvZHkuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIC8qIEdldCBub2RlIGl0ZXJhdG9yICovXG4gICAgY29uc3Qgbm9kZUl0ZXJhdG9yID0gX2NyZWF0ZU5vZGVJdGVyYXRvcihJTl9QTEFDRSA/IGRpcnR5IDogYm9keSk7XG4gICAgLyogTm93IHN0YXJ0IGl0ZXJhdGluZyBvdmVyIHRoZSBjcmVhdGVkIGRvY3VtZW50ICovXG4gICAgd2hpbGUgKGN1cnJlbnROb2RlID0gbm9kZUl0ZXJhdG9yLm5leHROb2RlKCkpIHtcbiAgICAgIC8qIFNhbml0aXplIHRhZ3MgYW5kIGVsZW1lbnRzICovXG4gICAgICBfc2FuaXRpemVFbGVtZW50cyhjdXJyZW50Tm9kZSk7XG4gICAgICAvKiBDaGVjayBhdHRyaWJ1dGVzIG5leHQgKi9cbiAgICAgIF9zYW5pdGl6ZUF0dHJpYnV0ZXMoY3VycmVudE5vZGUpO1xuICAgICAgLyogU2hhZG93IERPTSBkZXRlY3RlZCwgc2FuaXRpemUgaXQgKi9cbiAgICAgIGlmIChjdXJyZW50Tm9kZS5jb250ZW50IGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgICBfc2FuaXRpemVTaGFkb3dET00oY3VycmVudE5vZGUuY29udGVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qIElmIHdlIHNhbml0aXplZCBgZGlydHlgIGluLXBsYWNlLCByZXR1cm4gaXQuICovXG4gICAgaWYgKElOX1BMQUNFKSB7XG4gICAgICByZXR1cm4gZGlydHk7XG4gICAgfVxuICAgIC8qIFJldHVybiBzYW5pdGl6ZWQgc3RyaW5nIG9yIERPTSAqL1xuICAgIGlmIChSRVRVUk5fRE9NKSB7XG4gICAgICBpZiAoUkVUVVJOX0RPTV9GUkFHTUVOVCkge1xuICAgICAgICByZXR1cm5Ob2RlID0gY3JlYXRlRG9jdW1lbnRGcmFnbWVudC5jYWxsKGJvZHkub3duZXJEb2N1bWVudCk7XG4gICAgICAgIHdoaWxlIChib2R5LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItZG9tLW5vZGUtYXBwZW5kXG4gICAgICAgICAgcmV0dXJuTm9kZS5hcHBlbmRDaGlsZChib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm5Ob2RlID0gYm9keTtcbiAgICAgIH1cbiAgICAgIGlmIChBTExPV0VEX0FUVFIuc2hhZG93cm9vdCB8fCBBTExPV0VEX0FUVFIuc2hhZG93cm9vdG1vZGUpIHtcbiAgICAgICAgLypcbiAgICAgICAgICBBZG9wdE5vZGUoKSBpcyBub3QgdXNlZCBiZWNhdXNlIGludGVybmFsIHN0YXRlIGlzIG5vdCByZXNldFxuICAgICAgICAgIChlLmcuIHRoZSBwYXN0IG5hbWVzIG1hcCBvZiBhIEhUTUxGb3JtRWxlbWVudCksIHRoaXMgaXMgc2FmZVxuICAgICAgICAgIGluIHRoZW9yeSBidXQgd2Ugd291bGQgcmF0aGVyIG5vdCByaXNrIGFub3RoZXIgYXR0YWNrIHZlY3Rvci5cbiAgICAgICAgICBUaGUgc3RhdGUgdGhhdCBpcyBjbG9uZWQgYnkgaW1wb3J0Tm9kZSgpIGlzIGV4cGxpY2l0bHkgZGVmaW5lZFxuICAgICAgICAgIGJ5IHRoZSBzcGVjcy5cbiAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuTm9kZSA9IGltcG9ydE5vZGUuY2FsbChvcmlnaW5hbERvY3VtZW50LCByZXR1cm5Ob2RlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXR1cm5Ob2RlO1xuICAgIH1cbiAgICBsZXQgc2VyaWFsaXplZEhUTUwgPSBXSE9MRV9ET0NVTUVOVCA/IGJvZHkub3V0ZXJIVE1MIDogYm9keS5pbm5lckhUTUw7XG4gICAgLyogU2VyaWFsaXplIGRvY3R5cGUgaWYgYWxsb3dlZCAqL1xuICAgIGlmIChXSE9MRV9ET0NVTUVOVCAmJiBBTExPV0VEX1RBR1NbJyFkb2N0eXBlJ10gJiYgYm9keS5vd25lckRvY3VtZW50ICYmIGJvZHkub3duZXJEb2N1bWVudC5kb2N0eXBlICYmIGJvZHkub3duZXJEb2N1bWVudC5kb2N0eXBlLm5hbWUgJiYgcmVnRXhwVGVzdChET0NUWVBFX05BTUUsIGJvZHkub3duZXJEb2N1bWVudC5kb2N0eXBlLm5hbWUpKSB7XG4gICAgICBzZXJpYWxpemVkSFRNTCA9ICc8IURPQ1RZUEUgJyArIGJvZHkub3duZXJEb2N1bWVudC5kb2N0eXBlLm5hbWUgKyAnPlxcbicgKyBzZXJpYWxpemVkSFRNTDtcbiAgICB9XG4gICAgLyogU2FuaXRpemUgZmluYWwgc3RyaW5nIHRlbXBsYXRlLXNhZmUgKi9cbiAgICBpZiAoU0FGRV9GT1JfVEVNUExBVEVTKSB7XG4gICAgICBhcnJheUZvckVhY2goW01VU1RBQ0hFX0VYUFIsIEVSQl9FWFBSLCBUTVBMSVRfRVhQUl0sIGV4cHIgPT4ge1xuICAgICAgICBzZXJpYWxpemVkSFRNTCA9IHN0cmluZ1JlcGxhY2Uoc2VyaWFsaXplZEhUTUwsIGV4cHIsICcgJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydXN0ZWRUeXBlc1BvbGljeSAmJiBSRVRVUk5fVFJVU1RFRF9UWVBFID8gdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZUhUTUwoc2VyaWFsaXplZEhUTUwpIDogc2VyaWFsaXplZEhUTUw7XG4gIH07XG4gIERPTVB1cmlmeS5zZXRDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNmZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgX3BhcnNlQ29uZmlnKGNmZyk7XG4gICAgU0VUX0NPTkZJRyA9IHRydWU7XG4gIH07XG4gIERPTVB1cmlmeS5jbGVhckNvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBDT05GSUcgPSBudWxsO1xuICAgIFNFVF9DT05GSUcgPSBmYWxzZTtcbiAgfTtcbiAgRE9NUHVyaWZ5LmlzVmFsaWRBdHRyaWJ1dGUgPSBmdW5jdGlvbiAodGFnLCBhdHRyLCB2YWx1ZSkge1xuICAgIC8qIEluaXRpYWxpemUgc2hhcmVkIGNvbmZpZyB2YXJzIGlmIG5lY2Vzc2FyeS4gKi9cbiAgICBpZiAoIUNPTkZJRykge1xuICAgICAgX3BhcnNlQ29uZmlnKHt9KTtcbiAgICB9XG4gICAgY29uc3QgbGNUYWcgPSB0cmFuc2Zvcm1DYXNlRnVuYyh0YWcpO1xuICAgIGNvbnN0IGxjTmFtZSA9IHRyYW5zZm9ybUNhc2VGdW5jKGF0dHIpO1xuICAgIHJldHVybiBfaXNWYWxpZEF0dHJpYnV0ZShsY1RhZywgbGNOYW1lLCB2YWx1ZSk7XG4gIH07XG4gIERPTVB1cmlmeS5hZGRIb29rID0gZnVuY3Rpb24gKGVudHJ5UG9pbnQsIGhvb2tGdW5jdGlvbikge1xuICAgIGlmICh0eXBlb2YgaG9va0Z1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5UHVzaChob29rc1tlbnRyeVBvaW50XSwgaG9va0Z1bmN0aW9uKTtcbiAgfTtcbiAgRE9NUHVyaWZ5LnJlbW92ZUhvb2sgPSBmdW5jdGlvbiAoZW50cnlQb2ludCwgaG9va0Z1bmN0aW9uKSB7XG4gICAgaWYgKGhvb2tGdW5jdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGFycmF5TGFzdEluZGV4T2YoaG9va3NbZW50cnlQb2ludF0sIGhvb2tGdW5jdGlvbik7XG4gICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gdW5kZWZpbmVkIDogYXJyYXlTcGxpY2UoaG9va3NbZW50cnlQb2ludF0sIGluZGV4LCAxKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5UG9wKGhvb2tzW2VudHJ5UG9pbnRdKTtcbiAgfTtcbiAgRE9NUHVyaWZ5LnJlbW92ZUhvb2tzID0gZnVuY3Rpb24gKGVudHJ5UG9pbnQpIHtcbiAgICBob29rc1tlbnRyeVBvaW50XSA9IFtdO1xuICB9O1xuICBET01QdXJpZnkucmVtb3ZlQWxsSG9va3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgaG9va3MgPSBfY3JlYXRlSG9va3NNYXAoKTtcbiAgfTtcbiAgcmV0dXJuIERPTVB1cmlmeTtcbn1cbnZhciBwdXJpZnkgPSBjcmVhdGVET01QdXJpZnkoKTtcblxuZXhwb3J0IHsgcHVyaWZ5IGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1cmlmeS5lcy5tanMubWFwXG4iLCIvKiBJTVBPUlQgKi9cbmltcG9ydCBfIGZyb20gJy4uL3V0aWxzL2luZGV4LmpzJztcbmltcG9ydCBUeXBlIGZyb20gJy4vdHlwZS5qcyc7XG5pbXBvcnQgeyBUWVBFIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbi8qIE1BSU4gKi9cbmNsYXNzIENoYW5uZWxzIHtcbiAgICAvKiBDT05TVFJVQ1RPUiAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIGNvbG9yKSB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7IC8vVFNDXG4gICAgICAgIHRoaXMudHlwZSA9IG5ldyBUeXBlKCk7XG4gICAgfVxuICAgIC8qIEFQSSAqL1xuICAgIHNldChkYXRhLCBjb2xvcikge1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhOyAvL1RTQ1xuICAgICAgICB0aGlzLnR5cGUudHlwZSA9IFRZUEUuQUxMO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyogSEVMUEVSUyAqL1xuICAgIF9lbnN1cmVIU0woKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGNvbnN0IHsgaCwgcywgbCB9ID0gZGF0YTtcbiAgICAgICAgaWYgKGggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGRhdGEuaCA9IF8uY2hhbm5lbC5yZ2IyaHNsKGRhdGEsICdoJyk7XG4gICAgICAgIGlmIChzID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBkYXRhLnMgPSBfLmNoYW5uZWwucmdiMmhzbChkYXRhLCAncycpO1xuICAgICAgICBpZiAobCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZGF0YS5sID0gXy5jaGFubmVsLnJnYjJoc2woZGF0YSwgJ2wnKTtcbiAgICB9XG4gICAgX2Vuc3VyZVJHQigpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgY29uc3QgeyByLCBnLCBiIH0gPSBkYXRhO1xuICAgICAgICBpZiAociA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgZGF0YS5yID0gXy5jaGFubmVsLmhzbDJyZ2IoZGF0YSwgJ3InKTtcbiAgICAgICAgaWYgKGcgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGRhdGEuZyA9IF8uY2hhbm5lbC5oc2wycmdiKGRhdGEsICdnJyk7XG4gICAgICAgIGlmIChiID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBkYXRhLmIgPSBfLmNoYW5uZWwuaHNsMnJnYihkYXRhLCAnYicpO1xuICAgIH1cbiAgICAvKiBHRVRURVJTICovXG4gICAgZ2V0IHIoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGNvbnN0IHIgPSBkYXRhLnI7XG4gICAgICAgIGlmICghdGhpcy50eXBlLmlzKFRZUEUuSFNMKSAmJiByICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgdGhpcy5fZW5zdXJlSFNMKCk7XG4gICAgICAgIHJldHVybiBfLmNoYW5uZWwuaHNsMnJnYihkYXRhLCAncicpO1xuICAgIH1cbiAgICBnZXQgZygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgY29uc3QgZyA9IGRhdGEuZztcbiAgICAgICAgaWYgKCF0aGlzLnR5cGUuaXMoVFlQRS5IU0wpICYmIGcgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBnO1xuICAgICAgICB0aGlzLl9lbnN1cmVIU0woKTtcbiAgICAgICAgcmV0dXJuIF8uY2hhbm5lbC5oc2wycmdiKGRhdGEsICdnJyk7XG4gICAgfVxuICAgIGdldCBiKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICBjb25zdCBiID0gZGF0YS5iO1xuICAgICAgICBpZiAoIXRoaXMudHlwZS5pcyhUWVBFLkhTTCkgJiYgYiAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIHRoaXMuX2Vuc3VyZUhTTCgpO1xuICAgICAgICByZXR1cm4gXy5jaGFubmVsLmhzbDJyZ2IoZGF0YSwgJ2InKTtcbiAgICB9XG4gICAgZ2V0IGgoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGNvbnN0IGggPSBkYXRhLmg7XG4gICAgICAgIGlmICghdGhpcy50eXBlLmlzKFRZUEUuUkdCKSAmJiBoICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gaDtcbiAgICAgICAgdGhpcy5fZW5zdXJlUkdCKCk7XG4gICAgICAgIHJldHVybiBfLmNoYW5uZWwucmdiMmhzbChkYXRhLCAnaCcpO1xuICAgIH1cbiAgICBnZXQgcygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgY29uc3QgcyA9IGRhdGEucztcbiAgICAgICAgaWYgKCF0aGlzLnR5cGUuaXMoVFlQRS5SR0IpICYmIHMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB0aGlzLl9lbnN1cmVSR0IoKTtcbiAgICAgICAgcmV0dXJuIF8uY2hhbm5lbC5yZ2IyaHNsKGRhdGEsICdzJyk7XG4gICAgfVxuICAgIGdldCBsKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICBjb25zdCBsID0gZGF0YS5sO1xuICAgICAgICBpZiAoIXRoaXMudHlwZS5pcyhUWVBFLlJHQikgJiYgbCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVJHQigpO1xuICAgICAgICByZXR1cm4gXy5jaGFubmVsLnJnYjJoc2woZGF0YSwgJ2wnKTtcbiAgICB9XG4gICAgZ2V0IGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuYTtcbiAgICB9XG4gICAgLyogU0VUVEVSUyAqL1xuICAgIHNldCByKHIpIHtcbiAgICAgICAgdGhpcy50eXBlLnNldChUWVBFLlJHQik7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS5yID0gcjtcbiAgICB9XG4gICAgc2V0IGcoZykge1xuICAgICAgICB0aGlzLnR5cGUuc2V0KFRZUEUuUkdCKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRhLmcgPSBnO1xuICAgIH1cbiAgICBzZXQgYihiKSB7XG4gICAgICAgIHRoaXMudHlwZS5zZXQoVFlQRS5SR0IpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRhdGEuYiA9IGI7XG4gICAgfVxuICAgIHNldCBoKGgpIHtcbiAgICAgICAgdGhpcy50eXBlLnNldChUWVBFLkhTTCk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGF0YS5oID0gaDtcbiAgICB9XG4gICAgc2V0IHMocykge1xuICAgICAgICB0aGlzLnR5cGUuc2V0KFRZUEUuSFNMKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRhLnMgPSBzO1xuICAgIH1cbiAgICBzZXQgbChsKSB7XG4gICAgICAgIHRoaXMudHlwZS5zZXQoVFlQRS5IU0wpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRhdGEubCA9IGw7XG4gICAgfVxuICAgIHNldCBhKGEpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kYXRhLmEgPSBhO1xuICAgIH1cbn1cbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgQ2hhbm5lbHM7XG4iLCIvKiBJTVBPUlQgKi9cbmltcG9ydCBDaGFubmVscyBmcm9tICcuLy9pbmRleC5qcyc7XG4vKiBNQUlOICovXG5jb25zdCBjaGFubmVscyA9IG5ldyBDaGFubmVscyh7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAgfSwgJ3RyYW5zcGFyZW50Jyk7XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IGNoYW5uZWxzO1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgeyBUWVBFIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbi8qIE1BSU4gKi9cbmNsYXNzIFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiBWQVJJQUJMRVMgKi9cbiAgICAgICAgdGhpcy50eXBlID0gVFlQRS5BTEw7XG4gICAgfVxuICAgIC8qIEFQSSAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG4gICAgc2V0KHR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAmJiB0aGlzLnR5cGUgIT09IHR5cGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjaGFuZ2UgYm90aCBSR0IgYW5kIEhTTCBjaGFubmVscyBhdCB0aGUgc2FtZSB0aW1lJyk7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLkFMTDtcbiAgICB9XG4gICAgaXModHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlO1xuICAgIH1cbn1cbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgVHlwZTtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IF8gZnJvbSAnLi4vdXRpbHMvaW5kZXguanMnO1xuaW1wb3J0IENoYW5uZWxzUmV1c2FibGUgZnJvbSAnLi4vY2hhbm5lbHMvcmV1c2FibGUuanMnO1xuaW1wb3J0IHsgREVDMkhFWCB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG4vKiBNQUlOICovXG5jb25zdCBIZXggPSB7XG4gICAgLyogVkFSSUFCTEVTICovXG4gICAgcmU6IC9eIygoPzpbYS1mMC05XXsyfSl7Miw0fXxbYS1mMC05XXszfSkkL2ksXG4gICAgLyogQVBJICovXG4gICAgcGFyc2U6IChjb2xvcikgPT4ge1xuICAgICAgICBpZiAoY29sb3IuY2hhckNvZGVBdCgwKSAhPT0gMzUpXG4gICAgICAgICAgICByZXR1cm47IC8vICcjJ1xuICAgICAgICBjb25zdCBtYXRjaCA9IGNvbG9yLm1hdGNoKEhleC5yZSk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGhleCA9IG1hdGNoWzFdO1xuICAgICAgICBjb25zdCBkZWMgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gaGV4Lmxlbmd0aDtcbiAgICAgICAgY29uc3QgaGFzQWxwaGEgPSBsZW5ndGggJSA0ID09PSAwO1xuICAgICAgICBjb25zdCBpc0Z1bGxMZW5ndGggPSBsZW5ndGggPiA0O1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gaXNGdWxsTGVuZ3RoID8gMSA6IDE3O1xuICAgICAgICBjb25zdCBiaXRzID0gaXNGdWxsTGVuZ3RoID8gOCA6IDQ7XG4gICAgICAgIGNvbnN0IGJpdHNPZmZzZXQgPSBoYXNBbHBoYSA/IDAgOiAtMTtcbiAgICAgICAgY29uc3QgbWFzayA9IGlzRnVsbExlbmd0aCA/IDI1NSA6IDE1O1xuICAgICAgICByZXR1cm4gQ2hhbm5lbHNSZXVzYWJsZS5zZXQoe1xuICAgICAgICAgICAgcjogKChkZWMgPj4gKGJpdHMgKiAoYml0c09mZnNldCArIDMpKSkgJiBtYXNrKSAqIG11bHRpcGxpZXIsXG4gICAgICAgICAgICBnOiAoKGRlYyA+PiAoYml0cyAqIChiaXRzT2Zmc2V0ICsgMikpKSAmIG1hc2spICogbXVsdGlwbGllcixcbiAgICAgICAgICAgIGI6ICgoZGVjID4+IChiaXRzICogKGJpdHNPZmZzZXQgKyAxKSkpICYgbWFzaykgKiBtdWx0aXBsaWVyLFxuICAgICAgICAgICAgYTogaGFzQWxwaGEgPyAoZGVjICYgbWFzaykgKiBtdWx0aXBsaWVyIC8gMjU1IDogMVxuICAgICAgICB9LCBjb2xvcik7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6IChjaGFubmVscykgPT4ge1xuICAgICAgICBjb25zdCB7IHIsIGcsIGIsIGEgfSA9IGNoYW5uZWxzO1xuICAgICAgICBpZiAoYSA8IDEpIHsgLy8gI1JSR0dCQkFBXG4gICAgICAgICAgICByZXR1cm4gYCMke0RFQzJIRVhbTWF0aC5yb3VuZChyKV19JHtERUMySEVYW01hdGgucm91bmQoZyldfSR7REVDMkhFWFtNYXRoLnJvdW5kKGIpXX0ke0RFQzJIRVhbTWF0aC5yb3VuZChhICogMjU1KV19YDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgLy8gI1JSR0dCQlxuICAgICAgICAgICAgcmV0dXJuIGAjJHtERUMySEVYW01hdGgucm91bmQocildfSR7REVDMkhFWFtNYXRoLnJvdW5kKGcpXX0ke0RFQzJIRVhbTWF0aC5yb3VuZChiKV19YDtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IEhleDtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IF8gZnJvbSAnLi4vdXRpbHMvaW5kZXguanMnO1xuaW1wb3J0IENoYW5uZWxzUmV1c2FibGUgZnJvbSAnLi4vY2hhbm5lbHMvcmV1c2FibGUuanMnO1xuLyogTUFJTiAqL1xuY29uc3QgSFNMID0ge1xuICAgIC8qIFZBUklBQkxFUyAqL1xuICAgIHJlOiAvXmhzbGE/XFwoXFxzKj8oLT8oPzpcXGQrKD86XFwuXFxkKyk/fCg/OlxcLlxcZCspKSg/OmUtP1xcZCspPyg/OmRlZ3xncmFkfHJhZHx0dXJuKT8pXFxzKj8oPzosfFxccylcXHMqPygtPyg/OlxcZCsoPzpcXC5cXGQrKT98KD86XFwuXFxkKykpKD86ZS0/XFxkKyk/JSlcXHMqPyg/Oix8XFxzKVxccyo/KC0/KD86XFxkKyg/OlxcLlxcZCspP3woPzpcXC5cXGQrKSkoPzplLT9cXGQrKT8lKSg/Olxccyo/KD86LHxcXC8pXFxzKj9cXCs/KC0/KD86XFxkKyg/OlxcLlxcZCspP3woPzpcXC5cXGQrKSkoPzplLT9cXGQrKT8oJSk/KSk/XFxzKj9cXCkkL2ksXG4gICAgaHVlUmU6IC9eKC4rPykoZGVnfGdyYWR8cmFkfHR1cm4pJC9pLFxuICAgIC8qIEhFTFBFUlMgKi9cbiAgICBfaHVlMmRlZzogKGh1ZSkgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaCA9IGh1ZS5tYXRjaChIU0wuaHVlUmUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IFssIG51bWJlciwgdW5pdF0gPSBtYXRjaDtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2dyYWQnOiByZXR1cm4gXy5jaGFubmVsLmNsYW1wLmgocGFyc2VGbG9hdChudW1iZXIpICogLjkpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JhZCc6IHJldHVybiBfLmNoYW5uZWwuY2xhbXAuaChwYXJzZUZsb2F0KG51bWJlcikgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjYXNlICd0dXJuJzogcmV0dXJuIF8uY2hhbm5lbC5jbGFtcC5oKHBhcnNlRmxvYXQobnVtYmVyKSAqIDM2MCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF8uY2hhbm5lbC5jbGFtcC5oKHBhcnNlRmxvYXQoaHVlKSk7XG4gICAgfSxcbiAgICAvKiBBUEkgKi9cbiAgICBwYXJzZTogKGNvbG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0gY29sb3IuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlICE9PSAxMDQgJiYgY2hhckNvZGUgIT09IDcyKVxuICAgICAgICAgICAgcmV0dXJuOyAvLyAnaCcvJ0gnXG4gICAgICAgIGNvbnN0IG1hdGNoID0gY29sb3IubWF0Y2goSFNMLnJlKTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgWywgaCwgcywgbCwgYSwgaXNBbHBoYVBlcmNlbnRhZ2VdID0gbWF0Y2g7XG4gICAgICAgIHJldHVybiBDaGFubmVsc1JldXNhYmxlLnNldCh7XG4gICAgICAgICAgICBoOiBIU0wuX2h1ZTJkZWcoaCksXG4gICAgICAgICAgICBzOiBfLmNoYW5uZWwuY2xhbXAucyhwYXJzZUZsb2F0KHMpKSxcbiAgICAgICAgICAgIGw6IF8uY2hhbm5lbC5jbGFtcC5sKHBhcnNlRmxvYXQobCkpLFxuICAgICAgICAgICAgYTogYSA/IF8uY2hhbm5lbC5jbGFtcC5hKGlzQWxwaGFQZXJjZW50YWdlID8gcGFyc2VGbG9hdChhKSAvIDEwMCA6IHBhcnNlRmxvYXQoYSkpIDogMVxuICAgICAgICB9LCBjb2xvcik7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6IChjaGFubmVscykgPT4ge1xuICAgICAgICBjb25zdCB7IGgsIHMsIGwsIGEgfSA9IGNoYW5uZWxzO1xuICAgICAgICBpZiAoYSA8IDEpIHsgLy8gSFNMQVxuICAgICAgICAgICAgcmV0dXJuIGBoc2xhKCR7Xy5sYW5nLnJvdW5kKGgpfSwgJHtfLmxhbmcucm91bmQocyl9JSwgJHtfLmxhbmcucm91bmQobCl9JSwgJHthfSlgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBIU0xcbiAgICAgICAgICAgIHJldHVybiBgaHNsKCR7Xy5sYW5nLnJvdW5kKGgpfSwgJHtfLmxhbmcucm91bmQocyl9JSwgJHtfLmxhbmcucm91bmQobCl9JSlgO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgSFNMO1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgXyBmcm9tICcuLi91dGlscy9pbmRleC5qcyc7XG5pbXBvcnQgSGV4IGZyb20gJy4vaGV4LmpzJztcbmltcG9ydCBIU0wgZnJvbSAnLi9oc2wuanMnO1xuaW1wb3J0IEtleXdvcmQgZnJvbSAnLi9rZXl3b3JkLmpzJztcbmltcG9ydCBSR0IgZnJvbSAnLi9yZ2IuanMnO1xuaW1wb3J0IHsgVFlQRSB9IGZyb20gJy4uL2NvbnN0YW50cy5qcyc7XG4vKiBNQUlOICovXG5jb25zdCBDb2xvciA9IHtcbiAgICAvKiBWQVJJQUJMRVMgKi9cbiAgICBmb3JtYXQ6IHtcbiAgICAgICAga2V5d29yZDogS2V5d29yZCxcbiAgICAgICAgaGV4OiBIZXgsXG4gICAgICAgIHJnYjogUkdCLFxuICAgICAgICByZ2JhOiBSR0IsXG4gICAgICAgIGhzbDogSFNMLFxuICAgICAgICBoc2xhOiBIU0xcbiAgICB9LFxuICAgIC8qIEFQSSAqL1xuICAgIHBhcnNlOiAoY29sb3IpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciAhPT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgIGNvbnN0IGNoYW5uZWxzID0gSGV4LnBhcnNlKGNvbG9yKSB8fCBSR0IucGFyc2UoY29sb3IpIHx8IEhTTC5wYXJzZShjb2xvcikgfHwgS2V5d29yZC5wYXJzZShjb2xvcik7IC8vIENvbG9yIHByb3ZpZGVycyBvcmRlcmVkIHdpdGggcGVyZm9ybWFuY2UgaW4gbWluZFxuICAgICAgICBpZiAoY2hhbm5lbHMpXG4gICAgICAgICAgICByZXR1cm4gY2hhbm5lbHM7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY29sb3IgZm9ybWF0OiBcIiR7Y29sb3J9XCJgKTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogKGNoYW5uZWxzKSA9PiB7XG4gICAgICAgIC8vIFNBU1MgcmV0dXJucyBhIGtleXdvcmQgaWYgcG9zc2libGUsIGJ1dCB3ZSBhdm9pZCBkb2luZyB0aGF0IGFzIGl0J3Mgc2xvd2VyIGFuZCBkb2Vzbid0IHJlYWxseSBhZGQgYW55IHZhbHVlXG4gICAgICAgIGlmICghY2hhbm5lbHMuY2hhbmdlZCAmJiBjaGFubmVscy5jb2xvcilcbiAgICAgICAgICAgIHJldHVybiBjaGFubmVscy5jb2xvcjtcbiAgICAgICAgaWYgKGNoYW5uZWxzLnR5cGUuaXMoVFlQRS5IU0wpIHx8IGNoYW5uZWxzLmRhdGEuciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gSFNMLnN0cmluZ2lmeShjaGFubmVscyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hhbm5lbHMuYSA8IDEgfHwgIU51bWJlci5pc0ludGVnZXIoY2hhbm5lbHMucikgfHwgIU51bWJlci5pc0ludGVnZXIoY2hhbm5lbHMuZykgfHwgIU51bWJlci5pc0ludGVnZXIoY2hhbm5lbHMuYikpIHtcbiAgICAgICAgICAgIHJldHVybiBSR0Iuc3RyaW5naWZ5KGNoYW5uZWxzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBIZXguc3RyaW5naWZ5KGNoYW5uZWxzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IENvbG9yO1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgSGV4IGZyb20gJy4vaGV4LmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IEtleXdvcmQgPSB7XG4gICAgLyogVkFSSUFCTEVTICovXG4gICAgY29sb3JzOiB7XG4gICAgICAgIGFsaWNlYmx1ZTogJyNmMGY4ZmYnLFxuICAgICAgICBhbnRpcXVld2hpdGU6ICcjZmFlYmQ3JyxcbiAgICAgICAgYXF1YTogJyMwMGZmZmYnLFxuICAgICAgICBhcXVhbWFyaW5lOiAnIzdmZmZkNCcsXG4gICAgICAgIGF6dXJlOiAnI2YwZmZmZicsXG4gICAgICAgIGJlaWdlOiAnI2Y1ZjVkYycsXG4gICAgICAgIGJpc3F1ZTogJyNmZmU0YzQnLFxuICAgICAgICBibGFjazogJyMwMDAwMDAnLFxuICAgICAgICBibGFuY2hlZGFsbW9uZDogJyNmZmViY2QnLFxuICAgICAgICBibHVlOiAnIzAwMDBmZicsXG4gICAgICAgIGJsdWV2aW9sZXQ6ICcjOGEyYmUyJyxcbiAgICAgICAgYnJvd246ICcjYTUyYTJhJyxcbiAgICAgICAgYnVybHl3b29kOiAnI2RlYjg4NycsXG4gICAgICAgIGNhZGV0Ymx1ZTogJyM1ZjllYTAnLFxuICAgICAgICBjaGFydHJldXNlOiAnIzdmZmYwMCcsXG4gICAgICAgIGNob2NvbGF0ZTogJyNkMjY5MWUnLFxuICAgICAgICBjb3JhbDogJyNmZjdmNTAnLFxuICAgICAgICBjb3JuZmxvd2VyYmx1ZTogJyM2NDk1ZWQnLFxuICAgICAgICBjb3Juc2lsazogJyNmZmY4ZGMnLFxuICAgICAgICBjcmltc29uOiAnI2RjMTQzYycsXG4gICAgICAgIGN5YW5hcXVhOiAnIzAwZmZmZicsXG4gICAgICAgIGRhcmtibHVlOiAnIzAwMDA4YicsXG4gICAgICAgIGRhcmtjeWFuOiAnIzAwOGI4YicsXG4gICAgICAgIGRhcmtnb2xkZW5yb2Q6ICcjYjg4NjBiJyxcbiAgICAgICAgZGFya2dyYXk6ICcjYTlhOWE5JyxcbiAgICAgICAgZGFya2dyZWVuOiAnIzAwNjQwMCcsXG4gICAgICAgIGRhcmtncmV5OiAnI2E5YTlhOScsXG4gICAgICAgIGRhcmtraGFraTogJyNiZGI3NmInLFxuICAgICAgICBkYXJrbWFnZW50YTogJyM4YjAwOGInLFxuICAgICAgICBkYXJrb2xpdmVncmVlbjogJyM1NTZiMmYnLFxuICAgICAgICBkYXJrb3JhbmdlOiAnI2ZmOGMwMCcsXG4gICAgICAgIGRhcmtvcmNoaWQ6ICcjOTkzMmNjJyxcbiAgICAgICAgZGFya3JlZDogJyM4YjAwMDAnLFxuICAgICAgICBkYXJrc2FsbW9uOiAnI2U5OTY3YScsXG4gICAgICAgIGRhcmtzZWFncmVlbjogJyM4ZmJjOGYnLFxuICAgICAgICBkYXJrc2xhdGVibHVlOiAnIzQ4M2Q4YicsXG4gICAgICAgIGRhcmtzbGF0ZWdyYXk6ICcjMmY0ZjRmJyxcbiAgICAgICAgZGFya3NsYXRlZ3JleTogJyMyZjRmNGYnLFxuICAgICAgICBkYXJrdHVycXVvaXNlOiAnIzAwY2VkMScsXG4gICAgICAgIGRhcmt2aW9sZXQ6ICcjOTQwMGQzJyxcbiAgICAgICAgZGVlcHBpbms6ICcjZmYxNDkzJyxcbiAgICAgICAgZGVlcHNreWJsdWU6ICcjMDBiZmZmJyxcbiAgICAgICAgZGltZ3JheTogJyM2OTY5NjknLFxuICAgICAgICBkaW1ncmV5OiAnIzY5Njk2OScsXG4gICAgICAgIGRvZGdlcmJsdWU6ICcjMWU5MGZmJyxcbiAgICAgICAgZmlyZWJyaWNrOiAnI2IyMjIyMicsXG4gICAgICAgIGZsb3JhbHdoaXRlOiAnI2ZmZmFmMCcsXG4gICAgICAgIGZvcmVzdGdyZWVuOiAnIzIyOGIyMicsXG4gICAgICAgIGZ1Y2hzaWE6ICcjZmYwMGZmJyxcbiAgICAgICAgZ2FpbnNib3JvOiAnI2RjZGNkYycsXG4gICAgICAgIGdob3N0d2hpdGU6ICcjZjhmOGZmJyxcbiAgICAgICAgZ29sZDogJyNmZmQ3MDAnLFxuICAgICAgICBnb2xkZW5yb2Q6ICcjZGFhNTIwJyxcbiAgICAgICAgZ3JheTogJyM4MDgwODAnLFxuICAgICAgICBncmVlbjogJyMwMDgwMDAnLFxuICAgICAgICBncmVlbnllbGxvdzogJyNhZGZmMmYnLFxuICAgICAgICBncmV5OiAnIzgwODA4MCcsXG4gICAgICAgIGhvbmV5ZGV3OiAnI2YwZmZmMCcsXG4gICAgICAgIGhvdHBpbms6ICcjZmY2OWI0JyxcbiAgICAgICAgaW5kaWFucmVkOiAnI2NkNWM1YycsXG4gICAgICAgIGluZGlnbzogJyM0YjAwODInLFxuICAgICAgICBpdm9yeTogJyNmZmZmZjAnLFxuICAgICAgICBraGFraTogJyNmMGU2OGMnLFxuICAgICAgICBsYXZlbmRlcjogJyNlNmU2ZmEnLFxuICAgICAgICBsYXZlbmRlcmJsdXNoOiAnI2ZmZjBmNScsXG4gICAgICAgIGxhd25ncmVlbjogJyM3Y2ZjMDAnLFxuICAgICAgICBsZW1vbmNoaWZmb246ICcjZmZmYWNkJyxcbiAgICAgICAgbGlnaHRibHVlOiAnI2FkZDhlNicsXG4gICAgICAgIGxpZ2h0Y29yYWw6ICcjZjA4MDgwJyxcbiAgICAgICAgbGlnaHRjeWFuOiAnI2UwZmZmZicsXG4gICAgICAgIGxpZ2h0Z29sZGVucm9keWVsbG93OiAnI2ZhZmFkMicsXG4gICAgICAgIGxpZ2h0Z3JheTogJyNkM2QzZDMnLFxuICAgICAgICBsaWdodGdyZWVuOiAnIzkwZWU5MCcsXG4gICAgICAgIGxpZ2h0Z3JleTogJyNkM2QzZDMnLFxuICAgICAgICBsaWdodHBpbms6ICcjZmZiNmMxJyxcbiAgICAgICAgbGlnaHRzYWxtb246ICcjZmZhMDdhJyxcbiAgICAgICAgbGlnaHRzZWFncmVlbjogJyMyMGIyYWEnLFxuICAgICAgICBsaWdodHNreWJsdWU6ICcjODdjZWZhJyxcbiAgICAgICAgbGlnaHRzbGF0ZWdyYXk6ICcjNzc4ODk5JyxcbiAgICAgICAgbGlnaHRzbGF0ZWdyZXk6ICcjNzc4ODk5JyxcbiAgICAgICAgbGlnaHRzdGVlbGJsdWU6ICcjYjBjNGRlJyxcbiAgICAgICAgbGlnaHR5ZWxsb3c6ICcjZmZmZmUwJyxcbiAgICAgICAgbGltZTogJyMwMGZmMDAnLFxuICAgICAgICBsaW1lZ3JlZW46ICcjMzJjZDMyJyxcbiAgICAgICAgbGluZW46ICcjZmFmMGU2JyxcbiAgICAgICAgbWFnZW50YTogJyNmZjAwZmYnLFxuICAgICAgICBtYXJvb246ICcjODAwMDAwJyxcbiAgICAgICAgbWVkaXVtYXF1YW1hcmluZTogJyM2NmNkYWEnLFxuICAgICAgICBtZWRpdW1ibHVlOiAnIzAwMDBjZCcsXG4gICAgICAgIG1lZGl1bW9yY2hpZDogJyNiYTU1ZDMnLFxuICAgICAgICBtZWRpdW1wdXJwbGU6ICcjOTM3MGRiJyxcbiAgICAgICAgbWVkaXVtc2VhZ3JlZW46ICcjM2NiMzcxJyxcbiAgICAgICAgbWVkaXVtc2xhdGVibHVlOiAnIzdiNjhlZScsXG4gICAgICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAnIzAwZmE5YScsXG4gICAgICAgIG1lZGl1bXR1cnF1b2lzZTogJyM0OGQxY2MnLFxuICAgICAgICBtZWRpdW12aW9sZXRyZWQ6ICcjYzcxNTg1JyxcbiAgICAgICAgbWlkbmlnaHRibHVlOiAnIzE5MTk3MCcsXG4gICAgICAgIG1pbnRjcmVhbTogJyNmNWZmZmEnLFxuICAgICAgICBtaXN0eXJvc2U6ICcjZmZlNGUxJyxcbiAgICAgICAgbW9jY2FzaW46ICcjZmZlNGI1JyxcbiAgICAgICAgbmF2YWpvd2hpdGU6ICcjZmZkZWFkJyxcbiAgICAgICAgbmF2eTogJyMwMDAwODAnLFxuICAgICAgICBvbGRsYWNlOiAnI2ZkZjVlNicsXG4gICAgICAgIG9saXZlOiAnIzgwODAwMCcsXG4gICAgICAgIG9saXZlZHJhYjogJyM2YjhlMjMnLFxuICAgICAgICBvcmFuZ2U6ICcjZmZhNTAwJyxcbiAgICAgICAgb3JhbmdlcmVkOiAnI2ZmNDUwMCcsXG4gICAgICAgIG9yY2hpZDogJyNkYTcwZDYnLFxuICAgICAgICBwYWxlZ29sZGVucm9kOiAnI2VlZThhYScsXG4gICAgICAgIHBhbGVncmVlbjogJyM5OGZiOTgnLFxuICAgICAgICBwYWxldHVycXVvaXNlOiAnI2FmZWVlZScsXG4gICAgICAgIHBhbGV2aW9sZXRyZWQ6ICcjZGI3MDkzJyxcbiAgICAgICAgcGFwYXlhd2hpcDogJyNmZmVmZDUnLFxuICAgICAgICBwZWFjaHB1ZmY6ICcjZmZkYWI5JyxcbiAgICAgICAgcGVydTogJyNjZDg1M2YnLFxuICAgICAgICBwaW5rOiAnI2ZmYzBjYicsXG4gICAgICAgIHBsdW06ICcjZGRhMGRkJyxcbiAgICAgICAgcG93ZGVyYmx1ZTogJyNiMGUwZTYnLFxuICAgICAgICBwdXJwbGU6ICcjODAwMDgwJyxcbiAgICAgICAgcmViZWNjYXB1cnBsZTogJyM2NjMzOTknLFxuICAgICAgICByZWQ6ICcjZmYwMDAwJyxcbiAgICAgICAgcm9zeWJyb3duOiAnI2JjOGY4ZicsXG4gICAgICAgIHJveWFsYmx1ZTogJyM0MTY5ZTEnLFxuICAgICAgICBzYWRkbGVicm93bjogJyM4YjQ1MTMnLFxuICAgICAgICBzYWxtb246ICcjZmE4MDcyJyxcbiAgICAgICAgc2FuZHlicm93bjogJyNmNGE0NjAnLFxuICAgICAgICBzZWFncmVlbjogJyMyZThiNTcnLFxuICAgICAgICBzZWFzaGVsbDogJyNmZmY1ZWUnLFxuICAgICAgICBzaWVubmE6ICcjYTA1MjJkJyxcbiAgICAgICAgc2lsdmVyOiAnI2MwYzBjMCcsXG4gICAgICAgIHNreWJsdWU6ICcjODdjZWViJyxcbiAgICAgICAgc2xhdGVibHVlOiAnIzZhNWFjZCcsXG4gICAgICAgIHNsYXRlZ3JheTogJyM3MDgwOTAnLFxuICAgICAgICBzbGF0ZWdyZXk6ICcjNzA4MDkwJyxcbiAgICAgICAgc25vdzogJyNmZmZhZmEnLFxuICAgICAgICBzcHJpbmdncmVlbjogJyMwMGZmN2YnLFxuICAgICAgICB0YW46ICcjZDJiNDhjJyxcbiAgICAgICAgdGVhbDogJyMwMDgwODAnLFxuICAgICAgICB0aGlzdGxlOiAnI2Q4YmZkOCcsXG4gICAgICAgIHRyYW5zcGFyZW50OiAnIzAwMDAwMDAwJyxcbiAgICAgICAgdHVycXVvaXNlOiAnIzQwZTBkMCcsXG4gICAgICAgIHZpb2xldDogJyNlZTgyZWUnLFxuICAgICAgICB3aGVhdDogJyNmNWRlYjMnLFxuICAgICAgICB3aGl0ZTogJyNmZmZmZmYnLFxuICAgICAgICB3aGl0ZXNtb2tlOiAnI2Y1ZjVmNScsXG4gICAgICAgIHllbGxvdzogJyNmZmZmMDAnLFxuICAgICAgICB5ZWxsb3dncmVlbjogJyM5YWNkMzInXG4gICAgfSxcbiAgICAvKiBBUEkgKi9cbiAgICBwYXJzZTogKGNvbG9yKSA9PiB7XG4gICAgICAgIGNvbG9yID0gY29sb3IudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgaGV4ID0gS2V5d29yZC5jb2xvcnNbY29sb3JdO1xuICAgICAgICBpZiAoIWhleClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmV0dXJuIEhleC5wYXJzZShoZXgpO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiAoY2hhbm5lbHMpID0+IHtcbiAgICAgICAgY29uc3QgaGV4ID0gSGV4LnN0cmluZ2lmeShjaGFubmVscyk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBLZXl3b3JkLmNvbG9ycykge1xuICAgICAgICAgICAgaWYgKEtleXdvcmQuY29sb3JzW25hbWVdID09PSBoZXgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IEtleXdvcmQ7XG4iLCIvKiBJTVBPUlQgKi9cbmltcG9ydCBfIGZyb20gJy4uL3V0aWxzL2luZGV4LmpzJztcbmltcG9ydCBDaGFubmVsc1JldXNhYmxlIGZyb20gJy4uL2NoYW5uZWxzL3JldXNhYmxlLmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IFJHQiA9IHtcbiAgICAvKiBWQVJJQUJMRVMgKi9cbiAgICByZTogL15yZ2JhP1xcKFxccyo/KC0/KD86XFxkKyg/OlxcLlxcZCspP3woPzpcXC5cXGQrKSkoPzplXFxkKyk/KCU/KSlcXHMqPyg/Oix8XFxzKVxccyo/KC0/KD86XFxkKyg/OlxcLlxcZCspP3woPzpcXC5cXGQrKSkoPzplXFxkKyk/KCU/KSlcXHMqPyg/Oix8XFxzKVxccyo/KC0/KD86XFxkKyg/OlxcLlxcZCspP3woPzpcXC5cXGQrKSkoPzplXFxkKyk/KCU/KSkoPzpcXHMqPyg/Oix8XFwvKVxccyo/XFwrPygtPyg/OlxcZCsoPzpcXC5cXGQrKT98KD86XFwuXFxkKykpKD86ZVxcZCspPyglPykpKT9cXHMqP1xcKSQvaSxcbiAgICAvKiBBUEkgKi9cbiAgICBwYXJzZTogKGNvbG9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0gY29sb3IuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKGNoYXJDb2RlICE9PSAxMTQgJiYgY2hhckNvZGUgIT09IDgyKVxuICAgICAgICAgICAgcmV0dXJuOyAvLyAncicvJ1InXG4gICAgICAgIGNvbnN0IG1hdGNoID0gY29sb3IubWF0Y2goUkdCLnJlKTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgWywgciwgaXNSZWRQZXJjZW50YWdlLCBnLCBpc0dyZWVuUGVyY2VudGFnZSwgYiwgaXNCbHVlUGVyY2VudGFnZSwgYSwgaXNBbHBoYVBlcmNlbnRhZ2VdID0gbWF0Y2g7XG4gICAgICAgIHJldHVybiBDaGFubmVsc1JldXNhYmxlLnNldCh7XG4gICAgICAgICAgICByOiBfLmNoYW5uZWwuY2xhbXAucihpc1JlZFBlcmNlbnRhZ2UgPyBwYXJzZUZsb2F0KHIpICogMi41NSA6IHBhcnNlRmxvYXQocikpLFxuICAgICAgICAgICAgZzogXy5jaGFubmVsLmNsYW1wLmcoaXNHcmVlblBlcmNlbnRhZ2UgPyBwYXJzZUZsb2F0KGcpICogMi41NSA6IHBhcnNlRmxvYXQoZykpLFxuICAgICAgICAgICAgYjogXy5jaGFubmVsLmNsYW1wLmIoaXNCbHVlUGVyY2VudGFnZSA/IHBhcnNlRmxvYXQoYikgKiAyLjU1IDogcGFyc2VGbG9hdChiKSksXG4gICAgICAgICAgICBhOiBhID8gXy5jaGFubmVsLmNsYW1wLmEoaXNBbHBoYVBlcmNlbnRhZ2UgPyBwYXJzZUZsb2F0KGEpIC8gMTAwIDogcGFyc2VGbG9hdChhKSkgOiAxXG4gICAgICAgIH0sIGNvbG9yKTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogKGNoYW5uZWxzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgciwgZywgYiwgYSB9ID0gY2hhbm5lbHM7XG4gICAgICAgIGlmIChhIDwgMSkgeyAvLyBSR0JBXG4gICAgICAgICAgICByZXR1cm4gYHJnYmEoJHtfLmxhbmcucm91bmQocil9LCAke18ubGFuZy5yb3VuZChnKX0sICR7Xy5sYW5nLnJvdW5kKGIpfSwgJHtfLmxhbmcucm91bmQoYSl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIFJHQlxuICAgICAgICAgICAgcmV0dXJuIGByZ2IoJHtfLmxhbmcucm91bmQocil9LCAke18ubGFuZy5yb3VuZChnKX0sICR7Xy5sYW5nLnJvdW5kKGIpfSlgO1xuICAgICAgICB9XG4gICAgfVxufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgUkdCO1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgXyBmcm9tICcuL3V0aWxzL2luZGV4LmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IERFQzJIRVggPSB7fTtcbmZvciAobGV0IGkgPSAwOyBpIDw9IDI1NTsgaSsrKVxuICAgIERFQzJIRVhbaV0gPSBfLnVuaXQuZGVjMmhleChpKTsgLy8gUG9wdWxhdGluZyBkeW5hbWljYWxseSwgc3RyaWtpbmcgYSBiYWxhbmNlIGJldHdlZW4gY29kZSBzaXplIGFuZCBwZXJmb3JtYW5jZVxuY29uc3QgVFlQRSA9IHtcbiAgICBBTEw6IDAsXG4gICAgUkdCOiAxLFxuICAgIEhTTDogMlxufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IHsgREVDMkhFWCwgVFlQRSB9O1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vY29sb3IvaW5kZXguanMnO1xuaW1wb3J0IGNoYW5nZSBmcm9tICcuL2NoYW5nZS5qcyc7XG4vKiBNQUlOICovXG5jb25zdCBhZGp1c3QgPSAoY29sb3IsIGNoYW5uZWxzKSA9PiB7XG4gICAgY29uc3QgY2ggPSBDb2xvci5wYXJzZShjb2xvcik7XG4gICAgY29uc3QgY2hhbmdlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgYyBpbiBjaGFubmVscykge1xuICAgICAgICBpZiAoIWNoYW5uZWxzW2NdKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNoYW5nZXNbY10gPSBjaFtjXSArIGNoYW5uZWxzW2NdO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlKGNvbG9yLCBjaGFuZ2VzKTtcbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IGFkanVzdDtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IF8gZnJvbSAnLi4vdXRpbHMvaW5kZXguanMnO1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL2NvbG9yL2luZGV4LmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IGFkanVzdENoYW5uZWwgPSAoY29sb3IsIGNoYW5uZWwsIGFtb3VudCkgPT4ge1xuICAgIGNvbnN0IGNoYW5uZWxzID0gQ29sb3IucGFyc2UoY29sb3IpO1xuICAgIGNvbnN0IGFtb3VudEN1cnJlbnQgPSBjaGFubmVsc1tjaGFubmVsXTtcbiAgICBjb25zdCBhbW91bnROZXh0ID0gXy5jaGFubmVsLmNsYW1wW2NoYW5uZWxdKGFtb3VudEN1cnJlbnQgKyBhbW91bnQpO1xuICAgIGlmIChhbW91bnRDdXJyZW50ICE9PSBhbW91bnROZXh0KVxuICAgICAgICBjaGFubmVsc1tjaGFubmVsXSA9IGFtb3VudE5leHQ7XG4gICAgcmV0dXJuIENvbG9yLnN0cmluZ2lmeShjaGFubmVscyk7XG59O1xuLyogRVhQT1JUICovXG5leHBvcnQgZGVmYXVsdCBhZGp1c3RDaGFubmVsO1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgXyBmcm9tICcuLi91dGlscy9pbmRleC5qcyc7XG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vY29sb3IvaW5kZXguanMnO1xuLyogTUFJTiAqL1xuY29uc3QgY2hhbmdlID0gKGNvbG9yLCBjaGFubmVscykgPT4ge1xuICAgIGNvbnN0IGNoID0gQ29sb3IucGFyc2UoY29sb3IpO1xuICAgIGZvciAoY29uc3QgYyBpbiBjaGFubmVscykge1xuICAgICAgICBjaFtjXSA9IF8uY2hhbm5lbC5jbGFtcFtjXShjaGFubmVsc1tjXSk7XG4gICAgfVxuICAgIHJldHVybiBDb2xvci5zdHJpbmdpZnkoY2gpO1xufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgY2hhbmdlO1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgYWRqdXN0Q2hhbm5lbCBmcm9tICcuL2FkanVzdF9jaGFubmVsLmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IGRhcmtlbiA9IChjb2xvciwgYW1vdW50KSA9PiB7XG4gICAgcmV0dXJuIGFkanVzdENoYW5uZWwoY29sb3IsICdsJywgLWFtb3VudCk7XG59O1xuLyogRVhQT1JUICovXG5leHBvcnQgZGVmYXVsdCBkYXJrZW47XG4iLCIvKiBJTVBPUlQgKi9cbmltcG9ydCBDb2xvciBmcm9tICcuLi9jb2xvci9pbmRleC5qcyc7XG5pbXBvcnQgbWl4IGZyb20gJy4vbWl4LmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IGludmVydCA9IChjb2xvciwgd2VpZ2h0ID0gMTAwKSA9PiB7XG4gICAgY29uc3QgaW52ZXJzZSA9IENvbG9yLnBhcnNlKGNvbG9yKTtcbiAgICBpbnZlcnNlLnIgPSAyNTUgLSBpbnZlcnNlLnI7XG4gICAgaW52ZXJzZS5nID0gMjU1IC0gaW52ZXJzZS5nO1xuICAgIGludmVyc2UuYiA9IDI1NSAtIGludmVyc2UuYjtcbiAgICByZXR1cm4gbWl4KGludmVyc2UsIGNvbG9yLCB3ZWlnaHQpO1xufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgaW52ZXJ0O1xuIiwiLyogSU1QT1JUICovXG5pbXBvcnQgaXNMaWdodCBmcm9tICcuL2lzX2xpZ2h0LmpzJztcbi8qIE1BSU4gKi9cbmNvbnN0IGlzRGFyayA9IChjb2xvcikgPT4ge1xuICAgIHJldHVybiAhaXNMaWdodChjb2xvcik7XG59O1xuLyogRVhQT1JUICovXG5leHBvcnQgZGVmYXVsdCBpc0Rhcms7XG4iLCIvKiBJTVBPUlQgKi9cbmltcG9ydCBsdW1pbmFuY2UgZnJvbSAnLi9sdW1pbmFuY2UuanMnO1xuLyogTUFJTiAqL1xuY29uc3QgaXNMaWdodCA9IChjb2xvcikgPT4ge1xuICAgIHJldHVybiBsdW1pbmFuY2UoY29sb3IpID49IC41O1xufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgaXNMaWdodDtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IGFkanVzdENoYW5uZWwgZnJvbSAnLi9hZGp1c3RfY2hhbm5lbC5qcyc7XG4vKiBNQUlOICovXG5jb25zdCBsaWdodGVuID0gKGNvbG9yLCBhbW91bnQpID0+IHtcbiAgICByZXR1cm4gYWRqdXN0Q2hhbm5lbChjb2xvciwgJ2wnLCBhbW91bnQpO1xufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgbGlnaHRlbjtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IF8gZnJvbSAnLi4vdXRpbHMvaW5kZXguanMnO1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL2NvbG9yL2luZGV4LmpzJztcbi8qIE1BSU4gKi9cbi8vU09VUkNFOiBodHRwczovL3BsYW5ldGNhbGMuY29tLzc3NzlcbmNvbnN0IGx1bWluYW5jZSA9IChjb2xvcikgPT4ge1xuICAgIGNvbnN0IHsgciwgZywgYiB9ID0gQ29sb3IucGFyc2UoY29sb3IpO1xuICAgIGNvbnN0IGx1bWluYW5jZSA9IC4yMTI2ICogXy5jaGFubmVsLnRvTGluZWFyKHIpICsgLjcxNTIgKiBfLmNoYW5uZWwudG9MaW5lYXIoZykgKyAuMDcyMiAqIF8uY2hhbm5lbC50b0xpbmVhcihiKTtcbiAgICByZXR1cm4gXy5sYW5nLnJvdW5kKGx1bWluYW5jZSk7XG59O1xuLyogRVhQT1JUICovXG5leHBvcnQgZGVmYXVsdCBsdW1pbmFuY2U7XG4iLCIvKiBJTVBPUlQgKi9cbmltcG9ydCBDb2xvciBmcm9tICcuLi9jb2xvci9pbmRleC5qcyc7XG5pbXBvcnQgcmdiYSBmcm9tICcuL3JnYmEuanMnO1xuLyogTUFJTiAqL1xuLy9TT1VSQ0U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzL2RhcnQtc2Fzcy9ibG9iLzc0NTdkMmU5ZTdlNjIzZDk4NDRmZmQwMzdhMDcwY2YzMmQzOWMzNDgvbGliL3NyYy9mdW5jdGlvbnMvY29sb3IuZGFydCNMNzE4LUw3NTZcbmNvbnN0IG1peCA9IChjb2xvcjEsIGNvbG9yMiwgd2VpZ2h0ID0gNTApID0+IHtcbiAgICBjb25zdCB7IHI6IHIxLCBnOiBnMSwgYjogYjEsIGE6IGExIH0gPSBDb2xvci5wYXJzZShjb2xvcjEpO1xuICAgIGNvbnN0IHsgcjogcjIsIGc6IGcyLCBiOiBiMiwgYTogYTIgfSA9IENvbG9yLnBhcnNlKGNvbG9yMik7XG4gICAgY29uc3Qgd2VpZ2h0U2NhbGUgPSB3ZWlnaHQgLyAxMDA7XG4gICAgY29uc3Qgd2VpZ2h0Tm9ybWFsaXplZCA9ICh3ZWlnaHRTY2FsZSAqIDIpIC0gMTtcbiAgICBjb25zdCBhbHBoYURlbHRhID0gYTEgLSBhMjtcbiAgICBjb25zdCB3ZWlnaHQxY29tYmluZWQgPSAoKHdlaWdodE5vcm1hbGl6ZWQgKiBhbHBoYURlbHRhKSA9PT0gLTEpID8gd2VpZ2h0Tm9ybWFsaXplZCA6ICh3ZWlnaHROb3JtYWxpemVkICsgYWxwaGFEZWx0YSkgLyAoMSArIHdlaWdodE5vcm1hbGl6ZWQgKiBhbHBoYURlbHRhKTtcbiAgICBjb25zdCB3ZWlnaHQxID0gKHdlaWdodDFjb21iaW5lZCArIDEpIC8gMjtcbiAgICBjb25zdCB3ZWlnaHQyID0gMSAtIHdlaWdodDE7XG4gICAgY29uc3QgciA9IChyMSAqIHdlaWdodDEpICsgKHIyICogd2VpZ2h0Mik7XG4gICAgY29uc3QgZyA9IChnMSAqIHdlaWdodDEpICsgKGcyICogd2VpZ2h0Mik7XG4gICAgY29uc3QgYiA9IChiMSAqIHdlaWdodDEpICsgKGIyICogd2VpZ2h0Mik7XG4gICAgY29uc3QgYSA9IChhMSAqIHdlaWdodFNjYWxlKSArIChhMiAqICgxIC0gd2VpZ2h0U2NhbGUpKTtcbiAgICByZXR1cm4gcmdiYShyLCBnLCBiLCBhKTtcbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IG1peDtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IF8gZnJvbSAnLi4vdXRpbHMvaW5kZXguanMnO1xuaW1wb3J0IENoYW5uZWxzUmV1c2FibGUgZnJvbSAnLi4vY2hhbm5lbHMvcmV1c2FibGUuanMnO1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL2NvbG9yL2luZGV4LmpzJztcbmltcG9ydCBjaGFuZ2UgZnJvbSAnLi9jaGFuZ2UuanMnO1xuLyogTUFJTiAqL1xuY29uc3QgcmdiYSA9IChyLCBnLCBiID0gMCwgYSA9IDEpID0+IHtcbiAgICBpZiAodHlwZW9mIHIgIT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gY2hhbmdlKHIsIHsgYTogZyB9KTtcbiAgICBjb25zdCBjaGFubmVscyA9IENoYW5uZWxzUmV1c2FibGUuc2V0KHtcbiAgICAgICAgcjogXy5jaGFubmVsLmNsYW1wLnIociksXG4gICAgICAgIGc6IF8uY2hhbm5lbC5jbGFtcC5nKGcpLFxuICAgICAgICBiOiBfLmNoYW5uZWwuY2xhbXAuYihiKSxcbiAgICAgICAgYTogXy5jaGFubmVsLmNsYW1wLmEoYSlcbiAgICB9KTtcbiAgICByZXR1cm4gQ29sb3Iuc3RyaW5naWZ5KGNoYW5uZWxzKTtcbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IHJnYmE7XG4iLCIvKiBJTVBPUlQgKi9cbi8qIE1BSU4gKi9cbmNvbnN0IENoYW5uZWwgPSB7XG4gICAgLyogQ0xBTVAgKi9cbiAgICBtaW46IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgZzogMCxcbiAgICAgICAgYjogMCxcbiAgICAgICAgczogMCxcbiAgICAgICAgbDogMCxcbiAgICAgICAgYTogMFxuICAgIH0sXG4gICAgbWF4OiB7XG4gICAgICAgIHI6IDI1NSxcbiAgICAgICAgZzogMjU1LFxuICAgICAgICBiOiAyNTUsXG4gICAgICAgIGg6IDM2MCxcbiAgICAgICAgczogMTAwLFxuICAgICAgICBsOiAxMDAsXG4gICAgICAgIGE6IDFcbiAgICB9LFxuICAgIGNsYW1wOiB7XG4gICAgICAgIHI6IChyKSA9PiByID49IDI1NSA/IDI1NSA6IChyIDwgMCA/IDAgOiByKSxcbiAgICAgICAgZzogKGcpID0+IGcgPj0gMjU1ID8gMjU1IDogKGcgPCAwID8gMCA6IGcpLFxuICAgICAgICBiOiAoYikgPT4gYiA+PSAyNTUgPyAyNTUgOiAoYiA8IDAgPyAwIDogYiksXG4gICAgICAgIGg6IChoKSA9PiBoICUgMzYwLFxuICAgICAgICBzOiAocykgPT4gcyA+PSAxMDAgPyAxMDAgOiAocyA8IDAgPyAwIDogcyksXG4gICAgICAgIGw6IChsKSA9PiBsID49IDEwMCA/IDEwMCA6IChsIDwgMCA/IDAgOiBsKSxcbiAgICAgICAgYTogKGEpID0+IGEgPj0gMSA/IDEgOiAoYSA8IDAgPyAwIDogYSlcbiAgICB9LFxuICAgIC8qIENPTlZFUlNJT04gKi9cbiAgICAvL1NPVVJDRTogaHR0cHM6Ly9wbGFuZXRjYWxjLmNvbS83Nzc5XG4gICAgdG9MaW5lYXI6IChjKSA9PiB7XG4gICAgICAgIGNvbnN0IG4gPSBjIC8gMjU1O1xuICAgICAgICByZXR1cm4gYyA+IC4wMzkyOCA/IE1hdGgucG93KCgobiArIC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogbiAvIDEyLjkyO1xuICAgIH0sXG4gICAgLy9TT1VSQ0U6IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL21qYWNrc29uLzUzMTEyNTZcbiAgICBodWUycmdiOiAocCwgcSwgdCkgPT4ge1xuICAgICAgICBpZiAodCA8IDApXG4gICAgICAgICAgICB0ICs9IDE7XG4gICAgICAgIGlmICh0ID4gMSlcbiAgICAgICAgICAgIHQgLT0gMTtcbiAgICAgICAgaWYgKHQgPCAxIC8gNilcbiAgICAgICAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgICAgICBpZiAodCA8IDEgLyAyKVxuICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgIGlmICh0IDwgMiAvIDMpXG4gICAgICAgICAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDY7XG4gICAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgaHNsMnJnYjogKHsgaCwgcywgbCB9LCBjaGFubmVsKSA9PiB7XG4gICAgICAgIGlmICghcylcbiAgICAgICAgICAgIHJldHVybiBsICogMi41NTsgLy8gQWNocm9tYXRpY1xuICAgICAgICBoIC89IDM2MDtcbiAgICAgICAgcyAvPSAxMDA7XG4gICAgICAgIGwgLz0gMTAwO1xuICAgICAgICBjb25zdCBxID0gKGwgPCAuNSkgPyBsICogKDEgKyBzKSA6IChsICsgcykgLSAobCAqIHMpO1xuICAgICAgICBjb25zdCBwID0gMiAqIGwgLSBxO1xuICAgICAgICBzd2l0Y2ggKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ3InOiByZXR1cm4gQ2hhbm5lbC5odWUycmdiKHAsIHEsIGggKyAxIC8gMykgKiAyNTU7XG4gICAgICAgICAgICBjYXNlICdnJzogcmV0dXJuIENoYW5uZWwuaHVlMnJnYihwLCBxLCBoKSAqIDI1NTtcbiAgICAgICAgICAgIGNhc2UgJ2InOiByZXR1cm4gQ2hhbm5lbC5odWUycmdiKHAsIHEsIGggLSAxIC8gMykgKiAyNTU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJnYjJoc2w6ICh7IHIsIGcsIGIgfSwgY2hhbm5lbCkgPT4ge1xuICAgICAgICByIC89IDI1NTtcbiAgICAgICAgZyAvPSAyNTU7XG4gICAgICAgIGIgLz0gMjU1O1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICAgIGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgICAgIGlmIChjaGFubmVsID09PSAnbCcpXG4gICAgICAgICAgICByZXR1cm4gbCAqIDEwMDtcbiAgICAgICAgaWYgKG1heCA9PT0gbWluKVxuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIEFjaHJvbWF0aWNcbiAgICAgICAgY29uc3QgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgY29uc3QgcyA9IChsID4gLjUpID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICAgICAgaWYgKGNoYW5uZWwgPT09ICdzJylcbiAgICAgICAgICAgIHJldHVybiBzICogMTAwO1xuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiByZXR1cm4gKChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApKSAqIDYwO1xuICAgICAgICAgICAgY2FzZSBnOiByZXR1cm4gKChiIC0gcikgLyBkICsgMikgKiA2MDtcbiAgICAgICAgICAgIGNhc2UgYjogcmV0dXJuICgociAtIGcpIC8gZCArIDQpICogNjA7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gLTE7IC8vVFNDOiBUeXBlU2NyaXB0IGlzIHN0dXBpZCBhbmQgY29tcGxhaW5zIGlmIHRoZXJlIGlzbid0IHRoaXMgdXNlbGVzcyBkZWZhdWx0IHN0YXRlbWVudFxuICAgICAgICB9XG4gICAgfVxufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgQ2hhbm5lbDtcbiIsIi8qIElNUE9SVCAqL1xuaW1wb3J0IGNoYW5uZWwgZnJvbSAnLi9jaGFubmVsLmpzJztcbmltcG9ydCBsYW5nIGZyb20gJy4vbGFuZy5qcyc7XG5pbXBvcnQgdW5pdCBmcm9tICcuL3VuaXQuanMnO1xuLyogTUFJTiAqL1xuY29uc3QgVXRpbHMgPSB7XG4gICAgY2hhbm5lbCxcbiAgICBsYW5nLFxuICAgIHVuaXRcbn07XG4vKiBFWFBPUlQgKi9cbmV4cG9ydCBkZWZhdWx0IFV0aWxzO1xuIiwiLyogTUFJTiAqL1xuY29uc3QgTGFuZyA9IHtcbiAgICAvKiBBUEkgKi9cbiAgICBjbGFtcDogKG51bWJlciwgbG93ZXIsIHVwcGVyKSA9PiB7XG4gICAgICAgIGlmIChsb3dlciA+IHVwcGVyKVxuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGxvd2VyLCBNYXRoLm1heCh1cHBlciwgbnVtYmVyKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIG51bWJlcikpO1xuICAgIH0sXG4gICAgcm91bmQ6IChudW1iZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogMTAwMDAwMDAwMDApIC8gMTAwMDAwMDAwMDA7XG4gICAgfVxufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgTGFuZztcbiIsIi8qIE1BSU4gKi9cbmNvbnN0IFVuaXQgPSB7XG4gICAgLyogQVBJICovXG4gICAgZGVjMmhleDogKGRlYykgPT4ge1xuICAgICAgICBjb25zdCBoZXggPSBNYXRoLnJvdW5kKGRlYykudG9TdHJpbmcoMTYpO1xuICAgICAgICByZXR1cm4gaGV4Lmxlbmd0aCA+IDEgPyBoZXggOiBgMCR7aGV4fWA7XG4gICAgfVxufTtcbi8qIEVYUE9SVCAqL1xuZXhwb3J0IGRlZmF1bHQgVW5pdDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFWaWV3O1xuIiwiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiaW1wb3J0IGxpc3RDYWNoZUNsZWFyIGZyb20gJy4vX2xpc3RDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVEZWxldGUgZnJvbSAnLi9fbGlzdENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVHZXQgZnJvbSAnLi9fbGlzdENhY2hlR2V0LmpzJztcbmltcG9ydCBsaXN0Q2FjaGVIYXMgZnJvbSAnLi9fbGlzdENhY2hlSGFzLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVTZXQgZnJvbSAnLi9fbGlzdENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0Q2FjaGU7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsImltcG9ydCBtYXBDYWNoZUNsZWFyIGZyb20gJy4vX21hcENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IG1hcENhY2hlRGVsZXRlIGZyb20gJy4vX21hcENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBtYXBDYWNoZUdldCBmcm9tICcuL19tYXBDYWNoZUdldC5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVIYXMgZnJvbSAnLi9fbWFwQ2FjaGVIYXMuanMnO1xuaW1wb3J0IG1hcENhY2hlU2V0IGZyb20gJy4vX21hcENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcENhY2hlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21pc2U7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldDtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBzdGFja0NsZWFyIGZyb20gJy4vX3N0YWNrQ2xlYXIuanMnO1xuaW1wb3J0IHN0YWNrRGVsZXRlIGZyb20gJy4vX3N0YWNrRGVsZXRlLmpzJztcbmltcG9ydCBzdGFja0dldCBmcm9tICcuL19zdGFja0dldC5qcyc7XG5pbXBvcnQgc3RhY2tIYXMgZnJvbSAnLi9fc3RhY2tIYXMuanMnO1xuaW1wb3J0IHN0YWNrU2V0IGZyb20gJy4vX3N0YWNrU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFjaztcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IFVpbnQ4QXJyYXk7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgV2Vha01hcDtcbiIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXBwbHk7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXNzaWduVmFsdWVgIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgYXNzaWduXG4gKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFlcShvYmplY3Rba2V5XSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25NZXJnZVZhbHVlO1xuIiwiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25WYWx1ZTtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzb2NJbmRleE9mO1xuIiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnblZhbHVlO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlQ3JlYXRlO1xuIiwiaW1wb3J0IGNyZWF0ZUJhc2VGb3IgZnJvbSAnLi9fY3JlYXRlQmFzZUZvci5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZvcjtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzQXJndW1lbnRzO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXMgZnJvbSAnLi9fbmF0aXZlS2V5cy5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXM7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXNJbiBmcm9tICcuL19uYXRpdmVLZXlzSW4uanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5c0luO1xuIiwiaW1wb3J0IFN0YWNrIGZyb20gJy4vX1N0YWNrLmpzJztcbmltcG9ydCBhc3NpZ25NZXJnZVZhbHVlIGZyb20gJy4vX2Fzc2lnbk1lcmdlVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VGb3IgZnJvbSAnLi9fYmFzZUZvci5qcyc7XG5pbXBvcnQgYmFzZU1lcmdlRGVlcCBmcm9tICcuL19iYXNlTWVyZ2VEZWVwLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuaW1wb3J0IHNhZmVHZXQgZnJvbSAnLi9fc2FmZUdldC5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICA/IGN1c3RvbWl6ZXIoc2FmZUdldChvYmplY3QsIGtleSksIHNyY1ZhbHVlLCAoa2V5ICsgJycpLCBvYmplY3QsIHNvdXJjZSwgc3RhY2spXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfSwga2V5c0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1lcmdlO1xuIiwiaW1wb3J0IGFzc2lnbk1lcmdlVmFsdWUgZnJvbSAnLi9fYXNzaWduTWVyZ2VWYWx1ZS5qcyc7XG5pbXBvcnQgY2xvbmVCdWZmZXIgZnJvbSAnLi9fY2xvbmVCdWZmZXIuanMnO1xuaW1wb3J0IGNsb25lVHlwZWRBcnJheSBmcm9tICcuL19jbG9uZVR5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGNvcHlBcnJheSBmcm9tICcuL19jb3B5QXJyYXkuanMnO1xuaW1wb3J0IGluaXRDbG9uZU9iamVjdCBmcm9tICcuL19pbml0Q2xvbmVPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0FycmF5TGlrZU9iamVjdCBmcm9tICcuL2lzQXJyYXlMaWtlT2JqZWN0LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QuanMnO1xuaW1wb3J0IGlzVHlwZWRBcnJheSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgc2FmZUdldCBmcm9tICcuL19zYWZlR2V0LmpzJztcbmltcG9ydCB0b1BsYWluT2JqZWN0IGZyb20gJy4vdG9QbGFpbk9iamVjdC5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNZXJnZURlZXA7XG4iLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgb3ZlclJlc3QgZnJvbSAnLi9fb3ZlclJlc3QuanMnO1xuaW1wb3J0IHNldFRvU3RyaW5nIGZyb20gJy4vX3NldFRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VSZXN0O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gJy4vY29uc3RhbnQuanMnO1xuaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVVuYXJ5O1xuIiwiaW1wb3J0IFVpbnQ4QXJyYXkgZnJvbSAnLi9fVWludDhBcnJheS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVBcnJheUJ1ZmZlcjtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUJ1ZmZlcjtcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVR5cGVkQXJyYXk7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weUFycmF5O1xuIiwiaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlPYmplY3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsImltcG9ydCBiYXNlUmVzdCBmcm9tICcuL19iYXNlUmVzdC5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcjtcbiIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCYXNlRm9yO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lUHJvcGVydHk7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwiaW1wb3J0IGlzS2V5YWJsZSBmcm9tICcuL19pc0tleWFibGUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hcERhdGE7XG4iLCJpbXBvcnQgYmFzZUlzTmF0aXZlIGZyb20gJy4vX2Jhc2VJc05hdGl2ZS5qcyc7XG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9fZ2V0VmFsdWUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROYXRpdmU7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCJpbXBvcnQgRGF0YVZpZXcgZnJvbSAnLi9fRGF0YVZpZXcuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnLi9fUHJvbWlzZS5qcyc7XG5pbXBvcnQgU2V0IGZyb20gJy4vX1NldC5qcyc7XG5pbXBvcnQgV2Vha01hcCBmcm9tICcuL19XZWFrTWFwLmpzJztcbmltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGFnO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoR2V0O1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hIYXM7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoU2V0O1xuIiwiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZU9iamVjdDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc0luZGV4IGZyb20gJy4vX2lzSW5kZXguanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSXRlcmF0ZWVDYWxsO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgY29yZUpzRGF0YSBmcm9tICcuL19jb3JlSnNEYXRhLmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVDbGVhcjtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCJpbXBvcnQgSGFzaCBmcm9tICcuL19IYXNoLmpzJztcbmltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUNsZWFyO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5c0luO1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgYXBwbHkgZnJvbSAnLi9fYXBwbHkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXg7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyUmVzdDtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2FmZUdldDtcbiIsImltcG9ydCBiYXNlU2V0VG9TdHJpbmcgZnJvbSAnLi9fYmFzZVNldFRvU3RyaW5nLmpzJztcbmltcG9ydCBzaG9ydE91dCBmcm9tICcuL19zaG9ydE91dC5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaG9ydE91dDtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tIYXM7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tTZXQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU291cmNlO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnN0YW50O1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaWRlbnRpdHk7XG4iLCJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheUxpa2U7XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZU9iamVjdDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuaW1wb3J0IHN0dWJGYWxzZSBmcm9tICcuL3N0dWJGYWxzZS5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCdWZmZXI7XG4iLCJpbXBvcnQgYmFzZUtleXMgZnJvbSAnLi9fYmFzZUtleXMuanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGVtcHR5IG9iamVjdCwgY29sbGVjdGlvbiwgbWFwLCBvciBzZXQuXG4gKlxuICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gKiBwcm9wZXJ0aWVzLlxuICpcbiAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICogalF1ZXJ5LWxpa2UgY29sbGVjdGlvbnMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYGxlbmd0aGAgb2YgYDBgLlxuICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0VtcHR5KG51bGwpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSh0cnVlKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoMSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmXG4gICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5sZW5ndGg7XG4gIH1cbiAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gIH1cbiAgaWYgKGlzUHJvdG90eXBlKHZhbHVlKSkge1xuICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNFbXB0eTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0xlbmd0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5c0luIGZyb20gJy4vX2Jhc2VLZXlzSW4uanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5c0luO1xuIiwiaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IGJhc2VNZXJnZSBmcm9tICcuL19iYXNlTWVyZ2UuanMnO1xuaW1wb3J0IGNyZWF0ZUFzc2lnbmVyIGZyb20gJy4vX2NyZWF0ZUFzc2lnbmVyLmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHViRmFsc2U7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvUGxhaW5PYmplY3Q7XG4iLCIvLyBwYWNrYWdlLmpzb25cbnZhciBwYWNrYWdlX2RlZmF1bHQgPSB7XG4gIG5hbWU6IFwibWVybWFpZFwiLFxuICB2ZXJzaW9uOiBcIjExLjYuMFwiLFxuICBkZXNjcmlwdGlvbjogXCJNYXJrZG93bi1pc2ggc3ludGF4IGZvciBnZW5lcmF0aW5nIGZsb3djaGFydHMsIG1pbmRtYXBzLCBzZXF1ZW5jZSBkaWFncmFtcywgY2xhc3MgZGlhZ3JhbXMsIGdhbnR0IGNoYXJ0cywgZ2l0IGdyYXBocyBhbmQgbW9yZS5cIixcbiAgdHlwZTogXCJtb2R1bGVcIixcbiAgbW9kdWxlOiBcIi4vZGlzdC9tZXJtYWlkLmNvcmUubWpzXCIsXG4gIHR5cGVzOiBcIi4vZGlzdC9tZXJtYWlkLmQudHNcIixcbiAgZXhwb3J0czoge1xuICAgIFwiLlwiOiB7XG4gICAgICB0eXBlczogXCIuL2Rpc3QvbWVybWFpZC5kLnRzXCIsXG4gICAgICBpbXBvcnQ6IFwiLi9kaXN0L21lcm1haWQuY29yZS5tanNcIixcbiAgICAgIGRlZmF1bHQ6IFwiLi9kaXN0L21lcm1haWQuY29yZS5tanNcIlxuICAgIH0sXG4gICAgXCIuLypcIjogXCIuLypcIlxuICB9LFxuICBrZXl3b3JkczogW1xuICAgIFwiZGlhZ3JhbVwiLFxuICAgIFwibWFya2Rvd25cIixcbiAgICBcImZsb3djaGFydFwiLFxuICAgIFwic2VxdWVuY2UgZGlhZ3JhbVwiLFxuICAgIFwiZ2FudHRcIixcbiAgICBcImNsYXNzIGRpYWdyYW1cIixcbiAgICBcImdpdCBncmFwaFwiLFxuICAgIFwibWluZG1hcFwiLFxuICAgIFwicGFja2V0IGRpYWdyYW1cIixcbiAgICBcImM0IGRpYWdyYW1cIixcbiAgICBcImVyIGRpYWdyYW1cIixcbiAgICBcInBpZSBjaGFydFwiLFxuICAgIFwicGllIGRpYWdyYW1cIixcbiAgICBcInF1YWRyYW50IGNoYXJ0XCIsXG4gICAgXCJyZXF1aXJlbWVudCBkaWFncmFtXCIsXG4gICAgXCJncmFwaFwiXG4gIF0sXG4gIHNjcmlwdHM6IHtcbiAgICBjbGVhbjogXCJyaW1yYWYgZGlzdFwiLFxuICAgIGRldjogXCJwbnBtIC13IGRldlwiLFxuICAgIFwiZG9jczpjb2RlXCI6IFwidHlwZWRvYyBzcmMvZGVmYXVsdENvbmZpZy50cyBzcmMvY29uZmlnLnRzIHNyYy9tZXJtYWlkLnRzICYmIHByZXR0aWVyIC0td3JpdGUgLi9zcmMvZG9jcy9jb25maWcvc2V0dXBcIixcbiAgICBcImRvY3M6YnVpbGRcIjogXCJyaW1yYWYgLi4vLi4vZG9jcyAmJiBwbnBtIGRvY3M6Y29kZSAmJiBwbnBtIGRvY3M6c3BlbGxjaGVjayAmJiB0c3ggc2NyaXB0cy9kb2NzLmNsaS5tdHNcIixcbiAgICBcImRvY3M6dmVyaWZ5XCI6IFwicG5wbSBkb2NzOmNvZGUgJiYgcG5wbSBkb2NzOnNwZWxsY2hlY2sgJiYgdHN4IHNjcmlwdHMvZG9jcy5jbGkubXRzIC0tdmVyaWZ5XCIsXG4gICAgXCJkb2NzOnByZTp2aXRlcHJlc3NcIjogXCJwbnBtIC0tZmlsdGVyIC4vc3JjL2RvY3MgcHJlZmV0Y2ggJiYgcmltcmFmIHNyYy92aXRlcHJlc3MgJiYgcG5wbSBkb2NzOmNvZGUgJiYgdHN4IHNjcmlwdHMvZG9jcy5jbGkubXRzIC0tdml0ZXByZXNzICYmIHBucG0gLS1maWx0ZXIgLi9zcmMvdml0ZXByZXNzIGluc3RhbGwgLS1uby1mcm96ZW4tbG9ja2ZpbGUgLS1pZ25vcmUtc2NyaXB0c1wiLFxuICAgIFwiZG9jczpidWlsZDp2aXRlcHJlc3NcIjogXCJwbnBtIGRvY3M6cHJlOnZpdGVwcmVzcyAmJiAoY2Qgc3JjL3ZpdGVwcmVzcyAmJiBwbnBtIHJ1biBidWlsZCkgJiYgY3B5IC0tZmxhdCBzcmMvZG9jcy9sYW5kaW5nLyAuL3NyYy92aXRlcHJlc3MvLnZpdGVwcmVzcy9kaXN0L2xhbmRpbmdcIixcbiAgICBcImRvY3M6ZGV2XCI6ICdwbnBtIGRvY3M6cHJlOnZpdGVwcmVzcyAmJiBjb25jdXJyZW50bHkgXCJwbnBtIC0tZmlsdGVyIC4vc3JjL3ZpdGVwcmVzcyBkZXZcIiBcInRzeCBzY3JpcHRzL2RvY3MuY2xpLm10cyAtLXdhdGNoIC0tdml0ZXByZXNzXCInLFxuICAgIFwiZG9jczpkZXY6ZG9ja2VyXCI6ICdwbnBtIGRvY3M6cHJlOnZpdGVwcmVzcyAmJiBjb25jdXJyZW50bHkgXCJwbnBtIC0tZmlsdGVyIC4vc3JjL3ZpdGVwcmVzcyBkZXY6ZG9ja2VyXCIgXCJ0c3ggc2NyaXB0cy9kb2NzLmNsaS5tdHMgLS13YXRjaCAtLXZpdGVwcmVzc1wiJyxcbiAgICBcImRvY3M6c2VydmVcIjogXCJwbnBtIGRvY3M6YnVpbGQ6dml0ZXByZXNzICYmIHZpdGVwcmVzcyBzZXJ2ZSBzcmMvdml0ZXByZXNzXCIsXG4gICAgXCJkb2NzOnNwZWxsY2hlY2tcIjogJ2NzcGVsbCBcInNyYy9kb2NzLyoqLyoubWRcIicsXG4gICAgXCJkb2NzOnJlbGVhc2UtdmVyc2lvblwiOiBcInRzeCBzY3JpcHRzL3VwZGF0ZS1yZWxlYXNlLXZlcnNpb24ubXRzXCIsXG4gICAgXCJkb2NzOnZlcmlmeS12ZXJzaW9uXCI6IFwidHN4IHNjcmlwdHMvdXBkYXRlLXJlbGVhc2UtdmVyc2lvbi5tdHMgLS12ZXJpZnlcIixcbiAgICBcInR5cGVzOmJ1aWxkLWNvbmZpZ1wiOiBcInRzeCBzY3JpcHRzL2NyZWF0ZS10eXBlcy1mcm9tLWpzb24tc2NoZW1hLm10c1wiLFxuICAgIFwidHlwZXM6dmVyaWZ5LWNvbmZpZ1wiOiBcInRzeCBzY3JpcHRzL2NyZWF0ZS10eXBlcy1mcm9tLWpzb24tc2NoZW1hLm10cyAtLXZlcmlmeVwiLFxuICAgIGNoZWNrQ2lyY2xlOiBcIm5weCBtYWRnZSAtLWNpcmN1bGFyIC4vc3JjXCIsXG4gICAgcHJlcHVibGlzaE9ubHk6IFwicG5wbSBkb2NzOnZlcmlmeS12ZXJzaW9uXCJcbiAgfSxcbiAgcmVwb3NpdG9yeToge1xuICAgIHR5cGU6IFwiZ2l0XCIsXG4gICAgdXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9tZXJtYWlkLWpzL21lcm1haWRcIlxuICB9LFxuICBhdXRob3I6IFwiS251dCBTdmVpZHF2aXN0XCIsXG4gIGxpY2Vuc2U6IFwiTUlUXCIsXG4gIHN0YW5kYXJkOiB7XG4gICAgaWdub3JlOiBbXG4gICAgICBcIioqL3BhcnNlci8qLmpzXCIsXG4gICAgICBcImRpc3QvKiovKi5qc1wiLFxuICAgICAgXCJjeXByZXNzLyoqLyouanNcIlxuICAgIF0sXG4gICAgZ2xvYmFsczogW1xuICAgICAgXCJwYWdlXCJcbiAgICBdXG4gIH0sXG4gIGRlcGVuZGVuY2llczoge1xuICAgIFwiQGJyYWludHJlZS9zYW5pdGl6ZS11cmxcIjogXCJeNy4wLjRcIixcbiAgICBcIkBpY29uaWZ5L3V0aWxzXCI6IFwiXjIuMS4zM1wiLFxuICAgIFwiQG1lcm1haWQtanMvcGFyc2VyXCI6IFwid29ya3NwYWNlOl5cIixcbiAgICBcIkB0eXBlcy9kM1wiOiBcIl43LjQuM1wiLFxuICAgIGN5dG9zY2FwZTogXCJeMy4yOS4zXCIsXG4gICAgXCJjeXRvc2NhcGUtY29zZS1iaWxrZW50XCI6IFwiXjQuMS4wXCIsXG4gICAgXCJjeXRvc2NhcGUtZmNvc2VcIjogXCJeMi4yLjBcIixcbiAgICBkMzogXCJeNy45LjBcIixcbiAgICBcImQzLXNhbmtleVwiOiBcIl4wLjEyLjNcIixcbiAgICBcImRhZ3JlLWQzLWVzXCI6IFwiNy4wLjExXCIsXG4gICAgZGF5anM6IFwiXjEuMTEuMTNcIixcbiAgICBkb21wdXJpZnk6IFwiXjMuMi40XCIsXG4gICAga2F0ZXg6IFwiXjAuMTYuOVwiLFxuICAgIGtocm9tYTogXCJeMi4xLjBcIixcbiAgICBcImxvZGFzaC1lc1wiOiBcIl40LjE3LjIxXCIsXG4gICAgbWFya2VkOiBcIl4xNS4wLjdcIixcbiAgICByb3VnaGpzOiBcIl40LjYuNlwiLFxuICAgIHN0eWxpczogXCJeNC4zLjZcIixcbiAgICBcInRzLWRlZGVudFwiOiBcIl4yLjIuMFwiLFxuICAgIHV1aWQ6IFwiXjExLjEuMFwiXG4gIH0sXG4gIGRldkRlcGVuZGVuY2llczoge1xuICAgIFwiQGFkb2JlL2pzb25zY2hlbWEybWRcIjogXCJeOC4wLjJcIixcbiAgICBcIkBpY29uaWZ5L3R5cGVzXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJAdHlwZXMvY3l0b3NjYXBlXCI6IFwiXjMuMjEuOVwiLFxuICAgIFwiQHR5cGVzL2N5dG9zY2FwZS1mY29zZVwiOiBcIl4yLjIuNFwiLFxuICAgIFwiQHR5cGVzL2QzLXNhbmtleVwiOiBcIl4wLjEyLjRcIixcbiAgICBcIkB0eXBlcy9kMy1zY2FsZVwiOiBcIl40LjAuOVwiLFxuICAgIFwiQHR5cGVzL2QzLXNjYWxlLWNocm9tYXRpY1wiOiBcIl4zLjEuMFwiLFxuICAgIFwiQHR5cGVzL2QzLXNlbGVjdGlvblwiOiBcIl4zLjAuMTFcIixcbiAgICBcIkB0eXBlcy9kMy1zaGFwZVwiOiBcIl4zLjEuN1wiLFxuICAgIFwiQHR5cGVzL2pzZG9tXCI6IFwiXjIxLjEuN1wiLFxuICAgIFwiQHR5cGVzL2thdGV4XCI6IFwiXjAuMTYuN1wiLFxuICAgIFwiQHR5cGVzL2xvZGFzaC1lc1wiOiBcIl40LjE3LjEyXCIsXG4gICAgXCJAdHlwZXMvbWljcm9tYXRjaFwiOiBcIl40LjAuOVwiLFxuICAgIFwiQHR5cGVzL3N0eWxpc1wiOiBcIl40LjIuN1wiLFxuICAgIFwiQHR5cGVzL3V1aWRcIjogXCJeMTAuMC4wXCIsXG4gICAgYWp2OiBcIl44LjE3LjFcIixcbiAgICBjaG9raWRhcjogXCJeNC4wLjNcIixcbiAgICBjb25jdXJyZW50bHk6IFwiXjkuMS4yXCIsXG4gICAgXCJjc3N0cmVlLXZhbGlkYXRvclwiOiBcIl40LjAuMVwiLFxuICAgIGdsb2JieTogXCJeMTQuMC4yXCIsXG4gICAgamlzb246IFwiXjAuNC4xOFwiLFxuICAgIFwianMtYmFzZTY0XCI6IFwiXjMuNy43XCIsXG4gICAganNkb206IFwiXjI2LjAuMFwiLFxuICAgIFwianNvbi1zY2hlbWEtdG8tdHlwZXNjcmlwdFwiOiBcIl4xNS4wLjRcIixcbiAgICBtaWNyb21hdGNoOiBcIl40LjAuOFwiLFxuICAgIFwicGF0aC1icm93c2VyaWZ5XCI6IFwiXjEuMC4xXCIsXG4gICAgcHJldHRpZXI6IFwiXjMuNS4yXCIsXG4gICAgcmVtYXJrOiBcIl4xNS4wLjFcIixcbiAgICBcInJlbWFyay1mcm9udG1hdHRlclwiOiBcIl41LjAuMFwiLFxuICAgIFwicmVtYXJrLWdmbVwiOiBcIl40LjAuMVwiLFxuICAgIHJpbXJhZjogXCJeNi4wLjFcIixcbiAgICBcInN0YXJ0LXNlcnZlci1hbmQtdGVzdFwiOiBcIl4yLjAuMTBcIixcbiAgICBcInR5cGUtZmVzdFwiOiBcIl40LjM1LjBcIixcbiAgICB0eXBlZG9jOiBcIl4wLjI3LjhcIixcbiAgICBcInR5cGVkb2MtcGx1Z2luLW1hcmtkb3duXCI6IFwiXjQuNC4yXCIsXG4gICAgdHlwZXNjcmlwdDogXCJ+NS43LjNcIixcbiAgICBcInVuaXN0LXV0aWwtZmxhdG1hcFwiOiBcIl4xLjAuMFwiLFxuICAgIFwidW5pc3QtdXRpbC12aXNpdFwiOiBcIl41LjAuMFwiLFxuICAgIHZpdGVwcmVzczogXCJeMS4wLjJcIixcbiAgICBcInZpdGVwcmVzcy1wbHVnaW4tc2VhcmNoXCI6IFwiMS4wLjQtYWxwaGEuMjJcIlxuICB9LFxuICBmaWxlczogW1xuICAgIFwiZGlzdC9cIixcbiAgICBcIlJFQURNRS5tZFwiXG4gIF0sXG4gIHB1Ymxpc2hDb25maWc6IHtcbiAgICBhY2Nlc3M6IFwicHVibGljXCJcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgcGFja2FnZV9kZWZhdWx0XG59O1xuIiwiaW1wb3J0IHtcbiAgX19uYW1lXG59IGZyb20gXCIuL2NodW5rLVlUSk5UN0RVLm1qc1wiO1xuXG4vLyAuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vanMteWFtbEA0LjEuMC9ub2RlX21vZHVsZXMvanMteWFtbC9kaXN0L2pzLXlhbWwubWpzXG5mdW5jdGlvbiBpc05vdGhpbmcoc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgc3ViamVjdCA9PT0gbnVsbDtcbn1cbl9fbmFtZShpc05vdGhpbmcsIFwiaXNOb3RoaW5nXCIpO1xuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09IFwib2JqZWN0XCIgJiYgc3ViamVjdCAhPT0gbnVsbDtcbn1cbl9fbmFtZShpc09iamVjdCwgXCJpc09iamVjdFwiKTtcbmZ1bmN0aW9uIHRvQXJyYXkoc2VxdWVuY2UpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSByZXR1cm4gc2VxdWVuY2U7XG4gIGVsc2UgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcbiAgcmV0dXJuIFtzZXF1ZW5jZV07XG59XG5fX25hbWUodG9BcnJheSwgXCJ0b0FycmF5XCIpO1xuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCBrZXksIHNvdXJjZUtleXM7XG4gIGlmIChzb3VyY2UpIHtcbiAgICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc291cmNlS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICBrZXkgPSBzb3VyY2VLZXlzW2luZGV4XTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5fX25hbWUoZXh0ZW5kLCBcImV4dGVuZFwiKTtcbmZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSBcIlwiLCBjeWNsZTtcbiAgZm9yIChjeWNsZSA9IDA7IGN5Y2xlIDwgY291bnQ7IGN5Y2xlICs9IDEpIHtcbiAgICByZXN1bHQgKz0gc3RyaW5nO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5fX25hbWUocmVwZWF0LCBcInJlcGVhdFwiKTtcbmZ1bmN0aW9uIGlzTmVnYXRpdmVaZXJvKG51bWJlcikge1xuICByZXR1cm4gbnVtYmVyID09PSAwICYmIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gMSAvIG51bWJlcjtcbn1cbl9fbmFtZShpc05lZ2F0aXZlWmVybywgXCJpc05lZ2F0aXZlWmVyb1wiKTtcbnZhciBpc05vdGhpbmdfMSA9IGlzTm90aGluZztcbnZhciBpc09iamVjdF8xID0gaXNPYmplY3Q7XG52YXIgdG9BcnJheV8xID0gdG9BcnJheTtcbnZhciByZXBlYXRfMSA9IHJlcGVhdDtcbnZhciBpc05lZ2F0aXZlWmVyb18xID0gaXNOZWdhdGl2ZVplcm87XG52YXIgZXh0ZW5kXzEgPSBleHRlbmQ7XG52YXIgY29tbW9uID0ge1xuICBpc05vdGhpbmc6IGlzTm90aGluZ18xLFxuICBpc09iamVjdDogaXNPYmplY3RfMSxcbiAgdG9BcnJheTogdG9BcnJheV8xLFxuICByZXBlYXQ6IHJlcGVhdF8xLFxuICBpc05lZ2F0aXZlWmVybzogaXNOZWdhdGl2ZVplcm9fMSxcbiAgZXh0ZW5kOiBleHRlbmRfMVxufTtcbmZ1bmN0aW9uIGZvcm1hdEVycm9yKGV4Y2VwdGlvbjIsIGNvbXBhY3QpIHtcbiAgdmFyIHdoZXJlID0gXCJcIiwgbWVzc2FnZSA9IGV4Y2VwdGlvbjIucmVhc29uIHx8IFwiKHVua25vd24gcmVhc29uKVwiO1xuICBpZiAoIWV4Y2VwdGlvbjIubWFyaykgcmV0dXJuIG1lc3NhZ2U7XG4gIGlmIChleGNlcHRpb24yLm1hcmsubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyBleGNlcHRpb24yLm1hcmsubmFtZSArICdcIiAnO1xuICB9XG4gIHdoZXJlICs9IFwiKFwiICsgKGV4Y2VwdGlvbjIubWFyay5saW5lICsgMSkgKyBcIjpcIiArIChleGNlcHRpb24yLm1hcmsuY29sdW1uICsgMSkgKyBcIilcIjtcbiAgaWYgKCFjb21wYWN0ICYmIGV4Y2VwdGlvbjIubWFyay5zbmlwcGV0KSB7XG4gICAgd2hlcmUgKz0gXCJcXG5cXG5cIiArIGV4Y2VwdGlvbjIubWFyay5zbmlwcGV0O1xuICB9XG4gIHJldHVybiBtZXNzYWdlICsgXCIgXCIgKyB3aGVyZTtcbn1cbl9fbmFtZShmb3JtYXRFcnJvciwgXCJmb3JtYXRFcnJvclwiKTtcbmZ1bmN0aW9uIFlBTUxFeGNlcHRpb24kMShyZWFzb24sIG1hcmspIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgdGhpcy5uYW1lID0gXCJZQU1MRXhjZXB0aW9uXCI7XG4gIHRoaXMucmVhc29uID0gcmVhc29uO1xuICB0aGlzLm1hcmsgPSBtYXJrO1xuICB0aGlzLm1lc3NhZ2UgPSBmb3JtYXRFcnJvcih0aGlzLCBmYWxzZSk7XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjayB8fCBcIlwiO1xuICB9XG59XG5fX25hbWUoWUFNTEV4Y2VwdGlvbiQxLCBcIllBTUxFeGNlcHRpb24kMVwiKTtcbllBTUxFeGNlcHRpb24kMS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5ZQU1MRXhjZXB0aW9uJDEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbiQxO1xuWUFNTEV4Y2VwdGlvbiQxLnByb3RvdHlwZS50b1N0cmluZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24gdG9TdHJpbmcoY29tcGFjdCkge1xuICByZXR1cm4gdGhpcy5uYW1lICsgXCI6IFwiICsgZm9ybWF0RXJyb3IodGhpcywgY29tcGFjdCk7XG59LCBcInRvU3RyaW5nXCIpO1xudmFyIGV4Y2VwdGlvbiA9IFlBTUxFeGNlcHRpb24kMTtcbmZ1bmN0aW9uIGdldExpbmUoYnVmZmVyLCBsaW5lU3RhcnQsIGxpbmVFbmQsIHBvc2l0aW9uLCBtYXhMaW5lTGVuZ3RoKSB7XG4gIHZhciBoZWFkID0gXCJcIjtcbiAgdmFyIHRhaWwgPSBcIlwiO1xuICB2YXIgbWF4SGFsZkxlbmd0aCA9IE1hdGguZmxvb3IobWF4TGluZUxlbmd0aCAvIDIpIC0gMTtcbiAgaWYgKHBvc2l0aW9uIC0gbGluZVN0YXJ0ID4gbWF4SGFsZkxlbmd0aCkge1xuICAgIGhlYWQgPSBcIiAuLi4gXCI7XG4gICAgbGluZVN0YXJ0ID0gcG9zaXRpb24gLSBtYXhIYWxmTGVuZ3RoICsgaGVhZC5sZW5ndGg7XG4gIH1cbiAgaWYgKGxpbmVFbmQgLSBwb3NpdGlvbiA+IG1heEhhbGZMZW5ndGgpIHtcbiAgICB0YWlsID0gXCIgLi4uXCI7XG4gICAgbGluZUVuZCA9IHBvc2l0aW9uICsgbWF4SGFsZkxlbmd0aCAtIHRhaWwubGVuZ3RoO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RyOiBoZWFkICsgYnVmZmVyLnNsaWNlKGxpbmVTdGFydCwgbGluZUVuZCkucmVwbGFjZSgvXFx0L2csIFwiXFx1MjE5MlwiKSArIHRhaWwsXG4gICAgcG9zOiBwb3NpdGlvbiAtIGxpbmVTdGFydCArIGhlYWQubGVuZ3RoXG4gICAgLy8gcmVsYXRpdmUgcG9zaXRpb25cbiAgfTtcbn1cbl9fbmFtZShnZXRMaW5lLCBcImdldExpbmVcIik7XG5mdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIG1heCkge1xuICByZXR1cm4gY29tbW9uLnJlcGVhdChcIiBcIiwgbWF4IC0gc3RyaW5nLmxlbmd0aCkgKyBzdHJpbmc7XG59XG5fX25hbWUocGFkU3RhcnQsIFwicGFkU3RhcnRcIik7XG5mdW5jdGlvbiBtYWtlU25pcHBldChtYXJrLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMgfHwgbnVsbCk7XG4gIGlmICghbWFyay5idWZmZXIpIHJldHVybiBudWxsO1xuICBpZiAoIW9wdGlvbnMubWF4TGVuZ3RoKSBvcHRpb25zLm1heExlbmd0aCA9IDc5O1xuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5kZW50ICE9PSBcIm51bWJlclwiKSBvcHRpb25zLmluZGVudCA9IDE7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5saW5lc0JlZm9yZSAhPT0gXCJudW1iZXJcIikgb3B0aW9ucy5saW5lc0JlZm9yZSA9IDM7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5saW5lc0FmdGVyICE9PSBcIm51bWJlclwiKSBvcHRpb25zLmxpbmVzQWZ0ZXIgPSAyO1xuICB2YXIgcmUgPSAvXFxyP1xcbnxcXHJ8XFwwL2c7XG4gIHZhciBsaW5lU3RhcnRzID0gWzBdO1xuICB2YXIgbGluZUVuZHMgPSBbXTtcbiAgdmFyIG1hdGNoO1xuICB2YXIgZm91bmRMaW5lTm8gPSAtMTtcbiAgd2hpbGUgKG1hdGNoID0gcmUuZXhlYyhtYXJrLmJ1ZmZlcikpIHtcbiAgICBsaW5lRW5kcy5wdXNoKG1hdGNoLmluZGV4KTtcbiAgICBsaW5lU3RhcnRzLnB1c2gobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgIGlmIChtYXJrLnBvc2l0aW9uIDw9IG1hdGNoLmluZGV4ICYmIGZvdW5kTGluZU5vIDwgMCkge1xuICAgICAgZm91bmRMaW5lTm8gPSBsaW5lU3RhcnRzLmxlbmd0aCAtIDI7XG4gICAgfVxuICB9XG4gIGlmIChmb3VuZExpbmVObyA8IDApIGZvdW5kTGluZU5vID0gbGluZVN0YXJ0cy5sZW5ndGggLSAxO1xuICB2YXIgcmVzdWx0ID0gXCJcIiwgaSwgbGluZTtcbiAgdmFyIGxpbmVOb0xlbmd0aCA9IE1hdGgubWluKG1hcmsubGluZSArIG9wdGlvbnMubGluZXNBZnRlciwgbGluZUVuZHMubGVuZ3RoKS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIG1heExpbmVMZW5ndGggPSBvcHRpb25zLm1heExlbmd0aCAtIChvcHRpb25zLmluZGVudCArIGxpbmVOb0xlbmd0aCArIDMpO1xuICBmb3IgKGkgPSAxOyBpIDw9IG9wdGlvbnMubGluZXNCZWZvcmU7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyAtIGkgPCAwKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyAtIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gLSBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vIC0gaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ID0gY29tbW9uLnJlcGVhdChcIiBcIiwgb3B0aW9ucy5pbmRlbnQpICsgcGFkU3RhcnQoKG1hcmsubGluZSAtIGkgKyAxKS50b1N0cmluZygpLCBsaW5lTm9MZW5ndGgpICsgXCIgfCBcIiArIGxpbmUuc3RyICsgXCJcXG5cIiArIHJlc3VsdDtcbiAgfVxuICBsaW5lID0gZ2V0TGluZShtYXJrLmJ1ZmZlciwgbGluZVN0YXJ0c1tmb3VuZExpbmVOb10sIGxpbmVFbmRzW2ZvdW5kTGluZU5vXSwgbWFyay5wb3NpdGlvbiwgbWF4TGluZUxlbmd0aCk7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KFwiIFwiLCBvcHRpb25zLmluZGVudCkgKyBwYWRTdGFydCgobWFyay5saW5lICsgMSkudG9TdHJpbmcoKSwgbGluZU5vTGVuZ3RoKSArIFwiIHwgXCIgKyBsaW5lLnN0ciArIFwiXFxuXCI7XG4gIHJlc3VsdCArPSBjb21tb24ucmVwZWF0KFwiLVwiLCBvcHRpb25zLmluZGVudCArIGxpbmVOb0xlbmd0aCArIDMgKyBsaW5lLnBvcykgKyBcIl5cXG5cIjtcbiAgZm9yIChpID0gMTsgaSA8PSBvcHRpb25zLmxpbmVzQWZ0ZXI7IGkrKykge1xuICAgIGlmIChmb3VuZExpbmVObyArIGkgPj0gbGluZUVuZHMubGVuZ3RoKSBicmVhaztcbiAgICBsaW5lID0gZ2V0TGluZShcbiAgICAgIG1hcmsuYnVmZmVyLFxuICAgICAgbGluZVN0YXJ0c1tmb3VuZExpbmVObyArIGldLFxuICAgICAgbGluZUVuZHNbZm91bmRMaW5lTm8gKyBpXSxcbiAgICAgIG1hcmsucG9zaXRpb24gLSAobGluZVN0YXJ0c1tmb3VuZExpbmVOb10gLSBsaW5lU3RhcnRzW2ZvdW5kTGluZU5vICsgaV0pLFxuICAgICAgbWF4TGluZUxlbmd0aFxuICAgICk7XG4gICAgcmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoXCIgXCIsIG9wdGlvbnMuaW5kZW50KSArIHBhZFN0YXJ0KChtYXJrLmxpbmUgKyBpICsgMSkudG9TdHJpbmcoKSwgbGluZU5vTGVuZ3RoKSArIFwiIHwgXCIgKyBsaW5lLnN0ciArIFwiXFxuXCI7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5yZXBsYWNlKC9cXG4kLywgXCJcIik7XG59XG5fX25hbWUobWFrZVNuaXBwZXQsIFwibWFrZVNuaXBwZXRcIik7XG52YXIgc25pcHBldCA9IG1ha2VTbmlwcGV0O1xudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgXCJraW5kXCIsXG4gIFwibXVsdGlcIixcbiAgXCJyZXNvbHZlXCIsXG4gIFwiY29uc3RydWN0XCIsXG4gIFwiaW5zdGFuY2VPZlwiLFxuICBcInByZWRpY2F0ZVwiLFxuICBcInJlcHJlc2VudFwiLFxuICBcInJlcHJlc2VudE5hbWVcIixcbiAgXCJkZWZhdWx0U3R5bGVcIixcbiAgXCJzdHlsZUFsaWFzZXNcIlxuXTtcbnZhciBZQU1MX05PREVfS0lORFMgPSBbXG4gIFwic2NhbGFyXCIsXG4gIFwic2VxdWVuY2VcIixcbiAgXCJtYXBwaW5nXCJcbl07XG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcDIpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobWFwMiAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcDIpLmZvckVhY2goZnVuY3Rpb24oc3R5bGUpIHtcbiAgICAgIG1hcDJbc3R5bGVdLmZvckVhY2goZnVuY3Rpb24oYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuX19uYW1lKGNvbXBpbGVTdHlsZUFsaWFzZXMsIFwiY29tcGlsZVN0eWxlQWxpYXNlc1wiKTtcbmZ1bmN0aW9uIFR5cGUkMSh0YWcsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oJ1Vua25vd24gb3B0aW9uIFwiJyArIG5hbWUgKyAnXCIgaXMgbWV0IGluIGRlZmluaXRpb24gb2YgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgICB9XG4gIH0pO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5raW5kID0gb3B0aW9uc1tcImtpbmRcIl0gfHwgbnVsbDtcbiAgdGhpcy5yZXNvbHZlID0gb3B0aW9uc1tcInJlc29sdmVcIl0gfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIHRoaXMuY29uc3RydWN0ID0gb3B0aW9uc1tcImNvbnN0cnVjdFwiXSB8fCBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG4gIHRoaXMuaW5zdGFuY2VPZiA9IG9wdGlvbnNbXCJpbnN0YW5jZU9mXCJdIHx8IG51bGw7XG4gIHRoaXMucHJlZGljYXRlID0gb3B0aW9uc1tcInByZWRpY2F0ZVwiXSB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudCA9IG9wdGlvbnNbXCJyZXByZXNlbnRcIl0gfHwgbnVsbDtcbiAgdGhpcy5yZXByZXNlbnROYW1lID0gb3B0aW9uc1tcInJlcHJlc2VudE5hbWVcIl0gfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgPSBvcHRpb25zW1wiZGVmYXVsdFN0eWxlXCJdIHx8IG51bGw7XG4gIHRoaXMubXVsdGkgPSBvcHRpb25zW1wibXVsdGlcIl0gfHwgZmFsc2U7XG4gIHRoaXMuc3R5bGVBbGlhc2VzID0gY29tcGlsZVN0eWxlQWxpYXNlcyhvcHRpb25zW1wic3R5bGVBbGlhc2VzXCJdIHx8IG51bGwpO1xuICBpZiAoWUFNTF9OT0RFX0tJTkRTLmluZGV4T2YodGhpcy5raW5kKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKCdVbmtub3duIGtpbmQgXCInICsgdGhpcy5raW5kICsgJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgfVxufVxuX19uYW1lKFR5cGUkMSwgXCJUeXBlJDFcIik7XG52YXIgdHlwZSA9IFR5cGUkMTtcbmZ1bmN0aW9uIGNvbXBpbGVMaXN0KHNjaGVtYTIsIG5hbWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBzY2hlbWEyW25hbWVdLmZvckVhY2goZnVuY3Rpb24oY3VycmVudFR5cGUpIHtcbiAgICB2YXIgbmV3SW5kZXggPSByZXN1bHQubGVuZ3RoO1xuICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKHByZXZpb3VzVHlwZSwgcHJldmlvdXNJbmRleCkge1xuICAgICAgaWYgKHByZXZpb3VzVHlwZS50YWcgPT09IGN1cnJlbnRUeXBlLnRhZyAmJiBwcmV2aW91c1R5cGUua2luZCA9PT0gY3VycmVudFR5cGUua2luZCAmJiBwcmV2aW91c1R5cGUubXVsdGkgPT09IGN1cnJlbnRUeXBlLm11bHRpKSB7XG4gICAgICAgIG5ld0luZGV4ID0gcHJldmlvdXNJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXN1bHRbbmV3SW5kZXhdID0gY3VycmVudFR5cGU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuX19uYW1lKGNvbXBpbGVMaXN0LCBcImNvbXBpbGVMaXN0XCIpO1xuZnVuY3Rpb24gY29tcGlsZU1hcCgpIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBzY2FsYXI6IHt9LFxuICAgIHNlcXVlbmNlOiB7fSxcbiAgICBtYXBwaW5nOiB7fSxcbiAgICBmYWxsYmFjazoge30sXG4gICAgbXVsdGk6IHtcbiAgICAgIHNjYWxhcjogW10sXG4gICAgICBzZXF1ZW5jZTogW10sXG4gICAgICBtYXBwaW5nOiBbXSxcbiAgICAgIGZhbGxiYWNrOiBbXVxuICAgIH1cbiAgfSwgaW5kZXgsIGxlbmd0aDtcbiAgZnVuY3Rpb24gY29sbGVjdFR5cGUodHlwZTIpIHtcbiAgICBpZiAodHlwZTIubXVsdGkpIHtcbiAgICAgIHJlc3VsdC5tdWx0aVt0eXBlMi5raW5kXS5wdXNoKHR5cGUyKTtcbiAgICAgIHJlc3VsdC5tdWx0aVtcImZhbGxiYWNrXCJdLnB1c2godHlwZTIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdHlwZTIua2luZF1bdHlwZTIudGFnXSA9IHJlc3VsdFtcImZhbGxiYWNrXCJdW3R5cGUyLnRhZ10gPSB0eXBlMjtcbiAgICB9XG4gIH1cbiAgX19uYW1lKGNvbGxlY3RUeXBlLCBcImNvbGxlY3RUeXBlXCIpO1xuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBhcmd1bWVudHNbaW5kZXhdLmZvckVhY2goY29sbGVjdFR5cGUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5fX25hbWUoY29tcGlsZU1hcCwgXCJjb21waWxlTWFwXCIpO1xuZnVuY3Rpb24gU2NoZW1hJDEoZGVmaW5pdGlvbikge1xuICByZXR1cm4gdGhpcy5leHRlbmQoZGVmaW5pdGlvbik7XG59XG5fX25hbWUoU2NoZW1hJDEsIFwiU2NoZW1hJDFcIik7XG5TY2hlbWEkMS5wcm90b3R5cGUuZXh0ZW5kID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbiBleHRlbmQyKGRlZmluaXRpb24pIHtcbiAgdmFyIGltcGxpY2l0ID0gW107XG4gIHZhciBleHBsaWNpdCA9IFtdO1xuICBpZiAoZGVmaW5pdGlvbiBpbnN0YW5jZW9mIHR5cGUpIHtcbiAgICBleHBsaWNpdC5wdXNoKGRlZmluaXRpb24pO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbikpIHtcbiAgICBleHBsaWNpdCA9IGV4cGxpY2l0LmNvbmNhdChkZWZpbml0aW9uKTtcbiAgfSBlbHNlIGlmIChkZWZpbml0aW9uICYmIChBcnJheS5pc0FycmF5KGRlZmluaXRpb24uaW1wbGljaXQpIHx8IEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbi5leHBsaWNpdCkpKSB7XG4gICAgaWYgKGRlZmluaXRpb24uaW1wbGljaXQpIGltcGxpY2l0ID0gaW1wbGljaXQuY29uY2F0KGRlZmluaXRpb24uaW1wbGljaXQpO1xuICAgIGlmIChkZWZpbml0aW9uLmV4cGxpY2l0KSBleHBsaWNpdCA9IGV4cGxpY2l0LmNvbmNhdChkZWZpbml0aW9uLmV4cGxpY2l0KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKFwiU2NoZW1hLmV4dGVuZCBhcmd1bWVudCBzaG91bGQgYmUgYSBUeXBlLCBbIFR5cGUgXSwgb3IgYSBzY2hlbWEgZGVmaW5pdGlvbiAoeyBpbXBsaWNpdDogWy4uLl0sIGV4cGxpY2l0OiBbLi4uXSB9KVwiKTtcbiAgfVxuICBpbXBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUkMSkge1xuICAgIGlmICghKHR5cGUkMSBpbnN0YW5jZW9mIHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKFwiU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LlwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGUkMS5sb2FkS2luZCAmJiB0eXBlJDEubG9hZEtpbmQgIT09IFwic2NhbGFyXCIpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oXCJUaGVyZSBpcyBhIG5vbi1zY2FsYXIgdHlwZSBpbiB0aGUgaW1wbGljaXQgbGlzdCBvZiBhIHNjaGVtYS4gSW1wbGljaXQgcmVzb2x2aW5nIG9mIHN1Y2ggdHlwZXMgaXMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgfVxuICAgIGlmICh0eXBlJDEubXVsdGkpIHtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oXCJUaGVyZSBpcyBhIG11bHRpIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIE11bHRpIHRhZ3MgY2FuIG9ubHkgYmUgbGlzdGVkIGFzIGV4cGxpY2l0LlwiKTtcbiAgICB9XG4gIH0pO1xuICBleHBsaWNpdC5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUkMSkge1xuICAgIGlmICghKHR5cGUkMSBpbnN0YW5jZW9mIHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKFwiU3BlY2lmaWVkIGxpc3Qgb2YgWUFNTCB0eXBlcyAob3IgYSBzaW5nbGUgVHlwZSBvYmplY3QpIGNvbnRhaW5zIGEgbm9uLVR5cGUgb2JqZWN0LlwiKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShTY2hlbWEkMS5wcm90b3R5cGUpO1xuICByZXN1bHQuaW1wbGljaXQgPSAodGhpcy5pbXBsaWNpdCB8fCBbXSkuY29uY2F0KGltcGxpY2l0KTtcbiAgcmVzdWx0LmV4cGxpY2l0ID0gKHRoaXMuZXhwbGljaXQgfHwgW10pLmNvbmNhdChleHBsaWNpdCk7XG4gIHJlc3VsdC5jb21waWxlZEltcGxpY2l0ID0gY29tcGlsZUxpc3QocmVzdWx0LCBcImltcGxpY2l0XCIpO1xuICByZXN1bHQuY29tcGlsZWRFeHBsaWNpdCA9IGNvbXBpbGVMaXN0KHJlc3VsdCwgXCJleHBsaWNpdFwiKTtcbiAgcmVzdWx0LmNvbXBpbGVkVHlwZU1hcCA9IGNvbXBpbGVNYXAocmVzdWx0LmNvbXBpbGVkSW1wbGljaXQsIHJlc3VsdC5jb21waWxlZEV4cGxpY2l0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIFwiZXh0ZW5kXCIpO1xudmFyIHNjaGVtYSA9IFNjaGVtYSQxO1xudmFyIHN0ciA9IG5ldyB0eXBlKFwidGFnOnlhbWwub3JnLDIwMDI6c3RyXCIsIHtcbiAga2luZDogXCJzY2FsYXJcIixcbiAgY29uc3RydWN0OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBcIlwiO1xuICB9LCBcImNvbnN0cnVjdFwiKVxufSk7XG52YXIgc2VxID0gbmV3IHR5cGUoXCJ0YWc6eWFtbC5vcmcsMjAwMjpzZXFcIiwge1xuICBraW5kOiBcInNlcXVlbmNlXCIsXG4gIGNvbnN0cnVjdDogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogW107XG4gIH0sIFwiY29uc3RydWN0XCIpXG59KTtcbnZhciBtYXAgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOm1hcFwiLCB7XG4gIGtpbmQ6IFwibWFwcGluZ1wiLFxuICBjb25zdHJ1Y3Q6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oZGF0YSkge1xuICAgIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9O1xuICB9LCBcImNvbnN0cnVjdFwiKVxufSk7XG52YXIgZmFpbHNhZmUgPSBuZXcgc2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICBzdHIsXG4gICAgc2VxLFxuICAgIG1hcFxuICBdXG59KTtcbmZ1bmN0aW9uIHJlc29sdmVZYW1sTnVsbChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuICByZXR1cm4gbWF4ID09PSAxICYmIGRhdGEgPT09IFwiflwiIHx8IG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gXCJudWxsXCIgfHwgZGF0YSA9PT0gXCJOdWxsXCIgfHwgZGF0YSA9PT0gXCJOVUxMXCIpO1xufVxuX19uYW1lKHJlc29sdmVZYW1sTnVsbCwgXCJyZXNvbHZlWWFtbE51bGxcIik7XG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5fX25hbWUoY29uc3RydWN0WWFtbE51bGwsIFwiY29uc3RydWN0WWFtbE51bGxcIik7XG5mdW5jdGlvbiBpc051bGwob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT09IG51bGw7XG59XG5fX25hbWUoaXNOdWxsLCBcImlzTnVsbFwiKTtcbnZhciBfbnVsbCA9IG5ldyB0eXBlKFwidGFnOnlhbWwub3JnLDIwMDI6bnVsbFwiLCB7XG4gIGtpbmQ6IFwic2NhbGFyXCIsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTnVsbCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sTnVsbCxcbiAgcHJlZGljYXRlOiBpc051bGwsXG4gIHJlcHJlc2VudDoge1xuICAgIGNhbm9uaWNhbDogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcIn5cIjtcbiAgICB9LCBcImNhbm9uaWNhbFwiKSxcbiAgICBsb3dlcmNhc2U6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgfSwgXCJsb3dlcmNhc2VcIiksXG4gICAgdXBwZXJjYXNlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFwiTlVMTFwiO1xuICAgIH0sIFwidXBwZXJjYXNlXCIpLFxuICAgIGNhbWVsY2FzZTogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcIk51bGxcIjtcbiAgICB9LCBcImNhbWVsY2FzZVwiKSxcbiAgICBlbXB0eTogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH0sIFwiZW1wdHlcIilcbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiBcImxvd2VyY2FzZVwiXG59KTtcbmZ1bmN0aW9uIHJlc29sdmVZYW1sQm9vbGVhbihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcbiAgcmV0dXJuIG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gXCJ0cnVlXCIgfHwgZGF0YSA9PT0gXCJUcnVlXCIgfHwgZGF0YSA9PT0gXCJUUlVFXCIpIHx8IG1heCA9PT0gNSAmJiAoZGF0YSA9PT0gXCJmYWxzZVwiIHx8IGRhdGEgPT09IFwiRmFsc2VcIiB8fCBkYXRhID09PSBcIkZBTFNFXCIpO1xufVxuX19uYW1lKHJlc29sdmVZYW1sQm9vbGVhbiwgXCJyZXNvbHZlWWFtbEJvb2xlYW5cIik7XG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQm9vbGVhbihkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSBcInRydWVcIiB8fCBkYXRhID09PSBcIlRydWVcIiB8fCBkYXRhID09PSBcIlRSVUVcIjtcbn1cbl9fbmFtZShjb25zdHJ1Y3RZYW1sQm9vbGVhbiwgXCJjb25zdHJ1Y3RZYW1sQm9vbGVhblwiKTtcbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSBcIltvYmplY3QgQm9vbGVhbl1cIjtcbn1cbl9fbmFtZShpc0Jvb2xlYW4sIFwiaXNCb29sZWFuXCIpO1xudmFyIGJvb2wgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOmJvb2xcIiwge1xuICBraW5kOiBcInNjYWxhclwiLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG4gICAgfSwgXCJsb3dlcmNhc2VcIiksXG4gICAgdXBwZXJjYXNlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA/IFwiVFJVRVwiIDogXCJGQUxTRVwiO1xuICAgIH0sIFwidXBwZXJjYXNlXCIpLFxuICAgIGNhbWVsY2FzZTogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPyBcIlRydWVcIiA6IFwiRmFsc2VcIjtcbiAgICB9LCBcImNhbWVsY2FzZVwiKVxuICB9LFxuICBkZWZhdWx0U3R5bGU6IFwibG93ZXJjYXNlXCJcbn0pO1xuZnVuY3Rpb24gaXNIZXhDb2RlKGMpIHtcbiAgcmV0dXJuIDQ4IDw9IGMgJiYgYyA8PSA1NyB8fCA2NSA8PSBjICYmIGMgPD0gNzAgfHwgOTcgPD0gYyAmJiBjIDw9IDEwMjtcbn1cbl9fbmFtZShpc0hleENvZGUsIFwiaXNIZXhDb2RlXCIpO1xuZnVuY3Rpb24gaXNPY3RDb2RlKGMpIHtcbiAgcmV0dXJuIDQ4IDw9IGMgJiYgYyA8PSA1NTtcbn1cbl9fbmFtZShpc09jdENvZGUsIFwiaXNPY3RDb2RlXCIpO1xuZnVuY3Rpb24gaXNEZWNDb2RlKGMpIHtcbiAgcmV0dXJuIDQ4IDw9IGMgJiYgYyA8PSA1Nztcbn1cbl9fbmFtZShpc0RlY0NvZGUsIFwiaXNEZWNDb2RlXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZVlhbWxJbnRlZ2VyKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoLCBpbmRleCA9IDAsIGhhc0RpZ2l0cyA9IGZhbHNlLCBjaDtcbiAgaWYgKCFtYXgpIHJldHVybiBmYWxzZTtcbiAgY2ggPSBkYXRhW2luZGV4XTtcbiAgaWYgKGNoID09PSBcIi1cIiB8fCBjaCA9PT0gXCIrXCIpIHtcbiAgICBjaCA9IGRhdGFbKytpbmRleF07XG4gIH1cbiAgaWYgKGNoID09PSBcIjBcIikge1xuICAgIGlmIChpbmRleCArIDEgPT09IG1heCkgcmV0dXJuIHRydWU7XG4gICAgY2ggPSBkYXRhWysraW5kZXhdO1xuICAgIGlmIChjaCA9PT0gXCJiXCIpIHtcbiAgICAgIGluZGV4Kys7XG4gICAgICBmb3IgKDsgaW5kZXggPCBtYXg7IGluZGV4KyspIHtcbiAgICAgICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGNoID09PSBcIl9cIikgY29udGludWU7XG4gICAgICAgIGlmIChjaCAhPT0gXCIwXCIgJiYgY2ggIT09IFwiMVwiKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGhhc0RpZ2l0cyA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzRGlnaXRzICYmIGNoICE9PSBcIl9cIjtcbiAgICB9XG4gICAgaWYgKGNoID09PSBcInhcIikge1xuICAgICAgaW5kZXgrKztcbiAgICAgIGZvciAoOyBpbmRleCA8IG1heDsgaW5kZXgrKykge1xuICAgICAgICBjaCA9IGRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoY2ggPT09IFwiX1wiKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFpc0hleENvZGUoZGF0YS5jaGFyQ29kZUF0KGluZGV4KSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaGFzRGlnaXRzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNEaWdpdHMgJiYgY2ggIT09IFwiX1wiO1xuICAgIH1cbiAgICBpZiAoY2ggPT09IFwib1wiKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgICAgIGNoID0gZGF0YVtpbmRleF07XG4gICAgICAgIGlmIChjaCA9PT0gXCJfXCIpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoIWlzT2N0Q29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0RpZ2l0cyAmJiBjaCAhPT0gXCJfXCI7XG4gICAgfVxuICB9XG4gIGlmIChjaCA9PT0gXCJfXCIpIHJldHVybiBmYWxzZTtcbiAgZm9yICg7IGluZGV4IDwgbWF4OyBpbmRleCsrKSB7XG4gICAgY2ggPSBkYXRhW2luZGV4XTtcbiAgICBpZiAoY2ggPT09IFwiX1wiKSBjb250aW51ZTtcbiAgICBpZiAoIWlzRGVjQ29kZShkYXRhLmNoYXJDb2RlQXQoaW5kZXgpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBoYXNEaWdpdHMgPSB0cnVlO1xuICB9XG4gIGlmICghaGFzRGlnaXRzIHx8IGNoID09PSBcIl9cIikgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cbl9fbmFtZShyZXNvbHZlWWFtbEludGVnZXIsIFwicmVzb2x2ZVlhbWxJbnRlZ2VyXCIpO1xuZnVuY3Rpb24gY29uc3RydWN0WWFtbEludGVnZXIoZGF0YSkge1xuICB2YXIgdmFsdWUgPSBkYXRhLCBzaWduID0gMSwgY2g7XG4gIGlmICh2YWx1ZS5pbmRleE9mKFwiX1wiKSAhPT0gLTEpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL18vZywgXCJcIik7XG4gIH1cbiAgY2ggPSB2YWx1ZVswXTtcbiAgaWYgKGNoID09PSBcIi1cIiB8fCBjaCA9PT0gXCIrXCIpIHtcbiAgICBpZiAoY2ggPT09IFwiLVwiKSBzaWduID0gLTE7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgICBjaCA9IHZhbHVlWzBdO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gXCIwXCIpIHJldHVybiAwO1xuICBpZiAoY2ggPT09IFwiMFwiKSB7XG4gICAgaWYgKHZhbHVlWzFdID09PSBcImJcIikgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMik7XG4gICAgaWYgKHZhbHVlWzFdID09PSBcInhcIikgcmV0dXJuIHNpZ24gKiBwYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgMTYpO1xuICAgIGlmICh2YWx1ZVsxXSA9PT0gXCJvXCIpIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIDgpO1xuICB9XG4gIHJldHVybiBzaWduICogcGFyc2VJbnQodmFsdWUsIDEwKTtcbn1cbl9fbmFtZShjb25zdHJ1Y3RZYW1sSW50ZWdlciwgXCJjb25zdHJ1Y3RZYW1sSW50ZWdlclwiKTtcbmZ1bmN0aW9uIGlzSW50ZWdlcihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIChvYmplY3QgJSAxID09PSAwICYmICFjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5fX25hbWUoaXNJbnRlZ2VyLCBcImlzSW50ZWdlclwiKTtcbnZhciBpbnQgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOmludFwiLCB7XG4gIGtpbmQ6IFwic2NhbGFyXCIsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sSW50ZWdlcixcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sSW50ZWdlcixcbiAgcHJlZGljYXRlOiBpc0ludGVnZXIsXG4gIHJlcHJlc2VudDoge1xuICAgIGJpbmFyeTogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPj0gMCA/IFwiMGJcIiArIG9iai50b1N0cmluZygyKSA6IFwiLTBiXCIgKyBvYmoudG9TdHJpbmcoMikuc2xpY2UoMSk7XG4gICAgfSwgXCJiaW5hcnlcIiksXG4gICAgb2N0YWw6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqID49IDAgPyBcIjBvXCIgKyBvYmoudG9TdHJpbmcoOCkgOiBcIi0wb1wiICsgb2JqLnRvU3RyaW5nKDgpLnNsaWNlKDEpO1xuICAgIH0sIFwib2N0YWxcIiksXG4gICAgZGVjaW1hbDogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmoudG9TdHJpbmcoMTApO1xuICAgIH0sIFwiZGVjaW1hbFwiKSxcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4gICAgaGV4YWRlY2ltYWw6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqID49IDAgPyBcIjB4XCIgKyBvYmoudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgOiBcIi0weFwiICsgb2JqLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLnNsaWNlKDEpO1xuICAgIH0sIFwiaGV4YWRlY2ltYWxcIilcbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiBcImRlY2ltYWxcIixcbiAgc3R5bGVBbGlhc2VzOiB7XG4gICAgYmluYXJ5OiBbMiwgXCJiaW5cIl0sXG4gICAgb2N0YWw6IFs4LCBcIm9jdFwiXSxcbiAgICBkZWNpbWFsOiBbMTAsIFwiZGVjXCJdLFxuICAgIGhleGFkZWNpbWFsOiBbMTYsIFwiaGV4XCJdXG4gIH1cbn0pO1xudmFyIFlBTUxfRkxPQVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoXG4gIC8vIDIuNWU0LCAyLjUgYW5kIGludGVnZXJzXG4gIFwiXig/OlstK10/KD86WzAtOV1bMC05X10qKSg/OlxcXFwuWzAtOV9dKik/KD86W2VFXVstK10/WzAtOV0rKT98XFxcXC5bMC05X10rKD86W2VFXVstK10/WzAtOV0rKT98Wy0rXT9cXFxcLig/OmluZnxJbmZ8SU5GKXxcXFxcLig/Om5hbnxOYU58TkFOKSkkXCJcbik7XG5mdW5jdGlvbiByZXNvbHZlWWFtbEZsb2F0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFZQU1MX0ZMT0FUX1BBVFRFUk4udGVzdChkYXRhKSB8fCAvLyBRdWljayBoYWNrIHRvIG5vdCBhbGxvdyBpbnRlZ2VycyBlbmQgd2l0aCBgX2BcbiAgLy8gUHJvYmFibHkgc2hvdWxkIHVwZGF0ZSByZWdleHAgJiBjaGVjayBzcGVlZFxuICBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPT09IFwiX1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuX19uYW1lKHJlc29sdmVZYW1sRmxvYXQsIFwicmVzb2x2ZVlhbWxGbG9hdFwiKTtcbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxGbG9hdChkYXRhKSB7XG4gIHZhciB2YWx1ZSwgc2lnbjtcbiAgdmFsdWUgPSBkYXRhLnJlcGxhY2UoL18vZywgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgc2lnbiA9IHZhbHVlWzBdID09PSBcIi1cIiA/IC0xIDogMTtcbiAgaWYgKFwiKy1cIi5pbmRleE9mKHZhbHVlWzBdKSA+PSAwKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgfVxuICBpZiAodmFsdWUgPT09IFwiLmluZlwiKSB7XG4gICAgcmV0dXJuIHNpZ24gPT09IDEgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gIH0gZWxzZSBpZiAodmFsdWUgPT09IFwiLm5hblwiKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICByZXR1cm4gc2lnbiAqIHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbn1cbl9fbmFtZShjb25zdHJ1Y3RZYW1sRmxvYXQsIFwiY29uc3RydWN0WWFtbEZsb2F0XCIpO1xudmFyIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QgPSAvXlstK10/WzAtOV0rZS87XG5mdW5jdGlvbiByZXByZXNlbnRZYW1sRmxvYXQob2JqZWN0LCBzdHlsZSkge1xuICB2YXIgcmVzO1xuICBpZiAoaXNOYU4ob2JqZWN0KSkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgXCJsb3dlcmNhc2VcIjpcbiAgICAgICAgcmV0dXJuIFwiLm5hblwiO1xuICAgICAgY2FzZSBcInVwcGVyY2FzZVwiOlxuICAgICAgICByZXR1cm4gXCIuTkFOXCI7XG4gICAgICBjYXNlIFwiY2FtZWxjYXNlXCI6XG4gICAgICAgIHJldHVybiBcIi5OYU5cIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlIFwibG93ZXJjYXNlXCI6XG4gICAgICAgIHJldHVybiBcIi5pbmZcIjtcbiAgICAgIGNhc2UgXCJ1cHBlcmNhc2VcIjpcbiAgICAgICAgcmV0dXJuIFwiLklORlwiO1xuICAgICAgY2FzZSBcImNhbWVsY2FzZVwiOlxuICAgICAgICByZXR1cm4gXCIuSW5mXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSBcImxvd2VyY2FzZVwiOlxuICAgICAgICByZXR1cm4gXCItLmluZlwiO1xuICAgICAgY2FzZSBcInVwcGVyY2FzZVwiOlxuICAgICAgICByZXR1cm4gXCItLklORlwiO1xuICAgICAgY2FzZSBcImNhbWVsY2FzZVwiOlxuICAgICAgICByZXR1cm4gXCItLkluZlwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSkge1xuICAgIHJldHVybiBcIi0wLjBcIjtcbiAgfVxuICByZXMgPSBvYmplY3QudG9TdHJpbmcoMTApO1xuICByZXR1cm4gU0NJRU5USUZJQ19XSVRIT1VUX0RPVC50ZXN0KHJlcykgPyByZXMucmVwbGFjZShcImVcIiwgXCIuZVwiKSA6IHJlcztcbn1cbl9fbmFtZShyZXByZXNlbnRZYW1sRmxvYXQsIFwicmVwcmVzZW50WWFtbEZsb2F0XCIpO1xuZnVuY3Rpb24gaXNGbG9hdChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSBcIltvYmplY3QgTnVtYmVyXVwiICYmIChvYmplY3QgJSAxICE9PSAwIHx8IGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKTtcbn1cbl9fbmFtZShpc0Zsb2F0LCBcImlzRmxvYXRcIik7XG52YXIgZmxvYXQgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOmZsb2F0XCIsIHtcbiAga2luZDogXCJzY2FsYXJcIixcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxGbG9hdCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sRmxvYXQsXG4gIHByZWRpY2F0ZTogaXNGbG9hdCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sRmxvYXQsXG4gIGRlZmF1bHRTdHlsZTogXCJsb3dlcmNhc2VcIlxufSk7XG52YXIganNvbiA9IGZhaWxzYWZlLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgX251bGwsXG4gICAgYm9vbCxcbiAgICBpbnQsXG4gICAgZmxvYXRcbiAgXVxufSk7XG52YXIgY29yZSA9IGpzb247XG52YXIgWUFNTF9EQVRFX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gIFwiXihbMC05XVswLTldWzAtOV1bMC05XSktKFswLTldWzAtOV0pLShbMC05XVswLTldKSRcIlxuKTtcbnZhciBZQU1MX1RJTUVTVEFNUF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICBcIl4oWzAtOV1bMC05XVswLTldWzAtOV0pLShbMC05XVswLTldPyktKFswLTldWzAtOV0/KSg/OltUdF18WyBcXFxcdF0rKShbMC05XVswLTldPyk6KFswLTldWzAtOV0pOihbMC05XVswLTldKSg/OlxcXFwuKFswLTldKikpPyg/OlsgXFxcXHRdKihafChbLStdKShbMC05XVswLTldPykoPzo6KFswLTldWzAtOV0pKT8pKT8kXCJcbik7XG5mdW5jdGlvbiByZXNvbHZlWWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAoWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5fX25hbWUocmVzb2x2ZVlhbWxUaW1lc3RhbXAsIFwicmVzb2x2ZVlhbWxUaW1lc3RhbXBcIik7XG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgdmFyIG1hdGNoLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24gPSAwLCBkZWx0YSA9IG51bGwsIHR6X2hvdXIsIHR6X21pbnV0ZSwgZGF0ZTtcbiAgbWF0Y2ggPSBZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgbWF0Y2ggPSBZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJEYXRlIHJlc29sdmUgZXJyb3JcIik7XG4gIHllYXIgPSArbWF0Y2hbMV07XG4gIG1vbnRoID0gK21hdGNoWzJdIC0gMTtcbiAgZGF5ID0gK21hdGNoWzNdO1xuICBpZiAoIW1hdGNoWzRdKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXkpKTtcbiAgfVxuICBob3VyID0gK21hdGNoWzRdO1xuICBtaW51dGUgPSArbWF0Y2hbNV07XG4gIHNlY29uZCA9ICttYXRjaFs2XTtcbiAgaWYgKG1hdGNoWzddKSB7XG4gICAgZnJhY3Rpb24gPSBtYXRjaFs3XS5zbGljZSgwLCAzKTtcbiAgICB3aGlsZSAoZnJhY3Rpb24ubGVuZ3RoIDwgMykge1xuICAgICAgZnJhY3Rpb24gKz0gXCIwXCI7XG4gICAgfVxuICAgIGZyYWN0aW9uID0gK2ZyYWN0aW9uO1xuICB9XG4gIGlmIChtYXRjaFs5XSkge1xuICAgIHR6X2hvdXIgPSArbWF0Y2hbMTBdO1xuICAgIHR6X21pbnV0ZSA9ICsobWF0Y2hbMTFdIHx8IDApO1xuICAgIGRlbHRhID0gKHR6X2hvdXIgKiA2MCArIHR6X21pbnV0ZSkgKiA2ZTQ7XG4gICAgaWYgKG1hdGNoWzldID09PSBcIi1cIikgZGVsdGEgPSAtZGVsdGE7XG4gIH1cbiAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbikpO1xuICBpZiAoZGVsdGEpIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIGRlbHRhKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5fX25hbWUoY29uc3RydWN0WWFtbFRpbWVzdGFtcCwgXCJjb25zdHJ1Y3RZYW1sVGltZXN0YW1wXCIpO1xuZnVuY3Rpb24gcmVwcmVzZW50WWFtbFRpbWVzdGFtcChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdC50b0lTT1N0cmluZygpO1xufVxuX19uYW1lKHJlcHJlc2VudFlhbWxUaW1lc3RhbXAsIFwicmVwcmVzZW50WWFtbFRpbWVzdGFtcFwiKTtcbnZhciB0aW1lc3RhbXAgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcFwiLCB7XG4gIGtpbmQ6IFwic2NhbGFyXCIsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sVGltZXN0YW1wLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxUaW1lc3RhbXAsXG4gIGluc3RhbmNlT2Y6IERhdGUsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbFRpbWVzdGFtcFxufSk7XG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09IFwiPDxcIiB8fCBkYXRhID09PSBudWxsO1xufVxuX19uYW1lKHJlc29sdmVZYW1sTWVyZ2UsIFwicmVzb2x2ZVlhbWxNZXJnZVwiKTtcbnZhciBtZXJnZSA9IG5ldyB0eXBlKFwidGFnOnlhbWwub3JnLDIwMDI6bWVyZ2VcIiwge1xuICBraW5kOiBcInNjYWxhclwiLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE1lcmdlXG59KTtcbnZhciBCQVNFNjRfTUFQID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcblxcclwiO1xuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCaW5hcnkoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgY29kZSwgaWR4LCBiaXRsZW4gPSAwLCBtYXggPSBkYXRhLmxlbmd0aCwgbWFwMiA9IEJBU0U2NF9NQVA7XG4gIGZvciAoaWR4ID0gMDsgaWR4IDwgbWF4OyBpZHgrKykge1xuICAgIGNvZGUgPSBtYXAyLmluZGV4T2YoZGF0YS5jaGFyQXQoaWR4KSk7XG4gICAgaWYgKGNvZGUgPiA2NCkgY29udGludWU7XG4gICAgaWYgKGNvZGUgPCAwKSByZXR1cm4gZmFsc2U7XG4gICAgYml0bGVuICs9IDY7XG4gIH1cbiAgcmV0dXJuIGJpdGxlbiAlIDggPT09IDA7XG59XG5fX25hbWUocmVzb2x2ZVlhbWxCaW5hcnksIFwicmVzb2x2ZVlhbWxCaW5hcnlcIik7XG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQmluYXJ5KGRhdGEpIHtcbiAgdmFyIGlkeCwgdGFpbGJpdHMsIGlucHV0ID0gZGF0YS5yZXBsYWNlKC9bXFxyXFxuPV0vZywgXCJcIiksIG1heCA9IGlucHV0Lmxlbmd0aCwgbWFwMiA9IEJBU0U2NF9NQVAsIGJpdHMgPSAwLCByZXN1bHQgPSBbXTtcbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgaWYgKGlkeCAlIDQgPT09IDAgJiYgaWR4KSB7XG4gICAgICByZXN1bHQucHVzaChiaXRzID4+IDE2ICYgMjU1KTtcbiAgICAgIHJlc3VsdC5wdXNoKGJpdHMgPj4gOCAmIDI1NSk7XG4gICAgICByZXN1bHQucHVzaChiaXRzICYgMjU1KTtcbiAgICB9XG4gICAgYml0cyA9IGJpdHMgPDwgNiB8IG1hcDIuaW5kZXhPZihpbnB1dC5jaGFyQXQoaWR4KSk7XG4gIH1cbiAgdGFpbGJpdHMgPSBtYXggJSA0ICogNjtcbiAgaWYgKHRhaWxiaXRzID09PSAwKSB7XG4gICAgcmVzdWx0LnB1c2goYml0cyA+PiAxNiAmIDI1NSk7XG4gICAgcmVzdWx0LnB1c2goYml0cyA+PiA4ICYgMjU1KTtcbiAgICByZXN1bHQucHVzaChiaXRzICYgMjU1KTtcbiAgfSBlbHNlIGlmICh0YWlsYml0cyA9PT0gMTgpIHtcbiAgICByZXN1bHQucHVzaChiaXRzID4+IDEwICYgMjU1KTtcbiAgICByZXN1bHQucHVzaChiaXRzID4+IDIgJiAyNTUpO1xuICB9IGVsc2UgaWYgKHRhaWxiaXRzID09PSAxMikge1xuICAgIHJlc3VsdC5wdXNoKGJpdHMgPj4gNCAmIDI1NSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlc3VsdCk7XG59XG5fX25hbWUoY29uc3RydWN0WWFtbEJpbmFyeSwgXCJjb25zdHJ1Y3RZYW1sQmluYXJ5XCIpO1xuZnVuY3Rpb24gcmVwcmVzZW50WWFtbEJpbmFyeShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCIsIGJpdHMgPSAwLCBpZHgsIHRhaWwsIG1heCA9IG9iamVjdC5sZW5ndGgsIG1hcDIgPSBCQVNFNjRfTUFQO1xuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoaWR4ICUgMyA9PT0gMCAmJiBpZHgpIHtcbiAgICAgIHJlc3VsdCArPSBtYXAyW2JpdHMgPj4gMTggJiA2M107XG4gICAgICByZXN1bHQgKz0gbWFwMltiaXRzID4+IDEyICYgNjNdO1xuICAgICAgcmVzdWx0ICs9IG1hcDJbYml0cyA+PiA2ICYgNjNdO1xuICAgICAgcmVzdWx0ICs9IG1hcDJbYml0cyAmIDYzXTtcbiAgICB9XG4gICAgYml0cyA9IChiaXRzIDw8IDgpICsgb2JqZWN0W2lkeF07XG4gIH1cbiAgdGFpbCA9IG1heCAlIDM7XG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcDJbYml0cyA+PiAxOCAmIDYzXTtcbiAgICByZXN1bHQgKz0gbWFwMltiaXRzID4+IDEyICYgNjNdO1xuICAgIHJlc3VsdCArPSBtYXAyW2JpdHMgPj4gNiAmIDYzXTtcbiAgICByZXN1bHQgKz0gbWFwMltiaXRzICYgNjNdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDIpIHtcbiAgICByZXN1bHQgKz0gbWFwMltiaXRzID4+IDEwICYgNjNdO1xuICAgIHJlc3VsdCArPSBtYXAyW2JpdHMgPj4gNCAmIDYzXTtcbiAgICByZXN1bHQgKz0gbWFwMltiaXRzIDw8IDIgJiA2M107XG4gICAgcmVzdWx0ICs9IG1hcDJbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwMltiaXRzID4+IDIgJiA2M107XG4gICAgcmVzdWx0ICs9IG1hcDJbYml0cyA8PCA0ICYgNjNdO1xuICAgIHJlc3VsdCArPSBtYXAyWzY0XTtcbiAgICByZXN1bHQgKz0gbWFwMls2NF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbl9fbmFtZShyZXByZXNlbnRZYW1sQmluYXJ5LCBcInJlcHJlc2VudFlhbWxCaW5hcnlcIik7XG5mdW5jdGlvbiBpc0JpbmFyeShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgVWludDhBcnJheV1cIjtcbn1cbl9fbmFtZShpc0JpbmFyeSwgXCJpc0JpbmFyeVwiKTtcbnZhciBiaW5hcnkgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOmJpbmFyeVwiLCB7XG4gIGtpbmQ6IFwic2NhbGFyXCIsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sQmluYXJ5LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxCaW5hcnksXG4gIHByZWRpY2F0ZTogaXNCaW5hcnksXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbEJpbmFyeVxufSk7XG52YXIgX2hhc093blByb3BlcnR5JDMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF90b1N0cmluZyQyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmZ1bmN0aW9uIHJlc29sdmVZYW1sT21hcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSwgb2JqZWN0ID0gZGF0YTtcbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuICAgIGlmIChfdG9TdHJpbmckMi5jYWxsKHBhaXIpICE9PSBcIltvYmplY3QgT2JqZWN0XVwiKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkkMy5jYWxsKHBhaXIsIHBhaXJLZXkpKSB7XG4gICAgICAgIGlmICghcGFpckhhc0tleSkgcGFpckhhc0tleSA9IHRydWU7XG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAob2JqZWN0S2V5cy5pbmRleE9mKHBhaXJLZXkpID09PSAtMSkgb2JqZWN0S2V5cy5wdXNoKHBhaXJLZXkpO1xuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuX19uYW1lKHJlc29sdmVZYW1sT21hcCwgXCJyZXNvbHZlWWFtbE9tYXBcIik7XG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sT21hcChkYXRhKSB7XG4gIHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdO1xufVxuX19uYW1lKGNvbnN0cnVjdFlhbWxPbWFwLCBcImNvbnN0cnVjdFlhbWxPbWFwXCIpO1xudmFyIG9tYXAgPSBuZXcgdHlwZShcInRhZzp5YW1sLm9yZywyMDAyOm9tYXBcIiwge1xuICBraW5kOiBcInNlcXVlbmNlXCIsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sT21hcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sT21hcFxufSk7XG52YXIgX3RvU3RyaW5nJDEgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuZnVuY3Rpb24gcmVzb2x2ZVlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIHBhaXIsIGtleXMsIHJlc3VsdCwgb2JqZWN0ID0gZGF0YTtcbiAgcmVzdWx0ID0gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpO1xuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcbiAgICBpZiAoX3RvU3RyaW5nJDEuY2FsbChwYWlyKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIikgcmV0dXJuIGZhbHNlO1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcbiAgICBpZiAoa2V5cy5sZW5ndGggIT09IDEpIHJldHVybiBmYWxzZTtcbiAgICByZXN1bHRbaW5kZXhdID0gW2tleXNbMF0sIHBhaXJba2V5c1swXV1dO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuX19uYW1lKHJlc29sdmVZYW1sUGFpcnMsIFwicmVzb2x2ZVlhbWxQYWlyc1wiKTtcbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gW107XG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsIG9iamVjdCA9IGRhdGE7XG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuICAgIHJlc3VsdFtpbmRleF0gPSBba2V5c1swXSwgcGFpcltrZXlzWzBdXV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbl9fbmFtZShjb25zdHJ1Y3RZYW1sUGFpcnMsIFwiY29uc3RydWN0WWFtbFBhaXJzXCIpO1xudmFyIHBhaXJzID0gbmV3IHR5cGUoXCJ0YWc6eWFtbC5vcmcsMjAwMjpwYWlyc1wiLCB7XG4gIGtpbmQ6IFwic2VxdWVuY2VcIixcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxQYWlycyxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sUGFpcnNcbn0pO1xudmFyIF9oYXNPd25Qcm9wZXJ0eSQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuICB2YXIga2V5LCBvYmplY3QgPSBkYXRhO1xuICBmb3IgKGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoX2hhc093blByb3BlcnR5JDIuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbl9fbmFtZShyZXNvbHZlWWFtbFNldCwgXCJyZXNvbHZlWWFtbFNldFwiKTtcbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxTZXQoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTtcbn1cbl9fbmFtZShjb25zdHJ1Y3RZYW1sU2V0LCBcImNvbnN0cnVjdFlhbWxTZXRcIik7XG52YXIgc2V0ID0gbmV3IHR5cGUoXCJ0YWc6eWFtbC5vcmcsMjAwMjpzZXRcIiwge1xuICBraW5kOiBcIm1hcHBpbmdcIixcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxTZXQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFNldFxufSk7XG52YXIgX2RlZmF1bHQgPSBjb3JlLmV4dGVuZCh7XG4gIGltcGxpY2l0OiBbXG4gICAgdGltZXN0YW1wLFxuICAgIG1lcmdlXG4gIF0sXG4gIGV4cGxpY2l0OiBbXG4gICAgYmluYXJ5LFxuICAgIG9tYXAsXG4gICAgcGFpcnMsXG4gICAgc2V0XG4gIF1cbn0pO1xudmFyIF9oYXNPd25Qcm9wZXJ0eSQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBDT05URVhUX0ZMT1dfSU4gPSAxO1xudmFyIENPTlRFWFRfRkxPV19PVVQgPSAyO1xudmFyIENPTlRFWFRfQkxPQ0tfSU4gPSAzO1xudmFyIENPTlRFWFRfQkxPQ0tfT1VUID0gNDtcbnZhciBDSE9NUElOR19DTElQID0gMTtcbnZhciBDSE9NUElOR19TVFJJUCA9IDI7XG52YXIgQ0hPTVBJTkdfS0VFUCA9IDM7XG52YXIgUEFUVEVSTl9OT05fUFJJTlRBQkxFID0gL1tcXHgwMC1cXHgwOFxceDBCXFx4MENcXHgwRS1cXHgxRlxceDdGLVxceDg0XFx4ODYtXFx4OUZcXHVGRkZFXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0vO1xudmFyIFBBVFRFUk5fTk9OX0FTQ0lJX0xJTkVfQlJFQUtTID0gL1tcXHg4NVxcdTIwMjhcXHUyMDI5XS87XG52YXIgUEFUVEVSTl9GTE9XX0lORElDQVRPUlMgPSAvWyxcXFtcXF1cXHtcXH1dLztcbnZhciBQQVRURVJOX1RBR19IQU5ETEUgPSAvXig/OiF8ISF8IVthLXpcXC1dKyEpJC9pO1xudmFyIFBBVFRFUk5fVEFHX1VSSSA9IC9eKD86IXxbXixcXFtcXF1cXHtcXH1dKSg/OiVbMC05YS1mXXsyfXxbMC05YS16XFwtIztcXC9cXD86QCY9XFwrXFwkLF9cXC4hflxcKidcXChcXClcXFtcXF1dKSokL2k7XG5mdW5jdGlvbiBfY2xhc3Mob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKTtcbn1cbl9fbmFtZShfY2xhc3MsIFwiX2NsYXNzXCIpO1xuZnVuY3Rpb24gaXNfRU9MKGMpIHtcbiAgcmV0dXJuIGMgPT09IDEwIHx8IGMgPT09IDEzO1xufVxuX19uYW1lKGlzX0VPTCwgXCJpc19FT0xcIik7XG5mdW5jdGlvbiBpc19XSElURV9TUEFDRShjKSB7XG4gIHJldHVybiBjID09PSA5IHx8IGMgPT09IDMyO1xufVxuX19uYW1lKGlzX1dISVRFX1NQQUNFLCBcImlzX1dISVRFX1NQQUNFXCIpO1xuZnVuY3Rpb24gaXNfV1NfT1JfRU9MKGMpIHtcbiAgcmV0dXJuIGMgPT09IDkgfHwgYyA9PT0gMzIgfHwgYyA9PT0gMTAgfHwgYyA9PT0gMTM7XG59XG5fX25hbWUoaXNfV1NfT1JfRU9MLCBcImlzX1dTX09SX0VPTFwiKTtcbmZ1bmN0aW9uIGlzX0ZMT1dfSU5ESUNBVE9SKGMpIHtcbiAgcmV0dXJuIGMgPT09IDQ0IHx8IGMgPT09IDkxIHx8IGMgPT09IDkzIHx8IGMgPT09IDEyMyB8fCBjID09PSAxMjU7XG59XG5fX25hbWUoaXNfRkxPV19JTkRJQ0FUT1IsIFwiaXNfRkxPV19JTkRJQ0FUT1JcIik7XG5mdW5jdGlvbiBmcm9tSGV4Q29kZShjKSB7XG4gIHZhciBsYztcbiAgaWYgKDQ4IDw9IGMgJiYgYyA8PSA1Nykge1xuICAgIHJldHVybiBjIC0gNDg7XG4gIH1cbiAgbGMgPSBjIHwgMzI7XG4gIGlmICg5NyA8PSBsYyAmJiBsYyA8PSAxMDIpIHtcbiAgICByZXR1cm4gbGMgLSA5NyArIDEwO1xuICB9XG4gIHJldHVybiAtMTtcbn1cbl9fbmFtZShmcm9tSGV4Q29kZSwgXCJmcm9tSGV4Q29kZVwiKTtcbmZ1bmN0aW9uIGVzY2FwZWRIZXhMZW4oYykge1xuICBpZiAoYyA9PT0gMTIwKSB7XG4gICAgcmV0dXJuIDI7XG4gIH1cbiAgaWYgKGMgPT09IDExNykge1xuICAgIHJldHVybiA0O1xuICB9XG4gIGlmIChjID09PSA4NSkge1xuICAgIHJldHVybiA4O1xuICB9XG4gIHJldHVybiAwO1xufVxuX19uYW1lKGVzY2FwZWRIZXhMZW4sIFwiZXNjYXBlZEhleExlblwiKTtcbmZ1bmN0aW9uIGZyb21EZWNpbWFsQ29kZShjKSB7XG4gIGlmICg0OCA8PSBjICYmIGMgPD0gNTcpIHtcbiAgICByZXR1cm4gYyAtIDQ4O1xuICB9XG4gIHJldHVybiAtMTtcbn1cbl9fbmFtZShmcm9tRGVjaW1hbENvZGUsIFwiZnJvbURlY2ltYWxDb2RlXCIpO1xuZnVuY3Rpb24gc2ltcGxlRXNjYXBlU2VxdWVuY2UoYykge1xuICByZXR1cm4gYyA9PT0gNDggPyBcIlxcMFwiIDogYyA9PT0gOTcgPyBcIlxceDA3XCIgOiBjID09PSA5OCA/IFwiXFxiXCIgOiBjID09PSAxMTYgPyBcIlx0XCIgOiBjID09PSA5ID8gXCJcdFwiIDogYyA9PT0gMTEwID8gXCJcXG5cIiA6IGMgPT09IDExOCA/IFwiXFx2XCIgOiBjID09PSAxMDIgPyBcIlxcZlwiIDogYyA9PT0gMTE0ID8gXCJcXHJcIiA6IGMgPT09IDEwMSA/IFwiXFx4MUJcIiA6IGMgPT09IDMyID8gXCIgXCIgOiBjID09PSAzNCA/ICdcIicgOiBjID09PSA0NyA/IFwiL1wiIDogYyA9PT0gOTIgPyBcIlxcXFxcIiA6IGMgPT09IDc4ID8gXCJcXHg4NVwiIDogYyA9PT0gOTUgPyBcIlxceEEwXCIgOiBjID09PSA3NiA/IFwiXFx1MjAyOFwiIDogYyA9PT0gODAgPyBcIlxcdTIwMjlcIiA6IFwiXCI7XG59XG5fX25hbWUoc2ltcGxlRXNjYXBlU2VxdWVuY2UsIFwic2ltcGxlRXNjYXBlU2VxdWVuY2VcIik7XG5mdW5jdGlvbiBjaGFyRnJvbUNvZGVwb2ludChjKSB7XG4gIGlmIChjIDw9IDY1NTM1KSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYyk7XG4gIH1cbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKGMgLSA2NTUzNiA+PiAxMCkgKyA1NTI5NixcbiAgICAoYyAtIDY1NTM2ICYgMTAyMykgKyA1NjMyMFxuICApO1xufVxuX19uYW1lKGNoYXJGcm9tQ29kZXBvaW50LCBcImNoYXJGcm9tQ29kZXBvaW50XCIpO1xudmFyIHNpbXBsZUVzY2FwZUNoZWNrID0gbmV3IEFycmF5KDI1Nik7XG52YXIgc2ltcGxlRXNjYXBlTWFwID0gbmV3IEFycmF5KDI1Nik7XG5mb3IgKGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgc2ltcGxlRXNjYXBlQ2hlY2tbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKSA/IDEgOiAwO1xuICBzaW1wbGVFc2NhcGVNYXBbaV0gPSBzaW1wbGVFc2NhcGVTZXF1ZW5jZShpKTtcbn1cbnZhciBpO1xuZnVuY3Rpb24gU3RhdGUkMShpbnB1dCwgb3B0aW9ucykge1xuICB0aGlzLmlucHV0ID0gaW5wdXQ7XG4gIHRoaXMuZmlsZW5hbWUgPSBvcHRpb25zW1wiZmlsZW5hbWVcIl0gfHwgbnVsbDtcbiAgdGhpcy5zY2hlbWEgPSBvcHRpb25zW1wic2NoZW1hXCJdIHx8IF9kZWZhdWx0O1xuICB0aGlzLm9uV2FybmluZyA9IG9wdGlvbnNbXCJvbldhcm5pbmdcIl0gfHwgbnVsbDtcbiAgdGhpcy5sZWdhY3kgPSBvcHRpb25zW1wibGVnYWN5XCJdIHx8IGZhbHNlO1xuICB0aGlzLmpzb24gPSBvcHRpb25zW1wianNvblwiXSB8fCBmYWxzZTtcbiAgdGhpcy5saXN0ZW5lciA9IG9wdGlvbnNbXCJsaXN0ZW5lclwiXSB8fCBudWxsO1xuICB0aGlzLmltcGxpY2l0VHlwZXMgPSB0aGlzLnNjaGVtYS5jb21waWxlZEltcGxpY2l0O1xuICB0aGlzLnR5cGVNYXAgPSB0aGlzLnNjaGVtYS5jb21waWxlZFR5cGVNYXA7XG4gIHRoaXMubGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICB0aGlzLnBvc2l0aW9uID0gMDtcbiAgdGhpcy5saW5lID0gMDtcbiAgdGhpcy5saW5lU3RhcnQgPSAwO1xuICB0aGlzLmxpbmVJbmRlbnQgPSAwO1xuICB0aGlzLmZpcnN0VGFiSW5MaW5lID0gLTE7XG4gIHRoaXMuZG9jdW1lbnRzID0gW107XG59XG5fX25hbWUoU3RhdGUkMSwgXCJTdGF0ZSQxXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGVFcnJvcihzdGF0ZSwgbWVzc2FnZSkge1xuICB2YXIgbWFyayA9IHtcbiAgICBuYW1lOiBzdGF0ZS5maWxlbmFtZSxcbiAgICBidWZmZXI6IHN0YXRlLmlucHV0LnNsaWNlKDAsIC0xKSxcbiAgICAvLyBvbWl0IHRyYWlsaW5nIFxcMFxuICAgIHBvc2l0aW9uOiBzdGF0ZS5wb3NpdGlvbixcbiAgICBsaW5lOiBzdGF0ZS5saW5lLFxuICAgIGNvbHVtbjogc3RhdGUucG9zaXRpb24gLSBzdGF0ZS5saW5lU3RhcnRcbiAgfTtcbiAgbWFyay5zbmlwcGV0ID0gc25pcHBldChtYXJrKTtcbiAgcmV0dXJuIG5ldyBleGNlcHRpb24obWVzc2FnZSwgbWFyayk7XG59XG5fX25hbWUoZ2VuZXJhdGVFcnJvciwgXCJnZW5lcmF0ZUVycm9yXCIpO1xuZnVuY3Rpb24gdGhyb3dFcnJvcihzdGF0ZSwgbWVzc2FnZSkge1xuICB0aHJvdyBnZW5lcmF0ZUVycm9yKHN0YXRlLCBtZXNzYWdlKTtcbn1cbl9fbmFtZSh0aHJvd0Vycm9yLCBcInRocm93RXJyb3JcIik7XG5mdW5jdGlvbiB0aHJvd1dhcm5pbmcoc3RhdGUsIG1lc3NhZ2UpIHtcbiAgaWYgKHN0YXRlLm9uV2FybmluZykge1xuICAgIHN0YXRlLm9uV2FybmluZy5jYWxsKG51bGwsIGdlbmVyYXRlRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpKTtcbiAgfVxufVxuX19uYW1lKHRocm93V2FybmluZywgXCJ0aHJvd1dhcm5pbmdcIik7XG52YXIgZGlyZWN0aXZlSGFuZGxlcnMgPSB7XG4gIFlBTUw6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24gaGFuZGxlWWFtbERpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuICAgIHZhciBtYXRjaCwgbWFqb3IsIG1pbm9yO1xuICAgIGlmIChzdGF0ZS52ZXJzaW9uICE9PSBudWxsKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImR1cGxpY2F0aW9uIG9mICVZQU1MIGRpcmVjdGl2ZVwiKTtcbiAgICB9XG4gICAgaWYgKGFyZ3MubGVuZ3RoICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcIllBTUwgZGlyZWN0aXZlIGFjY2VwdHMgZXhhY3RseSBvbmUgYXJndW1lbnRcIik7XG4gICAgfVxuICAgIG1hdGNoID0gL14oWzAtOV0rKVxcLihbMC05XSspJC8uZXhlYyhhcmdzWzBdKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiaWxsLWZvcm1lZCBhcmd1bWVudCBvZiB0aGUgWUFNTCBkaXJlY3RpdmVcIik7XG4gICAgfVxuICAgIG1ham9yID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKTtcbiAgICBtaW5vciA9IHBhcnNlSW50KG1hdGNoWzJdLCAxMCk7XG4gICAgaWYgKG1ham9yICE9PSAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInVuYWNjZXB0YWJsZSBZQU1MIHZlcnNpb24gb2YgdGhlIGRvY3VtZW50XCIpO1xuICAgIH1cbiAgICBzdGF0ZS52ZXJzaW9uID0gYXJnc1swXTtcbiAgICBzdGF0ZS5jaGVja0xpbmVCcmVha3MgPSBtaW5vciA8IDI7XG4gICAgaWYgKG1pbm9yICE9PSAxICYmIG1pbm9yICE9PSAyKSB7XG4gICAgICB0aHJvd1dhcm5pbmcoc3RhdGUsIFwidW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uIG9mIHRoZSBkb2N1bWVudFwiKTtcbiAgICB9XG4gIH0sIFwiaGFuZGxlWWFtbERpcmVjdGl2ZVwiKSxcbiAgVEFHOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uIGhhbmRsZVRhZ0RpcmVjdGl2ZShzdGF0ZSwgbmFtZSwgYXJncykge1xuICAgIHZhciBoYW5kbGUsIHByZWZpeDtcbiAgICBpZiAoYXJncy5sZW5ndGggIT09IDIpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiVEFHIGRpcmVjdGl2ZSBhY2NlcHRzIGV4YWN0bHkgdHdvIGFyZ3VtZW50c1wiKTtcbiAgICB9XG4gICAgaGFuZGxlID0gYXJnc1swXTtcbiAgICBwcmVmaXggPSBhcmdzWzFdO1xuICAgIGlmICghUEFUVEVSTl9UQUdfSEFORExFLnRlc3QoaGFuZGxlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJpbGwtZm9ybWVkIHRhZyBoYW5kbGUgKGZpcnN0IGFyZ3VtZW50KSBvZiB0aGUgVEFHIGRpcmVjdGl2ZVwiKTtcbiAgICB9XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudGFnTWFwLCBoYW5kbGUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndGhlcmUgaXMgYSBwcmV2aW91c2x5IGRlY2xhcmVkIHN1ZmZpeCBmb3IgXCInICsgaGFuZGxlICsgJ1wiIHRhZyBoYW5kbGUnKTtcbiAgICB9XG4gICAgaWYgKCFQQVRURVJOX1RBR19VUkkudGVzdChwcmVmaXgpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImlsbC1mb3JtZWQgdGFnIHByZWZpeCAoc2Vjb25kIGFyZ3VtZW50KSBvZiB0aGUgVEFHIGRpcmVjdGl2ZVwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHByZWZpeCA9IGRlY29kZVVSSUNvbXBvbmVudChwcmVmaXgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ0YWcgcHJlZml4IGlzIG1hbGZvcm1lZDogXCIgKyBwcmVmaXgpO1xuICAgIH1cbiAgICBzdGF0ZS50YWdNYXBbaGFuZGxlXSA9IHByZWZpeDtcbiAgfSwgXCJoYW5kbGVUYWdEaXJlY3RpdmVcIilcbn07XG5mdW5jdGlvbiBjYXB0dXJlU2VnbWVudChzdGF0ZSwgc3RhcnQsIGVuZCwgY2hlY2tKc29uKSB7XG4gIHZhciBfcG9zaXRpb24sIF9sZW5ndGgsIF9jaGFyYWN0ZXIsIF9yZXN1bHQ7XG4gIGlmIChzdGFydCA8IGVuZCkge1xuICAgIF9yZXN1bHQgPSBzdGF0ZS5pbnB1dC5zbGljZShzdGFydCwgZW5kKTtcbiAgICBpZiAoY2hlY2tKc29uKSB7XG4gICAgICBmb3IgKF9wb3NpdGlvbiA9IDAsIF9sZW5ndGggPSBfcmVzdWx0Lmxlbmd0aDsgX3Bvc2l0aW9uIDwgX2xlbmd0aDsgX3Bvc2l0aW9uICs9IDEpIHtcbiAgICAgICAgX2NoYXJhY3RlciA9IF9yZXN1bHQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuICAgICAgICBpZiAoIShfY2hhcmFjdGVyID09PSA5IHx8IDMyIDw9IF9jaGFyYWN0ZXIgJiYgX2NoYXJhY3RlciA8PSAxMTE0MTExKSkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiZXhwZWN0ZWQgdmFsaWQgSlNPTiBjaGFyYWN0ZXJcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFBBVFRFUk5fTk9OX1BSSU5UQUJMRS50ZXN0KF9yZXN1bHQpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInRoZSBzdHJlYW0gY29udGFpbnMgbm9uLXByaW50YWJsZSBjaGFyYWN0ZXJzXCIpO1xuICAgIH1cbiAgICBzdGF0ZS5yZXN1bHQgKz0gX3Jlc3VsdDtcbiAgfVxufVxuX19uYW1lKGNhcHR1cmVTZWdtZW50LCBcImNhcHR1cmVTZWdtZW50XCIpO1xuZnVuY3Rpb24gbWVyZ2VNYXBwaW5ncyhzdGF0ZSwgZGVzdGluYXRpb24sIHNvdXJjZSwgb3ZlcnJpZGFibGVLZXlzKSB7XG4gIHZhciBzb3VyY2VLZXlzLCBrZXksIGluZGV4LCBxdWFudGl0eTtcbiAgaWYgKCFjb21tb24uaXNPYmplY3Qoc291cmNlKSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiY2Fubm90IG1lcmdlIG1hcHBpbmdzOyB0aGUgcHJvdmlkZWQgc291cmNlIG9iamVjdCBpcyB1bmFjY2VwdGFibGVcIik7XG4gIH1cbiAgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIGZvciAoaW5kZXggPSAwLCBxdWFudGl0eSA9IHNvdXJjZUtleXMubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpbmRleF07XG4gICAgaWYgKCFfaGFzT3duUHJvcGVydHkkMS5jYWxsKGRlc3RpbmF0aW9uLCBrZXkpKSB7XG4gICAgICBkZXN0aW5hdGlvbltrZXldID0gc291cmNlW2tleV07XG4gICAgICBvdmVycmlkYWJsZUtleXNba2V5XSA9IHRydWU7XG4gICAgfVxuICB9XG59XG5fX25hbWUobWVyZ2VNYXBwaW5ncywgXCJtZXJnZU1hcHBpbmdzXCIpO1xuZnVuY3Rpb24gc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIHZhbHVlTm9kZSwgc3RhcnRMaW5lLCBzdGFydExpbmVTdGFydCwgc3RhcnRQb3MpIHtcbiAgdmFyIGluZGV4LCBxdWFudGl0eTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5Tm9kZSkpIHtcbiAgICBrZXlOb2RlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoa2V5Tm9kZSk7XG4gICAgZm9yIChpbmRleCA9IDAsIHF1YW50aXR5ID0ga2V5Tm9kZS5sZW5ndGg7IGluZGV4IDwgcXVhbnRpdHk7IGluZGV4ICs9IDEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGtleU5vZGVbaW5kZXhdKSkge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcIm5lc3RlZCBhcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW5zaWRlIGtleXNcIik7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGtleU5vZGUgPT09IFwib2JqZWN0XCIgJiYgX2NsYXNzKGtleU5vZGVbaW5kZXhdKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgICBrZXlOb2RlW2luZGV4XSA9IFwiW29iamVjdCBPYmplY3RdXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2Yga2V5Tm9kZSA9PT0gXCJvYmplY3RcIiAmJiBfY2xhc3Moa2V5Tm9kZSkgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICBrZXlOb2RlID0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbiAgfVxuICBrZXlOb2RlID0gU3RyaW5nKGtleU5vZGUpO1xuICBpZiAoX3Jlc3VsdCA9PT0gbnVsbCkge1xuICAgIF9yZXN1bHQgPSB7fTtcbiAgfVxuICBpZiAoa2V5VGFnID09PSBcInRhZzp5YW1sLm9yZywyMDAyOm1lcmdlXCIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZU5vZGUpKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgcXVhbnRpdHkgPSB2YWx1ZU5vZGUubGVuZ3RoOyBpbmRleCA8IHF1YW50aXR5OyBpbmRleCArPSAxKSB7XG4gICAgICAgIG1lcmdlTWFwcGluZ3Moc3RhdGUsIF9yZXN1bHQsIHZhbHVlTm9kZVtpbmRleF0sIG92ZXJyaWRhYmxlS2V5cyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lcmdlTWFwcGluZ3Moc3RhdGUsIF9yZXN1bHQsIHZhbHVlTm9kZSwgb3ZlcnJpZGFibGVLZXlzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFzdGF0ZS5qc29uICYmICFfaGFzT3duUHJvcGVydHkkMS5jYWxsKG92ZXJyaWRhYmxlS2V5cywga2V5Tm9kZSkgJiYgX2hhc093blByb3BlcnR5JDEuY2FsbChfcmVzdWx0LCBrZXlOb2RlKSkge1xuICAgICAgc3RhdGUubGluZSA9IHN0YXJ0TGluZSB8fCBzdGF0ZS5saW5lO1xuICAgICAgc3RhdGUubGluZVN0YXJ0ID0gc3RhcnRMaW5lU3RhcnQgfHwgc3RhdGUubGluZVN0YXJ0O1xuICAgICAgc3RhdGUucG9zaXRpb24gPSBzdGFydFBvcyB8fCBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiZHVwbGljYXRlZCBtYXBwaW5nIGtleVwiKTtcbiAgICB9XG4gICAgaWYgKGtleU5vZGUgPT09IFwiX19wcm90b19fXCIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfcmVzdWx0LCBrZXlOb2RlLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZU5vZGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0W2tleU5vZGVdID0gdmFsdWVOb2RlO1xuICAgIH1cbiAgICBkZWxldGUgb3ZlcnJpZGFibGVLZXlzW2tleU5vZGVdO1xuICB9XG4gIHJldHVybiBfcmVzdWx0O1xufVxuX19uYW1lKHN0b3JlTWFwcGluZ1BhaXIsIFwic3RvcmVNYXBwaW5nUGFpclwiKTtcbmZ1bmN0aW9uIHJlYWRMaW5lQnJlYWsoc3RhdGUpIHtcbiAgdmFyIGNoO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICBpZiAoY2ggPT09IDEwKSB7XG4gICAgc3RhdGUucG9zaXRpb24rKztcbiAgfSBlbHNlIGlmIChjaCA9PT0gMTMpIHtcbiAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgIGlmIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMTApIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiYSBsaW5lIGJyZWFrIGlzIGV4cGVjdGVkXCIpO1xuICB9XG4gIHN0YXRlLmxpbmUgKz0gMTtcbiAgc3RhdGUubGluZVN0YXJ0ID0gc3RhdGUucG9zaXRpb247XG4gIHN0YXRlLmZpcnN0VGFiSW5MaW5lID0gLTE7XG59XG5fX25hbWUocmVhZExpbmVCcmVhaywgXCJyZWFkTGluZUJyZWFrXCIpO1xuZnVuY3Rpb24gc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgYWxsb3dDb21tZW50cywgY2hlY2tJbmRlbnQpIHtcbiAgdmFyIGxpbmVCcmVha3MgPSAwLCBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICBpZiAoY2ggPT09IDkgJiYgc3RhdGUuZmlyc3RUYWJJbkxpbmUgPT09IC0xKSB7XG4gICAgICAgIHN0YXRlLmZpcnN0VGFiSW5MaW5lID0gc3RhdGUucG9zaXRpb247XG4gICAgICB9XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuICAgIGlmIChhbGxvd0NvbW1lbnRzICYmIGNoID09PSAzNSkge1xuICAgICAgZG8ge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICB9IHdoaWxlIChjaCAhPT0gMTAgJiYgY2ggIT09IDEzICYmIGNoICE9PSAwKTtcbiAgICB9XG4gICAgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIHJlYWRMaW5lQnJlYWsoc3RhdGUpO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgIGxpbmVCcmVha3MrKztcbiAgICAgIHN0YXRlLmxpbmVJbmRlbnQgPSAwO1xuICAgICAgd2hpbGUgKGNoID09PSAzMikge1xuICAgICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjaGVja0luZGVudCAhPT0gLTEgJiYgbGluZUJyZWFrcyAhPT0gMCAmJiBzdGF0ZS5saW5lSW5kZW50IDwgY2hlY2tJbmRlbnQpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsIFwiZGVmaWNpZW50IGluZGVudGF0aW9uXCIpO1xuICB9XG4gIHJldHVybiBsaW5lQnJlYWtzO1xufVxuX19uYW1lKHNraXBTZXBhcmF0aW9uU3BhY2UsIFwic2tpcFNlcGFyYXRpb25TcGFjZVwiKTtcbmZ1bmN0aW9uIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb24sIGNoO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoX3Bvc2l0aW9uKTtcbiAgaWYgKChjaCA9PT0gNDUgfHwgY2ggPT09IDQ2KSAmJiBjaCA9PT0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24gKyAxKSAmJiBjaCA9PT0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24gKyAyKSkge1xuICAgIF9wb3NpdGlvbiArPSAzO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChfcG9zaXRpb24pO1xuICAgIGlmIChjaCA9PT0gMCB8fCBpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuX19uYW1lKHRlc3REb2N1bWVudFNlcGFyYXRvciwgXCJ0ZXN0RG9jdW1lbnRTZXBhcmF0b3JcIik7XG5mdW5jdGlvbiB3cml0ZUZvbGRlZExpbmVzKHN0YXRlLCBjb3VudCkge1xuICBpZiAoY291bnQgPT09IDEpIHtcbiAgICBzdGF0ZS5yZXN1bHQgKz0gXCIgXCI7XG4gIH0gZWxzZSBpZiAoY291bnQgPiAxKSB7XG4gICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoXCJcXG5cIiwgY291bnQgLSAxKTtcbiAgfVxufVxuX19uYW1lKHdyaXRlRm9sZGVkTGluZXMsIFwid3JpdGVGb2xkZWRMaW5lc1wiKTtcbmZ1bmN0aW9uIHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgbm9kZUluZGVudCwgd2l0aGluRmxvd0NvbGxlY3Rpb24pIHtcbiAgdmFyIHByZWNlZGluZywgZm9sbG93aW5nLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGhhc1BlbmRpbmdDb250ZW50LCBfbGluZSwgX2xpbmVTdGFydCwgX2xpbmVJbmRlbnQsIF9raW5kID0gc3RhdGUua2luZCwgX3Jlc3VsdCA9IHN0YXRlLnJlc3VsdCwgY2g7XG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gIGlmIChpc19XU19PUl9FT0woY2gpIHx8IGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSB8fCBjaCA9PT0gMzUgfHwgY2ggPT09IDM4IHx8IGNoID09PSA0MiB8fCBjaCA9PT0gMzMgfHwgY2ggPT09IDEyNCB8fCBjaCA9PT0gNjIgfHwgY2ggPT09IDM5IHx8IGNoID09PSAzNCB8fCBjaCA9PT0gMzcgfHwgY2ggPT09IDY0IHx8IGNoID09PSA5Nikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoY2ggPT09IDYzIHx8IGNoID09PSA0NSkge1xuICAgIGZvbGxvd2luZyA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24gKyAxKTtcbiAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykgfHwgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5raW5kID0gXCJzY2FsYXJcIjtcbiAgc3RhdGUucmVzdWx0ID0gXCJcIjtcbiAgY2FwdHVyZVN0YXJ0ID0gY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uO1xuICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDU4KSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG4gICAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykgfHwgd2l0aGluRmxvd0NvbGxlY3Rpb24gJiYgaXNfRkxPV19JTkRJQ0FUT1IoZm9sbG93aW5nKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoID09PSAzNSkge1xuICAgICAgcHJlY2VkaW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiAtIDEpO1xuICAgICAgaWYgKGlzX1dTX09SX0VPTChwcmVjZWRpbmcpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3RhdGUucG9zaXRpb24gPT09IHN0YXRlLmxpbmVTdGFydCAmJiB0ZXN0RG9jdW1lbnRTZXBhcmF0b3Ioc3RhdGUpIHx8IHdpdGhpbkZsb3dDb2xsZWN0aW9uICYmIGlzX0ZMT1dfSU5ESUNBVE9SKGNoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChpc19FT0woY2gpKSB7XG4gICAgICBfbGluZSA9IHN0YXRlLmxpbmU7XG4gICAgICBfbGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgX2xpbmVJbmRlbnQgPSBzdGF0ZS5saW5lSW5kZW50O1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIC0xKTtcbiAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID49IG5vZGVJbmRlbnQpIHtcbiAgICAgICAgaGFzUGVuZGluZ0NvbnRlbnQgPSB0cnVlO1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnBvc2l0aW9uID0gY2FwdHVyZUVuZDtcbiAgICAgICAgc3RhdGUubGluZSA9IF9saW5lO1xuICAgICAgICBzdGF0ZS5saW5lU3RhcnQgPSBfbGluZVN0YXJ0O1xuICAgICAgICBzdGF0ZS5saW5lSW5kZW50ID0gX2xpbmVJbmRlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGFzUGVuZGluZ0NvbnRlbnQpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcbiAgICAgIHdyaXRlRm9sZGVkTGluZXMoc3RhdGUsIHN0YXRlLmxpbmUgLSBfbGluZSk7XG4gICAgICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICBoYXNQZW5kaW5nQ29udGVudCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgY2FwdHVyZUVuZCA9IHN0YXRlLnBvc2l0aW9uICsgMTtcbiAgICB9XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG4gIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGZhbHNlKTtcbiAgaWYgKHN0YXRlLnJlc3VsdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHN0YXRlLmtpbmQgPSBfa2luZDtcbiAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgcmV0dXJuIGZhbHNlO1xufVxuX19uYW1lKHJlYWRQbGFpblNjYWxhciwgXCJyZWFkUGxhaW5TY2FsYXJcIik7XG5mdW5jdGlvbiByZWFkU2luZ2xlUXVvdGVkU2NhbGFyKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBjaCwgY2FwdHVyZVN0YXJ0LCBjYXB0dXJlRW5kO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICBpZiAoY2ggIT09IDM5KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YXRlLmtpbmQgPSBcInNjYWxhclwiO1xuICBzdGF0ZS5yZXN1bHQgPSBcIlwiO1xuICBzdGF0ZS5wb3NpdGlvbisrO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDM5KSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICBpZiAoY2ggPT09IDM5KSB7XG4gICAgICAgIGNhcHR1cmVTdGFydCA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIHRydWUpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgc2luZ2xlIHF1b3RlZCBzY2FsYXJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG4gIHRocm93RXJyb3Ioc3RhdGUsIFwidW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBzaW5nbGUgcXVvdGVkIHNjYWxhclwiKTtcbn1cbl9fbmFtZShyZWFkU2luZ2xlUXVvdGVkU2NhbGFyLCBcInJlYWRTaW5nbGVRdW90ZWRTY2FsYXJcIik7XG5mdW5jdGlvbiByZWFkRG91YmxlUXVvdGVkU2NhbGFyKHN0YXRlLCBub2RlSW5kZW50KSB7XG4gIHZhciBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIGhleExlbmd0aCwgaGV4UmVzdWx0LCB0bXAsIGNoO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICBpZiAoY2ggIT09IDM0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YXRlLmtpbmQgPSBcInNjYWxhclwiO1xuICBzdGF0ZS5yZXN1bHQgPSBcIlwiO1xuICBzdGF0ZS5wb3NpdGlvbisrO1xuICBjYXB0dXJlU3RhcnQgPSBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gIHdoaWxlICgoY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSkgIT09IDApIHtcbiAgICBpZiAoY2ggPT09IDM0KSB7XG4gICAgICBjYXB0dXJlU2VnbWVudChzdGF0ZSwgY2FwdHVyZVN0YXJ0LCBzdGF0ZS5wb3NpdGlvbiwgdHJ1ZSk7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gOTIpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIHN0YXRlLnBvc2l0aW9uLCB0cnVlKTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIGlmIChpc19FT0woY2gpKSB7XG4gICAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIGZhbHNlLCBub2RlSW5kZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPCAyNTYgJiYgc2ltcGxlRXNjYXBlQ2hlY2tbY2hdKSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBzaW1wbGVFc2NhcGVNYXBbY2hdO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgfSBlbHNlIGlmICgodG1wID0gZXNjYXBlZEhleExlbihjaCkpID4gMCkge1xuICAgICAgICBoZXhMZW5ndGggPSB0bXA7XG4gICAgICAgIGhleFJlc3VsdCA9IDA7XG4gICAgICAgIGZvciAoOyBoZXhMZW5ndGggPiAwOyBoZXhMZW5ndGgtLSkge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgICBpZiAoKHRtcCA9IGZyb21IZXhDb2RlKGNoKSkgPj0gMCkge1xuICAgICAgICAgICAgaGV4UmVzdWx0ID0gKGhleFJlc3VsdCA8PCA0KSArIHRtcDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJleHBlY3RlZCBoZXhhZGVjaW1hbCBjaGFyYWN0ZXJcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjaGFyRnJvbUNvZGVwb2ludChoZXhSZXN1bHQpO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ1bmtub3duIGVzY2FwZSBzZXF1ZW5jZVwiKTtcbiAgICAgIH1cbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9IGVsc2UgaWYgKGlzX0VPTChjaCkpIHtcbiAgICAgIGNhcHR1cmVTZWdtZW50KHN0YXRlLCBjYXB0dXJlU3RhcnQsIGNhcHR1cmVFbmQsIHRydWUpO1xuICAgICAgd3JpdGVGb2xkZWRMaW5lcyhzdGF0ZSwgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgZmFsc2UsIG5vZGVJbmRlbnQpKTtcbiAgICAgIGNhcHR1cmVTdGFydCA9IGNhcHR1cmVFbmQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBzdGF0ZS5saW5lU3RhcnQgJiYgdGVzdERvY3VtZW50U2VwYXJhdG9yKHN0YXRlKSkge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ1bmV4cGVjdGVkIGVuZCBvZiB0aGUgZG9jdW1lbnQgd2l0aGluIGEgZG91YmxlIHF1b3RlZCBzY2FsYXJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnBvc2l0aW9uKys7XG4gICAgICBjYXB0dXJlRW5kID0gc3RhdGUucG9zaXRpb247XG4gICAgfVxuICB9XG4gIHRocm93RXJyb3Ioc3RhdGUsIFwidW5leHBlY3RlZCBlbmQgb2YgdGhlIHN0cmVhbSB3aXRoaW4gYSBkb3VibGUgcXVvdGVkIHNjYWxhclwiKTtcbn1cbl9fbmFtZShyZWFkRG91YmxlUXVvdGVkU2NhbGFyLCBcInJlYWREb3VibGVRdW90ZWRTY2FsYXJcIik7XG5mdW5jdGlvbiByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIHJlYWROZXh0ID0gdHJ1ZSwgX2xpbmUsIF9saW5lU3RhcnQsIF9wb3MsIF90YWcgPSBzdGF0ZS50YWcsIF9yZXN1bHQsIF9hbmNob3IgPSBzdGF0ZS5hbmNob3IsIGZvbGxvd2luZywgdGVybWluYXRvciwgaXNQYWlyLCBpc0V4cGxpY2l0UGFpciwgaXNNYXBwaW5nLCBvdmVycmlkYWJsZUtleXMgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSwga2V5Tm9kZSwga2V5VGFnLCB2YWx1ZU5vZGUsIGNoO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICBpZiAoY2ggPT09IDkxKSB7XG4gICAgdGVybWluYXRvciA9IDkzO1xuICAgIGlzTWFwcGluZyA9IGZhbHNlO1xuICAgIF9yZXN1bHQgPSBbXTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMTIzKSB7XG4gICAgdGVybWluYXRvciA9IDEyNTtcbiAgICBpc01hcHBpbmcgPSB0cnVlO1xuICAgIF9yZXN1bHQgPSB7fTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gX3Jlc3VsdDtcbiAgfVxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIHdoaWxlIChjaCAhPT0gMCkge1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgaWYgKGNoID09PSB0ZXJtaW5hdG9yKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgICBzdGF0ZS5raW5kID0gaXNNYXBwaW5nID8gXCJtYXBwaW5nXCIgOiBcInNlcXVlbmNlXCI7XG4gICAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghcmVhZE5leHQpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwibWlzc2VkIGNvbW1hIGJldHdlZW4gZmxvdyBjb2xsZWN0aW9uIGVudHJpZXNcIik7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gNDQpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiZXhwZWN0ZWQgdGhlIG5vZGUgY29udGVudCwgYnV0IGZvdW5kICcsJ1wiKTtcbiAgICB9XG4gICAga2V5VGFnID0ga2V5Tm9kZSA9IHZhbHVlTm9kZSA9IG51bGw7XG4gICAgaXNQYWlyID0gaXNFeHBsaWNpdFBhaXIgPSBmYWxzZTtcbiAgICBpZiAoY2ggPT09IDYzKSB7XG4gICAgICBmb2xsb3dpbmcgPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMSk7XG4gICAgICBpZiAoaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcbiAgICAgICAgaXNQYWlyID0gaXNFeHBsaWNpdFBhaXIgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5wb3NpdGlvbisrO1xuICAgICAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgX2xpbmUgPSBzdGF0ZS5saW5lO1xuICAgIF9saW5lU3RhcnQgPSBzdGF0ZS5saW5lU3RhcnQ7XG4gICAgX3BvcyA9IHN0YXRlLnBvc2l0aW9uO1xuICAgIGNvbXBvc2VOb2RlKHN0YXRlLCBub2RlSW5kZW50LCBDT05URVhUX0ZMT1dfSU4sIGZhbHNlLCB0cnVlKTtcbiAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCBub2RlSW5kZW50KTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgIGlmICgoaXNFeHBsaWNpdFBhaXIgfHwgc3RhdGUubGluZSA9PT0gX2xpbmUpICYmIGNoID09PSA1OCkge1xuICAgICAgaXNQYWlyID0gdHJ1ZTtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgICAgY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfRkxPV19JTiwgZmFsc2UsIHRydWUpO1xuICAgICAgdmFsdWVOb2RlID0gc3RhdGUucmVzdWx0O1xuICAgIH1cbiAgICBpZiAoaXNNYXBwaW5nKSB7XG4gICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3Bvcyk7XG4gICAgfSBlbHNlIGlmIChpc1BhaXIpIHtcbiAgICAgIF9yZXN1bHQucHVzaChzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBudWxsLCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfbGluZSwgX2xpbmVTdGFydCwgX3BvcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfcmVzdWx0LnB1c2goa2V5Tm9kZSk7XG4gICAgfVxuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIG5vZGVJbmRlbnQpO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgaWYgKGNoID09PSA0NCkge1xuICAgICAgcmVhZE5leHQgPSB0cnVlO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFkTmV4dCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICB0aHJvd0Vycm9yKHN0YXRlLCBcInVuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uXCIpO1xufVxuX19uYW1lKHJlYWRGbG93Q29sbGVjdGlvbiwgXCJyZWFkRmxvd0NvbGxlY3Rpb25cIik7XG5mdW5jdGlvbiByZWFkQmxvY2tTY2FsYXIoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIGNhcHR1cmVTdGFydCwgZm9sZGluZywgY2hvbXBpbmcgPSBDSE9NUElOR19DTElQLCBkaWRSZWFkQ29udGVudCA9IGZhbHNlLCBkZXRlY3RlZEluZGVudCA9IGZhbHNlLCB0ZXh0SW5kZW50ID0gbm9kZUluZGVudCwgZW1wdHlMaW5lcyA9IDAsIGF0TW9yZUluZGVudGVkID0gZmFsc2UsIHRtcCwgY2g7XG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gIGlmIChjaCA9PT0gMTI0KSB7XG4gICAgZm9sZGluZyA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKGNoID09PSA2Mikge1xuICAgIGZvbGRpbmcgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGF0ZS5raW5kID0gXCJzY2FsYXJcIjtcbiAgc3RhdGUucmVzdWx0ID0gXCJcIjtcbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIGlmIChjaCA9PT0gNDMgfHwgY2ggPT09IDQ1KSB7XG4gICAgICBpZiAoQ0hPTVBJTkdfQ0xJUCA9PT0gY2hvbXBpbmcpIHtcbiAgICAgICAgY2hvbXBpbmcgPSBjaCA9PT0gNDMgPyBDSE9NUElOR19LRUVQIDogQ0hPTVBJTkdfU1RSSVA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInJlcGVhdCBvZiBhIGNob21waW5nIG1vZGUgaWRlbnRpZmllclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCh0bXAgPSBmcm9tRGVjaW1hbENvZGUoY2gpKSA+PSAwKSB7XG4gICAgICBpZiAodG1wID09PSAwKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiYmFkIGV4cGxpY2l0IGluZGVudGF0aW9uIHdpZHRoIG9mIGEgYmxvY2sgc2NhbGFyOyBpdCBjYW5ub3QgYmUgbGVzcyB0aGFuIG9uZVwiKTtcbiAgICAgIH0gZWxzZSBpZiAoIWRldGVjdGVkSW5kZW50KSB7XG4gICAgICAgIHRleHRJbmRlbnQgPSBub2RlSW5kZW50ICsgdG1wIC0gMTtcbiAgICAgICAgZGV0ZWN0ZWRJbmRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJyZXBlYXQgb2YgYW4gaW5kZW50YXRpb24gd2lkdGggaWRlbnRpZmllclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChpc19XSElURV9TUEFDRShjaCkpIHtcbiAgICBkbyB7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfSB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKTtcbiAgICBpZiAoY2ggPT09IDM1KSB7XG4gICAgICBkbyB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH0gd2hpbGUgKCFpc19FT0woY2gpICYmIGNoICE9PSAwKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG4gICAgc3RhdGUubGluZUluZGVudCA9IDA7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICB3aGlsZSAoKCFkZXRlY3RlZEluZGVudCB8fCBzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkgJiYgY2ggPT09IDMyKSB7XG4gICAgICBzdGF0ZS5saW5lSW5kZW50Kys7XG4gICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgfVxuICAgIGlmICghZGV0ZWN0ZWRJbmRlbnQgJiYgc3RhdGUubGluZUluZGVudCA+IHRleHRJbmRlbnQpIHtcbiAgICAgIHRleHRJbmRlbnQgPSBzdGF0ZS5saW5lSW5kZW50O1xuICAgIH1cbiAgICBpZiAoaXNfRU9MKGNoKSkge1xuICAgICAgZW1wdHlMaW5lcysrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5saW5lSW5kZW50IDwgdGV4dEluZGVudCkge1xuICAgICAgaWYgKGNob21waW5nID09PSBDSE9NUElOR19LRUVQKSB7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KFwiXFxuXCIsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hvbXBpbmcgPT09IENIT01QSU5HX0NMSVApIHtcbiAgICAgICAgaWYgKGRpZFJlYWRDb250ZW50KSB7XG4gICAgICAgICAgc3RhdGUucmVzdWx0ICs9IFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoZm9sZGluZykge1xuICAgICAgaWYgKGlzX1dISVRFX1NQQUNFKGNoKSkge1xuICAgICAgICBhdE1vcmVJbmRlbnRlZCA9IHRydWU7XG4gICAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KFwiXFxuXCIsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICAgIH0gZWxzZSBpZiAoYXRNb3JlSW5kZW50ZWQpIHtcbiAgICAgICAgYXRNb3JlSW5kZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoXCJcXG5cIiwgZW1wdHlMaW5lcyArIDEpO1xuICAgICAgfSBlbHNlIGlmIChlbXB0eUxpbmVzID09PSAwKSB7XG4gICAgICAgIGlmIChkaWRSZWFkQ29udGVudCkge1xuICAgICAgICAgIHN0YXRlLnJlc3VsdCArPSBcIiBcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ICs9IGNvbW1vbi5yZXBlYXQoXCJcXG5cIiwgZW1wdHlMaW5lcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnJlc3VsdCArPSBjb21tb24ucmVwZWF0KFwiXFxuXCIsIGRpZFJlYWRDb250ZW50ID8gMSArIGVtcHR5TGluZXMgOiBlbXB0eUxpbmVzKTtcbiAgICB9XG4gICAgZGlkUmVhZENvbnRlbnQgPSB0cnVlO1xuICAgIGRldGVjdGVkSW5kZW50ID0gdHJ1ZTtcbiAgICBlbXB0eUxpbmVzID0gMDtcbiAgICBjYXB0dXJlU3RhcnQgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB3aGlsZSAoIWlzX0VPTChjaCkgJiYgY2ggIT09IDApIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG4gICAgY2FwdHVyZVNlZ21lbnQoc3RhdGUsIGNhcHR1cmVTdGFydCwgc3RhdGUucG9zaXRpb24sIGZhbHNlKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbl9fbmFtZShyZWFkQmxvY2tTY2FsYXIsIFwicmVhZEJsb2NrU2NhbGFyXCIpO1xuZnVuY3Rpb24gcmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIG5vZGVJbmRlbnQpIHtcbiAgdmFyIF9saW5lLCBfdGFnID0gc3RhdGUudGFnLCBfYW5jaG9yID0gc3RhdGUuYW5jaG9yLCBfcmVzdWx0ID0gW10sIGZvbGxvd2luZywgZGV0ZWN0ZWQgPSBmYWxzZSwgY2g7XG4gIGlmIChzdGF0ZS5maXJzdFRhYkluTGluZSAhPT0gLTEpIHJldHVybiBmYWxzZTtcbiAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gX3Jlc3VsdDtcbiAgfVxuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICB3aGlsZSAoY2ggIT09IDApIHtcbiAgICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiA9IHN0YXRlLmZpcnN0VGFiSW5MaW5lO1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ0YWIgY2hhcmFjdGVycyBtdXN0IG5vdCBiZSB1c2VkIGluIGluZGVudGF0aW9uXCIpO1xuICAgIH1cbiAgICBpZiAoY2ggIT09IDQ1KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuICAgIGlmICghaXNfV1NfT1JfRU9MKGZvbGxvd2luZykpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgc3RhdGUucG9zaXRpb24rKztcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBpZiAoc3RhdGUubGluZUluZGVudCA8PSBub2RlSW5kZW50KSB7XG4gICAgICAgIF9yZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICBjb21wb3NlTm9kZShzdGF0ZSwgbm9kZUluZGVudCwgQ09OVEVYVF9CTE9DS19JTiwgZmFsc2UsIHRydWUpO1xuICAgIF9yZXN1bHQucHVzaChzdGF0ZS5yZXN1bHQpO1xuICAgIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgIGlmICgoc3RhdGUubGluZSA9PT0gX2xpbmUgfHwgc3RhdGUubGluZUluZGVudCA+IG5vZGVJbmRlbnQpICYmIGNoICE9PSAwKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImJhZCBpbmRlbnRhdGlvbiBvZiBhIHNlcXVlbmNlIGVudHJ5XCIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA8IG5vZGVJbmRlbnQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoZGV0ZWN0ZWQpIHtcbiAgICBzdGF0ZS50YWcgPSBfdGFnO1xuICAgIHN0YXRlLmFuY2hvciA9IF9hbmNob3I7XG4gICAgc3RhdGUua2luZCA9IFwic2VxdWVuY2VcIjtcbiAgICBzdGF0ZS5yZXN1bHQgPSBfcmVzdWx0O1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbl9fbmFtZShyZWFkQmxvY2tTZXF1ZW5jZSwgXCJyZWFkQmxvY2tTZXF1ZW5jZVwiKTtcbmZ1bmN0aW9uIHJlYWRCbG9ja01hcHBpbmcoc3RhdGUsIG5vZGVJbmRlbnQsIGZsb3dJbmRlbnQpIHtcbiAgdmFyIGZvbGxvd2luZywgYWxsb3dDb21wYWN0LCBfbGluZSwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MsIF90YWcgPSBzdGF0ZS50YWcsIF9hbmNob3IgPSBzdGF0ZS5hbmNob3IsIF9yZXN1bHQgPSB7fSwgb3ZlcnJpZGFibGVLZXlzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksIGtleVRhZyA9IG51bGwsIGtleU5vZGUgPSBudWxsLCB2YWx1ZU5vZGUgPSBudWxsLCBhdEV4cGxpY2l0S2V5ID0gZmFsc2UsIGRldGVjdGVkID0gZmFsc2UsIGNoO1xuICBpZiAoc3RhdGUuZmlyc3RUYWJJbkxpbmUgIT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5hbmNob3JNYXBbc3RhdGUuYW5jaG9yXSA9IF9yZXN1bHQ7XG4gIH1cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgaWYgKCFhdEV4cGxpY2l0S2V5ICYmIHN0YXRlLmZpcnN0VGFiSW5MaW5lICE9PSAtMSkge1xuICAgICAgc3RhdGUucG9zaXRpb24gPSBzdGF0ZS5maXJzdFRhYkluTGluZTtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwidGFiIGNoYXJhY3RlcnMgbXVzdCBub3QgYmUgdXNlZCBpbiBpbmRlbnRhdGlvblwiKTtcbiAgICB9XG4gICAgZm9sbG93aW5nID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpO1xuICAgIF9saW5lID0gc3RhdGUubGluZTtcbiAgICBpZiAoKGNoID09PSA2MyB8fCBjaCA9PT0gNTgpICYmIGlzX1dTX09SX0VPTChmb2xsb3dpbmcpKSB7XG4gICAgICBpZiAoY2ggPT09IDYzKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAgc3RvcmVNYXBwaW5nUGFpcihzdGF0ZSwgX3Jlc3VsdCwgb3ZlcnJpZGFibGVLZXlzLCBrZXlUYWcsIGtleU5vZGUsIG51bGwsIF9rZXlMaW5lLCBfa2V5TGluZVN0YXJ0LCBfa2V5UG9zKTtcbiAgICAgICAgICBrZXlUYWcgPSBrZXlOb2RlID0gdmFsdWVOb2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZXRlY3RlZCA9IHRydWU7XG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSB0cnVlO1xuICAgICAgICBhbGxvd0NvbXBhY3QgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dDb21wYWN0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiaW5jb21wbGV0ZSBleHBsaWNpdCBtYXBwaW5nIHBhaXI7IGEga2V5IG5vZGUgaXMgbWlzc2VkOyBvciBmb2xsb3dlZCBieSBhIG5vbi10YWJ1bGF0ZWQgZW1wdHkgbGluZVwiKTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLnBvc2l0aW9uICs9IDE7XG4gICAgICBjaCA9IGZvbGxvd2luZztcbiAgICB9IGVsc2Uge1xuICAgICAgX2tleUxpbmUgPSBzdGF0ZS5saW5lO1xuICAgICAgX2tleUxpbmVTdGFydCA9IHN0YXRlLmxpbmVTdGFydDtcbiAgICAgIF9rZXlQb3MgPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICAgIGlmICghY29tcG9zZU5vZGUoc3RhdGUsIGZsb3dJbmRlbnQsIENPTlRFWFRfRkxPV19PVVQsIGZhbHNlLCB0cnVlKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5saW5lID09PSBfbGluZSkge1xuICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICAgICAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gNTgpIHtcbiAgICAgICAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gICAgICAgICAgaWYgKCFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImEgd2hpdGVzcGFjZSBjaGFyYWN0ZXIgaXMgZXhwZWN0ZWQgYWZ0ZXIgdGhlIGtleS12YWx1ZSBzZXBhcmF0b3Igd2l0aGluIGEgYmxvY2sgbWFwcGluZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgICAgIHN0b3JlTWFwcGluZ1BhaXIoc3RhdGUsIF9yZXN1bHQsIG92ZXJyaWRhYmxlS2V5cywga2V5VGFnLCBrZXlOb2RlLCBudWxsLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgICAgICBrZXlUYWcgPSBrZXlOb2RlID0gdmFsdWVOb2RlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGV0ZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGF0RXhwbGljaXRLZXkgPSBmYWxzZTtcbiAgICAgICAgICBhbGxvd0NvbXBhY3QgPSBmYWxzZTtcbiAgICAgICAgICBrZXlUYWcgPSBzdGF0ZS50YWc7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmIChkZXRlY3RlZCkge1xuICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiY2FuIG5vdCByZWFkIGFuIGltcGxpY2l0IG1hcHBpbmcgcGFpcjsgYSBjb2xvbiBpcyBtaXNzZWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgICBzdGF0ZS5hbmNob3IgPSBfYW5jaG9yO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRldGVjdGVkKSB7XG4gICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiY2FuIG5vdCByZWFkIGEgYmxvY2sgbWFwcGluZyBlbnRyeTsgYSBtdWx0aWxpbmUga2V5IG1heSBub3QgYmUgYW4gaW1wbGljaXQga2V5XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUudGFnID0gX3RhZztcbiAgICAgICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkge1xuICAgICAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICAgICAgX2tleUxpbmUgPSBzdGF0ZS5saW5lO1xuICAgICAgICBfa2V5TGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuICAgICAgICBfa2V5UG9zID0gc3RhdGUucG9zaXRpb247XG4gICAgICB9XG4gICAgICBpZiAoY29tcG9zZU5vZGUoc3RhdGUsIG5vZGVJbmRlbnQsIENPTlRFWFRfQkxPQ0tfT1VULCB0cnVlLCBhbGxvd0NvbXBhY3QpKSB7XG4gICAgICAgIGlmIChhdEV4cGxpY2l0S2V5KSB7XG4gICAgICAgICAga2V5Tm9kZSA9IHN0YXRlLnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZU5vZGUgPSBzdGF0ZS5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghYXRFeHBsaWNpdEtleSkge1xuICAgICAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgdmFsdWVOb2RlLCBfa2V5TGluZSwgX2tleUxpbmVTdGFydCwgX2tleVBvcyk7XG4gICAgICAgIGtleVRhZyA9IGtleU5vZGUgPSB2YWx1ZU5vZGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG4gICAgaWYgKChzdGF0ZS5saW5lID09PSBfbGluZSB8fCBzdGF0ZS5saW5lSW5kZW50ID4gbm9kZUluZGVudCkgJiYgY2ggIT09IDApIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiYmFkIGluZGVudGF0aW9uIG9mIGEgbWFwcGluZyBlbnRyeVwiKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBub2RlSW5kZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGF0RXhwbGljaXRLZXkpIHtcbiAgICBzdG9yZU1hcHBpbmdQYWlyKHN0YXRlLCBfcmVzdWx0LCBvdmVycmlkYWJsZUtleXMsIGtleVRhZywga2V5Tm9kZSwgbnVsbCwgX2tleUxpbmUsIF9rZXlMaW5lU3RhcnQsIF9rZXlQb3MpO1xuICB9XG4gIGlmIChkZXRlY3RlZCkge1xuICAgIHN0YXRlLnRhZyA9IF90YWc7XG4gICAgc3RhdGUuYW5jaG9yID0gX2FuY2hvcjtcbiAgICBzdGF0ZS5raW5kID0gXCJtYXBwaW5nXCI7XG4gICAgc3RhdGUucmVzdWx0ID0gX3Jlc3VsdDtcbiAgfVxuICByZXR1cm4gZGV0ZWN0ZWQ7XG59XG5fX25hbWUocmVhZEJsb2NrTWFwcGluZywgXCJyZWFkQmxvY2tNYXBwaW5nXCIpO1xuZnVuY3Rpb24gcmVhZFRhZ1Byb3BlcnR5KHN0YXRlKSB7XG4gIHZhciBfcG9zaXRpb24sIGlzVmVyYmF0aW0gPSBmYWxzZSwgaXNOYW1lZCA9IGZhbHNlLCB0YWdIYW5kbGUsIHRhZ05hbWUsIGNoO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICBpZiAoY2ggIT09IDMzKSByZXR1cm4gZmFsc2U7XG4gIGlmIChzdGF0ZS50YWcgIT09IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImR1cGxpY2F0aW9uIG9mIGEgdGFnIHByb3BlcnR5XCIpO1xuICB9XG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgaWYgKGNoID09PSA2MCkge1xuICAgIGlzVmVyYmF0aW0gPSB0cnVlO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgfSBlbHNlIGlmIChjaCA9PT0gMzMpIHtcbiAgICBpc05hbWVkID0gdHJ1ZTtcbiAgICB0YWdIYW5kbGUgPSBcIiEhXCI7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIHRhZ0hhbmRsZSA9IFwiIVwiO1xuICB9XG4gIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuICBpZiAoaXNWZXJiYXRpbSkge1xuICAgIGRvIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9IHdoaWxlIChjaCAhPT0gMCAmJiBjaCAhPT0gNjIpO1xuICAgIGlmIChzdGF0ZS5wb3NpdGlvbiA8IHN0YXRlLmxlbmd0aCkge1xuICAgICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInVuZXhwZWN0ZWQgZW5kIG9mIHRoZSBzdHJlYW0gd2l0aGluIGEgdmVyYmF0aW0gdGFnXCIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIGlmIChjaCA9PT0gMzMpIHtcbiAgICAgICAgaWYgKCFpc05hbWVkKSB7XG4gICAgICAgICAgdGFnSGFuZGxlID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uIC0gMSwgc3RhdGUucG9zaXRpb24gKyAxKTtcbiAgICAgICAgICBpZiAoIVBBVFRFUk5fVEFHX0hBTkRMRS50ZXN0KHRhZ0hhbmRsZSkpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwibmFtZWQgdGFnIGhhbmRsZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnNcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzTmFtZWQgPSB0cnVlO1xuICAgICAgICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInRhZyBzdWZmaXggY2Fubm90IGNvbnRhaW4gZXhjbGFtYXRpb24gbWFya3NcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG4gICAgdGFnTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgIGlmIChQQVRURVJOX0ZMT1dfSU5ESUNBVE9SUy50ZXN0KHRhZ05hbWUpKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInRhZyBzdWZmaXggY2Fubm90IGNvbnRhaW4gZmxvdyBpbmRpY2F0b3IgY2hhcmFjdGVyc1wiKTtcbiAgICB9XG4gIH1cbiAgaWYgKHRhZ05hbWUgJiYgIVBBVFRFUk5fVEFHX1VSSS50ZXN0KHRhZ05hbWUpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ0YWcgbmFtZSBjYW5ub3QgY29udGFpbiBzdWNoIGNoYXJhY3RlcnM6IFwiICsgdGFnTmFtZSk7XG4gIH1cbiAgdHJ5IHtcbiAgICB0YWdOYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHRhZ05hbWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCBcInRhZyBuYW1lIGlzIG1hbGZvcm1lZDogXCIgKyB0YWdOYW1lKTtcbiAgfVxuICBpZiAoaXNWZXJiYXRpbSkge1xuICAgIHN0YXRlLnRhZyA9IHRhZ05hbWU7XG4gIH0gZWxzZSBpZiAoX2hhc093blByb3BlcnR5JDEuY2FsbChzdGF0ZS50YWdNYXAsIHRhZ0hhbmRsZSkpIHtcbiAgICBzdGF0ZS50YWcgPSBzdGF0ZS50YWdNYXBbdGFnSGFuZGxlXSArIHRhZ05hbWU7XG4gIH0gZWxzZSBpZiAodGFnSGFuZGxlID09PSBcIiFcIikge1xuICAgIHN0YXRlLnRhZyA9IFwiIVwiICsgdGFnTmFtZTtcbiAgfSBlbHNlIGlmICh0YWdIYW5kbGUgPT09IFwiISFcIikge1xuICAgIHN0YXRlLnRhZyA9IFwidGFnOnlhbWwub3JnLDIwMDI6XCIgKyB0YWdOYW1lO1xuICB9IGVsc2Uge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsICd1bmRlY2xhcmVkIHRhZyBoYW5kbGUgXCInICsgdGFnSGFuZGxlICsgJ1wiJyk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5fX25hbWUocmVhZFRhZ1Byb3BlcnR5LCBcInJlYWRUYWdQcm9wZXJ0eVwiKTtcbmZ1bmN0aW9uIHJlYWRBbmNob3JQcm9wZXJ0eShzdGF0ZSkge1xuICB2YXIgX3Bvc2l0aW9uLCBjaDtcbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKTtcbiAgaWYgKGNoICE9PSAzOCkgcmV0dXJuIGZhbHNlO1xuICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJkdXBsaWNhdGlvbiBvZiBhbiBhbmNob3IgcHJvcGVydHlcIik7XG4gIH1cbiAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbjtcbiAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpICYmICFpc19GTE9XX0lORElDQVRPUihjaCkpIHtcbiAgICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoKytzdGF0ZS5wb3NpdGlvbik7XG4gIH1cbiAgaWYgKHN0YXRlLnBvc2l0aW9uID09PSBfcG9zaXRpb24pIHtcbiAgICB0aHJvd0Vycm9yKHN0YXRlLCBcIm5hbWUgb2YgYW4gYW5jaG9yIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXJcIik7XG4gIH1cbiAgc3RhdGUuYW5jaG9yID0gc3RhdGUuaW5wdXQuc2xpY2UoX3Bvc2l0aW9uLCBzdGF0ZS5wb3NpdGlvbik7XG4gIHJldHVybiB0cnVlO1xufVxuX19uYW1lKHJlYWRBbmNob3JQcm9wZXJ0eSwgXCJyZWFkQW5jaG9yUHJvcGVydHlcIik7XG5mdW5jdGlvbiByZWFkQWxpYXMoc3RhdGUpIHtcbiAgdmFyIF9wb3NpdGlvbiwgYWxpYXMsIGNoO1xuICBjaCA9IHN0YXRlLmlucHV0LmNoYXJDb2RlQXQoc3RhdGUucG9zaXRpb24pO1xuICBpZiAoY2ggIT09IDQyKSByZXR1cm4gZmFsc2U7XG4gIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgX3Bvc2l0aW9uID0gc3RhdGUucG9zaXRpb247XG4gIHdoaWxlIChjaCAhPT0gMCAmJiAhaXNfV1NfT1JfRU9MKGNoKSAmJiAhaXNfRkxPV19JTkRJQ0FUT1IoY2gpKSB7XG4gICAgY2ggPSBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KCsrc3RhdGUucG9zaXRpb24pO1xuICB9XG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gX3Bvc2l0aW9uKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJuYW1lIG9mIGFuIGFsaWFzIG5vZGUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBjaGFyYWN0ZXJcIik7XG4gIH1cbiAgYWxpYXMgPSBzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKTtcbiAgaWYgKCFfaGFzT3duUHJvcGVydHkkMS5jYWxsKHN0YXRlLmFuY2hvck1hcCwgYWxpYXMpKSB7XG4gICAgdGhyb3dFcnJvcihzdGF0ZSwgJ3VuaWRlbnRpZmllZCBhbGlhcyBcIicgKyBhbGlhcyArICdcIicpO1xuICB9XG4gIHN0YXRlLnJlc3VsdCA9IHN0YXRlLmFuY2hvck1hcFthbGlhc107XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgcmV0dXJuIHRydWU7XG59XG5fX25hbWUocmVhZEFsaWFzLCBcInJlYWRBbGlhc1wiKTtcbmZ1bmN0aW9uIGNvbXBvc2VOb2RlKHN0YXRlLCBwYXJlbnRJbmRlbnQsIG5vZGVDb250ZXh0LCBhbGxvd1RvU2VlaywgYWxsb3dDb21wYWN0KSB7XG4gIHZhciBhbGxvd0Jsb2NrU3R5bGVzLCBhbGxvd0Jsb2NrU2NhbGFycywgYWxsb3dCbG9ja0NvbGxlY3Rpb25zLCBpbmRlbnRTdGF0dXMgPSAxLCBhdE5ld0xpbmUgPSBmYWxzZSwgaGFzQ29udGVudCA9IGZhbHNlLCB0eXBlSW5kZXgsIHR5cGVRdWFudGl0eSwgdHlwZUxpc3QsIHR5cGUyLCBmbG93SW5kZW50LCBibG9ja0luZGVudDtcbiAgaWYgKHN0YXRlLmxpc3RlbmVyICE9PSBudWxsKSB7XG4gICAgc3RhdGUubGlzdGVuZXIoXCJvcGVuXCIsIHN0YXRlKTtcbiAgfVxuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5hbmNob3IgPSBudWxsO1xuICBzdGF0ZS5raW5kID0gbnVsbDtcbiAgc3RhdGUucmVzdWx0ID0gbnVsbDtcbiAgYWxsb3dCbG9ja1N0eWxlcyA9IGFsbG93QmxvY2tTY2FsYXJzID0gYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gQ09OVEVYVF9CTE9DS19PVVQgPT09IG5vZGVDb250ZXh0IHx8IENPTlRFWFRfQkxPQ0tfSU4gPT09IG5vZGVDb250ZXh0O1xuICBpZiAoYWxsb3dUb1NlZWspIHtcbiAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICBhdE5ld0xpbmUgPSB0cnVlO1xuICAgICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gcGFyZW50SW5kZW50KSB7XG4gICAgICAgIGluZGVudFN0YXR1cyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgaW5kZW50U3RhdHVzID0gLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChpbmRlbnRTdGF0dXMgPT09IDEpIHtcbiAgICB3aGlsZSAocmVhZFRhZ1Byb3BlcnR5KHN0YXRlKSB8fCByZWFkQW5jaG9yUHJvcGVydHkoc3RhdGUpKSB7XG4gICAgICBpZiAoc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpKSB7XG4gICAgICAgIGF0TmV3TGluZSA9IHRydWU7XG4gICAgICAgIGFsbG93QmxvY2tDb2xsZWN0aW9ucyA9IGFsbG93QmxvY2tTdHlsZXM7XG4gICAgICAgIGlmIChzdGF0ZS5saW5lSW5kZW50ID4gcGFyZW50SW5kZW50KSB7XG4gICAgICAgICAgaW5kZW50U3RhdHVzID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5saW5lSW5kZW50ID09PSBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPCBwYXJlbnRJbmRlbnQpIHtcbiAgICAgICAgICBpbmRlbnRTdGF0dXMgPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxsb3dCbG9ja0NvbGxlY3Rpb25zID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChhbGxvd0Jsb2NrQ29sbGVjdGlvbnMpIHtcbiAgICBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgPSBhdE5ld0xpbmUgfHwgYWxsb3dDb21wYWN0O1xuICB9XG4gIGlmIChpbmRlbnRTdGF0dXMgPT09IDEgfHwgQ09OVEVYVF9CTE9DS19PVVQgPT09IG5vZGVDb250ZXh0KSB7XG4gICAgaWYgKENPTlRFWFRfRkxPV19JTiA9PT0gbm9kZUNvbnRleHQgfHwgQ09OVEVYVF9GTE9XX09VVCA9PT0gbm9kZUNvbnRleHQpIHtcbiAgICAgIGZsb3dJbmRlbnQgPSBwYXJlbnRJbmRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsb3dJbmRlbnQgPSBwYXJlbnRJbmRlbnQgKyAxO1xuICAgIH1cbiAgICBibG9ja0luZGVudCA9IHN0YXRlLnBvc2l0aW9uIC0gc3RhdGUubGluZVN0YXJ0O1xuICAgIGlmIChpbmRlbnRTdGF0dXMgPT09IDEpIHtcbiAgICAgIGlmIChhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgJiYgKHJlYWRCbG9ja1NlcXVlbmNlKHN0YXRlLCBibG9ja0luZGVudCkgfHwgcmVhZEJsb2NrTWFwcGluZyhzdGF0ZSwgYmxvY2tJbmRlbnQsIGZsb3dJbmRlbnQpKSB8fCByZWFkRmxvd0NvbGxlY3Rpb24oc3RhdGUsIGZsb3dJbmRlbnQpKSB7XG4gICAgICAgIGhhc0NvbnRlbnQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFsbG93QmxvY2tTY2FsYXJzICYmIHJlYWRCbG9ja1NjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHwgcmVhZFNpbmdsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkgfHwgcmVhZERvdWJsZVF1b3RlZFNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCkpIHtcbiAgICAgICAgICBoYXNDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWFkQWxpYXMoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzQ29udGVudCA9IHRydWU7XG4gICAgICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCB8fCBzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiYWxpYXMgbm9kZSBzaG91bGQgbm90IGhhdmUgYW55IHByb3BlcnRpZXNcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJlYWRQbGFpblNjYWxhcihzdGF0ZSwgZmxvd0luZGVudCwgQ09OVEVYVF9GTE9XX0lOID09PSBub2RlQ29udGV4dCkpIHtcbiAgICAgICAgICBoYXNDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoc3RhdGUudGFnID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0ZS50YWcgPSBcIj9cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpbmRlbnRTdGF0dXMgPT09IDApIHtcbiAgICAgIGhhc0NvbnRlbnQgPSBhbGxvd0Jsb2NrQ29sbGVjdGlvbnMgJiYgcmVhZEJsb2NrU2VxdWVuY2Uoc3RhdGUsIGJsb2NrSW5kZW50KTtcbiAgICB9XG4gIH1cbiAgaWYgKHN0YXRlLnRhZyA9PT0gbnVsbCkge1xuICAgIGlmIChzdGF0ZS5hbmNob3IgIT09IG51bGwpIHtcbiAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgPT09IFwiP1wiKSB7XG4gICAgaWYgKHN0YXRlLnJlc3VsdCAhPT0gbnVsbCAmJiBzdGF0ZS5raW5kICE9PSBcInNjYWxhclwiKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCAndW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITw/PiB0YWc7IGl0IHNob3VsZCBiZSBcInNjYWxhclwiLCBub3QgXCInICsgc3RhdGUua2luZCArICdcIicpO1xuICAgIH1cbiAgICBmb3IgKHR5cGVJbmRleCA9IDAsIHR5cGVRdWFudGl0eSA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICB0eXBlMiA9IHN0YXRlLmltcGxpY2l0VHlwZXNbdHlwZUluZGV4XTtcbiAgICAgIGlmICh0eXBlMi5yZXNvbHZlKHN0YXRlLnJlc3VsdCkpIHtcbiAgICAgICAgc3RhdGUucmVzdWx0ID0gdHlwZTIuY29uc3RydWN0KHN0YXRlLnJlc3VsdCk7XG4gICAgICAgIHN0YXRlLnRhZyA9IHR5cGUyLnRhZztcbiAgICAgICAgaWYgKHN0YXRlLmFuY2hvciAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0ZS50YWcgIT09IFwiIVwiKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8IFwiZmFsbGJhY2tcIl0sIHN0YXRlLnRhZykpIHtcbiAgICAgIHR5cGUyID0gc3RhdGUudHlwZU1hcFtzdGF0ZS5raW5kIHx8IFwiZmFsbGJhY2tcIl1bc3RhdGUudGFnXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZTIgPSBudWxsO1xuICAgICAgdHlwZUxpc3QgPSBzdGF0ZS50eXBlTWFwLm11bHRpW3N0YXRlLmtpbmQgfHwgXCJmYWxsYmFja1wiXTtcbiAgICAgIGZvciAodHlwZUluZGV4ID0gMCwgdHlwZVF1YW50aXR5ID0gdHlwZUxpc3QubGVuZ3RoOyB0eXBlSW5kZXggPCB0eXBlUXVhbnRpdHk7IHR5cGVJbmRleCArPSAxKSB7XG4gICAgICAgIGlmIChzdGF0ZS50YWcuc2xpY2UoMCwgdHlwZUxpc3RbdHlwZUluZGV4XS50YWcubGVuZ3RoKSA9PT0gdHlwZUxpc3RbdHlwZUluZGV4XS50YWcpIHtcbiAgICAgICAgICB0eXBlMiA9IHR5cGVMaXN0W3R5cGVJbmRleF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0eXBlMikge1xuICAgICAgdGhyb3dFcnJvcihzdGF0ZSwgXCJ1bmtub3duIHRhZyAhPFwiICsgc3RhdGUudGFnICsgXCI+XCIpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUucmVzdWx0ICE9PSBudWxsICYmIHR5cGUyLmtpbmQgIT09IHN0YXRlLmtpbmQpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwidW5hY2NlcHRhYmxlIG5vZGUga2luZCBmb3IgITxcIiArIHN0YXRlLnRhZyArICc+IHRhZzsgaXQgc2hvdWxkIGJlIFwiJyArIHR5cGUyLmtpbmQgKyAnXCIsIG5vdCBcIicgKyBzdGF0ZS5raW5kICsgJ1wiJyk7XG4gICAgfVxuICAgIGlmICghdHlwZTIucmVzb2x2ZShzdGF0ZS5yZXN1bHQsIHN0YXRlLnRhZykpIHtcbiAgICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiY2Fubm90IHJlc29sdmUgYSBub2RlIHdpdGggITxcIiArIHN0YXRlLnRhZyArIFwiPiBleHBsaWNpdCB0YWdcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnJlc3VsdCA9IHR5cGUyLmNvbnN0cnVjdChzdGF0ZS5yZXN1bHQsIHN0YXRlLnRhZyk7XG4gICAgICBpZiAoc3RhdGUuYW5jaG9yICE9PSBudWxsKSB7XG4gICAgICAgIHN0YXRlLmFuY2hvck1hcFtzdGF0ZS5hbmNob3JdID0gc3RhdGUucmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc3RhdGUubGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICBzdGF0ZS5saXN0ZW5lcihcImNsb3NlXCIsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gc3RhdGUudGFnICE9PSBudWxsIHx8IHN0YXRlLmFuY2hvciAhPT0gbnVsbCB8fCBoYXNDb250ZW50O1xufVxuX19uYW1lKGNvbXBvc2VOb2RlLCBcImNvbXBvc2VOb2RlXCIpO1xuZnVuY3Rpb24gcmVhZERvY3VtZW50KHN0YXRlKSB7XG4gIHZhciBkb2N1bWVudFN0YXJ0ID0gc3RhdGUucG9zaXRpb24sIF9wb3NpdGlvbiwgZGlyZWN0aXZlTmFtZSwgZGlyZWN0aXZlQXJncywgaGFzRGlyZWN0aXZlcyA9IGZhbHNlLCBjaDtcbiAgc3RhdGUudmVyc2lvbiA9IG51bGw7XG4gIHN0YXRlLmNoZWNrTGluZUJyZWFrcyA9IHN0YXRlLmxlZ2FjeTtcbiAgc3RhdGUudGFnTWFwID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0YXRlLmFuY2hvck1hcCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB3aGlsZSAoKGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikpICE9PSAwKSB7XG4gICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbik7XG4gICAgaWYgKHN0YXRlLmxpbmVJbmRlbnQgPiAwIHx8IGNoICE9PSAzNykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGhhc0RpcmVjdGl2ZXMgPSB0cnVlO1xuICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICBfcG9zaXRpb24gPSBzdGF0ZS5wb3NpdGlvbjtcbiAgICB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX1dTX09SX0VPTChjaCkpIHtcbiAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICB9XG4gICAgZGlyZWN0aXZlTmFtZSA9IHN0YXRlLmlucHV0LnNsaWNlKF9wb3NpdGlvbiwgc3RhdGUucG9zaXRpb24pO1xuICAgIGRpcmVjdGl2ZUFyZ3MgPSBbXTtcbiAgICBpZiAoZGlyZWN0aXZlTmFtZS5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvd0Vycm9yKHN0YXRlLCBcImRpcmVjdGl2ZSBuYW1lIG11c3Qgbm90IGJlIGxlc3MgdGhhbiBvbmUgY2hhcmFjdGVyIGluIGxlbmd0aFwiKTtcbiAgICB9XG4gICAgd2hpbGUgKGNoICE9PSAwKSB7XG4gICAgICB3aGlsZSAoaXNfV0hJVEVfU1BBQ0UoY2gpKSB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaCA9PT0gMzUpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgICAgfSB3aGlsZSAoY2ggIT09IDAgJiYgIWlzX0VPTChjaCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChpc19FT0woY2gpKSBicmVhaztcbiAgICAgIF9wb3NpdGlvbiA9IHN0YXRlLnBvc2l0aW9uO1xuICAgICAgd2hpbGUgKGNoICE9PSAwICYmICFpc19XU19PUl9FT0woY2gpKSB7XG4gICAgICAgIGNoID0gc3RhdGUuaW5wdXQuY2hhckNvZGVBdCgrK3N0YXRlLnBvc2l0aW9uKTtcbiAgICAgIH1cbiAgICAgIGRpcmVjdGl2ZUFyZ3MucHVzaChzdGF0ZS5pbnB1dC5zbGljZShfcG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uKSk7XG4gICAgfVxuICAgIGlmIChjaCAhPT0gMCkgcmVhZExpbmVCcmVhayhzdGF0ZSk7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eSQxLmNhbGwoZGlyZWN0aXZlSGFuZGxlcnMsIGRpcmVjdGl2ZU5hbWUpKSB7XG4gICAgICBkaXJlY3RpdmVIYW5kbGVyc1tkaXJlY3RpdmVOYW1lXShzdGF0ZSwgZGlyZWN0aXZlTmFtZSwgZGlyZWN0aXZlQXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93V2FybmluZyhzdGF0ZSwgJ3Vua25vd24gZG9jdW1lbnQgZGlyZWN0aXZlIFwiJyArIGRpcmVjdGl2ZU5hbWUgKyAnXCInKTtcbiAgICB9XG4gIH1cbiAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICBpZiAoc3RhdGUubGluZUluZGVudCA9PT0gMCAmJiBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gNDUgJiYgc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbiArIDEpID09PSA0NSAmJiBzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uICsgMikgPT09IDQ1KSB7XG4gICAgc3RhdGUucG9zaXRpb24gKz0gMztcbiAgICBza2lwU2VwYXJhdGlvblNwYWNlKHN0YXRlLCB0cnVlLCAtMSk7XG4gIH0gZWxzZSBpZiAoaGFzRGlyZWN0aXZlcykge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiZGlyZWN0aXZlcyBlbmQgbWFyayBpcyBleHBlY3RlZFwiKTtcbiAgfVxuICBjb21wb3NlTm9kZShzdGF0ZSwgc3RhdGUubGluZUluZGVudCAtIDEsIENPTlRFWFRfQkxPQ0tfT1VULCBmYWxzZSwgdHJ1ZSk7XG4gIHNraXBTZXBhcmF0aW9uU3BhY2Uoc3RhdGUsIHRydWUsIC0xKTtcbiAgaWYgKHN0YXRlLmNoZWNrTGluZUJyZWFrcyAmJiBQQVRURVJOX05PTl9BU0NJSV9MSU5FX0JSRUFLUy50ZXN0KHN0YXRlLmlucHV0LnNsaWNlKGRvY3VtZW50U3RhcnQsIHN0YXRlLnBvc2l0aW9uKSkpIHtcbiAgICB0aHJvd1dhcm5pbmcoc3RhdGUsIFwibm9uLUFTQ0lJIGxpbmUgYnJlYWtzIGFyZSBpbnRlcnByZXRlZCBhcyBjb250ZW50XCIpO1xuICB9XG4gIHN0YXRlLmRvY3VtZW50cy5wdXNoKHN0YXRlLnJlc3VsdCk7XG4gIGlmIChzdGF0ZS5wb3NpdGlvbiA9PT0gc3RhdGUubGluZVN0YXJ0ICYmIHRlc3REb2N1bWVudFNlcGFyYXRvcihzdGF0ZSkpIHtcbiAgICBpZiAoc3RhdGUuaW5wdXQuY2hhckNvZGVBdChzdGF0ZS5wb3NpdGlvbikgPT09IDQ2KSB7XG4gICAgICBzdGF0ZS5wb3NpdGlvbiArPSAzO1xuICAgICAgc2tpcFNlcGFyYXRpb25TcGFjZShzdGF0ZSwgdHJ1ZSwgLTEpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN0YXRlLnBvc2l0aW9uIDwgc3RhdGUubGVuZ3RoIC0gMSkge1xuICAgIHRocm93RXJyb3Ioc3RhdGUsIFwiZW5kIG9mIHRoZSBzdHJlYW0gb3IgYSBkb2N1bWVudCBzZXBhcmF0b3IgaXMgZXhwZWN0ZWRcIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5fX25hbWUocmVhZERvY3VtZW50LCBcInJlYWREb2N1bWVudFwiKTtcbmZ1bmN0aW9uIGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaW5wdXQgPSBTdHJpbmcoaW5wdXQpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKGlucHV0Lmxlbmd0aCAhPT0gMCkge1xuICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAxMCAmJiBpbnB1dC5jaGFyQ29kZUF0KGlucHV0Lmxlbmd0aCAtIDEpICE9PSAxMykge1xuICAgICAgaW5wdXQgKz0gXCJcXG5cIjtcbiAgICB9XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQoMCkgPT09IDY1Mjc5KSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnNsaWNlKDEpO1xuICAgIH1cbiAgfVxuICB2YXIgc3RhdGUgPSBuZXcgU3RhdGUkMShpbnB1dCwgb3B0aW9ucyk7XG4gIHZhciBudWxscG9zID0gaW5wdXQuaW5kZXhPZihcIlxcMFwiKTtcbiAgaWYgKG51bGxwb3MgIT09IC0xKSB7XG4gICAgc3RhdGUucG9zaXRpb24gPSBudWxscG9zO1xuICAgIHRocm93RXJyb3Ioc3RhdGUsIFwibnVsbCBieXRlIGlzIG5vdCBhbGxvd2VkIGluIGlucHV0XCIpO1xuICB9XG4gIHN0YXRlLmlucHV0ICs9IFwiXFwwXCI7XG4gIHdoaWxlIChzdGF0ZS5pbnB1dC5jaGFyQ29kZUF0KHN0YXRlLnBvc2l0aW9uKSA9PT0gMzIpIHtcbiAgICBzdGF0ZS5saW5lSW5kZW50ICs9IDE7XG4gICAgc3RhdGUucG9zaXRpb24gKz0gMTtcbiAgfVxuICB3aGlsZSAoc3RhdGUucG9zaXRpb24gPCBzdGF0ZS5sZW5ndGggLSAxKSB7XG4gICAgcmVhZERvY3VtZW50KHN0YXRlKTtcbiAgfVxuICByZXR1cm4gc3RhdGUuZG9jdW1lbnRzO1xufVxuX19uYW1lKGxvYWREb2N1bWVudHMsIFwibG9hZERvY3VtZW50c1wiKTtcbmZ1bmN0aW9uIGxvYWRBbGwkMShpbnB1dCwgaXRlcmF0b3IsIG9wdGlvbnMpIHtcbiAgaWYgKGl0ZXJhdG9yICE9PSBudWxsICYmIHR5cGVvZiBpdGVyYXRvciA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG9wdGlvbnMgPSBpdGVyYXRvcjtcbiAgICBpdGVyYXRvciA9IG51bGw7XG4gIH1cbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRzO1xuICB9XG4gIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZG9jdW1lbnRzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBpdGVyYXRvcihkb2N1bWVudHNbaW5kZXhdKTtcbiAgfVxufVxuX19uYW1lKGxvYWRBbGwkMSwgXCJsb2FkQWxsJDFcIik7XG5mdW5jdGlvbiBsb2FkJDEoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIGRvY3VtZW50cyA9IGxvYWREb2N1bWVudHMoaW5wdXQsIG9wdGlvbnMpO1xuICBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBkb2N1bWVudHNbMF07XG4gIH1cbiAgdGhyb3cgbmV3IGV4Y2VwdGlvbihcImV4cGVjdGVkIGEgc2luZ2xlIGRvY3VtZW50IGluIHRoZSBzdHJlYW0sIGJ1dCBmb3VuZCBtb3JlXCIpO1xufVxuX19uYW1lKGxvYWQkMSwgXCJsb2FkJDFcIik7XG52YXIgbG9hZEFsbF8xID0gbG9hZEFsbCQxO1xudmFyIGxvYWRfMSA9IGxvYWQkMTtcbnZhciBsb2FkZXIgPSB7XG4gIGxvYWRBbGw6IGxvYWRBbGxfMSxcbiAgbG9hZDogbG9hZF8xXG59O1xudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBDSEFSX0JPTSA9IDY1Mjc5O1xudmFyIENIQVJfVEFCID0gOTtcbnZhciBDSEFSX0xJTkVfRkVFRCA9IDEwO1xudmFyIENIQVJfQ0FSUklBR0VfUkVUVVJOID0gMTM7XG52YXIgQ0hBUl9TUEFDRSA9IDMyO1xudmFyIENIQVJfRVhDTEFNQVRJT04gPSAzMztcbnZhciBDSEFSX0RPVUJMRV9RVU9URSA9IDM0O1xudmFyIENIQVJfU0hBUlAgPSAzNTtcbnZhciBDSEFSX1BFUkNFTlQgPSAzNztcbnZhciBDSEFSX0FNUEVSU0FORCA9IDM4O1xudmFyIENIQVJfU0lOR0xFX1FVT1RFID0gMzk7XG52YXIgQ0hBUl9BU1RFUklTSyA9IDQyO1xudmFyIENIQVJfQ09NTUEgPSA0NDtcbnZhciBDSEFSX01JTlVTID0gNDU7XG52YXIgQ0hBUl9DT0xPTiA9IDU4O1xudmFyIENIQVJfRVFVQUxTID0gNjE7XG52YXIgQ0hBUl9HUkVBVEVSX1RIQU4gPSA2MjtcbnZhciBDSEFSX1FVRVNUSU9OID0gNjM7XG52YXIgQ0hBUl9DT01NRVJDSUFMX0FUID0gNjQ7XG52YXIgQ0hBUl9MRUZUX1NRVUFSRV9CUkFDS0VUID0gOTE7XG52YXIgQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCA9IDkzO1xudmFyIENIQVJfR1JBVkVfQUNDRU5UID0gOTY7XG52YXIgQ0hBUl9MRUZUX0NVUkxZX0JSQUNLRVQgPSAxMjM7XG52YXIgQ0hBUl9WRVJUSUNBTF9MSU5FID0gMTI0O1xudmFyIENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVCA9IDEyNTtcbnZhciBFU0NBUEVfU0VRVUVOQ0VTID0ge307XG5FU0NBUEVfU0VRVUVOQ0VTWzBdID0gXCJcXFxcMFwiO1xuRVNDQVBFX1NFUVVFTkNFU1s3XSA9IFwiXFxcXGFcIjtcbkVTQ0FQRV9TRVFVRU5DRVNbOF0gPSBcIlxcXFxiXCI7XG5FU0NBUEVfU0VRVUVOQ0VTWzldID0gXCJcXFxcdFwiO1xuRVNDQVBFX1NFUVVFTkNFU1sxMF0gPSBcIlxcXFxuXCI7XG5FU0NBUEVfU0VRVUVOQ0VTWzExXSA9IFwiXFxcXHZcIjtcbkVTQ0FQRV9TRVFVRU5DRVNbMTJdID0gXCJcXFxcZlwiO1xuRVNDQVBFX1NFUVVFTkNFU1sxM10gPSBcIlxcXFxyXCI7XG5FU0NBUEVfU0VRVUVOQ0VTWzI3XSA9IFwiXFxcXGVcIjtcbkVTQ0FQRV9TRVFVRU5DRVNbMzRdID0gJ1xcXFxcIic7XG5FU0NBUEVfU0VRVUVOQ0VTWzkyXSA9IFwiXFxcXFxcXFxcIjtcbkVTQ0FQRV9TRVFVRU5DRVNbMTMzXSA9IFwiXFxcXE5cIjtcbkVTQ0FQRV9TRVFVRU5DRVNbMTYwXSA9IFwiXFxcXF9cIjtcbkVTQ0FQRV9TRVFVRU5DRVNbODIzMl0gPSBcIlxcXFxMXCI7XG5FU0NBUEVfU0VRVUVOQ0VTWzgyMzNdID0gXCJcXFxcUFwiO1xudmFyIERFUFJFQ0FURURfQk9PTEVBTlNfU1lOVEFYID0gW1xuICBcInlcIixcbiAgXCJZXCIsXG4gIFwieWVzXCIsXG4gIFwiWWVzXCIsXG4gIFwiWUVTXCIsXG4gIFwib25cIixcbiAgXCJPblwiLFxuICBcIk9OXCIsXG4gIFwiblwiLFxuICBcIk5cIixcbiAgXCJub1wiLFxuICBcIk5vXCIsXG4gIFwiTk9cIixcbiAgXCJvZmZcIixcbiAgXCJPZmZcIixcbiAgXCJPRkZcIlxuXTtcbnZhciBERVBSRUNBVEVEX0JBU0U2MF9TWU5UQVggPSAvXlstK10/WzAtOV9dKyg/OjpbMC05X10rKSsoPzpcXC5bMC05X10qKT8kLztcbmZ1bmN0aW9uIGNvbXBpbGVTdHlsZU1hcChzY2hlbWEyLCBtYXAyKSB7XG4gIHZhciByZXN1bHQsIGtleXMsIGluZGV4LCBsZW5ndGgsIHRhZywgc3R5bGUsIHR5cGUyO1xuICBpZiAobWFwMiA9PT0gbnVsbCkgcmV0dXJuIHt9O1xuICByZXN1bHQgPSB7fTtcbiAga2V5cyA9IE9iamVjdC5rZXlzKG1hcDIpO1xuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdGFnID0ga2V5c1tpbmRleF07XG4gICAgc3R5bGUgPSBTdHJpbmcobWFwMlt0YWddKTtcbiAgICBpZiAodGFnLnNsaWNlKDAsIDIpID09PSBcIiEhXCIpIHtcbiAgICAgIHRhZyA9IFwidGFnOnlhbWwub3JnLDIwMDI6XCIgKyB0YWcuc2xpY2UoMik7XG4gICAgfVxuICAgIHR5cGUyID0gc2NoZW1hMi5jb21waWxlZFR5cGVNYXBbXCJmYWxsYmFja1wiXVt0YWddO1xuICAgIGlmICh0eXBlMiAmJiBfaGFzT3duUHJvcGVydHkuY2FsbCh0eXBlMi5zdHlsZUFsaWFzZXMsIHN0eWxlKSkge1xuICAgICAgc3R5bGUgPSB0eXBlMi5zdHlsZUFsaWFzZXNbc3R5bGVdO1xuICAgIH1cbiAgICByZXN1bHRbdGFnXSA9IHN0eWxlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5fX25hbWUoY29tcGlsZVN0eWxlTWFwLCBcImNvbXBpbGVTdHlsZU1hcFwiKTtcbmZ1bmN0aW9uIGVuY29kZUhleChjaGFyYWN0ZXIpIHtcbiAgdmFyIHN0cmluZywgaGFuZGxlLCBsZW5ndGg7XG4gIHN0cmluZyA9IGNoYXJhY3Rlci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgaWYgKGNoYXJhY3RlciA8PSAyNTUpIHtcbiAgICBoYW5kbGUgPSBcInhcIjtcbiAgICBsZW5ndGggPSAyO1xuICB9IGVsc2UgaWYgKGNoYXJhY3RlciA8PSA2NTUzNSkge1xuICAgIGhhbmRsZSA9IFwidVwiO1xuICAgIGxlbmd0aCA9IDQ7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyIDw9IDQyOTQ5NjcyOTUpIHtcbiAgICBoYW5kbGUgPSBcIlVcIjtcbiAgICBsZW5ndGggPSA4O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBleGNlcHRpb24oXCJjb2RlIHBvaW50IHdpdGhpbiBhIHN0cmluZyBtYXkgbm90IGJlIGdyZWF0ZXIgdGhhbiAweEZGRkZGRkZGXCIpO1xuICB9XG4gIHJldHVybiBcIlxcXFxcIiArIGhhbmRsZSArIGNvbW1vbi5yZXBlYXQoXCIwXCIsIGxlbmd0aCAtIHN0cmluZy5sZW5ndGgpICsgc3RyaW5nO1xufVxuX19uYW1lKGVuY29kZUhleCwgXCJlbmNvZGVIZXhcIik7XG52YXIgUVVPVElOR19UWVBFX1NJTkdMRSA9IDE7XG52YXIgUVVPVElOR19UWVBFX0RPVUJMRSA9IDI7XG5mdW5jdGlvbiBTdGF0ZShvcHRpb25zKSB7XG4gIHRoaXMuc2NoZW1hID0gb3B0aW9uc1tcInNjaGVtYVwiXSB8fCBfZGVmYXVsdDtcbiAgdGhpcy5pbmRlbnQgPSBNYXRoLm1heCgxLCBvcHRpb25zW1wiaW5kZW50XCJdIHx8IDIpO1xuICB0aGlzLm5vQXJyYXlJbmRlbnQgPSBvcHRpb25zW1wibm9BcnJheUluZGVudFwiXSB8fCBmYWxzZTtcbiAgdGhpcy5za2lwSW52YWxpZCA9IG9wdGlvbnNbXCJza2lwSW52YWxpZFwiXSB8fCBmYWxzZTtcbiAgdGhpcy5mbG93TGV2ZWwgPSBjb21tb24uaXNOb3RoaW5nKG9wdGlvbnNbXCJmbG93TGV2ZWxcIl0pID8gLTEgOiBvcHRpb25zW1wiZmxvd0xldmVsXCJdO1xuICB0aGlzLnN0eWxlTWFwID0gY29tcGlsZVN0eWxlTWFwKHRoaXMuc2NoZW1hLCBvcHRpb25zW1wic3R5bGVzXCJdIHx8IG51bGwpO1xuICB0aGlzLnNvcnRLZXlzID0gb3B0aW9uc1tcInNvcnRLZXlzXCJdIHx8IGZhbHNlO1xuICB0aGlzLmxpbmVXaWR0aCA9IG9wdGlvbnNbXCJsaW5lV2lkdGhcIl0gfHwgODA7XG4gIHRoaXMubm9SZWZzID0gb3B0aW9uc1tcIm5vUmVmc1wiXSB8fCBmYWxzZTtcbiAgdGhpcy5ub0NvbXBhdE1vZGUgPSBvcHRpb25zW1wibm9Db21wYXRNb2RlXCJdIHx8IGZhbHNlO1xuICB0aGlzLmNvbmRlbnNlRmxvdyA9IG9wdGlvbnNbXCJjb25kZW5zZUZsb3dcIl0gfHwgZmFsc2U7XG4gIHRoaXMucXVvdGluZ1R5cGUgPSBvcHRpb25zW1wicXVvdGluZ1R5cGVcIl0gPT09ICdcIicgPyBRVU9USU5HX1RZUEVfRE9VQkxFIDogUVVPVElOR19UWVBFX1NJTkdMRTtcbiAgdGhpcy5mb3JjZVF1b3RlcyA9IG9wdGlvbnNbXCJmb3JjZVF1b3Rlc1wiXSB8fCBmYWxzZTtcbiAgdGhpcy5yZXBsYWNlciA9IHR5cGVvZiBvcHRpb25zW1wicmVwbGFjZXJcIl0gPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnNbXCJyZXBsYWNlclwiXSA6IG51bGw7XG4gIHRoaXMuaW1wbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkSW1wbGljaXQ7XG4gIHRoaXMuZXhwbGljaXRUeXBlcyA9IHRoaXMuc2NoZW1hLmNvbXBpbGVkRXhwbGljaXQ7XG4gIHRoaXMudGFnID0gbnVsbDtcbiAgdGhpcy5yZXN1bHQgPSBcIlwiO1xuICB0aGlzLmR1cGxpY2F0ZXMgPSBbXTtcbiAgdGhpcy51c2VkRHVwbGljYXRlcyA9IG51bGw7XG59XG5fX25hbWUoU3RhdGUsIFwiU3RhdGVcIik7XG5mdW5jdGlvbiBpbmRlbnRTdHJpbmcoc3RyaW5nLCBzcGFjZXMpIHtcbiAgdmFyIGluZCA9IGNvbW1vbi5yZXBlYXQoXCIgXCIsIHNwYWNlcyksIHBvc2l0aW9uID0gMCwgbmV4dCA9IC0xLCByZXN1bHQgPSBcIlwiLCBsaW5lLCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICBuZXh0ID0gc3RyaW5nLmluZGV4T2YoXCJcXG5cIiwgcG9zaXRpb24pO1xuICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbik7XG4gICAgICBwb3NpdGlvbiA9IGxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluZSA9IHN0cmluZy5zbGljZShwb3NpdGlvbiwgbmV4dCArIDEpO1xuICAgICAgcG9zaXRpb24gPSBuZXh0ICsgMTtcbiAgICB9XG4gICAgaWYgKGxpbmUubGVuZ3RoICYmIGxpbmUgIT09IFwiXFxuXCIpIHJlc3VsdCArPSBpbmQ7XG4gICAgcmVzdWx0ICs9IGxpbmU7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbl9fbmFtZShpbmRlbnRTdHJpbmcsIFwiaW5kZW50U3RyaW5nXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpIHtcbiAgcmV0dXJuIFwiXFxuXCIgKyBjb21tb24ucmVwZWF0KFwiIFwiLCBzdGF0ZS5pbmRlbnQgKiBsZXZlbCk7XG59XG5fX25hbWUoZ2VuZXJhdGVOZXh0TGluZSwgXCJnZW5lcmF0ZU5leHRMaW5lXCIpO1xuZnVuY3Rpb24gdGVzdEltcGxpY2l0UmVzb2x2aW5nKHN0YXRlLCBzdHIyKSB7XG4gIHZhciBpbmRleCwgbGVuZ3RoLCB0eXBlMjtcbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHN0YXRlLmltcGxpY2l0VHlwZXMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHR5cGUyID0gc3RhdGUuaW1wbGljaXRUeXBlc1tpbmRleF07XG4gICAgaWYgKHR5cGUyLnJlc29sdmUoc3RyMikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5fX25hbWUodGVzdEltcGxpY2l0UmVzb2x2aW5nLCBcInRlc3RJbXBsaWNpdFJlc29sdmluZ1wiKTtcbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gIHJldHVybiBjID09PSBDSEFSX1NQQUNFIHx8IGMgPT09IENIQVJfVEFCO1xufVxuX19uYW1lKGlzV2hpdGVzcGFjZSwgXCJpc1doaXRlc3BhY2VcIik7XG5mdW5jdGlvbiBpc1ByaW50YWJsZShjKSB7XG4gIHJldHVybiAzMiA8PSBjICYmIGMgPD0gMTI2IHx8IDE2MSA8PSBjICYmIGMgPD0gNTUyOTUgJiYgYyAhPT0gODIzMiAmJiBjICE9PSA4MjMzIHx8IDU3MzQ0IDw9IGMgJiYgYyA8PSA2NTUzMyAmJiBjICE9PSBDSEFSX0JPTSB8fCA2NTUzNiA8PSBjICYmIGMgPD0gMTExNDExMTtcbn1cbl9fbmFtZShpc1ByaW50YWJsZSwgXCJpc1ByaW50YWJsZVwiKTtcbmZ1bmN0aW9uIGlzTnNDaGFyT3JXaGl0ZXNwYWNlKGMpIHtcbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IENIQVJfQk9NICYmIGMgIT09IENIQVJfQ0FSUklBR0VfUkVUVVJOICYmIGMgIT09IENIQVJfTElORV9GRUVEO1xufVxuX19uYW1lKGlzTnNDaGFyT3JXaGl0ZXNwYWNlLCBcImlzTnNDaGFyT3JXaGl0ZXNwYWNlXCIpO1xuZnVuY3Rpb24gaXNQbGFpblNhZmUoYywgcHJldiwgaW5ibG9jaykge1xuICB2YXIgY0lzTnNDaGFyT3JXaGl0ZXNwYWNlID0gaXNOc0NoYXJPcldoaXRlc3BhY2UoYyk7XG4gIHZhciBjSXNOc0NoYXIgPSBjSXNOc0NoYXJPcldoaXRlc3BhY2UgJiYgIWlzV2hpdGVzcGFjZShjKTtcbiAgcmV0dXJuIChcbiAgICAvLyBucy1wbGFpbi1zYWZlXG4gICAgKGluYmxvY2sgPyAoXG4gICAgICAvLyBjID0gZmxvdy1pblxuICAgICAgY0lzTnNDaGFyT3JXaGl0ZXNwYWNlXG4gICAgKSA6IGNJc05zQ2hhck9yV2hpdGVzcGFjZSAmJiBjICE9PSBDSEFSX0NPTU1BICYmIGMgIT09IENIQVJfTEVGVF9TUVVBUkVfQlJBQ0tFVCAmJiBjICE9PSBDSEFSX1JJR0hUX1NRVUFSRV9CUkFDS0VUICYmIGMgIT09IENIQVJfTEVGVF9DVVJMWV9CUkFDS0VUICYmIGMgIT09IENIQVJfUklHSFRfQ1VSTFlfQlJBQ0tFVCkgJiYgYyAhPT0gQ0hBUl9TSEFSUCAmJiAhKHByZXYgPT09IENIQVJfQ09MT04gJiYgIWNJc05zQ2hhcikgfHwgaXNOc0NoYXJPcldoaXRlc3BhY2UocHJldikgJiYgIWlzV2hpdGVzcGFjZShwcmV2KSAmJiBjID09PSBDSEFSX1NIQVJQIHx8IHByZXYgPT09IENIQVJfQ09MT04gJiYgY0lzTnNDaGFyXG4gICk7XG59XG5fX25hbWUoaXNQbGFpblNhZmUsIFwiaXNQbGFpblNhZmVcIik7XG5mdW5jdGlvbiBpc1BsYWluU2FmZUZpcnN0KGMpIHtcbiAgcmV0dXJuIGlzUHJpbnRhYmxlKGMpICYmIGMgIT09IENIQVJfQk9NICYmICFpc1doaXRlc3BhY2UoYykgJiYgYyAhPT0gQ0hBUl9NSU5VUyAmJiBjICE9PSBDSEFSX1FVRVNUSU9OICYmIGMgIT09IENIQVJfQ09MT04gJiYgYyAhPT0gQ0hBUl9DT01NQSAmJiBjICE9PSBDSEFSX0xFRlRfU1FVQVJFX0JSQUNLRVQgJiYgYyAhPT0gQ0hBUl9SSUdIVF9TUVVBUkVfQlJBQ0tFVCAmJiBjICE9PSBDSEFSX0xFRlRfQ1VSTFlfQlJBQ0tFVCAmJiBjICE9PSBDSEFSX1JJR0hUX0NVUkxZX0JSQUNLRVQgJiYgYyAhPT0gQ0hBUl9TSEFSUCAmJiBjICE9PSBDSEFSX0FNUEVSU0FORCAmJiBjICE9PSBDSEFSX0FTVEVSSVNLICYmIGMgIT09IENIQVJfRVhDTEFNQVRJT04gJiYgYyAhPT0gQ0hBUl9WRVJUSUNBTF9MSU5FICYmIGMgIT09IENIQVJfRVFVQUxTICYmIGMgIT09IENIQVJfR1JFQVRFUl9USEFOICYmIGMgIT09IENIQVJfU0lOR0xFX1FVT1RFICYmIGMgIT09IENIQVJfRE9VQkxFX1FVT1RFICYmIGMgIT09IENIQVJfUEVSQ0VOVCAmJiBjICE9PSBDSEFSX0NPTU1FUkNJQUxfQVQgJiYgYyAhPT0gQ0hBUl9HUkFWRV9BQ0NFTlQ7XG59XG5fX25hbWUoaXNQbGFpblNhZmVGaXJzdCwgXCJpc1BsYWluU2FmZUZpcnN0XCIpO1xuZnVuY3Rpb24gaXNQbGFpblNhZmVMYXN0KGMpIHtcbiAgcmV0dXJuICFpc1doaXRlc3BhY2UoYykgJiYgYyAhPT0gQ0hBUl9DT0xPTjtcbn1cbl9fbmFtZShpc1BsYWluU2FmZUxhc3QsIFwiaXNQbGFpblNhZmVMYXN0XCIpO1xuZnVuY3Rpb24gY29kZVBvaW50QXQoc3RyaW5nLCBwb3MpIHtcbiAgdmFyIGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQocG9zKSwgc2Vjb25kO1xuICBpZiAoZmlyc3QgPj0gNTUyOTYgJiYgZmlyc3QgPD0gNTYzMTkgJiYgcG9zICsgMSA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICBzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdChwb3MgKyAxKTtcbiAgICBpZiAoc2Vjb25kID49IDU2MzIwICYmIHNlY29uZCA8PSA1NzM0Mykge1xuICAgICAgcmV0dXJuIChmaXJzdCAtIDU1Mjk2KSAqIDEwMjQgKyBzZWNvbmQgLSA1NjMyMCArIDY1NTM2O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5fX25hbWUoY29kZVBvaW50QXQsIFwiY29kZVBvaW50QXRcIik7XG5mdW5jdGlvbiBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykge1xuICB2YXIgbGVhZGluZ1NwYWNlUmUgPSAvXlxcbiogLztcbiAgcmV0dXJuIGxlYWRpbmdTcGFjZVJlLnRlc3Qoc3RyaW5nKTtcbn1cbl9fbmFtZShuZWVkSW5kZW50SW5kaWNhdG9yLCBcIm5lZWRJbmRlbnRJbmRpY2F0b3JcIik7XG52YXIgU1RZTEVfUExBSU4gPSAxO1xudmFyIFNUWUxFX1NJTkdMRSA9IDI7XG52YXIgU1RZTEVfTElURVJBTCA9IDM7XG52YXIgU1RZTEVfRk9MREVEID0gNDtcbnZhciBTVFlMRV9ET1VCTEUgPSA1O1xuZnVuY3Rpb24gY2hvb3NlU2NhbGFyU3R5bGUoc3RyaW5nLCBzaW5nbGVMaW5lT25seSwgaW5kZW50UGVyTGV2ZWwsIGxpbmVXaWR0aCwgdGVzdEFtYmlndW91c1R5cGUsIHF1b3RpbmdUeXBlLCBmb3JjZVF1b3RlcywgaW5ibG9jaykge1xuICB2YXIgaTtcbiAgdmFyIGNoYXIgPSAwO1xuICB2YXIgcHJldkNoYXIgPSBudWxsO1xuICB2YXIgaGFzTGluZUJyZWFrID0gZmFsc2U7XG4gIHZhciBoYXNGb2xkYWJsZUxpbmUgPSBmYWxzZTtcbiAgdmFyIHNob3VsZFRyYWNrV2lkdGggPSBsaW5lV2lkdGggIT09IC0xO1xuICB2YXIgcHJldmlvdXNMaW5lQnJlYWsgPSAtMTtcbiAgdmFyIHBsYWluID0gaXNQbGFpblNhZmVGaXJzdChjb2RlUG9pbnRBdChzdHJpbmcsIDApKSAmJiBpc1BsYWluU2FmZUxhc3QoY29kZVBvaW50QXQoc3RyaW5nLCBzdHJpbmcubGVuZ3RoIC0gMSkpO1xuICBpZiAoc2luZ2xlTGluZU9ubHkgfHwgZm9yY2VRdW90ZXMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgY2hhciA+PSA2NTUzNiA/IGkgKz0gMiA6IGkrKykge1xuICAgICAgY2hhciA9IGNvZGVQb2ludEF0KHN0cmluZywgaSk7XG4gICAgICBpZiAoIWlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gICAgICB9XG4gICAgICBwbGFpbiA9IHBsYWluICYmIGlzUGxhaW5TYWZlKGNoYXIsIHByZXZDaGFyLCBpbmJsb2NrKTtcbiAgICAgIHByZXZDaGFyID0gY2hhcjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGNoYXIgPj0gNjU1MzYgPyBpICs9IDIgOiBpKyspIHtcbiAgICAgIGNoYXIgPSBjb2RlUG9pbnRBdChzdHJpbmcsIGkpO1xuICAgICAgaWYgKGNoYXIgPT09IENIQVJfTElORV9GRUVEKSB7XG4gICAgICAgIGhhc0xpbmVCcmVhayA9IHRydWU7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1dpZHRoKSB7XG4gICAgICAgICAgaGFzRm9sZGFibGVMaW5lID0gaGFzRm9sZGFibGVMaW5lIHx8IC8vIEZvbGRhYmxlIGxpbmUgPSB0b28gbG9uZywgYW5kIG5vdCBtb3JlLWluZGVudGVkLlxuICAgICAgICAgIGkgLSBwcmV2aW91c0xpbmVCcmVhayAtIDEgPiBsaW5lV2lkdGggJiYgc3RyaW5nW3ByZXZpb3VzTGluZUJyZWFrICsgMV0gIT09IFwiIFwiO1xuICAgICAgICAgIHByZXZpb3VzTGluZUJyZWFrID0gaTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNQcmludGFibGUoY2hhcikpIHtcbiAgICAgICAgcmV0dXJuIFNUWUxFX0RPVUJMRTtcbiAgICAgIH1cbiAgICAgIHBsYWluID0gcGxhaW4gJiYgaXNQbGFpblNhZmUoY2hhciwgcHJldkNoYXIsIGluYmxvY2spO1xuICAgICAgcHJldkNoYXIgPSBjaGFyO1xuICAgIH1cbiAgICBoYXNGb2xkYWJsZUxpbmUgPSBoYXNGb2xkYWJsZUxpbmUgfHwgc2hvdWxkVHJhY2tXaWR0aCAmJiAoaSAtIHByZXZpb3VzTGluZUJyZWFrIC0gMSA+IGxpbmVXaWR0aCAmJiBzdHJpbmdbcHJldmlvdXNMaW5lQnJlYWsgKyAxXSAhPT0gXCIgXCIpO1xuICB9XG4gIGlmICghaGFzTGluZUJyZWFrICYmICFoYXNGb2xkYWJsZUxpbmUpIHtcbiAgICBpZiAocGxhaW4gJiYgIWZvcmNlUXVvdGVzICYmICF0ZXN0QW1iaWd1b3VzVHlwZShzdHJpbmcpKSB7XG4gICAgICByZXR1cm4gU1RZTEVfUExBSU47XG4gICAgfVxuICAgIHJldHVybiBxdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/IFNUWUxFX0RPVUJMRSA6IFNUWUxFX1NJTkdMRTtcbiAgfVxuICBpZiAoaW5kZW50UGVyTGV2ZWwgPiA5ICYmIG5lZWRJbmRlbnRJbmRpY2F0b3Ioc3RyaW5nKSkge1xuICAgIHJldHVybiBTVFlMRV9ET1VCTEU7XG4gIH1cbiAgaWYgKCFmb3JjZVF1b3Rlcykge1xuICAgIHJldHVybiBoYXNGb2xkYWJsZUxpbmUgPyBTVFlMRV9GT0xERUQgOiBTVFlMRV9MSVRFUkFMO1xuICB9XG4gIHJldHVybiBxdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/IFNUWUxFX0RPVUJMRSA6IFNUWUxFX1NJTkdMRTtcbn1cbl9fbmFtZShjaG9vc2VTY2FsYXJTdHlsZSwgXCJjaG9vc2VTY2FsYXJTdHlsZVwiKTtcbmZ1bmN0aW9uIHdyaXRlU2NhbGFyKHN0YXRlLCBzdHJpbmcsIGxldmVsLCBpc2tleSwgaW5ibG9jaykge1xuICBzdGF0ZS5kdW1wID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBzdGF0ZS5xdW90aW5nVHlwZSA9PT0gUVVPVElOR19UWVBFX0RPVUJMRSA/ICdcIlwiJyA6IFwiJydcIjtcbiAgICB9XG4gICAgaWYgKCFzdGF0ZS5ub0NvbXBhdE1vZGUpIHtcbiAgICAgIGlmIChERVBSRUNBVEVEX0JPT0xFQU5TX1NZTlRBWC5pbmRleE9mKHN0cmluZykgIT09IC0xIHx8IERFUFJFQ0FURURfQkFTRTYwX1NZTlRBWC50ZXN0KHN0cmluZykpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnF1b3RpbmdUeXBlID09PSBRVU9USU5HX1RZUEVfRE9VQkxFID8gJ1wiJyArIHN0cmluZyArICdcIicgOiBcIidcIiArIHN0cmluZyArIFwiJ1wiO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaW5kZW50ID0gc3RhdGUuaW5kZW50ICogTWF0aC5tYXgoMSwgbGV2ZWwpO1xuICAgIHZhciBsaW5lV2lkdGggPSBzdGF0ZS5saW5lV2lkdGggPT09IC0xID8gLTEgOiBNYXRoLm1heChNYXRoLm1pbihzdGF0ZS5saW5lV2lkdGgsIDQwKSwgc3RhdGUubGluZVdpZHRoIC0gaW5kZW50KTtcbiAgICB2YXIgc2luZ2xlTGluZU9ubHkgPSBpc2tleSB8fCBzdGF0ZS5mbG93TGV2ZWwgPiAtMSAmJiBsZXZlbCA+PSBzdGF0ZS5mbG93TGV2ZWw7XG4gICAgZnVuY3Rpb24gdGVzdEFtYmlndWl0eShzdHJpbmcyKSB7XG4gICAgICByZXR1cm4gdGVzdEltcGxpY2l0UmVzb2x2aW5nKHN0YXRlLCBzdHJpbmcyKTtcbiAgICB9XG4gICAgX19uYW1lKHRlc3RBbWJpZ3VpdHksIFwidGVzdEFtYmlndWl0eVwiKTtcbiAgICBzd2l0Y2ggKGNob29zZVNjYWxhclN0eWxlKFxuICAgICAgc3RyaW5nLFxuICAgICAgc2luZ2xlTGluZU9ubHksXG4gICAgICBzdGF0ZS5pbmRlbnQsXG4gICAgICBsaW5lV2lkdGgsXG4gICAgICB0ZXN0QW1iaWd1aXR5LFxuICAgICAgc3RhdGUucXVvdGluZ1R5cGUsXG4gICAgICBzdGF0ZS5mb3JjZVF1b3RlcyAmJiAhaXNrZXksXG4gICAgICBpbmJsb2NrXG4gICAgKSkge1xuICAgICAgY2FzZSBTVFlMRV9QTEFJTjpcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIGNhc2UgU1RZTEVfU0lOR0xFOlxuICAgICAgICByZXR1cm4gXCInXCIgKyBzdHJpbmcucmVwbGFjZSgvJy9nLCBcIicnXCIpICsgXCInXCI7XG4gICAgICBjYXNlIFNUWUxFX0xJVEVSQUw6XG4gICAgICAgIHJldHVybiBcInxcIiArIGJsb2NrSGVhZGVyKHN0cmluZywgc3RhdGUuaW5kZW50KSArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhzdHJpbmcsIGluZGVudCkpO1xuICAgICAgY2FzZSBTVFlMRV9GT0xERUQ6XG4gICAgICAgIHJldHVybiBcIj5cIiArIGJsb2NrSGVhZGVyKHN0cmluZywgc3RhdGUuaW5kZW50KSArIGRyb3BFbmRpbmdOZXdsaW5lKGluZGVudFN0cmluZyhmb2xkU3RyaW5nKHN0cmluZywgbGluZVdpZHRoKSwgaW5kZW50KSk7XG4gICAgICBjYXNlIFNUWUxFX0RPVUJMRTpcbiAgICAgICAgcmV0dXJuICdcIicgKyBlc2NhcGVTdHJpbmcoc3RyaW5nKSArICdcIic7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKFwiaW1wb3NzaWJsZSBlcnJvcjogaW52YWxpZCBzY2FsYXIgc3R5bGVcIik7XG4gICAgfVxuICB9KCk7XG59XG5fX25hbWUod3JpdGVTY2FsYXIsIFwid3JpdGVTY2FsYXJcIik7XG5mdW5jdGlvbiBibG9ja0hlYWRlcihzdHJpbmcsIGluZGVudFBlckxldmVsKSB7XG4gIHZhciBpbmRlbnRJbmRpY2F0b3IgPSBuZWVkSW5kZW50SW5kaWNhdG9yKHN0cmluZykgPyBTdHJpbmcoaW5kZW50UGVyTGV2ZWwpIDogXCJcIjtcbiAgdmFyIGNsaXAgPSBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDFdID09PSBcIlxcblwiO1xuICB2YXIga2VlcCA9IGNsaXAgJiYgKHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMl0gPT09IFwiXFxuXCIgfHwgc3RyaW5nID09PSBcIlxcblwiKTtcbiAgdmFyIGNob21wID0ga2VlcCA/IFwiK1wiIDogY2xpcCA/IFwiXCIgOiBcIi1cIjtcbiAgcmV0dXJuIGluZGVudEluZGljYXRvciArIGNob21wICsgXCJcXG5cIjtcbn1cbl9fbmFtZShibG9ja0hlYWRlciwgXCJibG9ja0hlYWRlclwiKTtcbmZ1bmN0aW9uIGRyb3BFbmRpbmdOZXdsaW5lKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nW3N0cmluZy5sZW5ndGggLSAxXSA9PT0gXCJcXG5cIiA/IHN0cmluZy5zbGljZSgwLCAtMSkgOiBzdHJpbmc7XG59XG5fX25hbWUoZHJvcEVuZGluZ05ld2xpbmUsIFwiZHJvcEVuZGluZ05ld2xpbmVcIik7XG5mdW5jdGlvbiBmb2xkU3RyaW5nKHN0cmluZywgd2lkdGgpIHtcbiAgdmFyIGxpbmVSZSA9IC8oXFxuKykoW15cXG5dKikvZztcbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXh0TEYgPSBzdHJpbmcuaW5kZXhPZihcIlxcblwiKTtcbiAgICBuZXh0TEYgPSBuZXh0TEYgIT09IC0xID8gbmV4dExGIDogc3RyaW5nLmxlbmd0aDtcbiAgICBsaW5lUmUubGFzdEluZGV4ID0gbmV4dExGO1xuICAgIHJldHVybiBmb2xkTGluZShzdHJpbmcuc2xpY2UoMCwgbmV4dExGKSwgd2lkdGgpO1xuICB9KCk7XG4gIHZhciBwcmV2TW9yZUluZGVudGVkID0gc3RyaW5nWzBdID09PSBcIlxcblwiIHx8IHN0cmluZ1swXSA9PT0gXCIgXCI7XG4gIHZhciBtb3JlSW5kZW50ZWQ7XG4gIHZhciBtYXRjaDtcbiAgd2hpbGUgKG1hdGNoID0gbGluZVJlLmV4ZWMoc3RyaW5nKSkge1xuICAgIHZhciBwcmVmaXggPSBtYXRjaFsxXSwgbGluZSA9IG1hdGNoWzJdO1xuICAgIG1vcmVJbmRlbnRlZCA9IGxpbmVbMF0gPT09IFwiIFwiO1xuICAgIHJlc3VsdCArPSBwcmVmaXggKyAoIXByZXZNb3JlSW5kZW50ZWQgJiYgIW1vcmVJbmRlbnRlZCAmJiBsaW5lICE9PSBcIlwiID8gXCJcXG5cIiA6IFwiXCIpICsgZm9sZExpbmUobGluZSwgd2lkdGgpO1xuICAgIHByZXZNb3JlSW5kZW50ZWQgPSBtb3JlSW5kZW50ZWQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbl9fbmFtZShmb2xkU3RyaW5nLCBcImZvbGRTdHJpbmdcIik7XG5mdW5jdGlvbiBmb2xkTGluZShsaW5lLCB3aWR0aCkge1xuICBpZiAobGluZSA9PT0gXCJcIiB8fCBsaW5lWzBdID09PSBcIiBcIikgcmV0dXJuIGxpbmU7XG4gIHZhciBicmVha1JlID0gLyBbXiBdL2c7XG4gIHZhciBtYXRjaDtcbiAgdmFyIHN0YXJ0ID0gMCwgZW5kLCBjdXJyID0gMCwgbmV4dCA9IDA7XG4gIHZhciByZXN1bHQgPSBcIlwiO1xuICB3aGlsZSAobWF0Y2ggPSBicmVha1JlLmV4ZWMobGluZSkpIHtcbiAgICBuZXh0ID0gbWF0Y2guaW5kZXg7XG4gICAgaWYgKG5leHQgLSBzdGFydCA+IHdpZHRoKSB7XG4gICAgICBlbmQgPSBjdXJyID4gc3RhcnQgPyBjdXJyIDogbmV4dDtcbiAgICAgIHJlc3VsdCArPSBcIlxcblwiICsgbGluZS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgIHN0YXJ0ID0gZW5kICsgMTtcbiAgICB9XG4gICAgY3VyciA9IG5leHQ7XG4gIH1cbiAgcmVzdWx0ICs9IFwiXFxuXCI7XG4gIGlmIChsaW5lLmxlbmd0aCAtIHN0YXJ0ID4gd2lkdGggJiYgY3VyciA+IHN0YXJ0KSB7XG4gICAgcmVzdWx0ICs9IGxpbmUuc2xpY2Uoc3RhcnQsIGN1cnIpICsgXCJcXG5cIiArIGxpbmUuc2xpY2UoY3VyciArIDEpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCArPSBsaW5lLnNsaWNlKHN0YXJ0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LnNsaWNlKDEpO1xufVxuX19uYW1lKGZvbGRMaW5lLCBcImZvbGRMaW5lXCIpO1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgdmFyIGNoYXIgPSAwO1xuICB2YXIgZXNjYXBlU2VxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGNoYXIgPj0gNjU1MzYgPyBpICs9IDIgOiBpKyspIHtcbiAgICBjaGFyID0gY29kZVBvaW50QXQoc3RyaW5nLCBpKTtcbiAgICBlc2NhcGVTZXEgPSBFU0NBUEVfU0VRVUVOQ0VTW2NoYXJdO1xuICAgIGlmICghZXNjYXBlU2VxICYmIGlzUHJpbnRhYmxlKGNoYXIpKSB7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nW2ldO1xuICAgICAgaWYgKGNoYXIgPj0gNjU1MzYpIHJlc3VsdCArPSBzdHJpbmdbaSArIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gZXNjYXBlU2VxIHx8IGVuY29kZUhleChjaGFyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbl9fbmFtZShlc2NhcGVTdHJpbmcsIFwiZXNjYXBlU3RyaW5nXCIpO1xuZnVuY3Rpb24gd3JpdGVGbG93U2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSBcIlwiLCBfdGFnID0gc3RhdGUudGFnLCBpbmRleCwgbGVuZ3RoLCB2YWx1ZTtcbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdmFsdWUgPSBvYmplY3RbaW5kZXhdO1xuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgdmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgU3RyaW5nKGluZGV4KSwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAod3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgdmFsdWUsIGZhbHNlLCBmYWxzZSkgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiICYmIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwsIG51bGwsIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgIGlmIChfcmVzdWx0ICE9PSBcIlwiKSBfcmVzdWx0ICs9IFwiLFwiICsgKCFzdGF0ZS5jb25kZW5zZUZsb3cgPyBcIiBcIiA6IFwiXCIpO1xuICAgICAgX3Jlc3VsdCArPSBzdGF0ZS5kdW1wO1xuICAgIH1cbiAgfVxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gXCJbXCIgKyBfcmVzdWx0ICsgXCJdXCI7XG59XG5fX25hbWUod3JpdGVGbG93U2VxdWVuY2UsIFwid3JpdGVGbG93U2VxdWVuY2VcIik7XG5mdW5jdGlvbiB3cml0ZUJsb2NrU2VxdWVuY2Uoc3RhdGUsIGxldmVsLCBvYmplY3QsIGNvbXBhY3QpIHtcbiAgdmFyIF9yZXN1bHQgPSBcIlwiLCBfdGFnID0gc3RhdGUudGFnLCBpbmRleCwgbGVuZ3RoLCB2YWx1ZTtcbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdmFsdWUgPSBvYmplY3RbaW5kZXhdO1xuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgdmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgU3RyaW5nKGluZGV4KSwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAod3JpdGVOb2RlKHN0YXRlLCBsZXZlbCArIDEsIHZhbHVlLCB0cnVlLCB0cnVlLCBmYWxzZSwgdHJ1ZSkgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiICYmIHdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBudWxsLCB0cnVlLCB0cnVlLCBmYWxzZSwgdHJ1ZSkpIHtcbiAgICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSBcIlwiKSB7XG4gICAgICAgIF9yZXN1bHQgKz0gZ2VuZXJhdGVOZXh0TGluZShzdGF0ZSwgbGV2ZWwpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBfcmVzdWx0ICs9IFwiLVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3Jlc3VsdCArPSBcIi0gXCI7XG4gICAgICB9XG4gICAgICBfcmVzdWx0ICs9IHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG4gIHN0YXRlLnRhZyA9IF90YWc7XG4gIHN0YXRlLmR1bXAgPSBfcmVzdWx0IHx8IFwiW11cIjtcbn1cbl9fbmFtZSh3cml0ZUJsb2NrU2VxdWVuY2UsIFwid3JpdGVCbG9ja1NlcXVlbmNlXCIpO1xuZnVuY3Rpb24gd3JpdGVGbG93TWFwcGluZyhzdGF0ZSwgbGV2ZWwsIG9iamVjdCkge1xuICB2YXIgX3Jlc3VsdCA9IFwiXCIsIF90YWcgPSBzdGF0ZS50YWcsIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpLCBpbmRleCwgbGVuZ3RoLCBvYmplY3RLZXksIG9iamVjdFZhbHVlLCBwYWlyQnVmZmVyO1xuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpckJ1ZmZlciA9IFwiXCI7XG4gICAgaWYgKF9yZXN1bHQgIT09IFwiXCIpIHBhaXJCdWZmZXIgKz0gXCIsIFwiO1xuICAgIGlmIChzdGF0ZS5jb25kZW5zZUZsb3cpIHBhaXJCdWZmZXIgKz0gJ1wiJztcbiAgICBvYmplY3RLZXkgPSBvYmplY3RLZXlMaXN0W2luZGV4XTtcbiAgICBvYmplY3RWYWx1ZSA9IG9iamVjdFtvYmplY3RLZXldO1xuICAgIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgICAgb2JqZWN0VmFsdWUgPSBzdGF0ZS5yZXBsYWNlci5jYWxsKG9iamVjdCwgb2JqZWN0S2V5LCBvYmplY3RWYWx1ZSk7XG4gICAgfVxuICAgIGlmICghd3JpdGVOb2RlKHN0YXRlLCBsZXZlbCwgb2JqZWN0S2V5LCBmYWxzZSwgZmFsc2UpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmR1bXAubGVuZ3RoID4gMTAyNCkgcGFpckJ1ZmZlciArPSBcIj8gXCI7XG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wICsgKHN0YXRlLmNvbmRlbnNlRmxvdyA/ICdcIicgOiBcIlwiKSArIFwiOlwiICsgKHN0YXRlLmNvbmRlbnNlRmxvdyA/IFwiXCIgOiBcIiBcIik7XG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3RWYWx1ZSwgZmFsc2UsIGZhbHNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcbiAgICBfcmVzdWx0ICs9IHBhaXJCdWZmZXI7XG4gIH1cbiAgc3RhdGUudGFnID0gX3RhZztcbiAgc3RhdGUuZHVtcCA9IFwie1wiICsgX3Jlc3VsdCArIFwifVwiO1xufVxuX19uYW1lKHdyaXRlRmxvd01hcHBpbmcsIFwid3JpdGVGbG93TWFwcGluZ1wiKTtcbmZ1bmN0aW9uIHdyaXRlQmxvY2tNYXBwaW5nKHN0YXRlLCBsZXZlbCwgb2JqZWN0LCBjb21wYWN0KSB7XG4gIHZhciBfcmVzdWx0ID0gXCJcIiwgX3RhZyA9IHN0YXRlLnRhZywgb2JqZWN0S2V5TGlzdCA9IE9iamVjdC5rZXlzKG9iamVjdCksIGluZGV4LCBsZW5ndGgsIG9iamVjdEtleSwgb2JqZWN0VmFsdWUsIGV4cGxpY2l0UGFpciwgcGFpckJ1ZmZlcjtcbiAgaWYgKHN0YXRlLnNvcnRLZXlzID09PSB0cnVlKSB7XG4gICAgb2JqZWN0S2V5TGlzdC5zb3J0KCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHN0YXRlLnNvcnRLZXlzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBvYmplY3RLZXlMaXN0LnNvcnQoc3RhdGUuc29ydEtleXMpO1xuICB9IGVsc2UgaWYgKHN0YXRlLnNvcnRLZXlzKSB7XG4gICAgdGhyb3cgbmV3IGV4Y2VwdGlvbihcInNvcnRLZXlzIG11c3QgYmUgYSBib29sZWFuIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdEtleUxpc3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXJCdWZmZXIgPSBcIlwiO1xuICAgIGlmICghY29tcGFjdCB8fCBfcmVzdWx0ICE9PSBcIlwiKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG4gICAgb2JqZWN0S2V5ID0gb2JqZWN0S2V5TGlzdFtpbmRleF07XG4gICAgb2JqZWN0VmFsdWUgPSBvYmplY3Rbb2JqZWN0S2V5XTtcbiAgICBpZiAoc3RhdGUucmVwbGFjZXIpIHtcbiAgICAgIG9iamVjdFZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbChvYmplY3QsIG9iamVjdEtleSwgb2JqZWN0VmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIXdyaXRlTm9kZShzdGF0ZSwgbGV2ZWwgKyAxLCBvYmplY3RLZXksIHRydWUsIHRydWUsIHRydWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZXhwbGljaXRQYWlyID0gc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gXCI/XCIgfHwgc3RhdGUuZHVtcCAmJiBzdGF0ZS5kdW1wLmxlbmd0aCA+IDEwMjQ7XG4gICAgaWYgKGV4cGxpY2l0UGFpcikge1xuICAgICAgaWYgKHN0YXRlLmR1bXAgJiYgQ0hBUl9MSU5FX0ZFRUQgPT09IHN0YXRlLmR1bXAuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICBwYWlyQnVmZmVyICs9IFwiP1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFpckJ1ZmZlciArPSBcIj8gXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHBhaXJCdWZmZXIgKz0gc3RhdGUuZHVtcDtcbiAgICBpZiAoZXhwbGljaXRQYWlyKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IGdlbmVyYXRlTmV4dExpbmUoc3RhdGUsIGxldmVsKTtcbiAgICB9XG4gICAgaWYgKCF3cml0ZU5vZGUoc3RhdGUsIGxldmVsICsgMSwgb2JqZWN0VmFsdWUsIHRydWUsIGV4cGxpY2l0UGFpcikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuZHVtcCAmJiBDSEFSX0xJTkVfRkVFRCA9PT0gc3RhdGUuZHVtcC5jaGFyQ29kZUF0KDApKSB7XG4gICAgICBwYWlyQnVmZmVyICs9IFwiOlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYWlyQnVmZmVyICs9IFwiOiBcIjtcbiAgICB9XG4gICAgcGFpckJ1ZmZlciArPSBzdGF0ZS5kdW1wO1xuICAgIF9yZXN1bHQgKz0gcGFpckJ1ZmZlcjtcbiAgfVxuICBzdGF0ZS50YWcgPSBfdGFnO1xuICBzdGF0ZS5kdW1wID0gX3Jlc3VsdCB8fCBcInt9XCI7XG59XG5fX25hbWUod3JpdGVCbG9ja01hcHBpbmcsIFwid3JpdGVCbG9ja01hcHBpbmdcIik7XG5mdW5jdGlvbiBkZXRlY3RUeXBlKHN0YXRlLCBvYmplY3QsIGV4cGxpY2l0KSB7XG4gIHZhciBfcmVzdWx0LCB0eXBlTGlzdCwgaW5kZXgsIGxlbmd0aCwgdHlwZTIsIHN0eWxlO1xuICB0eXBlTGlzdCA9IGV4cGxpY2l0ID8gc3RhdGUuZXhwbGljaXRUeXBlcyA6IHN0YXRlLmltcGxpY2l0VHlwZXM7XG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0eXBlTGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgdHlwZTIgPSB0eXBlTGlzdFtpbmRleF07XG4gICAgaWYgKCh0eXBlMi5pbnN0YW5jZU9mIHx8IHR5cGUyLnByZWRpY2F0ZSkgJiYgKCF0eXBlMi5pbnN0YW5jZU9mIHx8IHR5cGVvZiBvYmplY3QgPT09IFwib2JqZWN0XCIgJiYgb2JqZWN0IGluc3RhbmNlb2YgdHlwZTIuaW5zdGFuY2VPZikgJiYgKCF0eXBlMi5wcmVkaWNhdGUgfHwgdHlwZTIucHJlZGljYXRlKG9iamVjdCkpKSB7XG4gICAgICBpZiAoZXhwbGljaXQpIHtcbiAgICAgICAgaWYgKHR5cGUyLm11bHRpICYmIHR5cGUyLnJlcHJlc2VudE5hbWUpIHtcbiAgICAgICAgICBzdGF0ZS50YWcgPSB0eXBlMi5yZXByZXNlbnROYW1lKG9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUudGFnID0gdHlwZTIudGFnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50YWcgPSBcIj9cIjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlMi5yZXByZXNlbnQpIHtcbiAgICAgICAgc3R5bGUgPSBzdGF0ZS5zdHlsZU1hcFt0eXBlMi50YWddIHx8IHR5cGUyLmRlZmF1bHRTdHlsZTtcbiAgICAgICAgaWYgKF90b1N0cmluZy5jYWxsKHR5cGUyLnJlcHJlc2VudCkgPT09IFwiW29iamVjdCBGdW5jdGlvbl1cIikge1xuICAgICAgICAgIF9yZXN1bHQgPSB0eXBlMi5yZXByZXNlbnQob2JqZWN0LCBzdHlsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2hhc093blByb3BlcnR5LmNhbGwodHlwZTIucmVwcmVzZW50LCBzdHlsZSkpIHtcbiAgICAgICAgICBfcmVzdWx0ID0gdHlwZTIucmVwcmVzZW50W3N0eWxlXShvYmplY3QsIHN0eWxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgZXhjZXB0aW9uKFwiITxcIiArIHR5cGUyLnRhZyArICc+IHRhZyByZXNvbHZlciBhY2NlcHRzIG5vdCBcIicgKyBzdHlsZSArICdcIiBzdHlsZScpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmR1bXAgPSBfcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbl9fbmFtZShkZXRlY3RUeXBlLCBcImRldGVjdFR5cGVcIik7XG5mdW5jdGlvbiB3cml0ZU5vZGUoc3RhdGUsIGxldmVsLCBvYmplY3QsIGJsb2NrLCBjb21wYWN0LCBpc2tleSwgaXNibG9ja3NlcSkge1xuICBzdGF0ZS50YWcgPSBudWxsO1xuICBzdGF0ZS5kdW1wID0gb2JqZWN0O1xuICBpZiAoIWRldGVjdFR5cGUoc3RhdGUsIG9iamVjdCwgZmFsc2UpKSB7XG4gICAgZGV0ZWN0VHlwZShzdGF0ZSwgb2JqZWN0LCB0cnVlKTtcbiAgfVxuICB2YXIgdHlwZTIgPSBfdG9TdHJpbmcuY2FsbChzdGF0ZS5kdW1wKTtcbiAgdmFyIGluYmxvY2sgPSBibG9jaztcbiAgdmFyIHRhZ1N0cjtcbiAgaWYgKGJsb2NrKSB7XG4gICAgYmxvY2sgPSBzdGF0ZS5mbG93TGV2ZWwgPCAwIHx8IHN0YXRlLmZsb3dMZXZlbCA+IGxldmVsO1xuICB9XG4gIHZhciBvYmplY3RPckFycmF5ID0gdHlwZTIgPT09IFwiW29iamVjdCBPYmplY3RdXCIgfHwgdHlwZTIgPT09IFwiW29iamVjdCBBcnJheV1cIiwgZHVwbGljYXRlSW5kZXgsIGR1cGxpY2F0ZTtcbiAgaWYgKG9iamVjdE9yQXJyYXkpIHtcbiAgICBkdXBsaWNhdGVJbmRleCA9IHN0YXRlLmR1cGxpY2F0ZXMuaW5kZXhPZihvYmplY3QpO1xuICAgIGR1cGxpY2F0ZSA9IGR1cGxpY2F0ZUluZGV4ICE9PSAtMTtcbiAgfVxuICBpZiAoc3RhdGUudGFnICE9PSBudWxsICYmIHN0YXRlLnRhZyAhPT0gXCI/XCIgfHwgZHVwbGljYXRlIHx8IHN0YXRlLmluZGVudCAhPT0gMiAmJiBsZXZlbCA+IDApIHtcbiAgICBjb21wYWN0ID0gZmFsc2U7XG4gIH1cbiAgaWYgKGR1cGxpY2F0ZSAmJiBzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0pIHtcbiAgICBzdGF0ZS5kdW1wID0gXCIqcmVmX1wiICsgZHVwbGljYXRlSW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgaWYgKG9iamVjdE9yQXJyYXkgJiYgZHVwbGljYXRlICYmICFzdGF0ZS51c2VkRHVwbGljYXRlc1tkdXBsaWNhdGVJbmRleF0pIHtcbiAgICAgIHN0YXRlLnVzZWREdXBsaWNhdGVzW2R1cGxpY2F0ZUluZGV4XSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlMiA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuICAgICAgaWYgKGJsb2NrICYmIE9iamVjdC5rZXlzKHN0YXRlLmR1bXApLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB3cml0ZUJsb2NrTWFwcGluZyhzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9IFwiJnJlZl9cIiArIGR1cGxpY2F0ZUluZGV4ICsgc3RhdGUuZHVtcDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JpdGVGbG93TWFwcGluZyhzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXApO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9IFwiJnJlZl9cIiArIGR1cGxpY2F0ZUluZGV4ICsgXCIgXCIgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlMiA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XG4gICAgICBpZiAoYmxvY2sgJiYgc3RhdGUuZHVtcC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgaWYgKHN0YXRlLm5vQXJyYXlJbmRlbnQgJiYgIWlzYmxvY2tzZXEgJiYgbGV2ZWwgPiAwKSB7XG4gICAgICAgICAgd3JpdGVCbG9ja1NlcXVlbmNlKHN0YXRlLCBsZXZlbCAtIDEsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdyaXRlQmxvY2tTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXAsIGNvbXBhY3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkdXBsaWNhdGUpIHtcbiAgICAgICAgICBzdGF0ZS5kdW1wID0gXCImcmVmX1wiICsgZHVwbGljYXRlSW5kZXggKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cml0ZUZsb3dTZXF1ZW5jZShzdGF0ZSwgbGV2ZWwsIHN0YXRlLmR1bXApO1xuICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgc3RhdGUuZHVtcCA9IFwiJnJlZl9cIiArIGR1cGxpY2F0ZUluZGV4ICsgXCIgXCIgKyBzdGF0ZS5kdW1wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlMiA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIikge1xuICAgICAgaWYgKHN0YXRlLnRhZyAhPT0gXCI/XCIpIHtcbiAgICAgICAgd3JpdGVTY2FsYXIoc3RhdGUsIHN0YXRlLmR1bXAsIGxldmVsLCBpc2tleSwgaW5ibG9jayk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlMiA9PT0gXCJbb2JqZWN0IFVuZGVmaW5lZF1cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUuc2tpcEludmFsaWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IG5ldyBleGNlcHRpb24oXCJ1bmFjY2VwdGFibGUga2luZCBvZiBhbiBvYmplY3QgdG8gZHVtcCBcIiArIHR5cGUyKTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbCAmJiBzdGF0ZS50YWcgIT09IFwiP1wiKSB7XG4gICAgICB0YWdTdHIgPSBlbmNvZGVVUkkoXG4gICAgICAgIHN0YXRlLnRhZ1swXSA9PT0gXCIhXCIgPyBzdGF0ZS50YWcuc2xpY2UoMSkgOiBzdGF0ZS50YWdcbiAgICAgICkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKTtcbiAgICAgIGlmIChzdGF0ZS50YWdbMF0gPT09IFwiIVwiKSB7XG4gICAgICAgIHRhZ1N0ciA9IFwiIVwiICsgdGFnU3RyO1xuICAgICAgfSBlbHNlIGlmICh0YWdTdHIuc2xpY2UoMCwgMTgpID09PSBcInRhZzp5YW1sLm9yZywyMDAyOlwiKSB7XG4gICAgICAgIHRhZ1N0ciA9IFwiISFcIiArIHRhZ1N0ci5zbGljZSgxOCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWdTdHIgPSBcIiE8XCIgKyB0YWdTdHIgKyBcIj5cIjtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmR1bXAgPSB0YWdTdHIgKyBcIiBcIiArIHN0YXRlLmR1bXA7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuX19uYW1lKHdyaXRlTm9kZSwgXCJ3cml0ZU5vZGVcIik7XG5mdW5jdGlvbiBnZXREdXBsaWNhdGVSZWZlcmVuY2VzKG9iamVjdCwgc3RhdGUpIHtcbiAgdmFyIG9iamVjdHMgPSBbXSwgZHVwbGljYXRlc0luZGV4ZXMgPSBbXSwgaW5kZXgsIGxlbmd0aDtcbiAgaW5zcGVjdE5vZGUob2JqZWN0LCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBkdXBsaWNhdGVzSW5kZXhlcy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgc3RhdGUuZHVwbGljYXRlcy5wdXNoKG9iamVjdHNbZHVwbGljYXRlc0luZGV4ZXNbaW5kZXhdXSk7XG4gIH1cbiAgc3RhdGUudXNlZER1cGxpY2F0ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbn1cbl9fbmFtZShnZXREdXBsaWNhdGVSZWZlcmVuY2VzLCBcImdldER1cGxpY2F0ZVJlZmVyZW5jZXNcIik7XG5mdW5jdGlvbiBpbnNwZWN0Tm9kZShvYmplY3QsIG9iamVjdHMsIGR1cGxpY2F0ZXNJbmRleGVzKSB7XG4gIHZhciBvYmplY3RLZXlMaXN0LCBpbmRleCwgbGVuZ3RoO1xuICBpZiAob2JqZWN0ICE9PSBudWxsICYmIHR5cGVvZiBvYmplY3QgPT09IFwib2JqZWN0XCIpIHtcbiAgICBpbmRleCA9IG9iamVjdHMuaW5kZXhPZihvYmplY3QpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChkdXBsaWNhdGVzSW5kZXhlcy5pbmRleE9mKGluZGV4KSA9PT0gLTEpIHtcbiAgICAgICAgZHVwbGljYXRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdHMucHVzaChvYmplY3QpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgICBpbnNwZWN0Tm9kZShvYmplY3RbaW5kZXhdLCBvYmplY3RzLCBkdXBsaWNhdGVzSW5kZXhlcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdEtleUxpc3QgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0S2V5TGlzdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgICAgaW5zcGVjdE5vZGUob2JqZWN0W29iamVjdEtleUxpc3RbaW5kZXhdXSwgb2JqZWN0cywgZHVwbGljYXRlc0luZGV4ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5fX25hbWUoaW5zcGVjdE5vZGUsIFwiaW5zcGVjdE5vZGVcIik7XG5mdW5jdGlvbiBkdW1wJDEoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBzdGF0ZSA9IG5ldyBTdGF0ZShvcHRpb25zKTtcbiAgaWYgKCFzdGF0ZS5ub1JlZnMpIGdldER1cGxpY2F0ZVJlZmVyZW5jZXMoaW5wdXQsIHN0YXRlKTtcbiAgdmFyIHZhbHVlID0gaW5wdXQ7XG4gIGlmIChzdGF0ZS5yZXBsYWNlcikge1xuICAgIHZhbHVlID0gc3RhdGUucmVwbGFjZXIuY2FsbCh7IFwiXCI6IHZhbHVlIH0sIFwiXCIsIHZhbHVlKTtcbiAgfVxuICBpZiAod3JpdGVOb2RlKHN0YXRlLCAwLCB2YWx1ZSwgdHJ1ZSwgdHJ1ZSkpIHJldHVybiBzdGF0ZS5kdW1wICsgXCJcXG5cIjtcbiAgcmV0dXJuIFwiXCI7XG59XG5fX25hbWUoZHVtcCQxLCBcImR1bXAkMVwiKTtcbnZhciBkdW1wXzEgPSBkdW1wJDE7XG52YXIgZHVtcGVyID0ge1xuICBkdW1wOiBkdW1wXzFcbn07XG5mdW5jdGlvbiByZW5hbWVkKGZyb20sIHRvKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGdW5jdGlvbiB5YW1sLlwiICsgZnJvbSArIFwiIGlzIHJlbW92ZWQgaW4ganMteWFtbCA0LiBVc2UgeWFtbC5cIiArIHRvICsgXCIgaW5zdGVhZCwgd2hpY2ggaXMgbm93IHNhZmUgYnkgZGVmYXVsdC5cIik7XG4gIH07XG59XG5fX25hbWUocmVuYW1lZCwgXCJyZW5hbWVkXCIpO1xudmFyIEpTT05fU0NIRU1BID0ganNvbjtcbnZhciBsb2FkID0gbG9hZGVyLmxvYWQ7XG52YXIgbG9hZEFsbCA9IGxvYWRlci5sb2FkQWxsO1xudmFyIGR1bXAgPSBkdW1wZXIuZHVtcDtcbnZhciBzYWZlTG9hZCA9IHJlbmFtZWQoXCJzYWZlTG9hZFwiLCBcImxvYWRcIik7XG52YXIgc2FmZUxvYWRBbGwgPSByZW5hbWVkKFwic2FmZUxvYWRBbGxcIiwgXCJsb2FkQWxsXCIpO1xudmFyIHNhZmVEdW1wID0gcmVuYW1lZChcInNhZmVEdW1wXCIsIFwiZHVtcFwiKTtcblxuZXhwb3J0IHtcbiAgSlNPTl9TQ0hFTUEsXG4gIGxvYWRcbn07XG4vKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOlxuXG5qcy15YW1sL2Rpc3QvanMteWFtbC5tanM6XG4gICgqISBqcy15YW1sIDQuMS4wIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvanMteWFtbCBAbGljZW5zZSBNSVQgKilcbiovXG4iLCJpbXBvcnQge1xuICBfX25hbWUsXG4gIGdldENvbmZpZzIgYXMgZ2V0Q29uZmlnXG59IGZyb20gXCIuL2NodW5rLVlUSk5UN0RVLm1qc1wiO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvc2VsZWN0U3ZnRWxlbWVudC50c1xuaW1wb3J0IHsgc2VsZWN0IH0gZnJvbSBcImQzXCI7XG52YXIgc2VsZWN0U3ZnRWxlbWVudCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlkKSA9PiB7XG4gIGNvbnN0IHsgc2VjdXJpdHlMZXZlbCB9ID0gZ2V0Q29uZmlnKCk7XG4gIGxldCByb290ID0gc2VsZWN0KFwiYm9keVwiKTtcbiAgaWYgKHNlY3VyaXR5TGV2ZWwgPT09IFwic2FuZGJveFwiKSB7XG4gICAgY29uc3Qgc2FuZGJveEVsZW1lbnQgPSBzZWxlY3QoYCNpJHtpZH1gKTtcbiAgICBjb25zdCBkb2MgPSBzYW5kYm94RWxlbWVudC5ub2RlKCk/LmNvbnRlbnREb2N1bWVudCA/PyBkb2N1bWVudDtcbiAgICByb290ID0gc2VsZWN0KGRvYy5ib2R5KTtcbiAgfVxuICBjb25zdCBzdmcgPSByb290LnNlbGVjdChgIyR7aWR9YCk7XG4gIHJldHVybiBzdmc7XG59LCBcInNlbGVjdFN2Z0VsZW1lbnRcIik7XG5cbmV4cG9ydCB7XG4gIHNlbGVjdFN2Z0VsZW1lbnRcbn07XG4iLCJpbXBvcnQge1xuICBkZWNvZGVFbnRpdGllc1xufSBmcm9tIFwiLi9jaHVuay1PNE5JNlVOVS5tanNcIjtcbmltcG9ydCB7XG4gIF9fbmFtZSxcbiAgY29tbW9uX2RlZmF1bHQsXG4gIGdldENvbmZpZzIgYXMgZ2V0Q29uZmlnLFxuICBoYXNLYXRleCxcbiAgbG9nLFxuICByZW5kZXJLYXRleFxufSBmcm9tIFwiLi9jaHVuay1ZVEpOVDdEVS5tanNcIjtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL2NyZWF0ZVRleHQudHNcbmltcG9ydCB7IHNlbGVjdCB9IGZyb20gXCJkM1wiO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvaGFuZGxlLW1hcmtkb3duLXRleHQudHNcbmltcG9ydCB7IG1hcmtlZCB9IGZyb20gXCJtYXJrZWRcIjtcbmltcG9ydCB7IGRlZGVudCB9IGZyb20gXCJ0cy1kZWRlbnRcIjtcbmZ1bmN0aW9uIHByZXByb2Nlc3NNYXJrZG93bihtYXJrZG93biwgeyBtYXJrZG93bkF1dG9XcmFwIH0pIHtcbiAgY29uc3Qgd2l0aG91dEJSID0gbWFya2Rvd24ucmVwbGFjZSgvPGJyXFwvPi9nLCBcIlxcblwiKTtcbiAgY29uc3Qgd2l0aG91dE11bHRpcGxlTmV3bGluZXMgPSB3aXRob3V0QlIucmVwbGFjZSgvXFxuezIsfS9nLCBcIlxcblwiKTtcbiAgY29uc3Qgd2l0aG91dEV4dHJhU3BhY2VzID0gZGVkZW50KHdpdGhvdXRNdWx0aXBsZU5ld2xpbmVzKTtcbiAgaWYgKG1hcmtkb3duQXV0b1dyYXAgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHdpdGhvdXRFeHRyYVNwYWNlcy5yZXBsYWNlKC8gL2csIFwiJm5ic3A7XCIpO1xuICB9XG4gIHJldHVybiB3aXRob3V0RXh0cmFTcGFjZXM7XG59XG5fX25hbWUocHJlcHJvY2Vzc01hcmtkb3duLCBcInByZXByb2Nlc3NNYXJrZG93blwiKTtcbmZ1bmN0aW9uIG1hcmtkb3duVG9MaW5lcyhtYXJrZG93biwgY29uZmlnID0ge30pIHtcbiAgY29uc3QgcHJlcHJvY2Vzc2VkTWFya2Rvd24gPSBwcmVwcm9jZXNzTWFya2Rvd24obWFya2Rvd24sIGNvbmZpZyk7XG4gIGNvbnN0IG5vZGVzID0gbWFya2VkLmxleGVyKHByZXByb2Nlc3NlZE1hcmtkb3duKTtcbiAgY29uc3QgbGluZXMgPSBbW11dO1xuICBsZXQgY3VycmVudExpbmUgPSAwO1xuICBmdW5jdGlvbiBwcm9jZXNzTm9kZShub2RlLCBwYXJlbnRUeXBlID0gXCJub3JtYWxcIikge1xuICAgIGlmIChub2RlLnR5cGUgPT09IFwidGV4dFwiKSB7XG4gICAgICBjb25zdCB0ZXh0TGluZXMgPSBub2RlLnRleHQuc3BsaXQoXCJcXG5cIik7XG4gICAgICB0ZXh0TGluZXMuZm9yRWFjaCgodGV4dExpbmUsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMaW5lKys7XG4gICAgICAgICAgbGluZXMucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dExpbmUuc3BsaXQoXCIgXCIpLmZvckVhY2goKHdvcmQpID0+IHtcbiAgICAgICAgICB3b3JkID0gd29yZC5yZXBsYWNlKC8mIzM5Oy9nLCBgJ2ApO1xuICAgICAgICAgIGlmICh3b3JkKSB7XG4gICAgICAgICAgICBsaW5lc1tjdXJyZW50TGluZV0ucHVzaCh7IGNvbnRlbnQ6IHdvcmQsIHR5cGU6IHBhcmVudFR5cGUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcInN0cm9uZ1wiIHx8IG5vZGUudHlwZSA9PT0gXCJlbVwiKSB7XG4gICAgICBub2RlLnRva2Vucy5mb3JFYWNoKChjb250ZW50Tm9kZSkgPT4ge1xuICAgICAgICBwcm9jZXNzTm9kZShjb250ZW50Tm9kZSwgbm9kZS50eXBlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcImh0bWxcIikge1xuICAgICAgbGluZXNbY3VycmVudExpbmVdLnB1c2goeyBjb250ZW50OiBub2RlLnRleHQsIHR5cGU6IFwibm9ybWFsXCIgfSk7XG4gICAgfVxuICB9XG4gIF9fbmFtZShwcm9jZXNzTm9kZSwgXCJwcm9jZXNzTm9kZVwiKTtcbiAgbm9kZXMuZm9yRWFjaCgodHJlZU5vZGUpID0+IHtcbiAgICBpZiAodHJlZU5vZGUudHlwZSA9PT0gXCJwYXJhZ3JhcGhcIikge1xuICAgICAgdHJlZU5vZGUudG9rZW5zPy5mb3JFYWNoKChjb250ZW50Tm9kZSkgPT4ge1xuICAgICAgICBwcm9jZXNzTm9kZShjb250ZW50Tm9kZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRyZWVOb2RlLnR5cGUgPT09IFwiaHRtbFwiKSB7XG4gICAgICBsaW5lc1tjdXJyZW50TGluZV0ucHVzaCh7IGNvbnRlbnQ6IHRyZWVOb2RlLnRleHQsIHR5cGU6IFwibm9ybWFsXCIgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxpbmVzO1xufVxuX19uYW1lKG1hcmtkb3duVG9MaW5lcywgXCJtYXJrZG93blRvTGluZXNcIik7XG5mdW5jdGlvbiBtYXJrZG93blRvSFRNTChtYXJrZG93biwgeyBtYXJrZG93bkF1dG9XcmFwIH0gPSB7fSkge1xuICBjb25zdCBub2RlcyA9IG1hcmtlZC5sZXhlcihtYXJrZG93bik7XG4gIGZ1bmN0aW9uIG91dHB1dChub2RlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgIGlmIChtYXJrZG93bkF1dG9XcmFwID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gbm9kZS50ZXh0LnJlcGxhY2UoL1xcbiAqL2csIFwiPGJyLz5cIikucmVwbGFjZSgvIC9nLCBcIiZuYnNwO1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlLnRleHQucmVwbGFjZSgvXFxuICovZywgXCI8YnIvPlwiKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gXCJzdHJvbmdcIikge1xuICAgICAgcmV0dXJuIGA8c3Ryb25nPiR7bm9kZS50b2tlbnM/Lm1hcChvdXRwdXQpLmpvaW4oXCJcIil9PC9zdHJvbmc+YDtcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gXCJlbVwiKSB7XG4gICAgICByZXR1cm4gYDxlbT4ke25vZGUudG9rZW5zPy5tYXAob3V0cHV0KS5qb2luKFwiXCIpfTwvZW0+YDtcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gXCJwYXJhZ3JhcGhcIikge1xuICAgICAgcmV0dXJuIGA8cD4ke25vZGUudG9rZW5zPy5tYXAob3V0cHV0KS5qb2luKFwiXCIpfTwvcD5gO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcInNwYWNlXCIpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcImh0bWxcIikge1xuICAgICAgcmV0dXJuIGAke25vZGUudGV4dH1gO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcImVzY2FwZVwiKSB7XG4gICAgICByZXR1cm4gbm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gYFVuc3VwcG9ydGVkIG1hcmtkb3duOiAke25vZGUudHlwZX1gO1xuICB9XG4gIF9fbmFtZShvdXRwdXQsIFwib3V0cHV0XCIpO1xuICByZXR1cm4gbm9kZXMubWFwKG91dHB1dCkuam9pbihcIlwiKTtcbn1cbl9fbmFtZShtYXJrZG93blRvSFRNTCwgXCJtYXJrZG93blRvSFRNTFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3NwbGl0VGV4dC50c1xuZnVuY3Rpb24gc3BsaXRUZXh0VG9DaGFycyh0ZXh0KSB7XG4gIGlmIChJbnRsLlNlZ21lbnRlcikge1xuICAgIHJldHVybiBbLi4ubmV3IEludGwuU2VnbWVudGVyKCkuc2VnbWVudCh0ZXh0KV0ubWFwKChzKSA9PiBzLnNlZ21lbnQpO1xuICB9XG4gIHJldHVybiBbLi4udGV4dF07XG59XG5fX25hbWUoc3BsaXRUZXh0VG9DaGFycywgXCJzcGxpdFRleHRUb0NoYXJzXCIpO1xuZnVuY3Rpb24gc3BsaXRXb3JkVG9GaXRXaWR0aChjaGVja0ZpdCwgd29yZCkge1xuICBjb25zdCBjaGFyYWN0ZXJzID0gc3BsaXRUZXh0VG9DaGFycyh3b3JkLmNvbnRlbnQpO1xuICByZXR1cm4gc3BsaXRXb3JkVG9GaXRXaWR0aFJlY3Vyc2lvbihjaGVja0ZpdCwgW10sIGNoYXJhY3RlcnMsIHdvcmQudHlwZSk7XG59XG5fX25hbWUoc3BsaXRXb3JkVG9GaXRXaWR0aCwgXCJzcGxpdFdvcmRUb0ZpdFdpZHRoXCIpO1xuZnVuY3Rpb24gc3BsaXRXb3JkVG9GaXRXaWR0aFJlY3Vyc2lvbihjaGVja0ZpdCwgdXNlZENoYXJzLCByZW1haW5pbmdDaGFycywgdHlwZSkge1xuICBpZiAocmVtYWluaW5nQ2hhcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgY29udGVudDogdXNlZENoYXJzLmpvaW4oXCJcIiksIHR5cGUgfSxcbiAgICAgIHsgY29udGVudDogXCJcIiwgdHlwZSB9XG4gICAgXTtcbiAgfVxuICBjb25zdCBbbmV4dENoYXIsIC4uLnJlc3RdID0gcmVtYWluaW5nQ2hhcnM7XG4gIGNvbnN0IG5ld1dvcmQgPSBbLi4udXNlZENoYXJzLCBuZXh0Q2hhcl07XG4gIGlmIChjaGVja0ZpdChbeyBjb250ZW50OiBuZXdXb3JkLmpvaW4oXCJcIiksIHR5cGUgfV0pKSB7XG4gICAgcmV0dXJuIHNwbGl0V29yZFRvRml0V2lkdGhSZWN1cnNpb24oY2hlY2tGaXQsIG5ld1dvcmQsIHJlc3QsIHR5cGUpO1xuICB9XG4gIGlmICh1c2VkQ2hhcnMubGVuZ3RoID09PSAwICYmIG5leHRDaGFyKSB7XG4gICAgdXNlZENoYXJzLnB1c2gobmV4dENoYXIpO1xuICAgIHJlbWFpbmluZ0NoYXJzLnNoaWZ0KCk7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICB7IGNvbnRlbnQ6IHVzZWRDaGFycy5qb2luKFwiXCIpLCB0eXBlIH0sXG4gICAgeyBjb250ZW50OiByZW1haW5pbmdDaGFycy5qb2luKFwiXCIpLCB0eXBlIH1cbiAgXTtcbn1cbl9fbmFtZShzcGxpdFdvcmRUb0ZpdFdpZHRoUmVjdXJzaW9uLCBcInNwbGl0V29yZFRvRml0V2lkdGhSZWN1cnNpb25cIik7XG5mdW5jdGlvbiBzcGxpdExpbmVUb0ZpdFdpZHRoKGxpbmUsIGNoZWNrRml0KSB7XG4gIGlmIChsaW5lLnNvbWUoKHsgY29udGVudCB9KSA9PiBjb250ZW50LmluY2x1ZGVzKFwiXFxuXCIpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInNwbGl0TGluZVRvRml0V2lkdGggZG9lcyBub3Qgc3VwcG9ydCBuZXdsaW5lcyBpbiB0aGUgbGluZVwiKTtcbiAgfVxuICByZXR1cm4gc3BsaXRMaW5lVG9GaXRXaWR0aFJlY3Vyc2lvbihsaW5lLCBjaGVja0ZpdCk7XG59XG5fX25hbWUoc3BsaXRMaW5lVG9GaXRXaWR0aCwgXCJzcGxpdExpbmVUb0ZpdFdpZHRoXCIpO1xuZnVuY3Rpb24gc3BsaXRMaW5lVG9GaXRXaWR0aFJlY3Vyc2lvbih3b3JkcywgY2hlY2tGaXQsIGxpbmVzID0gW10sIG5ld0xpbmUgPSBbXSkge1xuICBpZiAod29yZHMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKG5ld0xpbmUubGVuZ3RoID4gMCkge1xuICAgICAgbGluZXMucHVzaChuZXdMaW5lKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzLmxlbmd0aCA+IDAgPyBsaW5lcyA6IFtdO1xuICB9XG4gIGxldCBqb2luZXIgPSBcIlwiO1xuICBpZiAod29yZHNbMF0uY29udGVudCA9PT0gXCIgXCIpIHtcbiAgICBqb2luZXIgPSBcIiBcIjtcbiAgICB3b3Jkcy5zaGlmdCgpO1xuICB9XG4gIGNvbnN0IG5leHRXb3JkID0gd29yZHMuc2hpZnQoKSA/PyB7IGNvbnRlbnQ6IFwiIFwiLCB0eXBlOiBcIm5vcm1hbFwiIH07XG4gIGNvbnN0IGxpbmVXaXRoTmV4dFdvcmQgPSBbLi4ubmV3TGluZV07XG4gIGlmIChqb2luZXIgIT09IFwiXCIpIHtcbiAgICBsaW5lV2l0aE5leHRXb3JkLnB1c2goeyBjb250ZW50OiBqb2luZXIsIHR5cGU6IFwibm9ybWFsXCIgfSk7XG4gIH1cbiAgbGluZVdpdGhOZXh0V29yZC5wdXNoKG5leHRXb3JkKTtcbiAgaWYgKGNoZWNrRml0KGxpbmVXaXRoTmV4dFdvcmQpKSB7XG4gICAgcmV0dXJuIHNwbGl0TGluZVRvRml0V2lkdGhSZWN1cnNpb24od29yZHMsIGNoZWNrRml0LCBsaW5lcywgbGluZVdpdGhOZXh0V29yZCk7XG4gIH1cbiAgaWYgKG5ld0xpbmUubGVuZ3RoID4gMCkge1xuICAgIGxpbmVzLnB1c2gobmV3TGluZSk7XG4gICAgd29yZHMudW5zaGlmdChuZXh0V29yZCk7XG4gIH0gZWxzZSBpZiAobmV4dFdvcmQuY29udGVudCkge1xuICAgIGNvbnN0IFtsaW5lLCByZXN0XSA9IHNwbGl0V29yZFRvRml0V2lkdGgoY2hlY2tGaXQsIG5leHRXb3JkKTtcbiAgICBsaW5lcy5wdXNoKFtsaW5lXSk7XG4gICAgaWYgKHJlc3QuY29udGVudCkge1xuICAgICAgd29yZHMudW5zaGlmdChyZXN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNwbGl0TGluZVRvRml0V2lkdGhSZWN1cnNpb24od29yZHMsIGNoZWNrRml0LCBsaW5lcyk7XG59XG5fX25hbWUoc3BsaXRMaW5lVG9GaXRXaWR0aFJlY3Vyc2lvbiwgXCJzcGxpdExpbmVUb0ZpdFdpZHRoUmVjdXJzaW9uXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvY3JlYXRlVGV4dC50c1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkb20sIHN0eWxlRm4pIHtcbiAgaWYgKHN0eWxlRm4pIHtcbiAgICBkb20uYXR0cihcInN0eWxlXCIsIHN0eWxlRm4pO1xuICB9XG59XG5fX25hbWUoYXBwbHlTdHlsZSwgXCJhcHBseVN0eWxlXCIpO1xuYXN5bmMgZnVuY3Rpb24gYWRkSHRtbFNwYW4oZWxlbWVudCwgbm9kZSwgd2lkdGgsIGNsYXNzZXMsIGFkZEJhY2tncm91bmQgPSBmYWxzZSkge1xuICBjb25zdCBmbyA9IGVsZW1lbnQuYXBwZW5kKFwiZm9yZWlnbk9iamVjdFwiKTtcbiAgZm8uYXR0cihcIndpZHRoXCIsIGAkezEwICogd2lkdGh9cHhgKTtcbiAgZm8uYXR0cihcImhlaWdodFwiLCBgJHsxMCAqIHdpZHRofXB4YCk7XG4gIGNvbnN0IGRpdiA9IGZvLmFwcGVuZChcInhodG1sOmRpdlwiKTtcbiAgbGV0IGxhYmVsID0gbm9kZS5sYWJlbDtcbiAgaWYgKG5vZGUubGFiZWwgJiYgaGFzS2F0ZXgobm9kZS5sYWJlbCkpIHtcbiAgICBsYWJlbCA9IGF3YWl0IHJlbmRlckthdGV4KG5vZGUubGFiZWwucmVwbGFjZShjb21tb25fZGVmYXVsdC5saW5lQnJlYWtSZWdleCwgXCJcXG5cIiksIGdldENvbmZpZygpKTtcbiAgfVxuICBjb25zdCBsYWJlbENsYXNzID0gbm9kZS5pc05vZGUgPyBcIm5vZGVMYWJlbFwiIDogXCJlZGdlTGFiZWxcIjtcbiAgY29uc3Qgc3BhbiA9IGRpdi5hcHBlbmQoXCJzcGFuXCIpO1xuICBzcGFuLmh0bWwobGFiZWwpO1xuICBhcHBseVN0eWxlKHNwYW4sIG5vZGUubGFiZWxTdHlsZSk7XG4gIHNwYW4uYXR0cihcImNsYXNzXCIsIGAke2xhYmVsQ2xhc3N9ICR7Y2xhc3Nlc31gKTtcbiAgYXBwbHlTdHlsZShkaXYsIG5vZGUubGFiZWxTdHlsZSk7XG4gIGRpdi5zdHlsZShcImRpc3BsYXlcIiwgXCJ0YWJsZS1jZWxsXCIpO1xuICBkaXYuc3R5bGUoXCJ3aGl0ZS1zcGFjZVwiLCBcIm5vd3JhcFwiKTtcbiAgZGl2LnN0eWxlKFwibGluZS1oZWlnaHRcIiwgXCIxLjVcIik7XG4gIGRpdi5zdHlsZShcIm1heC13aWR0aFwiLCB3aWR0aCArIFwicHhcIik7XG4gIGRpdi5zdHlsZShcInRleHQtYWxpZ25cIiwgXCJjZW50ZXJcIik7XG4gIGRpdi5hdHRyKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpO1xuICBpZiAoYWRkQmFja2dyb3VuZCkge1xuICAgIGRpdi5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbEJrZ1wiKTtcbiAgfVxuICBsZXQgYmJveCA9IGRpdi5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGlmIChiYm94LndpZHRoID09PSB3aWR0aCkge1xuICAgIGRpdi5zdHlsZShcImRpc3BsYXlcIiwgXCJ0YWJsZVwiKTtcbiAgICBkaXYuc3R5bGUoXCJ3aGl0ZS1zcGFjZVwiLCBcImJyZWFrLXNwYWNlc1wiKTtcbiAgICBkaXYuc3R5bGUoXCJ3aWR0aFwiLCB3aWR0aCArIFwicHhcIik7XG4gICAgYmJveCA9IGRpdi5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cbiAgcmV0dXJuIGZvLm5vZGUoKTtcbn1cbl9fbmFtZShhZGRIdG1sU3BhbiwgXCJhZGRIdG1sU3BhblwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVRzcGFuKHRleHRFbGVtZW50LCBsaW5lSW5kZXgsIGxpbmVIZWlnaHQpIHtcbiAgcmV0dXJuIHRleHRFbGVtZW50LmFwcGVuZChcInRzcGFuXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRleHQtb3V0ZXItdHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgbGluZUluZGV4ICogbGluZUhlaWdodCAtIDAuMSArIFwiZW1cIikuYXR0cihcImR5XCIsIGxpbmVIZWlnaHQgKyBcImVtXCIpO1xufVxuX19uYW1lKGNyZWF0ZVRzcGFuLCBcImNyZWF0ZVRzcGFuXCIpO1xuZnVuY3Rpb24gY29tcHV0ZVdpZHRoT2ZUZXh0KHBhcmVudE5vZGUsIGxpbmVIZWlnaHQsIGxpbmUpIHtcbiAgY29uc3QgdGVzdEVsZW1lbnQgPSBwYXJlbnROb2RlLmFwcGVuZChcInRleHRcIik7XG4gIGNvbnN0IHRlc3RTcGFuID0gY3JlYXRlVHNwYW4odGVzdEVsZW1lbnQsIDEsIGxpbmVIZWlnaHQpO1xuICB1cGRhdGVUZXh0Q29udGVudEFuZFN0eWxlcyh0ZXN0U3BhbiwgbGluZSk7XG4gIGNvbnN0IHRleHRMZW5ndGggPSB0ZXN0U3Bhbi5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCk7XG4gIHRlc3RFbGVtZW50LnJlbW92ZSgpO1xuICByZXR1cm4gdGV4dExlbmd0aDtcbn1cbl9fbmFtZShjb21wdXRlV2lkdGhPZlRleHQsIFwiY29tcHV0ZVdpZHRoT2ZUZXh0XCIpO1xuZnVuY3Rpb24gY29tcHV0ZURpbWVuc2lvbk9mVGV4dChwYXJlbnROb2RlLCBsaW5lSGVpZ2h0LCB0ZXh0KSB7XG4gIGNvbnN0IHRlc3RFbGVtZW50ID0gcGFyZW50Tm9kZS5hcHBlbmQoXCJ0ZXh0XCIpO1xuICBjb25zdCB0ZXN0U3BhbiA9IGNyZWF0ZVRzcGFuKHRlc3RFbGVtZW50LCAxLCBsaW5lSGVpZ2h0KTtcbiAgdXBkYXRlVGV4dENvbnRlbnRBbmRTdHlsZXModGVzdFNwYW4sIFt7IGNvbnRlbnQ6IHRleHQsIHR5cGU6IFwibm9ybWFsXCIgfV0pO1xuICBjb25zdCB0ZXh0RGltZW5zaW9uID0gdGVzdFNwYW4ubm9kZSgpPy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgaWYgKHRleHREaW1lbnNpb24pIHtcbiAgICB0ZXN0RWxlbWVudC5yZW1vdmUoKTtcbiAgfVxuICByZXR1cm4gdGV4dERpbWVuc2lvbjtcbn1cbl9fbmFtZShjb21wdXRlRGltZW5zaW9uT2ZUZXh0LCBcImNvbXB1dGVEaW1lbnNpb25PZlRleHRcIik7XG5mdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZWRUZXh0KHdpZHRoLCBnLCBzdHJ1Y3R1cmVkVGV4dCwgYWRkQmFja2dyb3VuZCA9IGZhbHNlKSB7XG4gIGNvbnN0IGxpbmVIZWlnaHQgPSAxLjE7XG4gIGNvbnN0IGxhYmVsR3JvdXAgPSBnLmFwcGVuZChcImdcIik7XG4gIGNvbnN0IGJrZyA9IGxhYmVsR3JvdXAuaW5zZXJ0KFwicmVjdFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJiYWNrZ3JvdW5kXCIpLmF0dHIoXCJzdHlsZVwiLCBcInN0cm9rZTogbm9uZVwiKTtcbiAgY29uc3QgdGV4dEVsZW1lbnQgPSBsYWJlbEdyb3VwLmFwcGVuZChcInRleHRcIikuYXR0cihcInlcIiwgXCItMTAuMVwiKTtcbiAgbGV0IGxpbmVJbmRleCA9IDA7XG4gIGZvciAoY29uc3QgbGluZSBvZiBzdHJ1Y3R1cmVkVGV4dCkge1xuICAgIGNvbnN0IGNoZWNrV2lkdGggPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChsaW5lMikgPT4gY29tcHV0ZVdpZHRoT2ZUZXh0KGxhYmVsR3JvdXAsIGxpbmVIZWlnaHQsIGxpbmUyKSA8PSB3aWR0aCwgXCJjaGVja1dpZHRoXCIpO1xuICAgIGNvbnN0IGxpbmVzVW5kZXJXaWR0aCA9IGNoZWNrV2lkdGgobGluZSkgPyBbbGluZV0gOiBzcGxpdExpbmVUb0ZpdFdpZHRoKGxpbmUsIGNoZWNrV2lkdGgpO1xuICAgIGZvciAoY29uc3QgcHJlcGFyZWRMaW5lIG9mIGxpbmVzVW5kZXJXaWR0aCkge1xuICAgICAgY29uc3QgdHNwYW4gPSBjcmVhdGVUc3Bhbih0ZXh0RWxlbWVudCwgbGluZUluZGV4LCBsaW5lSGVpZ2h0KTtcbiAgICAgIHVwZGF0ZVRleHRDb250ZW50QW5kU3R5bGVzKHRzcGFuLCBwcmVwYXJlZExpbmUpO1xuICAgICAgbGluZUluZGV4Kys7XG4gICAgfVxuICB9XG4gIGlmIChhZGRCYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgYmJveCA9IHRleHRFbGVtZW50Lm5vZGUoKS5nZXRCQm94KCk7XG4gICAgY29uc3QgcGFkZGluZyA9IDI7XG4gICAgYmtnLmF0dHIoXCJ4XCIsIGJib3gueCAtIHBhZGRpbmcpLmF0dHIoXCJ5XCIsIGJib3gueSAtIHBhZGRpbmcpLmF0dHIoXCJ3aWR0aFwiLCBiYm94LndpZHRoICsgMiAqIHBhZGRpbmcpLmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQgKyAyICogcGFkZGluZyk7XG4gICAgcmV0dXJuIGxhYmVsR3JvdXAubm9kZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0ZXh0RWxlbWVudC5ub2RlKCk7XG4gIH1cbn1cbl9fbmFtZShjcmVhdGVGb3JtYXR0ZWRUZXh0LCBcImNyZWF0ZUZvcm1hdHRlZFRleHRcIik7XG5mdW5jdGlvbiB1cGRhdGVUZXh0Q29udGVudEFuZFN0eWxlcyh0c3Bhbiwgd3JhcHBlZExpbmUpIHtcbiAgdHNwYW4udGV4dChcIlwiKTtcbiAgd3JhcHBlZExpbmUuZm9yRWFjaCgod29yZCwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBpbm5lclRzcGFuID0gdHNwYW4uYXBwZW5kKFwidHNwYW5cIikuYXR0cihcImZvbnQtc3R5bGVcIiwgd29yZC50eXBlID09PSBcImVtXCIgPyBcIml0YWxpY1wiIDogXCJub3JtYWxcIikuYXR0cihcImNsYXNzXCIsIFwidGV4dC1pbm5lci10c3BhblwiKS5hdHRyKFwiZm9udC13ZWlnaHRcIiwgd29yZC50eXBlID09PSBcInN0cm9uZ1wiID8gXCJib2xkXCIgOiBcIm5vcm1hbFwiKTtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIGlubmVyVHNwYW4udGV4dCh3b3JkLmNvbnRlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbm5lclRzcGFuLnRleHQoXCIgXCIgKyB3b3JkLmNvbnRlbnQpO1xuICAgIH1cbiAgfSk7XG59XG5fX25hbWUodXBkYXRlVGV4dENvbnRlbnRBbmRTdHlsZXMsIFwidXBkYXRlVGV4dENvbnRlbnRBbmRTdHlsZXNcIik7XG5mdW5jdGlvbiByZXBsYWNlSWNvblN1YnN0cmluZyh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoXG4gICAgL2ZhW2JrbHJzXT86ZmEtW1xcdy1dKy9nLFxuICAgIC8vIGNzcGVsbDogZGlzYWJsZS1saW5lXG4gICAgKHMpID0+IGA8aSBjbGFzcz0nJHtzLnJlcGxhY2UoXCI6XCIsIFwiIFwiKX0nPjwvaT5gXG4gICk7XG59XG5fX25hbWUocmVwbGFjZUljb25TdWJzdHJpbmcsIFwicmVwbGFjZUljb25TdWJzdHJpbmdcIik7XG52YXIgY3JlYXRlVGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGVsLCB0ZXh0ID0gXCJcIiwge1xuICBzdHlsZSA9IFwiXCIsXG4gIGlzVGl0bGUgPSBmYWxzZSxcbiAgY2xhc3NlcyA9IFwiXCIsXG4gIHVzZUh0bWxMYWJlbHMgPSB0cnVlLFxuICBpc05vZGUgPSB0cnVlLFxuICB3aWR0aCA9IDIwMCxcbiAgYWRkU3ZnQmFja2dyb3VuZCA9IGZhbHNlXG59ID0ge30sIGNvbmZpZykgPT4ge1xuICBsb2cuZGVidWcoXG4gICAgXCJYWVogY3JlYXRlVGV4dFwiLFxuICAgIHRleHQsXG4gICAgc3R5bGUsXG4gICAgaXNUaXRsZSxcbiAgICBjbGFzc2VzLFxuICAgIHVzZUh0bWxMYWJlbHMsXG4gICAgaXNOb2RlLFxuICAgIFwiYWRkU3ZnQmFja2dyb3VuZDogXCIsXG4gICAgYWRkU3ZnQmFja2dyb3VuZFxuICApO1xuICBpZiAodXNlSHRtbExhYmVscykge1xuICAgIGNvbnN0IGh0bWxUZXh0ID0gbWFya2Rvd25Ub0hUTUwodGV4dCwgY29uZmlnKTtcbiAgICBjb25zdCBkZWNvZGVkUmVwbGFjZWRUZXh0ID0gcmVwbGFjZUljb25TdWJzdHJpbmcoZGVjb2RlRW50aXRpZXMoaHRtbFRleHQpKTtcbiAgICBjb25zdCBpbnB1dEZvckthdGV4ID0gdGV4dC5yZXBsYWNlKC9cXFxcXFxcXC9nLCBcIlxcXFxcIik7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIGlzTm9kZSxcbiAgICAgIGxhYmVsOiBoYXNLYXRleCh0ZXh0KSA/IGlucHV0Rm9yS2F0ZXggOiBkZWNvZGVkUmVwbGFjZWRUZXh0LFxuICAgICAgbGFiZWxTdHlsZTogc3R5bGUucmVwbGFjZShcImZpbGw6XCIsIFwiY29sb3I6XCIpXG4gICAgfTtcbiAgICBjb25zdCB2ZXJ0ZXhOb2RlID0gYXdhaXQgYWRkSHRtbFNwYW4oZWwsIG5vZGUsIHdpZHRoLCBjbGFzc2VzLCBhZGRTdmdCYWNrZ3JvdW5kKTtcbiAgICByZXR1cm4gdmVydGV4Tm9kZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzYW5pdGl6ZUJSID0gdGV4dC5yZXBsYWNlKC88YnJcXHMqXFwvPz4vZywgXCI8YnIvPlwiKTtcbiAgICBjb25zdCBzdHJ1Y3R1cmVkVGV4dCA9IG1hcmtkb3duVG9MaW5lcyhzYW5pdGl6ZUJSLnJlcGxhY2UoXCI8YnI+XCIsIFwiPGJyLz5cIiksIGNvbmZpZyk7XG4gICAgY29uc3Qgc3ZnTGFiZWwgPSBjcmVhdGVGb3JtYXR0ZWRUZXh0KFxuICAgICAgd2lkdGgsXG4gICAgICBlbCxcbiAgICAgIHN0cnVjdHVyZWRUZXh0LFxuICAgICAgdGV4dCA/IGFkZFN2Z0JhY2tncm91bmQgOiBmYWxzZVxuICAgICk7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgaWYgKC9zdHJva2U6Ly5leGVjKHN0eWxlKSkge1xuICAgICAgICBzdHlsZSA9IHN0eWxlLnJlcGxhY2UoXCJzdHJva2U6XCIsIFwibGluZUNvbG9yOlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vZGVMYWJlbFRleHRTdHlsZSA9IHN0eWxlLnJlcGxhY2UoL3N0cm9rZTpbXjtdKzs/L2csIFwiXCIpLnJlcGxhY2UoL3N0cm9rZS13aWR0aDpbXjtdKzs/L2csIFwiXCIpLnJlcGxhY2UoL2ZpbGw6W147XSs7Py9nLCBcIlwiKS5yZXBsYWNlKC9jb2xvcjovZywgXCJmaWxsOlwiKTtcbiAgICAgIHNlbGVjdChzdmdMYWJlbCkuYXR0cihcInN0eWxlXCIsIG5vZGVMYWJlbFRleHRTdHlsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVkZ2VMYWJlbFJlY3RTdHlsZSA9IHN0eWxlLnJlcGxhY2UoL3N0cm9rZTpbXjtdKzs/L2csIFwiXCIpLnJlcGxhY2UoL3N0cm9rZS13aWR0aDpbXjtdKzs/L2csIFwiXCIpLnJlcGxhY2UoL2ZpbGw6W147XSs7Py9nLCBcIlwiKS5yZXBsYWNlKC9iYWNrZ3JvdW5kOi9nLCBcImZpbGw6XCIpO1xuICAgICAgc2VsZWN0KHN2Z0xhYmVsKS5zZWxlY3QoXCJyZWN0XCIpLmF0dHIoXCJzdHlsZVwiLCBlZGdlTGFiZWxSZWN0U3R5bGUucmVwbGFjZSgvYmFja2dyb3VuZDovZywgXCJmaWxsOlwiKSk7XG4gICAgICBjb25zdCBlZGdlTGFiZWxUZXh0U3R5bGUgPSBzdHlsZS5yZXBsYWNlKC9zdHJva2U6W147XSs7Py9nLCBcIlwiKS5yZXBsYWNlKC9zdHJva2Utd2lkdGg6W147XSs7Py9nLCBcIlwiKS5yZXBsYWNlKC9maWxsOlteO10rOz8vZywgXCJcIikucmVwbGFjZSgvY29sb3I6L2csIFwiZmlsbDpcIik7XG4gICAgICBzZWxlY3Qoc3ZnTGFiZWwpLnNlbGVjdChcInRleHRcIikuYXR0cihcInN0eWxlXCIsIGVkZ2VMYWJlbFRleHRTdHlsZSk7XG4gICAgfVxuICAgIHJldHVybiBzdmdMYWJlbDtcbiAgfVxufSwgXCJjcmVhdGVUZXh0XCIpO1xuXG5leHBvcnQge1xuICBjb21wdXRlRGltZW5zaW9uT2ZUZXh0LFxuICByZXBsYWNlSWNvblN1YnN0cmluZyxcbiAgY3JlYXRlVGV4dFxufTtcbiIsImltcG9ydCB7XG4gIF9fbmFtZSxcbiAgbG9nXG59IGZyb20gXCIuL2NodW5rLVlUSk5UN0RVLm1qc1wiO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvaWNvbnMudHNcbmltcG9ydCB7IGdldEljb25EYXRhLCBpY29uVG9IVE1MLCBpY29uVG9TVkcsIHJlcGxhY2VJRHMsIHN0cmluZ1RvSWNvbiB9IGZyb20gXCJAaWNvbmlmeS91dGlsc1wiO1xudmFyIHVua25vd25JY29uID0ge1xuICBib2R5OiAnPGc+PHJlY3Qgd2lkdGg9XCI4MFwiIGhlaWdodD1cIjgwXCIgc3R5bGU9XCJmaWxsOiAjMDg3ZWJmOyBzdHJva2Utd2lkdGg6IDBweDtcIi8+PHRleHQgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDIxLjE2IDY0LjY3KVwiIHN0eWxlPVwiZmlsbDogI2ZmZjsgZm9udC1mYW1pbHk6IEFyaWFsTVQsIEFyaWFsOyBmb250LXNpemU6IDY3Ljc1cHg7XCI+PHRzcGFuIHg9XCIwXCIgeT1cIjBcIj4/PC90c3Bhbj48L3RleHQ+PC9nPicsXG4gIGhlaWdodDogODAsXG4gIHdpZHRoOiA4MFxufTtcbnZhciBpY29uc1N0b3JlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbnZhciBsb2FkZXJTdG9yZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG52YXIgcmVnaXN0ZXJJY29uUGFja3MgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpY29uTG9hZGVycykgPT4ge1xuICBmb3IgKGNvbnN0IGljb25Mb2FkZXIgb2YgaWNvbkxvYWRlcnMpIHtcbiAgICBpZiAoIWljb25Mb2FkZXIubmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBpY29uIGxvYWRlci4gTXVzdCBoYXZlIGEgXCJuYW1lXCIgcHJvcGVydHkgd2l0aCBub24tZW1wdHkgc3RyaW5nIHZhbHVlLidcbiAgICAgICk7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhcIlJlZ2lzdGVyaW5nIGljb24gcGFjazpcIiwgaWNvbkxvYWRlci5uYW1lKTtcbiAgICBpZiAoXCJsb2FkZXJcIiBpbiBpY29uTG9hZGVyKSB7XG4gICAgICBsb2FkZXJTdG9yZS5zZXQoaWNvbkxvYWRlci5uYW1lLCBpY29uTG9hZGVyLmxvYWRlcik7XG4gICAgfSBlbHNlIGlmIChcImljb25zXCIgaW4gaWNvbkxvYWRlcikge1xuICAgICAgaWNvbnNTdG9yZS5zZXQoaWNvbkxvYWRlci5uYW1lLCBpY29uTG9hZGVyLmljb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmVycm9yKFwiSW52YWxpZCBpY29uIGxvYWRlcjpcIiwgaWNvbkxvYWRlcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaWNvbiBsb2FkZXIuIE11c3QgaGF2ZSBlaXRoZXIgXCJpY29uc1wiIG9yIFwibG9hZGVyXCIgcHJvcGVydHkuJyk7XG4gICAgfVxuICB9XG59LCBcInJlZ2lzdGVySWNvblBhY2tzXCIpO1xudmFyIGdldFJlZ2lzdGVyZWRJY29uRGF0YSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKGljb25OYW1lLCBmYWxsYmFja1ByZWZpeCkgPT4ge1xuICBjb25zdCBkYXRhID0gc3RyaW5nVG9JY29uKGljb25OYW1lLCB0cnVlLCBmYWxsYmFja1ByZWZpeCAhPT0gdm9pZCAwKTtcbiAgaWYgKCFkYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGljb24gbmFtZTogJHtpY29uTmFtZX1gKTtcbiAgfVxuICBjb25zdCBwcmVmaXggPSBkYXRhLnByZWZpeCB8fCBmYWxsYmFja1ByZWZpeDtcbiAgaWYgKCFwcmVmaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEljb24gbmFtZSBtdXN0IGNvbnRhaW4gYSBwcmVmaXg6ICR7aWNvbk5hbWV9YCk7XG4gIH1cbiAgbGV0IGljb25zID0gaWNvbnNTdG9yZS5nZXQocHJlZml4KTtcbiAgaWYgKCFpY29ucykge1xuICAgIGNvbnN0IGxvYWRlciA9IGxvYWRlclN0b3JlLmdldChwcmVmaXgpO1xuICAgIGlmICghbG9hZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEljb24gc2V0IG5vdCBmb3VuZDogJHtkYXRhLnByZWZpeH1gKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxvYWRlZCA9IGF3YWl0IGxvYWRlcigpO1xuICAgICAgaWNvbnMgPSB7IC4uLmxvYWRlZCwgcHJlZml4IH07XG4gICAgICBpY29uc1N0b3JlLnNldChwcmVmaXgsIGljb25zKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBsb2FkIGljb24gc2V0OiAke2RhdGEucHJlZml4fWApO1xuICAgIH1cbiAgfVxuICBjb25zdCBpY29uRGF0YSA9IGdldEljb25EYXRhKGljb25zLCBkYXRhLm5hbWUpO1xuICBpZiAoIWljb25EYXRhKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJY29uIG5vdCBmb3VuZDogJHtpY29uTmFtZX1gKTtcbiAgfVxuICByZXR1cm4gaWNvbkRhdGE7XG59LCBcImdldFJlZ2lzdGVyZWRJY29uRGF0YVwiKTtcbnZhciBnZXRJY29uU1ZHID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoaWNvbk5hbWUsIGN1c3RvbWlzYXRpb25zKSA9PiB7XG4gIGxldCBpY29uRGF0YTtcbiAgdHJ5IHtcbiAgICBpY29uRGF0YSA9IGF3YWl0IGdldFJlZ2lzdGVyZWRJY29uRGF0YShpY29uTmFtZSwgY3VzdG9taXNhdGlvbnM/LmZhbGxiYWNrUHJlZml4KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvcihlKTtcbiAgICBpY29uRGF0YSA9IHVua25vd25JY29uO1xuICB9XG4gIGNvbnN0IHJlbmRlckRhdGEgPSBpY29uVG9TVkcoaWNvbkRhdGEsIGN1c3RvbWlzYXRpb25zKTtcbiAgY29uc3Qgc3ZnID0gaWNvblRvSFRNTChyZXBsYWNlSURzKHJlbmRlckRhdGEuYm9keSksIHJlbmRlckRhdGEuYXR0cmlidXRlcyk7XG4gIHJldHVybiBzdmc7XG59LCBcImdldEljb25TVkdcIik7XG5cbmV4cG9ydCB7XG4gIHVua25vd25JY29uLFxuICByZWdpc3Rlckljb25QYWNrcyxcbiAgZ2V0SWNvblNWR1xufTtcbiIsImltcG9ydCB7XG4gIGdldFN1YkdyYXBoVGl0bGVNYXJnaW5zXG59IGZyb20gXCIuL2NodW5rLUs1NTdONUlaLm1qc1wiO1xuaW1wb3J0IHtcbiAgZ2V0SWNvblNWR1xufSBmcm9tIFwiLi9jaHVuay1IMkQySlEzSS5tanNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVRleHRcbn0gZnJvbSBcIi4vY2h1bmstQzNNUTVBTk0ubWpzXCI7XG5pbXBvcnQge1xuICBjYWxjdWxhdGVUZXh0V2lkdGgsXG4gIGRlY29kZUVudGl0aWVzLFxuICBoYW5kbGVVbmRlZmluZWRBdHRyLFxuICBwYXJzZUZvbnRTaXplXG59IGZyb20gXCIuL2NodW5rLU80Tkk2VU5VLm1qc1wiO1xuaW1wb3J0IHtcbiAgX19uYW1lLFxuICBjb21tb25fZGVmYXVsdCxcbiAgZGVmYXVsdENvbmZpZ19kZWZhdWx0LFxuICBldmFsdWF0ZSxcbiAgZ2V0Q29uZmlnLFxuICBnZXRDb25maWcyLFxuICBoYXNLYXRleCxcbiAgbG9nLFxuICBwYXJzZUdlbmVyaWNUeXBlcyxcbiAgcmVuZGVyS2F0ZXgsXG4gIHNhbml0aXplVGV4dCxcbiAgc2FuaXRpemVUZXh0MlxufSBmcm9tIFwiLi9jaHVuay1ZVEpOVDdEVS5tanNcIjtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvdXRpbC50c1xuaW1wb3J0IHsgc2VsZWN0IH0gZnJvbSBcImQzXCI7XG52YXIgbGFiZWxIZWxwZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJlbnQsIG5vZGUsIF9jbGFzc2VzKSA9PiB7XG4gIGxldCBjc3NDbGFzc2VzO1xuICBjb25zdCB1c2VIdG1sTGFiZWxzID0gbm9kZS51c2VIdG1sTGFiZWxzIHx8IGV2YWx1YXRlKGdldENvbmZpZzIoKT8uaHRtbExhYmVscyk7XG4gIGlmICghX2NsYXNzZXMpIHtcbiAgICBjc3NDbGFzc2VzID0gXCJub2RlIGRlZmF1bHRcIjtcbiAgfSBlbHNlIHtcbiAgICBjc3NDbGFzc2VzID0gX2NsYXNzZXM7XG4gIH1cbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgY3NzQ2xhc3NlcykuYXR0cihcImlkXCIsIG5vZGUuZG9tSWQgfHwgbm9kZS5pZCk7XG4gIGNvbnN0IGxhYmVsRWwgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpLmF0dHIoXCJzdHlsZVwiLCBoYW5kbGVVbmRlZmluZWRBdHRyKG5vZGUubGFiZWxTdHlsZSkpO1xuICBsZXQgbGFiZWw7XG4gIGlmIChub2RlLmxhYmVsID09PSB2b2lkIDApIHtcbiAgICBsYWJlbCA9IFwiXCI7XG4gIH0gZWxzZSB7XG4gICAgbGFiZWwgPSB0eXBlb2Ygbm9kZS5sYWJlbCA9PT0gXCJzdHJpbmdcIiA/IG5vZGUubGFiZWwgOiBub2RlLmxhYmVsWzBdO1xuICB9XG4gIGNvbnN0IHRleHQyID0gYXdhaXQgY3JlYXRlVGV4dChsYWJlbEVsLCBzYW5pdGl6ZVRleHQoZGVjb2RlRW50aXRpZXMobGFiZWwpLCBnZXRDb25maWcyKCkpLCB7XG4gICAgdXNlSHRtbExhYmVscyxcbiAgICB3aWR0aDogbm9kZS53aWR0aCB8fCBnZXRDb25maWcyKCkuZmxvd2NoYXJ0Py53cmFwcGluZ1dpZHRoLFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gVGhpcyBpcyBjdXJyZW50bHkgbm90IHVzZWQuIFNob3VsZCB0aGlzIGJlIGBjbGFzc2VzYCBpbnN0ZWFkP1xuICAgIGNzc0NsYXNzZXM6IFwibWFya2Rvd24tbm9kZS1sYWJlbFwiLFxuICAgIHN0eWxlOiBub2RlLmxhYmVsU3R5bGUsXG4gICAgYWRkU3ZnQmFja2dyb3VuZDogISFub2RlLmljb24gfHwgISFub2RlLmltZ1xuICB9KTtcbiAgbGV0IGJib3ggPSB0ZXh0Mi5nZXRCQm94KCk7XG4gIGNvbnN0IGhhbGZQYWRkaW5nID0gKG5vZGU/LnBhZGRpbmcgPz8gMCkgLyAyO1xuICBpZiAodXNlSHRtbExhYmVscykge1xuICAgIGNvbnN0IGRpdiA9IHRleHQyLmNoaWxkcmVuWzBdO1xuICAgIGNvbnN0IGR2ID0gc2VsZWN0KHRleHQyKTtcbiAgICBjb25zdCBpbWFnZXMgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIik7XG4gICAgaWYgKGltYWdlcykge1xuICAgICAgY29uc3Qgbm9JbWdUZXh0ID0gbGFiZWwucmVwbGFjZSgvPGltZ1tePl0qPi9nLCBcIlwiKS50cmltKCkgPT09IFwiXCI7XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgWy4uLmltYWdlc10ubWFwKFxuICAgICAgICAgIChpbWcpID0+IG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwSW1hZ2UoKSB7XG4gICAgICAgICAgICAgIGltZy5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gICAgICAgICAgICAgIGltZy5zdHlsZS5mbGV4RGlyZWN0aW9uID0gXCJjb2x1bW5cIjtcbiAgICAgICAgICAgICAgaWYgKG5vSW1nVGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHlGb250U2l6ZSA9IGdldENvbmZpZzIoKS5mb250U2l6ZSA/IGdldENvbmZpZzIoKS5mb250U2l6ZSA6IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmJvZHkpLmZvbnRTaXplO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVubGFyZ2luZ0ZhY3RvciA9IDU7XG4gICAgICAgICAgICAgICAgY29uc3QgW3BhcnNlZEJvZHlGb250U2l6ZSA9IGRlZmF1bHRDb25maWdfZGVmYXVsdC5mb250U2l6ZV0gPSBwYXJzZUZvbnRTaXplKGJvZHlGb250U2l6ZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBwYXJzZWRCb2R5Rm9udFNpemUgKiBlbmxhcmdpbmdGYWN0b3IgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgaW1nLnN0eWxlLm1pbldpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgICAgaW1nLnN0eWxlLm1heFdpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1nLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVzKGltZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfX25hbWUoc2V0dXBJbWFnZSwgXCJzZXR1cEltYWdlXCIpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChpbWcuY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBzZXR1cEltYWdlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBzZXR1cEltYWdlKTtcbiAgICAgICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBzZXR1cEltYWdlKTtcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICBiYm94ID0gZGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGR2LmF0dHIoXCJ3aWR0aFwiLCBiYm94LndpZHRoKTtcbiAgICBkdi5hdHRyKFwiaGVpZ2h0XCIsIGJib3guaGVpZ2h0KTtcbiAgfVxuICBpZiAodXNlSHRtbExhYmVscykge1xuICAgIGxhYmVsRWwuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIC1iYm94LndpZHRoIC8gMiArIFwiLCBcIiArIC1iYm94LmhlaWdodCAvIDIgKyBcIilcIik7XG4gIH0gZWxzZSB7XG4gICAgbGFiZWxFbC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsIFwiICsgLWJib3guaGVpZ2h0IC8gMiArIFwiKVwiKTtcbiAgfVxuICBpZiAobm9kZS5jZW50ZXJMYWJlbCkge1xuICAgIGxhYmVsRWwuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIC1iYm94LndpZHRoIC8gMiArIFwiLCBcIiArIC1iYm94LmhlaWdodCAvIDIgKyBcIilcIik7XG4gIH1cbiAgbGFiZWxFbC5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICByZXR1cm4geyBzaGFwZVN2ZywgYmJveCwgaGFsZlBhZGRpbmcsIGxhYmVsOiBsYWJlbEVsIH07XG59LCBcImxhYmVsSGVscGVyXCIpO1xudmFyIGluc2VydExhYmVsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyZW50LCBsYWJlbCwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB1c2VIdG1sTGFiZWxzID0gb3B0aW9ucy51c2VIdG1sTGFiZWxzIHx8IGV2YWx1YXRlKGdldENvbmZpZzIoKT8uZmxvd2NoYXJ0Py5odG1sTGFiZWxzKTtcbiAgY29uc3QgbGFiZWxFbCA9IHBhcmVudC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpLmF0dHIoXCJzdHlsZVwiLCBvcHRpb25zLmxhYmVsU3R5bGUgfHwgXCJcIik7XG4gIGNvbnN0IHRleHQyID0gYXdhaXQgY3JlYXRlVGV4dChsYWJlbEVsLCBzYW5pdGl6ZVRleHQoZGVjb2RlRW50aXRpZXMobGFiZWwpLCBnZXRDb25maWcyKCkpLCB7XG4gICAgdXNlSHRtbExhYmVscyxcbiAgICB3aWR0aDogb3B0aW9ucy53aWR0aCB8fCBnZXRDb25maWcyKCk/LmZsb3djaGFydD8ud3JhcHBpbmdXaWR0aCxcbiAgICBzdHlsZTogb3B0aW9ucy5sYWJlbFN0eWxlLFxuICAgIGFkZFN2Z0JhY2tncm91bmQ6ICEhb3B0aW9ucy5pY29uIHx8ICEhb3B0aW9ucy5pbWdcbiAgfSk7XG4gIGxldCBiYm94ID0gdGV4dDIuZ2V0QkJveCgpO1xuICBjb25zdCBoYWxmUGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyAvIDI7XG4gIGlmIChldmFsdWF0ZShnZXRDb25maWcyKCk/LmZsb3djaGFydD8uaHRtbExhYmVscykpIHtcbiAgICBjb25zdCBkaXYgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBjb25zdCBkdiA9IHNlbGVjdCh0ZXh0Mik7XG4gICAgYmJveCA9IGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBkdi5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCk7XG4gICAgZHYuYXR0cihcImhlaWdodFwiLCBiYm94LmhlaWdodCk7XG4gIH1cbiAgaWYgKHVzZUh0bWxMYWJlbHMpIHtcbiAgICBsYWJlbEVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAtYmJveC53aWR0aCAvIDIgKyBcIiwgXCIgKyAtYmJveC5oZWlnaHQgLyAyICsgXCIpXCIpO1xuICB9IGVsc2Uge1xuICAgIGxhYmVsRWwuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIC1iYm94LmhlaWdodCAvIDIgKyBcIilcIik7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY2VudGVyTGFiZWwpIHtcbiAgICBsYWJlbEVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAtYmJveC53aWR0aCAvIDIgKyBcIiwgXCIgKyAtYmJveC5oZWlnaHQgLyAyICsgXCIpXCIpO1xuICB9XG4gIGxhYmVsRWwuaW5zZXJ0KFwicmVjdFwiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcmV0dXJuIHsgc2hhcGVTdmc6IHBhcmVudCwgYmJveCwgaGFsZlBhZGRpbmcsIGxhYmVsOiBsYWJlbEVsIH07XG59LCBcImluc2VydExhYmVsXCIpO1xudmFyIHVwZGF0ZU5vZGVCb3VuZHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChub2RlLCBlbGVtZW50KSA9PiB7XG4gIGNvbnN0IGJib3ggPSBlbGVtZW50Lm5vZGUoKS5nZXRCQm94KCk7XG4gIG5vZGUud2lkdGggPSBiYm94LndpZHRoO1xuICBub2RlLmhlaWdodCA9IGJib3guaGVpZ2h0O1xufSwgXCJ1cGRhdGVOb2RlQm91bmRzXCIpO1xudmFyIGdldE5vZGVDbGFzc2VzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobm9kZSwgZXh0cmEpID0+IChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIgPyBcInJvdWdoLW5vZGVcIiA6IFwibm9kZVwiKSArIFwiIFwiICsgbm9kZS5jc3NDbGFzc2VzICsgXCIgXCIgKyAoZXh0cmEgfHwgXCJcIiksIFwiZ2V0Tm9kZUNsYXNzZXNcIik7XG5mdW5jdGlvbiBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpIHtcbiAgY29uc3QgcG9pbnRTdHJpbmdzID0gcG9pbnRzLm1hcCgocCwgaSkgPT4gYCR7aSA9PT0gMCA/IFwiTVwiIDogXCJMXCJ9JHtwLnh9LCR7cC55fWApO1xuICBwb2ludFN0cmluZ3MucHVzaChcIlpcIik7XG4gIHJldHVybiBwb2ludFN0cmluZ3Muam9pbihcIiBcIik7XG59XG5fX25hbWUoY3JlYXRlUGF0aEZyb21Qb2ludHMsIFwiY3JlYXRlUGF0aEZyb21Qb2ludHNcIik7XG5mdW5jdGlvbiBnZW5lcmF0ZUZ1bGxTaW5lV2F2ZVBvaW50cyh4MSwgeTEsIHgyLCB5MiwgYW1wbGl0dWRlLCBudW1DeWNsZXMpIHtcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGNvbnN0IHN0ZXBzID0gNTA7XG4gIGNvbnN0IGRlbHRhWCA9IHgyIC0geDE7XG4gIGNvbnN0IGRlbHRhWSA9IHkyIC0geTE7XG4gIGNvbnN0IGN5Y2xlTGVuZ3RoID0gZGVsdGFYIC8gbnVtQ3ljbGVzO1xuICBjb25zdCBmcmVxdWVuY3kgPSAyICogTWF0aC5QSSAvIGN5Y2xlTGVuZ3RoO1xuICBjb25zdCBtaWRZID0geTEgKyBkZWx0YVkgLyAyO1xuICBmb3IgKGxldCBpID0gMDsgaSA8PSBzdGVwczsgaSsrKSB7XG4gICAgY29uc3QgdCA9IGkgLyBzdGVwcztcbiAgICBjb25zdCB4ID0geDEgKyB0ICogZGVsdGFYO1xuICAgIGNvbnN0IHkgPSBtaWRZICsgYW1wbGl0dWRlICogTWF0aC5zaW4oZnJlcXVlbmN5ICogKHggLSB4MSkpO1xuICAgIHBvaW50cy5wdXNoKHsgeCwgeSB9KTtcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuX19uYW1lKGdlbmVyYXRlRnVsbFNpbmVXYXZlUG9pbnRzLCBcImdlbmVyYXRlRnVsbFNpbmVXYXZlUG9pbnRzXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGVDaXJjbGVQb2ludHMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCBudW1Qb2ludHMsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSB7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBjb25zdCBzdGFydEFuZ2xlUmFkID0gc3RhcnRBbmdsZSAqIE1hdGguUEkgLyAxODA7XG4gIGNvbnN0IGVuZEFuZ2xlUmFkID0gZW5kQW5nbGUgKiBNYXRoLlBJIC8gMTgwO1xuICBjb25zdCBhbmdsZVJhbmdlID0gZW5kQW5nbGVSYWQgLSBzdGFydEFuZ2xlUmFkO1xuICBjb25zdCBhbmdsZVN0ZXAgPSBhbmdsZVJhbmdlIC8gKG51bVBvaW50cyAtIDEpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7XG4gICAgY29uc3QgYW5nbGUgPSBzdGFydEFuZ2xlUmFkICsgaSAqIGFuZ2xlU3RlcDtcbiAgICBjb25zdCB4ID0gY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICBjb25zdCB5ID0gY2VudGVyWSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICBwb2ludHMucHVzaCh7IHg6IC14LCB5OiAteSB9KTtcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuX19uYW1lKGdlbmVyYXRlQ2lyY2xlUG9pbnRzLCBcImdlbmVyYXRlQ2lyY2xlUG9pbnRzXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL2NsdXN0ZXJzLmpzXG5pbXBvcnQgeyBzZWxlY3QgYXMgc2VsZWN0MyB9IGZyb20gXCJkM1wiO1xuaW1wb3J0IHJvdWdoIGZyb20gXCJyb3VnaGpzXCI7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvaW50ZXJzZWN0L2ludGVyc2VjdC1yZWN0LmpzXG52YXIgaW50ZXJzZWN0UmVjdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG5vZGUsIHBvaW50KSA9PiB7XG4gIHZhciB4ID0gbm9kZS54O1xuICB2YXIgeSA9IG5vZGUueTtcbiAgdmFyIGR4ID0gcG9pbnQueCAtIHg7XG4gIHZhciBkeSA9IHBvaW50LnkgLSB5O1xuICB2YXIgdyA9IG5vZGUud2lkdGggLyAyO1xuICB2YXIgaCA9IG5vZGUuaGVpZ2h0IC8gMjtcbiAgdmFyIHN4LCBzeTtcbiAgaWYgKE1hdGguYWJzKGR5KSAqIHcgPiBNYXRoLmFicyhkeCkgKiBoKSB7XG4gICAgaWYgKGR5IDwgMCkge1xuICAgICAgaCA9IC1oO1xuICAgIH1cbiAgICBzeCA9IGR5ID09PSAwID8gMCA6IGggKiBkeCAvIGR5O1xuICAgIHN5ID0gaDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICB3ID0gLXc7XG4gICAgfVxuICAgIHN4ID0gdztcbiAgICBzeSA9IGR4ID09PSAwID8gMCA6IHcgKiBkeSAvIGR4O1xuICB9XG4gIHJldHVybiB7IHg6IHggKyBzeCwgeTogeSArIHN5IH07XG59LCBcImludGVyc2VjdFJlY3RcIik7XG52YXIgaW50ZXJzZWN0X3JlY3RfZGVmYXVsdCA9IGludGVyc2VjdFJlY3Q7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvY3JlYXRlTGFiZWwuanNcbmltcG9ydCB7IHNlbGVjdCBhcyBzZWxlY3QyIH0gZnJvbSBcImQzXCI7XG5mdW5jdGlvbiBhcHBseVN0eWxlKGRvbSwgc3R5bGVGbikge1xuICBpZiAoc3R5bGVGbikge1xuICAgIGRvbS5hdHRyKFwic3R5bGVcIiwgc3R5bGVGbik7XG4gIH1cbn1cbl9fbmFtZShhcHBseVN0eWxlLCBcImFwcGx5U3R5bGVcIik7XG5hc3luYyBmdW5jdGlvbiBhZGRIdG1sTGFiZWwobm9kZSkge1xuICBjb25zdCBmbyA9IHNlbGVjdDIoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJmb3JlaWduT2JqZWN0XCIpKTtcbiAgY29uc3QgZGl2ID0gZm8uYXBwZW5kKFwieGh0bWw6ZGl2XCIpO1xuICBsZXQgbGFiZWwgPSBub2RlLmxhYmVsO1xuICBpZiAobm9kZS5sYWJlbCAmJiBoYXNLYXRleChub2RlLmxhYmVsKSkge1xuICAgIGxhYmVsID0gYXdhaXQgcmVuZGVyS2F0ZXgobm9kZS5sYWJlbC5yZXBsYWNlKGNvbW1vbl9kZWZhdWx0LmxpbmVCcmVha1JlZ2V4LCBcIlxcblwiKSwgZ2V0Q29uZmlnMigpKTtcbiAgfVxuICBjb25zdCBsYWJlbENsYXNzID0gbm9kZS5pc05vZGUgPyBcIm5vZGVMYWJlbFwiIDogXCJlZGdlTGFiZWxcIjtcbiAgZGl2Lmh0bWwoXG4gICAgJzxzcGFuIGNsYXNzPVwiJyArIGxhYmVsQ2xhc3MgKyAnXCIgJyArIChub2RlLmxhYmVsU3R5bGUgPyAnc3R5bGU9XCInICsgbm9kZS5sYWJlbFN0eWxlICsgJ1wiJyA6IFwiXCIpICsgLy8gY29kZXFsIFtqcy9odG1sLWNvbnN0cnVjdGVkLWZyb20taW5wdXRdIDogZmFsc2UgcG9zaXRpdmVcbiAgICBcIj5cIiArIGxhYmVsICsgXCI8L3NwYW4+XCJcbiAgKTtcbiAgYXBwbHlTdHlsZShkaXYsIG5vZGUubGFiZWxTdHlsZSk7XG4gIGRpdi5zdHlsZShcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XG4gIGRpdi5zdHlsZShcInBhZGRpbmctcmlnaHRcIiwgXCIxcHhcIik7XG4gIGRpdi5zdHlsZShcIndoaXRlLXNwYWNlXCIsIFwibm93cmFwXCIpO1xuICBkaXYuYXR0cihcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiKTtcbiAgcmV0dXJuIGZvLm5vZGUoKTtcbn1cbl9fbmFtZShhZGRIdG1sTGFiZWwsIFwiYWRkSHRtbExhYmVsXCIpO1xudmFyIGNyZWF0ZUxhYmVsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoX3ZlcnRleFRleHQsIHN0eWxlLCBpc1RpdGxlLCBpc05vZGUpID0+IHtcbiAgbGV0IHZlcnRleFRleHQgPSBfdmVydGV4VGV4dCB8fCBcIlwiO1xuICBpZiAodHlwZW9mIHZlcnRleFRleHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICB2ZXJ0ZXhUZXh0ID0gdmVydGV4VGV4dFswXTtcbiAgfVxuICBpZiAoZXZhbHVhdGUoZ2V0Q29uZmlnMigpLmZsb3djaGFydC5odG1sTGFiZWxzKSkge1xuICAgIHZlcnRleFRleHQgPSB2ZXJ0ZXhUZXh0LnJlcGxhY2UoL1xcXFxufFxcbi9nLCBcIjxiciAvPlwiKTtcbiAgICBsb2cuaW5mbyhcInZlcnRleFRleHRcIiArIHZlcnRleFRleHQpO1xuICAgIGNvbnN0IG5vZGUgPSB7XG4gICAgICBpc05vZGUsXG4gICAgICBsYWJlbDogZGVjb2RlRW50aXRpZXModmVydGV4VGV4dCkucmVwbGFjZShcbiAgICAgICAgL2ZhW2JscnNdPzpmYS1bXFx3LV0rL2csXG4gICAgICAgIChzKSA9PiBgPGkgY2xhc3M9JyR7cy5yZXBsYWNlKFwiOlwiLCBcIiBcIil9Jz48L2k+YFxuICAgICAgKSxcbiAgICAgIGxhYmVsU3R5bGU6IHN0eWxlID8gc3R5bGUucmVwbGFjZShcImZpbGw6XCIsIFwiY29sb3I6XCIpIDogc3R5bGVcbiAgICB9O1xuICAgIGxldCB2ZXJ0ZXhOb2RlID0gYXdhaXQgYWRkSHRtbExhYmVsKG5vZGUpO1xuICAgIHJldHVybiB2ZXJ0ZXhOb2RlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHN2Z0xhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ0ZXh0XCIpO1xuICAgIHN2Z0xhYmVsLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIHN0eWxlLnJlcGxhY2UoXCJjb2xvcjpcIiwgXCJmaWxsOlwiKSk7XG4gICAgbGV0IHJvd3MgPSBbXTtcbiAgICBpZiAodHlwZW9mIHZlcnRleFRleHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJvd3MgPSB2ZXJ0ZXhUZXh0LnNwbGl0KC9cXFxcbnxcXG58PGJyXFxzKlxcLz8+L2dpKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmVydGV4VGV4dCkpIHtcbiAgICAgIHJvd3MgPSB2ZXJ0ZXhUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICByb3dzID0gW107XG4gICAgfVxuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcbiAgICAgIGNvbnN0IHRzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ0c3BhblwiKTtcbiAgICAgIHRzcGFuLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsIFwieG1sOnNwYWNlXCIsIFwicHJlc2VydmVcIik7XG4gICAgICB0c3Bhbi5zZXRBdHRyaWJ1dGUoXCJkeVwiLCBcIjFlbVwiKTtcbiAgICAgIHRzcGFuLnNldEF0dHJpYnV0ZShcInhcIiwgXCIwXCIpO1xuICAgICAgaWYgKGlzVGl0bGUpIHtcbiAgICAgICAgdHNwYW4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ0aXRsZS1yb3dcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0c3Bhbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInJvd1wiKTtcbiAgICAgIH1cbiAgICAgIHRzcGFuLnRleHRDb250ZW50ID0gcm93LnRyaW0oKTtcbiAgICAgIHN2Z0xhYmVsLmFwcGVuZENoaWxkKHRzcGFuKTtcbiAgICB9XG4gICAgcmV0dXJuIHN2Z0xhYmVsO1xuICB9XG59LCBcImNyZWF0ZUxhYmVsXCIpO1xudmFyIGNyZWF0ZUxhYmVsX2RlZmF1bHQgPSBjcmVhdGVMYWJlbDtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvcm91bmRlZFJlY3RQYXRoLnRzXG52YXIgY3JlYXRlUm91bmRlZFJlY3RQYXRoRCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCByYWRpdXMpID0+IFtcbiAgXCJNXCIsXG4gIHggKyByYWRpdXMsXG4gIHksXG4gIC8vIE1vdmUgdG8gdGhlIGZpcnN0IHBvaW50XG4gIFwiSFwiLFxuICB4ICsgdG90YWxXaWR0aCAtIHJhZGl1cyxcbiAgLy8gRHJhdyBob3Jpem9udGFsIGxpbmUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgcmlnaHQgY29ybmVyXG4gIFwiQVwiLFxuICByYWRpdXMsXG4gIHJhZGl1cyxcbiAgMCxcbiAgMCxcbiAgMSxcbiAgeCArIHRvdGFsV2lkdGgsXG4gIHkgKyByYWRpdXMsXG4gIC8vIERyYXcgYXJjIHRvIHRoZSByaWdodCB0b3AgY29ybmVyXG4gIFwiVlwiLFxuICB5ICsgdG90YWxIZWlnaHQgLSByYWRpdXMsXG4gIC8vIERyYXcgdmVydGljYWwgbGluZSBkb3duIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJpZ2h0IGJvdHRvbSBjb3JuZXJcbiAgXCJBXCIsXG4gIHJhZGl1cyxcbiAgcmFkaXVzLFxuICAwLFxuICAwLFxuICAxLFxuICB4ICsgdG90YWxXaWR0aCAtIHJhZGl1cyxcbiAgeSArIHRvdGFsSGVpZ2h0LFxuICAvLyBEcmF3IGFyYyB0byB0aGUgcmlnaHQgYm90dG9tIGNvcm5lclxuICBcIkhcIixcbiAgeCArIHJhZGl1cyxcbiAgLy8gRHJhdyBob3Jpem9udGFsIGxpbmUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGVmdCBib3R0b20gY29ybmVyXG4gIFwiQVwiLFxuICByYWRpdXMsXG4gIHJhZGl1cyxcbiAgMCxcbiAgMCxcbiAgMSxcbiAgeCxcbiAgeSArIHRvdGFsSGVpZ2h0IC0gcmFkaXVzLFxuICAvLyBEcmF3IGFyYyB0byB0aGUgbGVmdCBib3R0b20gY29ybmVyXG4gIFwiVlwiLFxuICB5ICsgcmFkaXVzLFxuICAvLyBEcmF3IHZlcnRpY2FsIGxpbmUgdXAgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGVmdCB0b3AgY29ybmVyXG4gIFwiQVwiLFxuICByYWRpdXMsXG4gIHJhZGl1cyxcbiAgMCxcbiAgMCxcbiAgMSxcbiAgeCArIHJhZGl1cyxcbiAgeSxcbiAgLy8gRHJhdyBhcmMgdG8gdGhlIGxlZnQgdG9wIGNvcm5lclxuICBcIlpcIlxuICAvLyBDbG9zZSB0aGUgcGF0aFxuXS5qb2luKFwiIFwiKSwgXCJjcmVhdGVSb3VuZGVkUmVjdFBhdGhEXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9oYW5kRHJhd25TaGFwZVN0eWxlcy50c1xudmFyIHNvbGlkU3RhdGVGaWxsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29sb3IpID0+IHtcbiAgY29uc3QgeyBoYW5kRHJhd25TZWVkIH0gPSBnZXRDb25maWcyKCk7XG4gIHJldHVybiB7XG4gICAgZmlsbDogY29sb3IsXG4gICAgaGFjaHVyZUFuZ2xlOiAxMjAsXG4gICAgLy8gYW5nbGUgb2YgaGFjaHVyZSxcbiAgICBoYWNodXJlR2FwOiA0LFxuICAgIGZpbGxXZWlnaHQ6IDIsXG4gICAgcm91Z2huZXNzOiAwLjcsXG4gICAgc3Ryb2tlOiBjb2xvcixcbiAgICBzZWVkOiBoYW5kRHJhd25TZWVkXG4gIH07XG59LCBcInNvbGlkU3RhdGVGaWxsXCIpO1xudmFyIGNvbXBpbGVTdHlsZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChub2RlKSA9PiB7XG4gIGNvbnN0IHN0eWxlc01hcCA9IHN0eWxlczJNYXAoWy4uLm5vZGUuY3NzQ29tcGlsZWRTdHlsZXMgfHwgW10sIC4uLm5vZGUuY3NzU3R5bGVzIHx8IFtdXSk7XG4gIHJldHVybiB7IHN0eWxlc01hcCwgc3R5bGVzQXJyYXk6IFsuLi5zdHlsZXNNYXBdIH07XG59LCBcImNvbXBpbGVTdHlsZXNcIik7XG52YXIgc3R5bGVzMk1hcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHN0eWxlcykgPT4ge1xuICBjb25zdCBzdHlsZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHN0eWxlcy5mb3JFYWNoKChzdHlsZSkgPT4ge1xuICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHN0eWxlLnNwbGl0KFwiOlwiKTtcbiAgICBzdHlsZU1hcC5zZXQoa2V5LnRyaW0oKSwgdmFsdWU/LnRyaW0oKSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVNYXA7XG59LCBcInN0eWxlczJNYXBcIik7XG52YXIgaXNMYWJlbFN0eWxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoa2V5KSA9PiB7XG4gIHJldHVybiBrZXkgPT09IFwiY29sb3JcIiB8fCBrZXkgPT09IFwiZm9udC1zaXplXCIgfHwga2V5ID09PSBcImZvbnQtZmFtaWx5XCIgfHwga2V5ID09PSBcImZvbnQtd2VpZ2h0XCIgfHwga2V5ID09PSBcImZvbnQtc3R5bGVcIiB8fCBrZXkgPT09IFwidGV4dC1kZWNvcmF0aW9uXCIgfHwga2V5ID09PSBcInRleHQtYWxpZ25cIiB8fCBrZXkgPT09IFwidGV4dC10cmFuc2Zvcm1cIiB8fCBrZXkgPT09IFwibGluZS1oZWlnaHRcIiB8fCBrZXkgPT09IFwibGV0dGVyLXNwYWNpbmdcIiB8fCBrZXkgPT09IFwid29yZC1zcGFjaW5nXCIgfHwga2V5ID09PSBcInRleHQtc2hhZG93XCIgfHwga2V5ID09PSBcInRleHQtb3ZlcmZsb3dcIiB8fCBrZXkgPT09IFwid2hpdGUtc3BhY2VcIiB8fCBrZXkgPT09IFwid29yZC13cmFwXCIgfHwga2V5ID09PSBcIndvcmQtYnJlYWtcIiB8fCBrZXkgPT09IFwib3ZlcmZsb3ctd3JhcFwiIHx8IGtleSA9PT0gXCJoeXBoZW5zXCI7XG59LCBcImlzTGFiZWxTdHlsZVwiKTtcbnZhciBzdHlsZXMyU3RyaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobm9kZSkgPT4ge1xuICBjb25zdCB7IHN0eWxlc0FycmF5IH0gPSBjb21waWxlU3R5bGVzKG5vZGUpO1xuICBjb25zdCBsYWJlbFN0eWxlcyA9IFtdO1xuICBjb25zdCBub2RlU3R5bGVzID0gW107XG4gIGNvbnN0IGJvcmRlclN0eWxlcyA9IFtdO1xuICBjb25zdCBiYWNrZ3JvdW5kU3R5bGVzID0gW107XG4gIHN0eWxlc0FycmF5LmZvckVhY2goKHN0eWxlKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gc3R5bGVbMF07XG4gICAgaWYgKGlzTGFiZWxTdHlsZShrZXkpKSB7XG4gICAgICBsYWJlbFN0eWxlcy5wdXNoKHN0eWxlLmpvaW4oXCI6XCIpICsgXCIgIWltcG9ydGFudFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZVN0eWxlcy5wdXNoKHN0eWxlLmpvaW4oXCI6XCIpICsgXCIgIWltcG9ydGFudFwiKTtcbiAgICAgIGlmIChrZXkuaW5jbHVkZXMoXCJzdHJva2VcIikpIHtcbiAgICAgICAgYm9yZGVyU3R5bGVzLnB1c2goc3R5bGUuam9pbihcIjpcIikgKyBcIiAhaW1wb3J0YW50XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gXCJmaWxsXCIpIHtcbiAgICAgICAgYmFja2dyb3VuZFN0eWxlcy5wdXNoKHN0eWxlLmpvaW4oXCI6XCIpICsgXCIgIWltcG9ydGFudFwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGxhYmVsU3R5bGVzOiBsYWJlbFN0eWxlcy5qb2luKFwiO1wiKSxcbiAgICBub2RlU3R5bGVzOiBub2RlU3R5bGVzLmpvaW4oXCI7XCIpLFxuICAgIHN0eWxlc0FycmF5LFxuICAgIGJvcmRlclN0eWxlcyxcbiAgICBiYWNrZ3JvdW5kU3R5bGVzXG4gIH07XG59LCBcInN0eWxlczJTdHJpbmdcIik7XG52YXIgdXNlck5vZGVPdmVycmlkZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChub2RlLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHsgdGhlbWVWYXJpYWJsZXMsIGhhbmREcmF3blNlZWQgfSA9IGdldENvbmZpZzIoKTtcbiAgY29uc3QgeyBub2RlQm9yZGVyLCBtYWluQmtnIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3QgeyBzdHlsZXNNYXAgfSA9IGNvbXBpbGVTdHlsZXMobm9kZSk7XG4gIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgcm91Z2huZXNzOiAwLjcsXG4gICAgICBmaWxsOiBzdHlsZXNNYXAuZ2V0KFwiZmlsbFwiKSB8fCBtYWluQmtnLFxuICAgICAgZmlsbFN0eWxlOiBcImhhY2h1cmVcIixcbiAgICAgIC8vIHNvbGlkIGZpbGxcbiAgICAgIGZpbGxXZWlnaHQ6IDQsXG4gICAgICBoYWNodXJlR2FwOiA1LjIsXG4gICAgICBzdHJva2U6IHN0eWxlc01hcC5nZXQoXCJzdHJva2VcIikgfHwgbm9kZUJvcmRlcixcbiAgICAgIHNlZWQ6IGhhbmREcmF3blNlZWQsXG4gICAgICBzdHJva2VXaWR0aDogc3R5bGVzTWFwLmdldChcInN0cm9rZS13aWR0aFwiKT8ucmVwbGFjZShcInB4XCIsIFwiXCIpIHx8IDEuMyxcbiAgICAgIGZpbGxMaW5lRGFzaDogWzAsIDBdXG4gICAgfSxcbiAgICBvcHRpb25zXG4gICk7XG4gIHJldHVybiByZXN1bHQ7XG59LCBcInVzZXJOb2RlT3ZlcnJpZGVzXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL2NsdXN0ZXJzLmpzXG52YXIgcmVjdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKHBhcmVudCwgbm9kZSkgPT4ge1xuICBsb2cuaW5mbyhcIkNyZWF0aW5nIHN1YmdyYXBoIHJlY3QgZm9yIFwiLCBub2RlLmlkLCBub2RlKTtcbiAgY29uc3Qgc2l0ZUNvbmZpZyA9IGdldENvbmZpZzIoKTtcbiAgY29uc3QgeyB0aGVtZVZhcmlhYmxlcywgaGFuZERyYXduU2VlZCB9ID0gc2l0ZUNvbmZpZztcbiAgY29uc3QgeyBjbHVzdGVyQmtnLCBjbHVzdGVyQm9yZGVyIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcywgYm9yZGVyU3R5bGVzLCBiYWNrZ3JvdW5kU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBjb25zdCBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImNsdXN0ZXIgXCIgKyBub2RlLmNzc0NsYXNzZXMpLmF0dHIoXCJpZFwiLCBub2RlLmlkKS5hdHRyKFwiZGF0YS1sb29rXCIsIG5vZGUubG9vayk7XG4gIGNvbnN0IHVzZUh0bWxMYWJlbHMgPSBldmFsdWF0ZShzaXRlQ29uZmlnLmZsb3djaGFydC5odG1sTGFiZWxzKTtcbiAgY29uc3QgbGFiZWxFbCA9IHNoYXBlU3ZnLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiY2x1c3Rlci1sYWJlbCBcIik7XG4gIGNvbnN0IHRleHQyID0gYXdhaXQgY3JlYXRlVGV4dChsYWJlbEVsLCBub2RlLmxhYmVsLCB7XG4gICAgc3R5bGU6IG5vZGUubGFiZWxTdHlsZSxcbiAgICB1c2VIdG1sTGFiZWxzLFxuICAgIGlzTm9kZTogdHJ1ZVxuICB9KTtcbiAgbGV0IGJib3ggPSB0ZXh0Mi5nZXRCQm94KCk7XG4gIGlmIChldmFsdWF0ZShzaXRlQ29uZmlnLmZsb3djaGFydC5odG1sTGFiZWxzKSkge1xuICAgIGNvbnN0IGRpdiA9IHRleHQyLmNoaWxkcmVuWzBdO1xuICAgIGNvbnN0IGR2ID0gc2VsZWN0Myh0ZXh0Mik7XG4gICAgYmJveCA9IGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBkdi5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCk7XG4gICAgZHYuYXR0cihcImhlaWdodFwiLCBiYm94LmhlaWdodCk7XG4gIH1cbiAgY29uc3Qgd2lkdGggPSBub2RlLndpZHRoIDw9IGJib3gud2lkdGggKyBub2RlLnBhZGRpbmcgPyBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nIDogbm9kZS53aWR0aDtcbiAgaWYgKG5vZGUud2lkdGggPD0gYmJveC53aWR0aCArIG5vZGUucGFkZGluZykge1xuICAgIG5vZGUuZGlmZiA9ICh3aWR0aCAtIG5vZGUud2lkdGgpIC8gMiAtIG5vZGUucGFkZGluZztcbiAgfSBlbHNlIHtcbiAgICBub2RlLmRpZmYgPSAtbm9kZS5wYWRkaW5nO1xuICB9XG4gIGNvbnN0IGhlaWdodCA9IG5vZGUuaGVpZ2h0O1xuICBjb25zdCB4ID0gbm9kZS54IC0gd2lkdGggLyAyO1xuICBjb25zdCB5ID0gbm9kZS55IC0gaGVpZ2h0IC8gMjtcbiAgbG9nLnRyYWNlKFwiRGF0YSBcIiwgbm9kZSwgSlNPTi5zdHJpbmdpZnkobm9kZSkpO1xuICBsZXQgcmVjdDI7XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoLnN2ZyhzaGFwZVN2Zyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHtcbiAgICAgIHJvdWdobmVzczogMC43LFxuICAgICAgZmlsbDogY2x1c3RlckJrZyxcbiAgICAgIC8vIGZpbGw6ICdyZWQnLFxuICAgICAgc3Ryb2tlOiBjbHVzdGVyQm9yZGVyLFxuICAgICAgZmlsbFdlaWdodDogMyxcbiAgICAgIHNlZWQ6IGhhbmREcmF3blNlZWRcbiAgICB9KTtcbiAgICBjb25zdCByb3VnaE5vZGUgPSByYy5wYXRoKGNyZWF0ZVJvdW5kZWRSZWN0UGF0aEQoeCwgeSwgd2lkdGgsIGhlaWdodCwgMCksIG9wdGlvbnMpO1xuICAgIHJlY3QyID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHtcbiAgICAgIGxvZy5kZWJ1ZyhcIlJvdWdoIG5vZGUgaW5zZXJ0IENYQ1wiLCByb3VnaE5vZGUpO1xuICAgICAgcmV0dXJuIHJvdWdoTm9kZTtcbiAgICB9LCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICByZWN0Mi5zZWxlY3QoXCJwYXRoOm50aC1jaGlsZCgyKVwiKS5hdHRyKFwic3R5bGVcIiwgYm9yZGVyU3R5bGVzLmpvaW4oXCI7XCIpKTtcbiAgICByZWN0Mi5zZWxlY3QoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBiYWNrZ3JvdW5kU3R5bGVzLmpvaW4oXCI7XCIpLnJlcGxhY2UoXCJmaWxsXCIsIFwic3Ryb2tlXCIpKTtcbiAgfSBlbHNlIHtcbiAgICByZWN0MiA9IHNoYXBlU3ZnLmluc2VydChcInJlY3RcIiwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgcmVjdDIuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpLmF0dHIoXCJyeFwiLCBub2RlLnJ4KS5hdHRyKFwicnlcIiwgbm9kZS5yeSkuYXR0cihcInhcIiwgeCkuYXR0cihcInlcIiwgeSkuYXR0cihcIndpZHRoXCIsIHdpZHRoKS5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gIH1cbiAgY29uc3QgeyBzdWJHcmFwaFRpdGxlVG9wTWFyZ2luIH0gPSBnZXRTdWJHcmFwaFRpdGxlTWFyZ2lucyhzaXRlQ29uZmlnKTtcbiAgbGFiZWxFbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgLy8gVGhpcyBwdXRzIHRoZSBsYWJlbCBvbiB0b3Agb2YgdGhlIGJveCBpbnN0ZWFkIG9mIGluc2lkZSBpdFxuICAgIGB0cmFuc2xhdGUoJHtub2RlLnggLSBiYm94LndpZHRoIC8gMn0sICR7bm9kZS55IC0gbm9kZS5oZWlnaHQgLyAyICsgc3ViR3JhcGhUaXRsZVRvcE1hcmdpbn0pYFxuICApO1xuICBpZiAobGFiZWxTdHlsZXMpIHtcbiAgICBjb25zdCBzcGFuID0gbGFiZWxFbC5zZWxlY3QoXCJzcGFuXCIpO1xuICAgIGlmIChzcGFuKSB7XG4gICAgICBzcGFuLmF0dHIoXCJzdHlsZVwiLCBsYWJlbFN0eWxlcyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlY3RCb3ggPSByZWN0Mi5ub2RlKCkuZ2V0QkJveCgpO1xuICBub2RlLm9mZnNldFggPSAwO1xuICBub2RlLndpZHRoID0gcmVjdEJveC53aWR0aDtcbiAgbm9kZS5oZWlnaHQgPSByZWN0Qm94LmhlaWdodDtcbiAgbm9kZS5vZmZzZXRZID0gYmJveC5oZWlnaHQgLSBub2RlLnBhZGRpbmcgLyAyO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9yZWN0X2RlZmF1bHQobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4geyBjbHVzdGVyOiBzaGFwZVN2ZywgbGFiZWxCQm94OiBiYm94IH07XG59LCBcInJlY3RcIik7XG52YXIgbm90ZUdyb3VwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocGFyZW50LCBub2RlKSA9PiB7XG4gIGNvbnN0IHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwibm90ZS1jbHVzdGVyXCIpLmF0dHIoXCJpZFwiLCBub2RlLmlkKTtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjb25zdCBwYWRkaW5nID0gMCAqIG5vZGUucGFkZGluZztcbiAgY29uc3QgaGFsZlBhZGRpbmcgPSBwYWRkaW5nIC8gMjtcbiAgcmVjdDIuYXR0cihcInJ4XCIsIG5vZGUucngpLmF0dHIoXCJyeVwiLCBub2RlLnJ5KS5hdHRyKFwieFwiLCBub2RlLnggLSBub2RlLndpZHRoIC8gMiAtIGhhbGZQYWRkaW5nKS5hdHRyKFwieVwiLCBub2RlLnkgLSBub2RlLmhlaWdodCAvIDIgLSBoYWxmUGFkZGluZykuYXR0cihcIndpZHRoXCIsIG5vZGUud2lkdGggKyBwYWRkaW5nKS5hdHRyKFwiaGVpZ2h0XCIsIG5vZGUuaGVpZ2h0ICsgcGFkZGluZykuYXR0cihcImZpbGxcIiwgXCJub25lXCIpO1xuICBjb25zdCByZWN0Qm94ID0gcmVjdDIubm9kZSgpLmdldEJCb3goKTtcbiAgbm9kZS53aWR0aCA9IHJlY3RCb3gud2lkdGg7XG4gIG5vZGUuaGVpZ2h0ID0gcmVjdEJveC5oZWlnaHQ7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X3JlY3RfZGVmYXVsdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiB7IGNsdXN0ZXI6IHNoYXBlU3ZnLCBsYWJlbEJCb3g6IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9IH07XG59LCBcIm5vdGVHcm91cFwiKTtcbnZhciByb3VuZGVkV2l0aFRpdGxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAocGFyZW50LCBub2RlKSA9PiB7XG4gIGNvbnN0IHNpdGVDb25maWcgPSBnZXRDb25maWcyKCk7XG4gIGNvbnN0IHsgdGhlbWVWYXJpYWJsZXMsIGhhbmREcmF3blNlZWQgfSA9IHNpdGVDb25maWc7XG4gIGNvbnN0IHsgYWx0QmFja2dyb3VuZCwgY29tcG9zaXRlQmFja2dyb3VuZCwgY29tcG9zaXRlVGl0bGVCYWNrZ3JvdW5kLCBub2RlQm9yZGVyIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgbm9kZS5jc3NDbGFzc2VzKS5hdHRyKFwiaWRcIiwgbm9kZS5pZCkuYXR0cihcImRhdGEtaWRcIiwgbm9kZS5pZCkuYXR0cihcImRhdGEtbG9va1wiLCBub2RlLmxvb2spO1xuICBjb25zdCBvdXRlclJlY3RHID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgY29uc3QgbGFiZWwgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImNsdXN0ZXItbGFiZWxcIik7XG4gIGxldCBpbm5lclJlY3QgPSBzaGFwZVN2Zy5hcHBlbmQoXCJyZWN0XCIpO1xuICBjb25zdCB0ZXh0MiA9IGxhYmVsLm5vZGUoKS5hcHBlbmRDaGlsZChhd2FpdCBjcmVhdGVMYWJlbF9kZWZhdWx0KG5vZGUubGFiZWwsIG5vZGUubGFiZWxTdHlsZSwgdm9pZCAwLCB0cnVlKSk7XG4gIGxldCBiYm94ID0gdGV4dDIuZ2V0QkJveCgpO1xuICBpZiAoZXZhbHVhdGUoc2l0ZUNvbmZpZy5mbG93Y2hhcnQuaHRtbExhYmVscykpIHtcbiAgICBjb25zdCBkaXYgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBjb25zdCBkdiA9IHNlbGVjdDModGV4dDIpO1xuICAgIGJib3ggPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZHYuYXR0cihcIndpZHRoXCIsIGJib3gud2lkdGgpO1xuICAgIGR2LmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQpO1xuICB9XG4gIGNvbnN0IHBhZGRpbmcgPSAwICogbm9kZS5wYWRkaW5nO1xuICBjb25zdCBoYWxmUGFkZGluZyA9IHBhZGRpbmcgLyAyO1xuICBjb25zdCB3aWR0aCA9IChub2RlLndpZHRoIDw9IGJib3gud2lkdGggKyBub2RlLnBhZGRpbmcgPyBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nIDogbm9kZS53aWR0aCkgKyBwYWRkaW5nO1xuICBpZiAobm9kZS53aWR0aCA8PSBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nKSB7XG4gICAgbm9kZS5kaWZmID0gKHdpZHRoIC0gbm9kZS53aWR0aCkgLyAyIC0gbm9kZS5wYWRkaW5nO1xuICB9IGVsc2Uge1xuICAgIG5vZGUuZGlmZiA9IC1ub2RlLnBhZGRpbmc7XG4gIH1cbiAgY29uc3QgaGVpZ2h0ID0gbm9kZS5oZWlnaHQgKyBwYWRkaW5nO1xuICBjb25zdCBpbm5lckhlaWdodCA9IG5vZGUuaGVpZ2h0ICsgcGFkZGluZyAtIGJib3guaGVpZ2h0IC0gNjtcbiAgY29uc3QgeCA9IG5vZGUueCAtIHdpZHRoIC8gMjtcbiAgY29uc3QgeSA9IG5vZGUueSAtIGhlaWdodCAvIDI7XG4gIG5vZGUud2lkdGggPSB3aWR0aDtcbiAgY29uc3QgaW5uZXJZID0gbm9kZS55IC0gbm9kZS5oZWlnaHQgLyAyIC0gaGFsZlBhZGRpbmcgKyBiYm94LmhlaWdodCArIDI7XG4gIGxldCByZWN0MjtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IGlzQWx0ID0gbm9kZS5jc3NDbGFzc2VzLmluY2x1ZGVzKFwic3RhdGVkaWFncmFtLWNsdXN0ZXItYWx0XCIpO1xuICAgIGNvbnN0IHJjID0gcm91Z2guc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCByb3VnaE91dGVyTm9kZSA9IG5vZGUucnggfHwgbm9kZS5yeSA/IHJjLnBhdGgoY3JlYXRlUm91bmRlZFJlY3RQYXRoRCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCAxMCksIHtcbiAgICAgIHJvdWdobmVzczogMC43LFxuICAgICAgZmlsbDogY29tcG9zaXRlVGl0bGVCYWNrZ3JvdW5kLFxuICAgICAgZmlsbFN0eWxlOiBcInNvbGlkXCIsXG4gICAgICBzdHJva2U6IG5vZGVCb3JkZXIsXG4gICAgICBzZWVkOiBoYW5kRHJhd25TZWVkXG4gICAgfSkgOiByYy5yZWN0YW5nbGUoeCwgeSwgd2lkdGgsIGhlaWdodCwgeyBzZWVkOiBoYW5kRHJhd25TZWVkIH0pO1xuICAgIHJlY3QyID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoT3V0ZXJOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjb25zdCByb3VnaElubmVyTm9kZSA9IHJjLnJlY3RhbmdsZSh4LCBpbm5lclksIHdpZHRoLCBpbm5lckhlaWdodCwge1xuICAgICAgZmlsbDogaXNBbHQgPyBhbHRCYWNrZ3JvdW5kIDogY29tcG9zaXRlQmFja2dyb3VuZCxcbiAgICAgIGZpbGxTdHlsZTogaXNBbHQgPyBcImhhY2h1cmVcIiA6IFwic29saWRcIixcbiAgICAgIHN0cm9rZTogbm9kZUJvcmRlcixcbiAgICAgIHNlZWQ6IGhhbmREcmF3blNlZWRcbiAgICB9KTtcbiAgICByZWN0MiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE91dGVyTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgaW5uZXJSZWN0ID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoSW5uZXJOb2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZWN0MiA9IG91dGVyUmVjdEcuaW5zZXJ0KFwicmVjdFwiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjb25zdCBvdXRlclJlY3RDbGFzcyA9IFwib3V0ZXJcIjtcbiAgICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgb3V0ZXJSZWN0Q2xhc3MpLmF0dHIoXCJ4XCIsIHgpLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCkuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpLmF0dHIoXCJkYXRhLWxvb2tcIiwgbm9kZS5sb29rKTtcbiAgICBpbm5lclJlY3QuYXR0cihcImNsYXNzXCIsIFwiaW5uZXJcIikuYXR0cihcInhcIiwgeCkuYXR0cihcInlcIiwgaW5uZXJZKS5hdHRyKFwid2lkdGhcIiwgd2lkdGgpLmF0dHIoXCJoZWlnaHRcIiwgaW5uZXJIZWlnaHQpO1xuICB9XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7bm9kZS54IC0gYmJveC53aWR0aCAvIDJ9LCAke3kgKyAxIC0gKGV2YWx1YXRlKHNpdGVDb25maWcuZmxvd2NoYXJ0Lmh0bWxMYWJlbHMpID8gMCA6IDMpfSlgXG4gICk7XG4gIGNvbnN0IHJlY3RCb3ggPSByZWN0Mi5ub2RlKCkuZ2V0QkJveCgpO1xuICBub2RlLmhlaWdodCA9IHJlY3RCb3guaGVpZ2h0O1xuICBub2RlLm9mZnNldFggPSAwO1xuICBub2RlLm9mZnNldFkgPSBiYm94LmhlaWdodCAtIG5vZGUucGFkZGluZyAvIDI7XG4gIG5vZGUubGFiZWxCQm94ID0gYmJveDtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfcmVjdF9kZWZhdWx0KG5vZGUsIHBvaW50KTtcbiAgfTtcbiAgcmV0dXJuIHsgY2x1c3Rlcjogc2hhcGVTdmcsIGxhYmVsQkJveDogYmJveCB9O1xufSwgXCJyb3VuZGVkV2l0aFRpdGxlXCIpO1xudmFyIGthbmJhblNlY3Rpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChwYXJlbnQsIG5vZGUpID0+IHtcbiAgbG9nLmluZm8oXCJDcmVhdGluZyBzdWJncmFwaCByZWN0IGZvciBcIiwgbm9kZS5pZCwgbm9kZSk7XG4gIGNvbnN0IHNpdGVDb25maWcgPSBnZXRDb25maWcyKCk7XG4gIGNvbnN0IHsgdGhlbWVWYXJpYWJsZXMsIGhhbmREcmF3blNlZWQgfSA9IHNpdGVDb25maWc7XG4gIGNvbnN0IHsgY2x1c3RlckJrZywgY2x1c3RlckJvcmRlciB9ID0gdGhlbWVWYXJpYWJsZXM7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMsIGJvcmRlclN0eWxlcywgYmFja2dyb3VuZFN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJjbHVzdGVyIFwiICsgbm9kZS5jc3NDbGFzc2VzKS5hdHRyKFwiaWRcIiwgbm9kZS5pZCkuYXR0cihcImRhdGEtbG9va1wiLCBub2RlLmxvb2spO1xuICBjb25zdCB1c2VIdG1sTGFiZWxzID0gZXZhbHVhdGUoc2l0ZUNvbmZpZy5mbG93Y2hhcnQuaHRtbExhYmVscyk7XG4gIGNvbnN0IGxhYmVsRWwgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImNsdXN0ZXItbGFiZWwgXCIpO1xuICBjb25zdCB0ZXh0MiA9IGF3YWl0IGNyZWF0ZVRleHQobGFiZWxFbCwgbm9kZS5sYWJlbCwge1xuICAgIHN0eWxlOiBub2RlLmxhYmVsU3R5bGUsXG4gICAgdXNlSHRtbExhYmVscyxcbiAgICBpc05vZGU6IHRydWUsXG4gICAgd2lkdGg6IG5vZGUud2lkdGhcbiAgfSk7XG4gIGxldCBiYm94ID0gdGV4dDIuZ2V0QkJveCgpO1xuICBpZiAoZXZhbHVhdGUoc2l0ZUNvbmZpZy5mbG93Y2hhcnQuaHRtbExhYmVscykpIHtcbiAgICBjb25zdCBkaXYgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBjb25zdCBkdiA9IHNlbGVjdDModGV4dDIpO1xuICAgIGJib3ggPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZHYuYXR0cihcIndpZHRoXCIsIGJib3gud2lkdGgpO1xuICAgIGR2LmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQpO1xuICB9XG4gIGNvbnN0IHdpZHRoID0gbm9kZS53aWR0aCA8PSBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nID8gYmJveC53aWR0aCArIG5vZGUucGFkZGluZyA6IG5vZGUud2lkdGg7XG4gIGlmIChub2RlLndpZHRoIDw9IGJib3gud2lkdGggKyBub2RlLnBhZGRpbmcpIHtcbiAgICBub2RlLmRpZmYgPSAod2lkdGggLSBub2RlLndpZHRoKSAvIDIgLSBub2RlLnBhZGRpbmc7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5kaWZmID0gLW5vZGUucGFkZGluZztcbiAgfVxuICBjb25zdCBoZWlnaHQgPSBub2RlLmhlaWdodDtcbiAgY29uc3QgeCA9IG5vZGUueCAtIHdpZHRoIC8gMjtcbiAgY29uc3QgeSA9IG5vZGUueSAtIGhlaWdodCAvIDI7XG4gIGxvZy50cmFjZShcIkRhdGEgXCIsIG5vZGUsIEpTT04uc3RyaW5naWZ5KG5vZGUpKTtcbiAgbGV0IHJlY3QyO1xuICBpZiAobm9kZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaC5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7XG4gICAgICByb3VnaG5lc3M6IDAuNyxcbiAgICAgIGZpbGw6IGNsdXN0ZXJCa2csXG4gICAgICAvLyBmaWxsOiAncmVkJyxcbiAgICAgIHN0cm9rZTogY2x1c3RlckJvcmRlcixcbiAgICAgIGZpbGxXZWlnaHQ6IDQsXG4gICAgICBzZWVkOiBoYW5kRHJhd25TZWVkXG4gICAgfSk7XG4gICAgY29uc3Qgcm91Z2hOb2RlID0gcmMucGF0aChjcmVhdGVSb3VuZGVkUmVjdFBhdGhEKHgsIHksIHdpZHRoLCBoZWlnaHQsIG5vZGUucngpLCBvcHRpb25zKTtcbiAgICByZWN0MiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiB7XG4gICAgICBsb2cuZGVidWcoXCJSb3VnaCBub2RlIGluc2VydCBDWENcIiwgcm91Z2hOb2RlKTtcbiAgICAgIHJldHVybiByb3VnaE5vZGU7XG4gICAgfSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgcmVjdDIuc2VsZWN0KFwicGF0aDpudGgtY2hpbGQoMilcIikuYXR0cihcInN0eWxlXCIsIGJvcmRlclN0eWxlcy5qb2luKFwiO1wiKSk7XG4gICAgcmVjdDIuc2VsZWN0KFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgYmFja2dyb3VuZFN0eWxlcy5qb2luKFwiO1wiKS5yZXBsYWNlKFwiZmlsbFwiLCBcInN0cm9rZVwiKSk7XG4gIH0gZWxzZSB7XG4gICAgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgIHJlY3QyLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKS5hdHRyKFwicnhcIiwgbm9kZS5yeCkuYXR0cihcInJ5XCIsIG5vZGUucnkpLmF0dHIoXCJ4XCIsIHgpLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCkuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuICB9XG4gIGNvbnN0IHsgc3ViR3JhcGhUaXRsZVRvcE1hcmdpbiB9ID0gZ2V0U3ViR3JhcGhUaXRsZU1hcmdpbnMoc2l0ZUNvbmZpZyk7XG4gIGxhYmVsRWwuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIC8vIFRoaXMgcHV0cyB0aGUgbGFiZWwgb24gdG9wIG9mIHRoZSBib3ggaW5zdGVhZCBvZiBpbnNpZGUgaXRcbiAgICBgdHJhbnNsYXRlKCR7bm9kZS54IC0gYmJveC53aWR0aCAvIDJ9LCAke25vZGUueSAtIG5vZGUuaGVpZ2h0IC8gMiArIHN1YkdyYXBoVGl0bGVUb3BNYXJnaW59KWBcbiAgKTtcbiAgaWYgKGxhYmVsU3R5bGVzKSB7XG4gICAgY29uc3Qgc3BhbiA9IGxhYmVsRWwuc2VsZWN0KFwic3BhblwiKTtcbiAgICBpZiAoc3Bhbikge1xuICAgICAgc3Bhbi5hdHRyKFwic3R5bGVcIiwgbGFiZWxTdHlsZXMpO1xuICAgIH1cbiAgfVxuICBjb25zdCByZWN0Qm94ID0gcmVjdDIubm9kZSgpLmdldEJCb3goKTtcbiAgbm9kZS5vZmZzZXRYID0gMDtcbiAgbm9kZS53aWR0aCA9IHJlY3RCb3gud2lkdGg7XG4gIG5vZGUuaGVpZ2h0ID0gcmVjdEJveC5oZWlnaHQ7XG4gIG5vZGUub2Zmc2V0WSA9IGJib3guaGVpZ2h0IC0gbm9kZS5wYWRkaW5nIC8gMjtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfcmVjdF9kZWZhdWx0KG5vZGUsIHBvaW50KTtcbiAgfTtcbiAgcmV0dXJuIHsgY2x1c3Rlcjogc2hhcGVTdmcsIGxhYmVsQkJveDogYmJveCB9O1xufSwgXCJrYW5iYW5TZWN0aW9uXCIpO1xudmFyIGRpdmlkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwYXJlbnQsIG5vZGUpID0+IHtcbiAgY29uc3Qgc2l0ZUNvbmZpZyA9IGdldENvbmZpZzIoKTtcbiAgY29uc3QgeyB0aGVtZVZhcmlhYmxlcywgaGFuZERyYXduU2VlZCB9ID0gc2l0ZUNvbmZpZztcbiAgY29uc3QgeyBub2RlQm9yZGVyIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgbm9kZS5jc3NDbGFzc2VzKS5hdHRyKFwiaWRcIiwgbm9kZS5pZCkuYXR0cihcImRhdGEtbG9va1wiLCBub2RlLmxvb2spO1xuICBjb25zdCBvdXRlclJlY3RHID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgY29uc3QgcGFkZGluZyA9IDAgKiBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IHdpZHRoID0gbm9kZS53aWR0aCArIHBhZGRpbmc7XG4gIG5vZGUuZGlmZiA9IC1ub2RlLnBhZGRpbmc7XG4gIGNvbnN0IGhlaWdodCA9IG5vZGUuaGVpZ2h0ICsgcGFkZGluZztcbiAgY29uc3QgeCA9IG5vZGUueCAtIHdpZHRoIC8gMjtcbiAgY29uc3QgeSA9IG5vZGUueSAtIGhlaWdodCAvIDI7XG4gIG5vZGUud2lkdGggPSB3aWR0aDtcbiAgbGV0IHJlY3QyO1xuICBpZiAobm9kZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaC5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IHJvdWdoT3V0ZXJOb2RlID0gcmMucmVjdGFuZ2xlKHgsIHksIHdpZHRoLCBoZWlnaHQsIHtcbiAgICAgIGZpbGw6IFwibGlnaHRncmV5XCIsXG4gICAgICByb3VnaG5lc3M6IDAuNSxcbiAgICAgIHN0cm9rZUxpbmVEYXNoOiBbNV0sXG4gICAgICBzdHJva2U6IG5vZGVCb3JkZXIsXG4gICAgICBzZWVkOiBoYW5kRHJhd25TZWVkXG4gICAgfSk7XG4gICAgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hPdXRlck5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICB9IGVsc2Uge1xuICAgIHJlY3QyID0gb3V0ZXJSZWN0Ry5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgIGNvbnN0IG91dGVyUmVjdENsYXNzID0gXCJkaXZpZGVyXCI7XG4gICAgcmVjdDIuYXR0cihcImNsYXNzXCIsIG91dGVyUmVjdENsYXNzKS5hdHRyKFwieFwiLCB4KS5hdHRyKFwieVwiLCB5KS5hdHRyKFwid2lkdGhcIiwgd2lkdGgpLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KS5hdHRyKFwiZGF0YS1sb29rXCIsIG5vZGUubG9vayk7XG4gIH1cbiAgY29uc3QgcmVjdEJveCA9IHJlY3QyLm5vZGUoKS5nZXRCQm94KCk7XG4gIG5vZGUuaGVpZ2h0ID0gcmVjdEJveC5oZWlnaHQ7XG4gIG5vZGUub2Zmc2V0WCA9IDA7XG4gIG5vZGUub2Zmc2V0WSA9IDA7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X3JlY3RfZGVmYXVsdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiB7IGNsdXN0ZXI6IHNoYXBlU3ZnLCBsYWJlbEJCb3g6IHt9IH07XG59LCBcImRpdmlkZXJcIik7XG52YXIgc3F1YXJlUmVjdCA9IHJlY3Q7XG52YXIgc2hhcGVzID0ge1xuICByZWN0LFxuICBzcXVhcmVSZWN0LFxuICByb3VuZGVkV2l0aFRpdGxlLFxuICBub3RlR3JvdXAsXG4gIGRpdmlkZXIsXG4gIGthbmJhblNlY3Rpb25cbn07XG52YXIgY2x1c3RlckVsZW1zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbnZhciBpbnNlcnRDbHVzdGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoZWxlbSwgbm9kZSkgPT4ge1xuICBjb25zdCBzaGFwZSA9IG5vZGUuc2hhcGUgfHwgXCJyZWN0XCI7XG4gIGNvbnN0IGNsdXN0ZXIgPSBhd2FpdCBzaGFwZXNbc2hhcGVdKGVsZW0sIG5vZGUpO1xuICBjbHVzdGVyRWxlbXMuc2V0KG5vZGUuaWQsIGNsdXN0ZXIpO1xuICByZXR1cm4gY2x1c3Rlcjtcbn0sIFwiaW5zZXJ0Q2x1c3RlclwiKTtcbnZhciBjbGVhciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICBjbHVzdGVyRWxlbXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xufSwgXCJjbGVhclwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9pbnRlcnNlY3QvaW50ZXJzZWN0LW5vZGUuanNcbmZ1bmN0aW9uIGludGVyc2VjdE5vZGUobm9kZSwgcG9pbnQpIHtcbiAgcmV0dXJuIG5vZGUuaW50ZXJzZWN0KHBvaW50KTtcbn1cbl9fbmFtZShpbnRlcnNlY3ROb2RlLCBcImludGVyc2VjdE5vZGVcIik7XG52YXIgaW50ZXJzZWN0X25vZGVfZGVmYXVsdCA9IGludGVyc2VjdE5vZGU7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvaW50ZXJzZWN0L2ludGVyc2VjdC1lbGxpcHNlLmpzXG5mdW5jdGlvbiBpbnRlcnNlY3RFbGxpcHNlKG5vZGUsIHJ4LCByeSwgcG9pbnQpIHtcbiAgdmFyIGN4ID0gbm9kZS54O1xuICB2YXIgY3kgPSBub2RlLnk7XG4gIHZhciBweCA9IGN4IC0gcG9pbnQueDtcbiAgdmFyIHB5ID0gY3kgLSBwb2ludC55O1xuICB2YXIgZGV0ID0gTWF0aC5zcXJ0KHJ4ICogcnggKiBweSAqIHB5ICsgcnkgKiByeSAqIHB4ICogcHgpO1xuICB2YXIgZHggPSBNYXRoLmFicyhyeCAqIHJ5ICogcHggLyBkZXQpO1xuICBpZiAocG9pbnQueCA8IGN4KSB7XG4gICAgZHggPSAtZHg7XG4gIH1cbiAgdmFyIGR5ID0gTWF0aC5hYnMocnggKiByeSAqIHB5IC8gZGV0KTtcbiAgaWYgKHBvaW50LnkgPCBjeSkge1xuICAgIGR5ID0gLWR5O1xuICB9XG4gIHJldHVybiB7IHg6IGN4ICsgZHgsIHk6IGN5ICsgZHkgfTtcbn1cbl9fbmFtZShpbnRlcnNlY3RFbGxpcHNlLCBcImludGVyc2VjdEVsbGlwc2VcIik7XG52YXIgaW50ZXJzZWN0X2VsbGlwc2VfZGVmYXVsdCA9IGludGVyc2VjdEVsbGlwc2U7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvaW50ZXJzZWN0L2ludGVyc2VjdC1jaXJjbGUuanNcbmZ1bmN0aW9uIGludGVyc2VjdENpcmNsZShub2RlLCByeCwgcG9pbnQpIHtcbiAgcmV0dXJuIGludGVyc2VjdF9lbGxpcHNlX2RlZmF1bHQobm9kZSwgcngsIHJ4LCBwb2ludCk7XG59XG5fX25hbWUoaW50ZXJzZWN0Q2lyY2xlLCBcImludGVyc2VjdENpcmNsZVwiKTtcbnZhciBpbnRlcnNlY3RfY2lyY2xlX2RlZmF1bHQgPSBpbnRlcnNlY3RDaXJjbGU7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvaW50ZXJzZWN0L2ludGVyc2VjdC1saW5lLmpzXG5mdW5jdGlvbiBpbnRlcnNlY3RMaW5lKHAxLCBwMiwgcTEsIHEyKSB7XG4gIHZhciBhMSwgYTIsIGIxLCBiMiwgYzEsIGMyO1xuICB2YXIgcjEsIHIyLCByMywgcjQ7XG4gIHZhciBkZW5vbSwgb2Zmc2V0LCBudW07XG4gIHZhciB4LCB5O1xuICBhMSA9IHAyLnkgLSBwMS55O1xuICBiMSA9IHAxLnggLSBwMi54O1xuICBjMSA9IHAyLnggKiBwMS55IC0gcDEueCAqIHAyLnk7XG4gIHIzID0gYTEgKiBxMS54ICsgYjEgKiBxMS55ICsgYzE7XG4gIHI0ID0gYTEgKiBxMi54ICsgYjEgKiBxMi55ICsgYzE7XG4gIGlmIChyMyAhPT0gMCAmJiByNCAhPT0gMCAmJiBzYW1lU2lnbihyMywgcjQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGEyID0gcTIueSAtIHExLnk7XG4gIGIyID0gcTEueCAtIHEyLng7XG4gIGMyID0gcTIueCAqIHExLnkgLSBxMS54ICogcTIueTtcbiAgcjEgPSBhMiAqIHAxLnggKyBiMiAqIHAxLnkgKyBjMjtcbiAgcjIgPSBhMiAqIHAyLnggKyBiMiAqIHAyLnkgKyBjMjtcbiAgaWYgKHIxICE9PSAwICYmIHIyICE9PSAwICYmIHNhbWVTaWduKHIxLCByMikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZGVub20gPSBhMSAqIGIyIC0gYTIgKiBiMTtcbiAgaWYgKGRlbm9tID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9mZnNldCA9IE1hdGguYWJzKGRlbm9tIC8gMik7XG4gIG51bSA9IGIxICogYzIgLSBiMiAqIGMxO1xuICB4ID0gbnVtIDwgMCA/IChudW0gLSBvZmZzZXQpIC8gZGVub20gOiAobnVtICsgb2Zmc2V0KSAvIGRlbm9tO1xuICBudW0gPSBhMiAqIGMxIC0gYTEgKiBjMjtcbiAgeSA9IG51bSA8IDAgPyAobnVtIC0gb2Zmc2V0KSAvIGRlbm9tIDogKG51bSArIG9mZnNldCkgLyBkZW5vbTtcbiAgcmV0dXJuIHsgeCwgeSB9O1xufVxuX19uYW1lKGludGVyc2VjdExpbmUsIFwiaW50ZXJzZWN0TGluZVwiKTtcbmZ1bmN0aW9uIHNhbWVTaWduKHIxLCByMikge1xuICByZXR1cm4gcjEgKiByMiA+IDA7XG59XG5fX25hbWUoc2FtZVNpZ24sIFwic2FtZVNpZ25cIik7XG52YXIgaW50ZXJzZWN0X2xpbmVfZGVmYXVsdCA9IGludGVyc2VjdExpbmU7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvaW50ZXJzZWN0L2ludGVyc2VjdC1wb2x5Z29uLmpzXG5mdW5jdGlvbiBpbnRlcnNlY3RQb2x5Z29uKG5vZGUsIHBvbHlQb2ludHMsIHBvaW50KSB7XG4gIGxldCB4MSA9IG5vZGUueDtcbiAgbGV0IHkxID0gbm9kZS55O1xuICBsZXQgaW50ZXJzZWN0aW9ucyA9IFtdO1xuICBsZXQgbWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgbGV0IG1pblkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIGlmICh0eXBlb2YgcG9seVBvaW50cy5mb3JFYWNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBwb2x5UG9pbnRzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBlbnRyeS54KTtcbiAgICAgIG1pblkgPSBNYXRoLm1pbihtaW5ZLCBlbnRyeS55KTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtaW5YID0gTWF0aC5taW4obWluWCwgcG9seVBvaW50cy54KTtcbiAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgcG9seVBvaW50cy55KTtcbiAgfVxuICBsZXQgbGVmdCA9IHgxIC0gbm9kZS53aWR0aCAvIDIgLSBtaW5YO1xuICBsZXQgdG9wID0geTEgLSBub2RlLmhlaWdodCAvIDIgLSBtaW5ZO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvbHlQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcDEgPSBwb2x5UG9pbnRzW2ldO1xuICAgIGxldCBwMiA9IHBvbHlQb2ludHNbaSA8IHBvbHlQb2ludHMubGVuZ3RoIC0gMSA/IGkgKyAxIDogMF07XG4gICAgbGV0IGludGVyc2VjdCA9IGludGVyc2VjdF9saW5lX2RlZmF1bHQoXG4gICAgICBub2RlLFxuICAgICAgcG9pbnQsXG4gICAgICB7IHg6IGxlZnQgKyBwMS54LCB5OiB0b3AgKyBwMS55IH0sXG4gICAgICB7IHg6IGxlZnQgKyBwMi54LCB5OiB0b3AgKyBwMi55IH1cbiAgICApO1xuICAgIGlmIChpbnRlcnNlY3QpIHtcbiAgICAgIGludGVyc2VjdGlvbnMucHVzaChpbnRlcnNlY3QpO1xuICAgIH1cbiAgfVxuICBpZiAoIWludGVyc2VjdGlvbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgaWYgKGludGVyc2VjdGlvbnMubGVuZ3RoID4gMSkge1xuICAgIGludGVyc2VjdGlvbnMuc29ydChmdW5jdGlvbihwLCBxKSB7XG4gICAgICBsZXQgcGR4ID0gcC54IC0gcG9pbnQueDtcbiAgICAgIGxldCBwZHkgPSBwLnkgLSBwb2ludC55O1xuICAgICAgbGV0IGRpc3RwID0gTWF0aC5zcXJ0KHBkeCAqIHBkeCArIHBkeSAqIHBkeSk7XG4gICAgICBsZXQgcWR4ID0gcS54IC0gcG9pbnQueDtcbiAgICAgIGxldCBxZHkgPSBxLnkgLSBwb2ludC55O1xuICAgICAgbGV0IGRpc3RxID0gTWF0aC5zcXJ0KHFkeCAqIHFkeCArIHFkeSAqIHFkeSk7XG4gICAgICByZXR1cm4gZGlzdHAgPCBkaXN0cSA/IC0xIDogZGlzdHAgPT09IGRpc3RxID8gMCA6IDE7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGludGVyc2VjdGlvbnNbMF07XG59XG5fX25hbWUoaW50ZXJzZWN0UG9seWdvbiwgXCJpbnRlcnNlY3RQb2x5Z29uXCIpO1xudmFyIGludGVyc2VjdF9wb2x5Z29uX2RlZmF1bHQgPSBpbnRlcnNlY3RQb2x5Z29uO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL2ludGVyc2VjdC9pbmRleC5qc1xudmFyIGludGVyc2VjdF9kZWZhdWx0ID0ge1xuICBub2RlOiBpbnRlcnNlY3Rfbm9kZV9kZWZhdWx0LFxuICBjaXJjbGU6IGludGVyc2VjdF9jaXJjbGVfZGVmYXVsdCxcbiAgZWxsaXBzZTogaW50ZXJzZWN0X2VsbGlwc2VfZGVmYXVsdCxcbiAgcG9seWdvbjogaW50ZXJzZWN0X3BvbHlnb25fZGVmYXVsdCxcbiAgcmVjdDogaW50ZXJzZWN0X3JlY3RfZGVmYXVsdFxufTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvYW5jaG9yLnRzXG5pbXBvcnQgcm91Z2gyIGZyb20gXCJyb3VnaGpzXCI7XG5mdW5jdGlvbiBhbmNob3IocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCBjbGFzc2VzID0gZ2V0Tm9kZUNsYXNzZXMobm9kZSk7XG4gIGxldCBjc3NDbGFzc2VzID0gY2xhc3NlcztcbiAgaWYgKCFjbGFzc2VzKSB7XG4gICAgY3NzQ2xhc3NlcyA9IFwiYW5jaG9yXCI7XG4gIH1cbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgY3NzQ2xhc3NlcykuYXR0cihcImlkXCIsIG5vZGUuZG9tSWQgfHwgbm9kZS5pZCk7XG4gIGNvbnN0IHJhZGl1cyA9IDE7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoMi5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwgeyBmaWxsOiBcImJsYWNrXCIsIHN0cm9rZTogXCJub25lXCIsIGZpbGxTdHlsZTogXCJzb2xpZFwiIH0pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICB9XG4gIGNvbnN0IHJvdWdoTm9kZSA9IHJjLmNpcmNsZSgwLCAwLCByYWRpdXMgKiAyLCBvcHRpb25zKTtcbiAgY29uc3QgY2lyY2xlRWxlbSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjaXJjbGVFbGVtLmF0dHIoXCJjbGFzc1wiLCBcImFuY2hvclwiKS5hdHRyKFwic3R5bGVcIiwgaGFuZGxlVW5kZWZpbmVkQXR0cihjc3NTdHlsZXMpKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBjaXJjbGVFbGVtKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGxvZy5pbmZvKFwiQ2lyY2xlIGludGVyc2VjdFwiLCBub2RlLCByYWRpdXMsIHBvaW50KTtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQuY2lyY2xlKG5vZGUsIHJhZGl1cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoYW5jaG9yLCBcImFuY2hvclwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvYm93VGllUmVjdC50c1xuaW1wb3J0IHJvdWdoMyBmcm9tIFwicm91Z2hqc1wiO1xuZnVuY3Rpb24gZ2VuZXJhdGVBcmNQb2ludHMoeDEsIHkxLCB4MiwgeTIsIHJ4LCByeSwgY2xvY2t3aXNlKSB7XG4gIGNvbnN0IG51bVBvaW50cyA9IDIwO1xuICBjb25zdCBtaWRYID0gKHgxICsgeDIpIC8gMjtcbiAgY29uc3QgbWlkWSA9ICh5MSArIHkyKSAvIDI7XG4gIGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMih5MiAtIHkxLCB4MiAtIHgxKTtcbiAgY29uc3QgZHggPSAoeDIgLSB4MSkgLyAyO1xuICBjb25zdCBkeSA9ICh5MiAtIHkxKSAvIDI7XG4gIGNvbnN0IHRyYW5zZm9ybWVkWCA9IGR4IC8gcng7XG4gIGNvbnN0IHRyYW5zZm9ybWVkWSA9IGR5IC8gcnk7XG4gIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KHRyYW5zZm9ybWVkWCAqKiAyICsgdHJhbnNmb3JtZWRZICoqIDIpO1xuICBpZiAoZGlzdGFuY2UgPiAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGdpdmVuIHJhZGlpIGFyZSB0b28gc21hbGwgdG8gY3JlYXRlIGFuIGFyYyBiZXR3ZWVuIHRoZSBwb2ludHMuXCIpO1xuICB9XG4gIGNvbnN0IHNjYWxlZENlbnRlckRpc3RhbmNlID0gTWF0aC5zcXJ0KDEgLSBkaXN0YW5jZSAqKiAyKTtcbiAgY29uc3QgY2VudGVyWCA9IG1pZFggKyBzY2FsZWRDZW50ZXJEaXN0YW5jZSAqIHJ5ICogTWF0aC5zaW4oYW5nbGUpICogKGNsb2Nrd2lzZSA/IC0xIDogMSk7XG4gIGNvbnN0IGNlbnRlclkgPSBtaWRZIC0gc2NhbGVkQ2VudGVyRGlzdGFuY2UgKiByeCAqIE1hdGguY29zKGFuZ2xlKSAqIChjbG9ja3dpc2UgPyAtMSA6IDEpO1xuICBjb25zdCBzdGFydEFuZ2xlID0gTWF0aC5hdGFuMigoeTEgLSBjZW50ZXJZKSAvIHJ5LCAoeDEgLSBjZW50ZXJYKSAvIHJ4KTtcbiAgY29uc3QgZW5kQW5nbGUgPSBNYXRoLmF0YW4yKCh5MiAtIGNlbnRlclkpIC8gcnksICh4MiAtIGNlbnRlclgpIC8gcngpO1xuICBsZXQgYW5nbGVSYW5nZSA9IGVuZEFuZ2xlIC0gc3RhcnRBbmdsZTtcbiAgaWYgKGNsb2Nrd2lzZSAmJiBhbmdsZVJhbmdlIDwgMCkge1xuICAgIGFuZ2xlUmFuZ2UgKz0gMiAqIE1hdGguUEk7XG4gIH1cbiAgaWYgKCFjbG9ja3dpc2UgJiYgYW5nbGVSYW5nZSA+IDApIHtcbiAgICBhbmdsZVJhbmdlIC09IDIgKiBNYXRoLlBJO1xuICB9XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7XG4gICAgY29uc3QgdCA9IGkgLyAobnVtUG9pbnRzIC0gMSk7XG4gICAgY29uc3QgYW5nbGUyID0gc3RhcnRBbmdsZSArIHQgKiBhbmdsZVJhbmdlO1xuICAgIGNvbnN0IHggPSBjZW50ZXJYICsgcnggKiBNYXRoLmNvcyhhbmdsZTIpO1xuICAgIGNvbnN0IHkgPSBjZW50ZXJZICsgcnkgKiBNYXRoLnNpbihhbmdsZTIpO1xuICAgIHBvaW50cy5wdXNoKHsgeCwgeSB9KTtcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuX19uYW1lKGdlbmVyYXRlQXJjUG9pbnRzLCBcImdlbmVyYXRlQXJjUG9pbnRzXCIpO1xuYXN5bmMgZnVuY3Rpb24gYm93VGllUmVjdChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gYmJveC53aWR0aCArIG5vZGUucGFkZGluZyArIDIwO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQgKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IHJ5ID0gaCAvIDI7XG4gIGNvbnN0IHJ4ID0gcnkgLyAoMi41ICsgaCAvIDUwKTtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IHcgLyAyLCB5OiAtaCAvIDIgfSxcbiAgICB7IHg6IC13IC8gMiwgeTogLWggLyAyIH0sXG4gICAgLi4uZ2VuZXJhdGVBcmNQb2ludHMoLXcgLyAyLCAtaCAvIDIsIC13IC8gMiwgaCAvIDIsIHJ4LCByeSwgZmFsc2UpLFxuICAgIHsgeDogdyAvIDIsIHk6IGggLyAyIH0sXG4gICAgLi4uZ2VuZXJhdGVBcmNQb2ludHModyAvIDIsIGggLyAyLCB3IC8gMiwgLWggLyAyLCByeCwgcnksIHRydWUpXG4gIF07XG4gIGNvbnN0IHJjID0gcm91Z2gzLnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3QgYm93VGllUmVjdFBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCBib3dUaWVSZWN0U2hhcGVQYXRoID0gcmMucGF0aChib3dUaWVSZWN0UGF0aCwgb3B0aW9ucyk7XG4gIGNvbnN0IGJvd1RpZVJlY3RTaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBib3dUaWVSZWN0U2hhcGVQYXRoLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgYm93VGllUmVjdFNoYXBlLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBib3dUaWVSZWN0U2hhcGUuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBib3dUaWVSZWN0U2hhcGUuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgYm93VGllUmVjdFNoYXBlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3J4IC8gMn0sIDApYCk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgYm93VGllUmVjdFNoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKGJvd1RpZVJlY3QsIFwiYm93VGllUmVjdFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvY2FyZC50c1xuaW1wb3J0IHJvdWdoNCBmcm9tIFwicm91Z2hqc1wiO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9pbnNlcnRQb2x5Z29uU2hhcGUudHNcbmZ1bmN0aW9uIGluc2VydFBvbHlnb25TaGFwZShwYXJlbnQsIHcsIGgsIHBvaW50cykge1xuICByZXR1cm4gcGFyZW50Lmluc2VydChcInBvbHlnb25cIiwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcbiAgICBcInBvaW50c1wiLFxuICAgIHBvaW50cy5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGQueCArIFwiLFwiICsgZC55O1xuICAgIH0pLmpvaW4oXCIgXCIpXG4gICkuYXR0cihcImNsYXNzXCIsIFwibGFiZWwtY29udGFpbmVyXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAtdyAvIDIgKyBcIixcIiArIGggLyAyICsgXCIpXCIpO1xufVxuX19uYW1lKGluc2VydFBvbHlnb25TaGFwZSwgXCJpbnNlcnRQb2x5Z29uU2hhcGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2NhcmQudHNcbmFzeW5jIGZ1bmN0aW9uIGNhcmQocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94IH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgaCA9IGJib3guaGVpZ2h0ICsgbm9kZS5wYWRkaW5nO1xuICBjb25zdCBwYWRkaW5nID0gMTI7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nICsgcGFkZGluZztcbiAgY29uc3QgbGVmdCA9IDA7XG4gIGNvbnN0IHJpZ2h0ID0gdztcbiAgY29uc3QgdG9wID0gLWg7XG4gIGNvbnN0IGJvdHRvbSA9IDA7XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IGxlZnQgKyBwYWRkaW5nLCB5OiB0b3AgfSxcbiAgICB7IHg6IHJpZ2h0LCB5OiB0b3AgfSxcbiAgICB7IHg6IHJpZ2h0LCB5OiBib3R0b20gfSxcbiAgICB7IHg6IGxlZnQsIHk6IGJvdHRvbSB9LFxuICAgIHsgeDogbGVmdCwgeTogdG9wICsgcGFkZGluZyB9LFxuICAgIHsgeDogbGVmdCArIHBhZGRpbmcsIHk6IHRvcCB9XG4gIF07XG4gIGxldCBwb2x5Z29uO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2g0LnN2ZyhzaGFwZVN2Zyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgICBjb25zdCBwYXRoRGF0YSA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHBvaW50cyk7XG4gICAgY29uc3Qgcm91Z2hOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gICAgcG9seWdvbiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey13IC8gMn0sICR7aCAvIDJ9KWApO1xuICAgIGlmIChjc3NTdHlsZXMpIHtcbiAgICAgIHBvbHlnb24uYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBvbHlnb24gPSBpbnNlcnRQb2x5Z29uU2hhcGUoc2hhcGVTdmcsIHcsIGgsIHBvaW50cyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMpIHtcbiAgICBwb2x5Z29uLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHBvbHlnb24pO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjYXJkLCBcImNhcmRcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2Nob2ljZS50c1xuaW1wb3J0IHJvdWdoNSBmcm9tIFwicm91Z2hqc1wiO1xuZnVuY3Rpb24gY2hvaWNlKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWwgPSBcIlwiO1xuICBjb25zdCBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSkuYXR0cihcImlkXCIsIG5vZGUuZG9tSWQgPz8gbm9kZS5pZCk7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCBzID0gTWF0aC5tYXgoMjgsIG5vZGUud2lkdGggPz8gMCk7XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IDAsIHk6IHMgLyAyIH0sXG4gICAgeyB4OiBzIC8gMiwgeTogMCB9LFxuICAgIHsgeDogMCwgeTogLXMgLyAyIH0sXG4gICAgeyB4OiAtcyAvIDIsIHk6IDAgfVxuICBdO1xuICBjb25zdCByYyA9IHJvdWdoNS5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IGNob2ljZVBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCByb3VnaE5vZGUgPSByYy5wYXRoKGNob2ljZVBhdGgsIG9wdGlvbnMpO1xuICBjb25zdCBjaG9pY2VTaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNob2ljZVNoYXBlLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgY2hvaWNlU2hhcGUuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgbm9kZS53aWR0aCA9IDI4O1xuICBub2RlLmhlaWdodCA9IDI4O1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjaG9pY2UsIFwiY2hvaWNlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9jaXJjbGUudHNcbmltcG9ydCByb3VnaDYgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGNpcmNsZShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGhhbGZQYWRkaW5nIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgcmFkaXVzID0gYmJveC53aWR0aCAvIDIgKyBoYWxmUGFkZGluZztcbiAgbGV0IGNpcmNsZUVsZW07XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBpZiAobm9kZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaDYuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJjLmNpcmNsZSgwLCAwLCByYWRpdXMgKiAyLCBvcHRpb25zKTtcbiAgICBjaXJjbGVFbGVtID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgY2lyY2xlRWxlbS5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIoY3NzU3R5bGVzKSk7XG4gIH0gZWxzZSB7XG4gICAgY2lyY2xlRWxlbSA9IHNoYXBlU3ZnLmluc2VydChcImNpcmNsZVwiLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpLmF0dHIoXCJyXCIsIHJhZGl1cykuYXR0cihcImN4XCIsIDApLmF0dHIoXCJjeVwiLCAwKTtcbiAgfVxuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIGNpcmNsZUVsZW0pO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgbG9nLmluZm8oXCJDaXJjbGUgaW50ZXJzZWN0XCIsIG5vZGUsIHJhZGl1cywgcG9pbnQpO1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5jaXJjbGUobm9kZSwgcmFkaXVzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjaXJjbGUsIFwiY2lyY2xlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9jcm9zc2VkQ2lyY2xlLnRzXG5pbXBvcnQgcm91Z2g3IGZyb20gXCJyb3VnaGpzXCI7XG5mdW5jdGlvbiBjcmVhdGVMaW5lKHIpIHtcbiAgY29uc3QgeEF4aXM0NSA9IE1hdGguY29zKE1hdGguUEkgLyA0KTtcbiAgY29uc3QgeUF4aXM0NSA9IE1hdGguc2luKE1hdGguUEkgLyA0KTtcbiAgY29uc3QgbGluZUxlbmd0aCA9IHIgKiAyO1xuICBjb25zdCBwb2ludFExID0geyB4OiBsaW5lTGVuZ3RoIC8gMiAqIHhBeGlzNDUsIHk6IGxpbmVMZW5ndGggLyAyICogeUF4aXM0NSB9O1xuICBjb25zdCBwb2ludFEyID0geyB4OiAtKGxpbmVMZW5ndGggLyAyKSAqIHhBeGlzNDUsIHk6IGxpbmVMZW5ndGggLyAyICogeUF4aXM0NSB9O1xuICBjb25zdCBwb2ludFEzID0geyB4OiAtKGxpbmVMZW5ndGggLyAyKSAqIHhBeGlzNDUsIHk6IC0obGluZUxlbmd0aCAvIDIpICogeUF4aXM0NSB9O1xuICBjb25zdCBwb2ludFE0ID0geyB4OiBsaW5lTGVuZ3RoIC8gMiAqIHhBeGlzNDUsIHk6IC0obGluZUxlbmd0aCAvIDIpICogeUF4aXM0NSB9O1xuICByZXR1cm4gYE0gJHtwb2ludFEyLnh9LCR7cG9pbnRRMi55fSBMICR7cG9pbnRRNC54fSwke3BvaW50UTQueX1cbiAgICAgICAgICAgICAgICAgICBNICR7cG9pbnRRMS54fSwke3BvaW50UTEueX0gTCAke3BvaW50UTMueH0sJHtwb2ludFEzLnl9YDtcbn1cbl9fbmFtZShjcmVhdGVMaW5lLCBcImNyZWF0ZUxpbmVcIik7XG5mdW5jdGlvbiBjcm9zc2VkQ2lyY2xlKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgbm9kZS5sYWJlbCA9IFwiXCI7XG4gIGNvbnN0IHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIGdldE5vZGVDbGFzc2VzKG5vZGUpKS5hdHRyKFwiaWRcIiwgbm9kZS5kb21JZCA/PyBub2RlLmlkKTtcbiAgY29uc3QgcmFkaXVzID0gTWF0aC5tYXgoMzAsIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgcmMgPSByb3VnaDcuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBjaXJjbGVOb2RlID0gcmMuY2lyY2xlKDAsIDAsIHJhZGl1cyAqIDIsIG9wdGlvbnMpO1xuICBjb25zdCBsaW5lUGF0aCA9IGNyZWF0ZUxpbmUocmFkaXVzKTtcbiAgY29uc3QgbGluZU5vZGUgPSByYy5wYXRoKGxpbmVQYXRoLCBvcHRpb25zKTtcbiAgY29uc3QgY3Jvc3NlZENpcmNsZTIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gY2lyY2xlTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGNyb3NzZWRDaXJjbGUyLmluc2VydCgoKSA9PiBsaW5lTm9kZSk7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgY3Jvc3NlZENpcmNsZTIuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjcm9zc2VkQ2lyY2xlMi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIGNyb3NzZWRDaXJjbGUyKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGxvZy5pbmZvKFwiY3Jvc3NlZENpcmNsZSBpbnRlcnNlY3RcIiwgbm9kZSwgeyByYWRpdXMsIHBvaW50IH0pO1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LmNpcmNsZShub2RlLCByYWRpdXMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoY3Jvc3NlZENpcmNsZSwgXCJjcm9zc2VkQ2lyY2xlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9jdXJseUJyYWNlTGVmdC50c1xuaW1wb3J0IHJvdWdoOCBmcm9tIFwicm91Z2hqc1wiO1xuZnVuY3Rpb24gZ2VuZXJhdGVDaXJjbGVQb2ludHMyKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgbnVtUG9pbnRzID0gMTAwLCBzdGFydEFuZ2xlID0gMCwgZW5kQW5nbGUgPSAxODApIHtcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGNvbnN0IHN0YXJ0QW5nbGVSYWQgPSBzdGFydEFuZ2xlICogTWF0aC5QSSAvIDE4MDtcbiAgY29uc3QgZW5kQW5nbGVSYWQgPSBlbmRBbmdsZSAqIE1hdGguUEkgLyAxODA7XG4gIGNvbnN0IGFuZ2xlUmFuZ2UgPSBlbmRBbmdsZVJhZCAtIHN0YXJ0QW5nbGVSYWQ7XG4gIGNvbnN0IGFuZ2xlU3RlcCA9IGFuZ2xlUmFuZ2UgLyAobnVtUG9pbnRzIC0gMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspIHtcbiAgICBjb25zdCBhbmdsZSA9IHN0YXJ0QW5nbGVSYWQgKyBpICogYW5nbGVTdGVwO1xuICAgIGNvbnN0IHggPSBjZW50ZXJYICsgcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xuICAgIGNvbnN0IHkgPSBjZW50ZXJZICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgIHBvaW50cy5wdXNoKHsgeDogLXgsIHk6IC15IH0pO1xuICB9XG4gIHJldHVybiBwb2ludHM7XG59XG5fX25hbWUoZ2VuZXJhdGVDaXJjbGVQb2ludHMyLCBcImdlbmVyYXRlQ2lyY2xlUG9pbnRzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY3VybHlCcmFjZUxlZnQocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKTtcbiAgY29uc3QgaCA9IGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKTtcbiAgY29uc3QgcmFkaXVzID0gTWF0aC5tYXgoNSwgaCAqIDAuMSk7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHMyKHcgLyAyLCAtaCAvIDIsIHJhZGl1cywgMzAsIC05MCwgMCksXG4gICAgeyB4OiAtdyAvIDIgLSByYWRpdXMsIHk6IHJhZGl1cyB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMih3IC8gMiArIHJhZGl1cyAqIDIsIC1yYWRpdXMsIHJhZGl1cywgMjAsIC0xODAsIC0yNzApLFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMih3IC8gMiArIHJhZGl1cyAqIDIsIHJhZGl1cywgcmFkaXVzLCAyMCwgLTkwLCAtMTgwKSxcbiAgICB7IHg6IC13IC8gMiAtIHJhZGl1cywgeTogLWggLyAyIH0sXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHMyKHcgLyAyLCBoIC8gMiwgcmFkaXVzLCAyMCwgMCwgOTApXG4gIF07XG4gIGNvbnN0IHJlY3RQb2ludHMgPSBbXG4gICAgeyB4OiB3IC8gMiwgeTogLWggLyAyIC0gcmFkaXVzIH0sXG4gICAgeyB4OiAtdyAvIDIsIHk6IC1oIC8gMiAtIHJhZGl1cyB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMih3IC8gMiwgLWggLyAyLCByYWRpdXMsIDIwLCAtOTAsIDApLFxuICAgIHsgeDogLXcgLyAyIC0gcmFkaXVzLCB5OiAtcmFkaXVzIH0sXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHMyKHcgLyAyICsgdyAqIDAuMSwgLXJhZGl1cywgcmFkaXVzLCAyMCwgLTE4MCwgLTI3MCksXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHMyKHcgLyAyICsgdyAqIDAuMSwgcmFkaXVzLCByYWRpdXMsIDIwLCAtOTAsIC0xODApLFxuICAgIHsgeDogLXcgLyAyIC0gcmFkaXVzLCB5OiBoIC8gMiB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMih3IC8gMiwgaCAvIDIsIHJhZGl1cywgMjAsIDAsIDkwKSxcbiAgICB7IHg6IC13IC8gMiwgeTogaCAvIDIgKyByYWRpdXMgfSxcbiAgICB7IHg6IHcgLyAyLCB5OiBoIC8gMiArIHJhZGl1cyB9XG4gIF07XG4gIGNvbnN0IHJjID0gcm91Z2g4LnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7IGZpbGw6IFwibm9uZVwiIH0pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IGN1cmx5QnJhY2VMZWZ0UGF0aCA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHBvaW50cyk7XG4gIGNvbnN0IG5ld0N1cmx5QnJhY2VQYXRoID0gY3VybHlCcmFjZUxlZnRQYXRoLnJlcGxhY2UoXCJaXCIsIFwiXCIpO1xuICBjb25zdCBjdXJseUJyYWNlTGVmdE5vZGUgPSByYy5wYXRoKG5ld0N1cmx5QnJhY2VQYXRoLCBvcHRpb25zKTtcbiAgY29uc3QgcmVjdFBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhyZWN0UG9pbnRzKTtcbiAgY29uc3QgcmVjdFNoYXBlID0gcmMucGF0aChyZWN0UGF0aCwgeyAuLi5vcHRpb25zIH0pO1xuICBjb25zdCBjdXJseUJyYWNlTGVmdFNoYXBlID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgY3VybHlCcmFjZUxlZnRTaGFwZS5pbnNlcnQoKCkgPT4gcmVjdFNoYXBlLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMCk7XG4gIGN1cmx5QnJhY2VMZWZ0U2hhcGUuaW5zZXJ0KCgpID0+IGN1cmx5QnJhY2VMZWZ0Tm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGN1cmx5QnJhY2VMZWZ0U2hhcGUuYXR0cihcImNsYXNzXCIsIFwidGV4dFwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjdXJseUJyYWNlTGVmdFNoYXBlLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgY3VybHlCcmFjZUxlZnRTaGFwZS5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBjdXJseUJyYWNlTGVmdFNoYXBlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3JhZGl1c30sIDApYCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LXcgLyAyICsgcmFkaXVzIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwkey1oIC8gMiArIChub2RlLnBhZGRpbmcgPz8gMCkgLyAyIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBjdXJseUJyYWNlTGVmdFNoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcmVjdFBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjdXJseUJyYWNlTGVmdCwgXCJjdXJseUJyYWNlTGVmdFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvY3VybHlCcmFjZVJpZ2h0LnRzXG5pbXBvcnQgcm91Z2g5IGZyb20gXCJyb3VnaGpzXCI7XG5mdW5jdGlvbiBnZW5lcmF0ZUNpcmNsZVBvaW50czMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCBudW1Qb2ludHMgPSAxMDAsIHN0YXJ0QW5nbGUgPSAwLCBlbmRBbmdsZSA9IDE4MCkge1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgY29uc3Qgc3RhcnRBbmdsZVJhZCA9IHN0YXJ0QW5nbGUgKiBNYXRoLlBJIC8gMTgwO1xuICBjb25zdCBlbmRBbmdsZVJhZCA9IGVuZEFuZ2xlICogTWF0aC5QSSAvIDE4MDtcbiAgY29uc3QgYW5nbGVSYW5nZSA9IGVuZEFuZ2xlUmFkIC0gc3RhcnRBbmdsZVJhZDtcbiAgY29uc3QgYW5nbGVTdGVwID0gYW5nbGVSYW5nZSAvIChudW1Qb2ludHMgLSAxKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKykge1xuICAgIGNvbnN0IGFuZ2xlID0gc3RhcnRBbmdsZVJhZCArIGkgKiBhbmdsZVN0ZXA7XG4gICAgY29uc3QgeCA9IGNlbnRlclggKyByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgY29uc3QgeSA9IGNlbnRlclkgKyByYWRpdXMgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgcG9pbnRzLnB1c2goeyB4LCB5IH0pO1xuICB9XG4gIHJldHVybiBwb2ludHM7XG59XG5fX25hbWUoZ2VuZXJhdGVDaXJjbGVQb2ludHMzLCBcImdlbmVyYXRlQ2lyY2xlUG9pbnRzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY3VybHlCcmFjZVJpZ2h0KHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCk7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCk7XG4gIGNvbnN0IHJhZGl1cyA9IE1hdGgubWF4KDUsIGggKiAwLjEpO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMyh3IC8gMiwgLWggLyAyLCByYWRpdXMsIDIwLCAtOTAsIDApLFxuICAgIHsgeDogdyAvIDIgKyByYWRpdXMsIHk6IC1yYWRpdXMgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czModyAvIDIgKyByYWRpdXMgKiAyLCAtcmFkaXVzLCByYWRpdXMsIDIwLCAtMTgwLCAtMjcwKSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czModyAvIDIgKyByYWRpdXMgKiAyLCByYWRpdXMsIHJhZGl1cywgMjAsIC05MCwgLTE4MCksXG4gICAgeyB4OiB3IC8gMiArIHJhZGl1cywgeTogaCAvIDIgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czModyAvIDIsIGggLyAyLCByYWRpdXMsIDIwLCAwLCA5MClcbiAgXTtcbiAgY29uc3QgcmVjdFBvaW50cyA9IFtcbiAgICB7IHg6IC13IC8gMiwgeTogLWggLyAyIC0gcmFkaXVzIH0sXG4gICAgeyB4OiB3IC8gMiwgeTogLWggLyAyIC0gcmFkaXVzIH0sXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHMzKHcgLyAyLCAtaCAvIDIsIHJhZGl1cywgMjAsIC05MCwgMCksXG4gICAgeyB4OiB3IC8gMiArIHJhZGl1cywgeTogLXJhZGl1cyB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMyh3IC8gMiArIHJhZGl1cyAqIDIsIC1yYWRpdXMsIHJhZGl1cywgMjAsIC0xODAsIC0yNzApLFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMyh3IC8gMiArIHJhZGl1cyAqIDIsIHJhZGl1cywgcmFkaXVzLCAyMCwgLTkwLCAtMTgwKSxcbiAgICB7IHg6IHcgLyAyICsgcmFkaXVzLCB5OiBoIC8gMiB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzMyh3IC8gMiwgaCAvIDIsIHJhZGl1cywgMjAsIDAsIDkwKSxcbiAgICB7IHg6IHcgLyAyLCB5OiBoIC8gMiArIHJhZGl1cyB9LFxuICAgIHsgeDogLXcgLyAyLCB5OiBoIC8gMiArIHJhZGl1cyB9XG4gIF07XG4gIGNvbnN0IHJjID0gcm91Z2g5LnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7IGZpbGw6IFwibm9uZVwiIH0pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IGN1cmx5QnJhY2VSaWdodFBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCBuZXdDdXJseUJyYWNlUGF0aCA9IGN1cmx5QnJhY2VSaWdodFBhdGgucmVwbGFjZShcIlpcIiwgXCJcIik7XG4gIGNvbnN0IGN1cmx5QnJhY2VSaWdodE5vZGUgPSByYy5wYXRoKG5ld0N1cmx5QnJhY2VQYXRoLCBvcHRpb25zKTtcbiAgY29uc3QgcmVjdFBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhyZWN0UG9pbnRzKTtcbiAgY29uc3QgcmVjdFNoYXBlID0gcmMucGF0aChyZWN0UGF0aCwgeyAuLi5vcHRpb25zIH0pO1xuICBjb25zdCBjdXJseUJyYWNlUmlnaHRTaGFwZSA9IHNoYXBlU3ZnLmluc2VydChcImdcIiwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGN1cmx5QnJhY2VSaWdodFNoYXBlLmluc2VydCgoKSA9PiByZWN0U2hhcGUsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAwKTtcbiAgY3VybHlCcmFjZVJpZ2h0U2hhcGUuaW5zZXJ0KCgpID0+IGN1cmx5QnJhY2VSaWdodE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjdXJseUJyYWNlUmlnaHRTaGFwZS5hdHRyKFwiY2xhc3NcIiwgXCJ0ZXh0XCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIGN1cmx5QnJhY2VSaWdodFNoYXBlLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgY3VybHlCcmFjZVJpZ2h0U2hhcGUuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgY3VybHlCcmFjZVJpZ2h0U2hhcGUuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7LXJhZGl1c30sIDApYCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LXcgLyAyICsgKG5vZGUucGFkZGluZyA/PyAwKSAvIDIgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCR7LWggLyAyICsgKG5vZGUucGFkZGluZyA/PyAwKSAvIDIgLSAoYmJveC55IC0gKGJib3gudG9wID8/IDApKX0pYFxuICApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIGN1cmx5QnJhY2VSaWdodFNoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcmVjdFBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjdXJseUJyYWNlUmlnaHQsIFwiY3VybHlCcmFjZVJpZ2h0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9jdXJseUJyYWNlcy50c1xuaW1wb3J0IHJvdWdoMTAgZnJvbSBcInJvdWdoanNcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlQ2lyY2xlUG9pbnRzNChjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIG51bVBvaW50cyA9IDEwMCwgc3RhcnRBbmdsZSA9IDAsIGVuZEFuZ2xlID0gMTgwKSB7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBjb25zdCBzdGFydEFuZ2xlUmFkID0gc3RhcnRBbmdsZSAqIE1hdGguUEkgLyAxODA7XG4gIGNvbnN0IGVuZEFuZ2xlUmFkID0gZW5kQW5nbGUgKiBNYXRoLlBJIC8gMTgwO1xuICBjb25zdCBhbmdsZVJhbmdlID0gZW5kQW5nbGVSYWQgLSBzdGFydEFuZ2xlUmFkO1xuICBjb25zdCBhbmdsZVN0ZXAgPSBhbmdsZVJhbmdlIC8gKG51bVBvaW50cyAtIDEpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVBvaW50czsgaSsrKSB7XG4gICAgY29uc3QgYW5nbGUgPSBzdGFydEFuZ2xlUmFkICsgaSAqIGFuZ2xlU3RlcDtcbiAgICBjb25zdCB4ID0gY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICBjb25zdCB5ID0gY2VudGVyWSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcbiAgICBwb2ludHMucHVzaCh7IHg6IC14LCB5OiAteSB9KTtcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuX19uYW1lKGdlbmVyYXRlQ2lyY2xlUG9pbnRzNCwgXCJnZW5lcmF0ZUNpcmNsZVBvaW50c1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGN1cmx5QnJhY2VzKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCk7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCk7XG4gIGNvbnN0IHJhZGl1cyA9IE1hdGgubWF4KDUsIGggKiAwLjEpO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgbGVmdEN1cmx5QnJhY2VQb2ludHMgPSBbXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHM0KHcgLyAyLCAtaCAvIDIsIHJhZGl1cywgMzAsIC05MCwgMCksXG4gICAgeyB4OiAtdyAvIDIgLSByYWRpdXMsIHk6IHJhZGl1cyB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzNCh3IC8gMiArIHJhZGl1cyAqIDIsIC1yYWRpdXMsIHJhZGl1cywgMjAsIC0xODAsIC0yNzApLFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzNCh3IC8gMiArIHJhZGl1cyAqIDIsIHJhZGl1cywgcmFkaXVzLCAyMCwgLTkwLCAtMTgwKSxcbiAgICB7IHg6IC13IC8gMiAtIHJhZGl1cywgeTogLWggLyAyIH0sXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHM0KHcgLyAyLCBoIC8gMiwgcmFkaXVzLCAyMCwgMCwgOTApXG4gIF07XG4gIGNvbnN0IHJpZ2h0Q3VybHlCcmFjZVBvaW50cyA9IFtcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czQoLXcgLyAyICsgcmFkaXVzICsgcmFkaXVzIC8gMiwgLWggLyAyLCByYWRpdXMsIDIwLCAtOTAsIC0xODApLFxuICAgIHsgeDogdyAvIDIgLSByYWRpdXMgLyAyLCB5OiByYWRpdXMgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czQoLXcgLyAyIC0gcmFkaXVzIC8gMiwgLXJhZGl1cywgcmFkaXVzLCAyMCwgMCwgOTApLFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzNCgtdyAvIDIgLSByYWRpdXMgLyAyLCByYWRpdXMsIHJhZGl1cywgMjAsIC05MCwgMCksXG4gICAgeyB4OiB3IC8gMiAtIHJhZGl1cyAvIDIsIHk6IC1yYWRpdXMgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czQoLXcgLyAyICsgcmFkaXVzICsgcmFkaXVzIC8gMiwgaCAvIDIsIHJhZGl1cywgMzAsIC0xODAsIC0yNzApXG4gIF07XG4gIGNvbnN0IHJlY3RQb2ludHMgPSBbXG4gICAgeyB4OiB3IC8gMiwgeTogLWggLyAyIC0gcmFkaXVzIH0sXG4gICAgeyB4OiAtdyAvIDIsIHk6IC1oIC8gMiAtIHJhZGl1cyB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzNCh3IC8gMiwgLWggLyAyLCByYWRpdXMsIDIwLCAtOTAsIDApLFxuICAgIHsgeDogLXcgLyAyIC0gcmFkaXVzLCB5OiAtcmFkaXVzIH0sXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHM0KHcgLyAyICsgcmFkaXVzICogMiwgLXJhZGl1cywgcmFkaXVzLCAyMCwgLTE4MCwgLTI3MCksXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHM0KHcgLyAyICsgcmFkaXVzICogMiwgcmFkaXVzLCByYWRpdXMsIDIwLCAtOTAsIC0xODApLFxuICAgIHsgeDogLXcgLyAyIC0gcmFkaXVzLCB5OiBoIC8gMiB9LFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzNCh3IC8gMiwgaCAvIDIsIHJhZGl1cywgMjAsIDAsIDkwKSxcbiAgICB7IHg6IC13IC8gMiwgeTogaCAvIDIgKyByYWRpdXMgfSxcbiAgICB7IHg6IHcgLyAyIC0gcmFkaXVzIC0gcmFkaXVzIC8gMiwgeTogaCAvIDIgKyByYWRpdXMgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czQoLXcgLyAyICsgcmFkaXVzICsgcmFkaXVzIC8gMiwgLWggLyAyLCByYWRpdXMsIDIwLCAtOTAsIC0xODApLFxuICAgIHsgeDogdyAvIDIgLSByYWRpdXMgLyAyLCB5OiByYWRpdXMgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czQoLXcgLyAyIC0gcmFkaXVzIC8gMiwgLXJhZGl1cywgcmFkaXVzLCAyMCwgMCwgOTApLFxuICAgIC4uLmdlbmVyYXRlQ2lyY2xlUG9pbnRzNCgtdyAvIDIgLSByYWRpdXMgLyAyLCByYWRpdXMsIHJhZGl1cywgMjAsIC05MCwgMCksXG4gICAgeyB4OiB3IC8gMiAtIHJhZGl1cyAvIDIsIHk6IC1yYWRpdXMgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50czQoLXcgLyAyICsgcmFkaXVzICsgcmFkaXVzIC8gMiwgaCAvIDIsIHJhZGl1cywgMzAsIC0xODAsIC0yNzApXG4gIF07XG4gIGNvbnN0IHJjID0gcm91Z2gxMC5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwgeyBmaWxsOiBcIm5vbmVcIiB9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBsZWZ0Q3VybHlCcmFjZVBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhsZWZ0Q3VybHlCcmFjZVBvaW50cyk7XG4gIGNvbnN0IG5ld0xlZnRDdXJseUJyYWNlUGF0aCA9IGxlZnRDdXJseUJyYWNlUGF0aC5yZXBsYWNlKFwiWlwiLCBcIlwiKTtcbiAgY29uc3QgbGVmdEN1cmx5QnJhY2VOb2RlID0gcmMucGF0aChuZXdMZWZ0Q3VybHlCcmFjZVBhdGgsIG9wdGlvbnMpO1xuICBjb25zdCByaWdodEN1cmx5QnJhY2VQYXRoID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocmlnaHRDdXJseUJyYWNlUG9pbnRzKTtcbiAgY29uc3QgbmV3UmlnaHRDdXJseUJyYWNlUGF0aCA9IHJpZ2h0Q3VybHlCcmFjZVBhdGgucmVwbGFjZShcIlpcIiwgXCJcIik7XG4gIGNvbnN0IHJpZ2h0Q3VybHlCcmFjZU5vZGUgPSByYy5wYXRoKG5ld1JpZ2h0Q3VybHlCcmFjZVBhdGgsIG9wdGlvbnMpO1xuICBjb25zdCByZWN0UGF0aCA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHJlY3RQb2ludHMpO1xuICBjb25zdCByZWN0U2hhcGUgPSByYy5wYXRoKHJlY3RQYXRoLCB7IC4uLm9wdGlvbnMgfSk7XG4gIGNvbnN0IGN1cmx5QnJhY2VzU2hhcGUgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjdXJseUJyYWNlc1NoYXBlLmluc2VydCgoKSA9PiByZWN0U2hhcGUsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJzdHJva2Utb3BhY2l0eVwiLCAwKTtcbiAgY3VybHlCcmFjZXNTaGFwZS5pbnNlcnQoKCkgPT4gbGVmdEN1cmx5QnJhY2VOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgY3VybHlCcmFjZXNTaGFwZS5pbnNlcnQoKCkgPT4gcmlnaHRDdXJseUJyYWNlTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGN1cmx5QnJhY2VzU2hhcGUuYXR0cihcImNsYXNzXCIsIFwidGV4dFwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjdXJseUJyYWNlc1NoYXBlLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgY3VybHlCcmFjZXNTaGFwZS5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBjdXJseUJyYWNlc1NoYXBlLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3JhZGl1cyAtIHJhZGl1cyAvIDR9LCAwKWApO1xuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey13IC8gMiArIChub2RlLnBhZGRpbmcgPz8gMCkgLyAyIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwkey1oIC8gMiArIChub2RlLnBhZGRpbmcgPz8gMCkgLyAyIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBjdXJseUJyYWNlc1NoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcmVjdFBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjdXJseUJyYWNlcywgXCJjdXJseUJyYWNlc1wiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvY3VydmVkVHJhcGV6b2lkLnRzXG5pbXBvcnQgcm91Z2gxMSBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gY3VydmVkVHJhcGV6b2lkKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IG1pbldpZHRoID0gODAsIG1pbkhlaWdodCA9IDIwO1xuICBjb25zdCB3ID0gTWF0aC5tYXgobWluV2lkdGgsIChiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIpICogMS4yNSwgbm9kZT8ud2lkdGggPz8gMCk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChtaW5IZWlnaHQsIGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3QgcmFkaXVzID0gaCAvIDI7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoMTEuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCB0b3RhbFdpZHRoID0gdywgdG90YWxIZWlnaHQgPSBoO1xuICBjb25zdCBydyA9IHRvdGFsV2lkdGggLSByYWRpdXM7XG4gIGNvbnN0IHR3ID0gdG90YWxIZWlnaHQgLyA0O1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiBydywgeTogMCB9LFxuICAgIHsgeDogdHcsIHk6IDAgfSxcbiAgICB7IHg6IDAsIHk6IHRvdGFsSGVpZ2h0IC8gMiB9LFxuICAgIHsgeDogdHcsIHk6IHRvdGFsSGVpZ2h0IH0sXG4gICAgeyB4OiBydywgeTogdG90YWxIZWlnaHQgfSxcbiAgICAuLi5nZW5lcmF0ZUNpcmNsZVBvaW50cygtcncsIC10b3RhbEhlaWdodCAvIDIsIHJhZGl1cywgNTAsIDI3MCwgOTApXG4gIF07XG4gIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgY29uc3Qgc2hhcGVOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gIGNvbnN0IHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gc2hhcGVOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcG9seWdvbi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIik7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RDaGlsZHJlbihcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RDaGlsZHJlbihcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHBvbHlnb24uYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7LXcgLyAyfSwgJHstaCAvIDJ9KWApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHBvbHlnb24pO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoY3VydmVkVHJhcGV6b2lkLCBcImN1cnZlZFRyYXBlem9pZFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvY3lsaW5kZXIudHNcbmltcG9ydCByb3VnaDEyIGZyb20gXCJyb3VnaGpzXCI7XG52YXIgY3JlYXRlQ3lsaW5kZXJQYXRoRCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHgsIHksIHdpZHRoLCBoZWlnaHQsIHJ4LCByeSkgPT4ge1xuICByZXR1cm4gW1xuICAgIGBNJHt4fSwke3kgKyByeX1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHt3aWR0aH0sMGAsXG4gICAgYGEke3J4fSwke3J5fSAwLDAsMCAkey13aWR0aH0sMGAsXG4gICAgYGwwLCR7aGVpZ2h0fWAsXG4gICAgYGEke3J4fSwke3J5fSAwLDAsMCAke3dpZHRofSwwYCxcbiAgICBgbDAsJHstaGVpZ2h0fWBcbiAgXS5qb2luKFwiIFwiKTtcbn0sIFwiY3JlYXRlQ3lsaW5kZXJQYXRoRFwiKTtcbnZhciBjcmVhdGVPdXRlckN5bGluZGVyUGF0aEQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByeCwgcnkpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBgTSR7eH0sJHt5ICsgcnl9YCxcbiAgICBgTSR7eCArIHdpZHRofSwke3kgKyByeX1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHstd2lkdGh9LDBgLFxuICAgIGBsMCwke2hlaWdodH1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHt3aWR0aH0sMGAsXG4gICAgYGwwLCR7LWhlaWdodH1gXG4gIF0uam9pbihcIiBcIik7XG59LCBcImNyZWF0ZU91dGVyQ3lsaW5kZXJQYXRoRFwiKTtcbnZhciBjcmVhdGVJbm5lckN5bGluZGVyUGF0aEQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByeCwgcnkpID0+IHtcbiAgcmV0dXJuIFtgTSR7eCAtIHdpZHRoIC8gMn0sJHstaGVpZ2h0IC8gMn1gLCBgYSR7cnh9LCR7cnl9IDAsMCwwICR7d2lkdGh9LDBgXS5qb2luKFwiIFwiKTtcbn0sIFwiY3JlYXRlSW5uZXJDeWxpbmRlclBhdGhEXCIpO1xuYXN5bmMgZnVuY3Rpb24gY3lsaW5kZXIocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBNYXRoLm1heChiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nLCBub2RlLndpZHRoID8/IDApO1xuICBjb25zdCByeCA9IHcgLyAyO1xuICBjb25zdCByeSA9IHJ4IC8gKDIuNSArIHcgLyA1MCk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChiYm94LmhlaWdodCArIHJ5ICsgbm9kZS5wYWRkaW5nLCBub2RlLmhlaWdodCA/PyAwKTtcbiAgbGV0IGN5bGluZGVyMjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoMTIuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvdXRlclBhdGhEYXRhID0gY3JlYXRlT3V0ZXJDeWxpbmRlclBhdGhEKDAsIDAsIHcsIGgsIHJ4LCByeSk7XG4gICAgY29uc3QgaW5uZXJQYXRoRGF0YSA9IGNyZWF0ZUlubmVyQ3lsaW5kZXJQYXRoRCgwLCByeSwgdywgaCwgcngsIHJ5KTtcbiAgICBjb25zdCBvdXRlck5vZGUgPSByYy5wYXRoKG91dGVyUGF0aERhdGEsIHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KSk7XG4gICAgY29uc3QgaW5uZXJMaW5lID0gcmMucGF0aChpbm5lclBhdGhEYXRhLCB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7IGZpbGw6IFwibm9uZVwiIH0pKTtcbiAgICBjeWxpbmRlcjIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gaW5uZXJMaW5lLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjeWxpbmRlcjIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gb3V0ZXJOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjeWxpbmRlcjIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICAgIGlmIChjc3NTdHlsZXMpIHtcbiAgICAgIGN5bGluZGVyMi5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVDeWxpbmRlclBhdGhEKDAsIDAsIHcsIGgsIHJ4LCByeSk7XG4gICAgY3lsaW5kZXIyID0gc2hhcGVTdmcuaW5zZXJ0KFwicGF0aFwiLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwiZFwiLCBwYXRoRGF0YSkuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpLmF0dHIoXCJzdHlsZVwiLCBoYW5kbGVVbmRlZmluZWRBdHRyKGNzc1N0eWxlcykpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBjeWxpbmRlcjIuYXR0cihcImxhYmVsLW9mZnNldC15XCIsIHJ5KTtcbiAgY3lsaW5kZXIyLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey13IC8gMn0sICR7LShoIC8gMiArIHJ5KX0pYCk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgY3lsaW5kZXIyKTtcbiAgbGFiZWwuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIGB0cmFuc2xhdGUoJHstKGJib3gud2lkdGggLyAyKSAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7LShiYm94LmhlaWdodCAvIDIpICsgKG5vZGUucGFkZGluZyA/PyAwKSAvIDEuNSAtIChiYm94LnkgLSAoYmJveC50b3AgPz8gMCkpfSlgXG4gICk7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5yZWN0KG5vZGUsIHBvaW50KTtcbiAgICBjb25zdCB4ID0gcG9zLnggLSAobm9kZS54ID8/IDApO1xuICAgIGlmIChyeCAhPSAwICYmIChNYXRoLmFicyh4KSA8IChub2RlLndpZHRoID8/IDApIC8gMiB8fCBNYXRoLmFicyh4KSA9PSAobm9kZS53aWR0aCA/PyAwKSAvIDIgJiYgTWF0aC5hYnMocG9zLnkgLSAobm9kZS55ID8/IDApKSA+IChub2RlLmhlaWdodCA/PyAwKSAvIDIgLSByeSkpIHtcbiAgICAgIGxldCB5ID0gcnkgKiByeSAqICgxIC0geCAqIHggLyAocnggKiByeCkpO1xuICAgICAgaWYgKHkgPiAwKSB7XG4gICAgICAgIHkgPSBNYXRoLnNxcnQoeSk7XG4gICAgICB9XG4gICAgICB5ID0gcnkgLSB5O1xuICAgICAgaWYgKHBvaW50LnkgLSAobm9kZS55ID8/IDApID4gMCkge1xuICAgICAgICB5ID0gLXk7XG4gICAgICB9XG4gICAgICBwb3MueSArPSB5O1xuICAgIH1cbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoY3lsaW5kZXIsIFwiY3lsaW5kZXJcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2RpdmlkZWRSZWN0LnRzXG5pbXBvcnQgcm91Z2gxMyBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gZGl2aWRlZFJlY3RhbmdsZShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGxhYmVsIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IGJib3gud2lkdGggKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodCArIG5vZGUucGFkZGluZztcbiAgY29uc3QgcmVjdE9mZnNldCA9IGggKiAwLjI7XG4gIGNvbnN0IHggPSAtdyAvIDI7XG4gIGNvbnN0IHkgPSAtaCAvIDIgLSByZWN0T2Zmc2V0IC8gMjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHJjID0gcm91Z2gxMy5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHB0cyA9IFtcbiAgICB7IHgsIHk6IHkgKyByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiAteCwgeTogeSArIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IC14LCB5OiAteSB9LFxuICAgIHsgeCwgeTogLXkgfSxcbiAgICB7IHgsIHkgfSxcbiAgICB7IHg6IC14LCB5IH0sXG4gICAgeyB4OiAteCwgeTogeSArIHJlY3RPZmZzZXQgfVxuICBdO1xuICBjb25zdCBwb2x5ID0gcmMucG9seWdvbihcbiAgICBwdHMubWFwKChwKSA9PiBbcC54LCBwLnldKSxcbiAgICBvcHRpb25zXG4gICk7XG4gIGNvbnN0IHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcG9seSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIHBvbHlnb24uYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHBvbHlnb24uc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBwb2x5Z29uLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7eCArIChub2RlLnBhZGRpbmcgPz8gMCkgLyAyIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwgJHt5ICsgcmVjdE9mZnNldCArIChub2RlLnBhZGRpbmcgPz8gMCkgLyAyIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBwb2x5Z29uKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShkaXZpZGVkUmVjdGFuZ2xlLCBcImRpdmlkZWRSZWN0YW5nbGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2RvdWJsZUNpcmNsZS50c1xuaW1wb3J0IHJvdWdoMTQgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGRvdWJsZWNpcmNsZShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGhhbGZQYWRkaW5nIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgZ2FwID0gNTtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBiYm94LndpZHRoIC8gMiArIGhhbGZQYWRkaW5nICsgZ2FwO1xuICBjb25zdCBpbm5lclJhZGl1cyA9IGJib3gud2lkdGggLyAyICsgaGFsZlBhZGRpbmc7XG4gIGxldCBjaXJjbGVHcm91cDtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoMTQuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvdXRlck9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7IHJvdWdobmVzczogMC4yLCBzdHJva2VXaWR0aDogMi41IH0pO1xuICAgIGNvbnN0IGlubmVyT3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHsgcm91Z2huZXNzOiAwLjIsIHN0cm9rZVdpZHRoOiAxLjUgfSk7XG4gICAgY29uc3Qgb3V0ZXJSb3VnaE5vZGUgPSByYy5jaXJjbGUoMCwgMCwgb3V0ZXJSYWRpdXMgKiAyLCBvdXRlck9wdGlvbnMpO1xuICAgIGNvbnN0IGlubmVyUm91Z2hOb2RlID0gcmMuY2lyY2xlKDAsIDAsIGlubmVyUmFkaXVzICogMiwgaW5uZXJPcHRpb25zKTtcbiAgICBjaXJjbGVHcm91cCA9IHNoYXBlU3ZnLmluc2VydChcImdcIiwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgY2lyY2xlR3JvdXAuYXR0cihcImNsYXNzXCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIobm9kZS5jc3NDbGFzc2VzKSkuYXR0cihcInN0eWxlXCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIoY3NzU3R5bGVzKSk7XG4gICAgY2lyY2xlR3JvdXAubm9kZSgpPy5hcHBlbmRDaGlsZChvdXRlclJvdWdoTm9kZSk7XG4gICAgY2lyY2xlR3JvdXAubm9kZSgpPy5hcHBlbmRDaGlsZChpbm5lclJvdWdoTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgY2lyY2xlR3JvdXAgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgIGNvbnN0IG91dGVyQ2lyY2xlID0gY2lyY2xlR3JvdXAuaW5zZXJ0KFwiY2lyY2xlXCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgIGNvbnN0IGlubmVyQ2lyY2xlID0gY2lyY2xlR3JvdXAuaW5zZXJ0KFwiY2lyY2xlXCIpO1xuICAgIGNpcmNsZUdyb3VwLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gICAgb3V0ZXJDaXJjbGUuYXR0cihcImNsYXNzXCIsIFwib3V0ZXItY2lyY2xlXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKS5hdHRyKFwiclwiLCBvdXRlclJhZGl1cykuYXR0cihcImN4XCIsIDApLmF0dHIoXCJjeVwiLCAwKTtcbiAgICBpbm5lckNpcmNsZS5hdHRyKFwiY2xhc3NcIiwgXCJpbm5lci1jaXJjbGVcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpLmF0dHIoXCJyXCIsIGlubmVyUmFkaXVzKS5hdHRyKFwiY3hcIiwgMCkuYXR0cihcImN5XCIsIDApO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgY2lyY2xlR3JvdXApO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgbG9nLmluZm8oXCJEb3VibGVDaXJjbGUgaW50ZXJzZWN0XCIsIG5vZGUsIG91dGVyUmFkaXVzLCBwb2ludCk7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LmNpcmNsZShub2RlLCBvdXRlclJhZGl1cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoZG91YmxlY2lyY2xlLCBcImRvdWJsZWNpcmNsZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvZmlsbGVkQ2lyY2xlLnRzXG5pbXBvcnQgcm91Z2gxNSBmcm9tIFwicm91Z2hqc1wiO1xuZnVuY3Rpb24gZmlsbGVkQ2lyY2xlKHBhcmVudCwgbm9kZSwgeyBjb25maWc6IHsgdGhlbWVWYXJpYWJsZXMgfSB9KSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWwgPSBcIlwiO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpLmF0dHIoXCJpZFwiLCBub2RlLmRvbUlkID8/IG5vZGUuaWQpO1xuICBjb25zdCByYWRpdXMgPSA3O1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgcmMgPSByb3VnaDE1LnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IHsgbm9kZUJvcmRlciB9ID0gdGhlbWVWYXJpYWJsZXM7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7IGZpbGxTdHlsZTogXCJzb2xpZFwiIH0pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICB9XG4gIGNvbnN0IGNpcmNsZU5vZGUgPSByYy5jaXJjbGUoMCwgMCwgcmFkaXVzICogMiwgb3B0aW9ucyk7XG4gIGNvbnN0IGZpbGxlZENpcmNsZTIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gY2lyY2xlTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGZpbGxlZENpcmNsZTIuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgYGZpbGw6ICR7bm9kZUJvcmRlcn0gIWltcG9ydGFudDtgKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBjc3NTdHlsZXMubGVuZ3RoID4gMCAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBmaWxsZWRDaXJjbGUyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgZmlsbGVkQ2lyY2xlMi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIGZpbGxlZENpcmNsZTIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgbG9nLmluZm8oXCJmaWxsZWRDaXJjbGUgaW50ZXJzZWN0XCIsIG5vZGUsIHsgcmFkaXVzLCBwb2ludCB9KTtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5jaXJjbGUobm9kZSwgcmFkaXVzLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKGZpbGxlZENpcmNsZSwgXCJmaWxsZWRDaXJjbGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2ZsaXBwZWRUcmlhbmdsZS50c1xuaW1wb3J0IHJvdWdoMTYgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGZsaXBwZWRUcmlhbmdsZShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGxhYmVsIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApO1xuICBjb25zdCBoID0gdyArIGJib3guaGVpZ2h0O1xuICBjb25zdCB0dyA9IHcgKyBiYm94LmhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogMCwgeTogLWggfSxcbiAgICB7IHg6IHR3LCB5OiAtaCB9LFxuICAgIHsgeDogdHcgLyAyLCB5OiAwIH1cbiAgXTtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHJjID0gcm91Z2gxNi5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgY29uc3Qgcm91Z2hOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gIGNvbnN0IGZsaXBwZWRUcmlhbmdsZTIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstaCAvIDJ9LCAke2ggLyAyfSlgKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBmbGlwcGVkVHJpYW5nbGUyLnNlbGVjdENoaWxkcmVuKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBmbGlwcGVkVHJpYW5nbGUyLnNlbGVjdENoaWxkcmVuKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgbm9kZS53aWR0aCA9IHc7XG4gIG5vZGUuaGVpZ2h0ID0gaDtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBmbGlwcGVkVHJpYW5nbGUyKTtcbiAgbGFiZWwuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIGB0cmFuc2xhdGUoJHstYmJveC53aWR0aCAvIDIgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCAkey1oIC8gMiArIChub2RlLnBhZGRpbmcgPz8gMCkgLyAyICsgKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGxvZy5pbmZvKFwiVHJpYW5nbGUgaW50ZXJzZWN0XCIsIG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoZmxpcHBlZFRyaWFuZ2xlLCBcImZsaXBwZWRUcmlhbmdsZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvZm9ya0pvaW4udHNcbmltcG9ydCByb3VnaDE3IGZyb20gXCJyb3VnaGpzXCI7XG5mdW5jdGlvbiBmb3JrSm9pbihwYXJlbnQsIG5vZGUsIHsgZGlyLCBjb25maWc6IHsgc3RhdGU6IHN0YXRlMiwgdGhlbWVWYXJpYWJsZXMgfSB9KSB7XG4gIGNvbnN0IHsgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbCA9IFwiXCI7XG4gIGNvbnN0IHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIGdldE5vZGVDbGFzc2VzKG5vZGUpKS5hdHRyKFwiaWRcIiwgbm9kZS5kb21JZCA/PyBub2RlLmlkKTtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGxldCB3aWR0aCA9IE1hdGgubWF4KDcwLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgbGV0IGhlaWdodCA9IE1hdGgubWF4KDEwLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGlmIChkaXIgPT09IFwiTFJcIikge1xuICAgIHdpZHRoID0gTWF0aC5tYXgoMTAsIG5vZGU/LndpZHRoID8/IDApO1xuICAgIGhlaWdodCA9IE1hdGgubWF4KDcwLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIH1cbiAgY29uc3QgeCA9IC0xICogd2lkdGggLyAyO1xuICBjb25zdCB5ID0gLTEgKiBoZWlnaHQgLyAyO1xuICBjb25zdCByYyA9IHJvdWdoMTcuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHtcbiAgICBzdHJva2U6IHRoZW1lVmFyaWFibGVzLmxpbmVDb2xvcixcbiAgICBmaWxsOiB0aGVtZVZhcmlhYmxlcy5saW5lQ29sb3JcbiAgfSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3Qgcm91Z2hOb2RlID0gcmMucmVjdGFuZ2xlKHgsIHksIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpO1xuICBjb25zdCBzaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHNoYXBlLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgc2hhcGUuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBzaGFwZSk7XG4gIGNvbnN0IHBhZGRpbmcgPSBzdGF0ZTI/LnBhZGRpbmcgPz8gMDtcbiAgaWYgKG5vZGUud2lkdGggJiYgbm9kZS5oZWlnaHQpIHtcbiAgICBub2RlLndpZHRoICs9IHBhZGRpbmcgLyAyIHx8IDA7XG4gICAgbm9kZS5oZWlnaHQgKz0gcGFkZGluZyAvIDIgfHwgMDtcbiAgfVxuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoZm9ya0pvaW4sIFwiZm9ya0pvaW5cIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2hhbGZSb3VuZGVkUmVjdGFuZ2xlLnRzXG5pbXBvcnQgcm91Z2gxOCBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gaGFsZlJvdW5kZWRSZWN0YW5nbGUocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCBtaW5XaWR0aCA9IDgwLCBtaW5IZWlnaHQgPSA1MDtcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBNYXRoLm1heChtaW5XaWR0aCwgYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KG1pbkhlaWdodCwgYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCByYWRpdXMgPSBoIC8gMjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHJjID0gcm91Z2gxOC5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IC13IC8gMiwgeTogLWggLyAyIH0sXG4gICAgeyB4OiB3IC8gMiAtIHJhZGl1cywgeTogLWggLyAyIH0sXG4gICAgLi4uZ2VuZXJhdGVDaXJjbGVQb2ludHMoLXcgLyAyICsgcmFkaXVzLCAwLCByYWRpdXMsIDUwLCA5MCwgMjcwKSxcbiAgICB7IHg6IHcgLyAyIC0gcmFkaXVzLCB5OiBoIC8gMiB9LFxuICAgIHsgeDogLXcgLyAyLCB5OiBoIC8gMiB9XG4gIF07XG4gIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgY29uc3Qgc2hhcGVOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gIGNvbnN0IHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gc2hhcGVOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcG9seWdvbi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIik7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RDaGlsZHJlbihcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RDaGlsZHJlbihcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcG9seWdvbik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBsb2cuaW5mbyhcIlBpbGwgaW50ZXJzZWN0XCIsIG5vZGUsIHsgcmFkaXVzLCBwb2ludCB9KTtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShoYWxmUm91bmRlZFJlY3RhbmdsZSwgXCJoYWxmUm91bmRlZFJlY3RhbmdsZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvaGV4YWdvbi50c1xuaW1wb3J0IHJvdWdoMTkgZnJvbSBcInJvdWdoanNcIjtcbnZhciBjcmVhdGVIZXhhZ29uUGF0aEQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBtKSA9PiB7XG4gIHJldHVybiBbXG4gICAgYE0ke3ggKyBtfSwke3l9YCxcbiAgICBgTCR7eCArIHdpZHRoIC0gbX0sJHt5fWAsXG4gICAgYEwke3ggKyB3aWR0aH0sJHt5IC0gaGVpZ2h0IC8gMn1gLFxuICAgIGBMJHt4ICsgd2lkdGggLSBtfSwke3kgLSBoZWlnaHR9YCxcbiAgICBgTCR7eCArIG19LCR7eSAtIGhlaWdodH1gLFxuICAgIGBMJHt4fSwke3kgLSBoZWlnaHQgLyAyfWAsXG4gICAgXCJaXCJcbiAgXS5qb2luKFwiIFwiKTtcbn0sIFwiY3JlYXRlSGV4YWdvblBhdGhEXCIpO1xuYXN5bmMgZnVuY3Rpb24gaGV4YWdvbihwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCBmID0gNDtcbiAgY29uc3QgaCA9IGJib3guaGVpZ2h0ICsgbm9kZS5wYWRkaW5nO1xuICBjb25zdCBtID0gaCAvIGY7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgMiAqIG0gKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IG0sIHk6IDAgfSxcbiAgICB7IHg6IHcgLSBtLCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAtaCAvIDIgfSxcbiAgICB7IHg6IHcgLSBtLCB5OiAtaCB9LFxuICAgIHsgeDogbSwgeTogLWggfSxcbiAgICB7IHg6IDAsIHk6IC1oIC8gMiB9XG4gIF07XG4gIGxldCBwb2x5Z29uO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2gxOS5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gICAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVIZXhhZ29uUGF0aEQoMCwgMCwgdywgaCwgbSk7XG4gICAgY29uc3Qgcm91Z2hOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gICAgcG9seWdvbiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey13IC8gMn0sICR7aCAvIDJ9KWApO1xuICAgIGlmIChjc3NTdHlsZXMpIHtcbiAgICAgIHBvbHlnb24uYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBvbHlnb24gPSBpbnNlcnRQb2x5Z29uU2hhcGUoc2hhcGVTdmcsIHcsIGgsIHBvaW50cyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMpIHtcbiAgICBwb2x5Z29uLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBub2RlLndpZHRoID0gdztcbiAgbm9kZS5oZWlnaHQgPSBoO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHBvbHlnb24pO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShoZXhhZ29uLCBcImhleGFnb25cIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2hvdXJnbGFzcy50c1xuaW1wb3J0IHJvdWdoMjAgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGhvdXJnbGFzcyhwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbCA9IFwiXCI7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IE1hdGgubWF4KDMwLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KDMwLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoMjAuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAwIH0sXG4gICAgeyB4OiAwLCB5OiBoIH0sXG4gICAgeyB4OiB3LCB5OiBoIH1cbiAgXTtcbiAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCBzaGFwZU5vZGUgPSByYy5wYXRoKHBhdGhEYXRhLCBvcHRpb25zKTtcbiAgY29uc3QgcG9seWdvbiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBzaGFwZU5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBwb2x5Z29uLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBwb2x5Z29uLnNlbGVjdENoaWxkcmVuKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBwb2x5Z29uLnNlbGVjdENoaWxkcmVuKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgcG9seWdvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstdyAvIDJ9LCAkey1oIC8gMn0pYCk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcG9seWdvbik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBsb2cuaW5mbyhcIlBpbGwgaW50ZXJzZWN0XCIsIG5vZGUsIHsgcG9pbnRzIH0pO1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKGhvdXJnbGFzcywgXCJob3VyZ2xhc3NcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2ljb24udHNcbmltcG9ydCByb3VnaDIxIGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBpY29uKHBhcmVudCwgbm9kZSwgeyBjb25maWc6IHsgdGhlbWVWYXJpYWJsZXMsIGZsb3djaGFydCB9IH0pIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IGFzc2V0SGVpZ2h0ID0gbm9kZS5hc3NldEhlaWdodCA/PyA0ODtcbiAgY29uc3QgYXNzZXRXaWR0aCA9IG5vZGUuYXNzZXRXaWR0aCA/PyA0ODtcbiAgY29uc3QgaWNvblNpemUgPSBNYXRoLm1heChhc3NldEhlaWdodCwgYXNzZXRXaWR0aCk7XG4gIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGZsb3djaGFydD8ud3JhcHBpbmdXaWR0aDtcbiAgbm9kZS53aWR0aCA9IE1hdGgubWF4KGljb25TaXplLCBkZWZhdWx0V2lkdGggPz8gMCk7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGxhYmVsIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIFwiaWNvbi1zaGFwZSBkZWZhdWx0XCIpO1xuICBjb25zdCB0b3BMYWJlbCA9IG5vZGUucG9zID09PSBcInRcIjtcbiAgY29uc3QgaGVpZ2h0ID0gaWNvblNpemU7XG4gIGNvbnN0IHdpZHRoID0gaWNvblNpemU7XG4gIGNvbnN0IHsgbm9kZUJvcmRlciB9ID0gdGhlbWVWYXJpYWJsZXM7XG4gIGNvbnN0IHsgc3R5bGVzTWFwIH0gPSBjb21waWxlU3R5bGVzKG5vZGUpO1xuICBjb25zdCB4ID0gLXdpZHRoIC8gMjtcbiAgY29uc3QgeSA9IC1oZWlnaHQgLyAyO1xuICBjb25zdCBsYWJlbFBhZGRpbmcgPSBub2RlLmxhYmVsID8gOCA6IDA7XG4gIGNvbnN0IHJjID0gcm91Z2gyMS5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwgeyBzdHJva2U6IFwibm9uZVwiLCBmaWxsOiBcIm5vbmVcIiB9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBpY29uTm9kZSA9IHJjLnJlY3RhbmdsZSh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKTtcbiAgY29uc3Qgb3V0ZXJXaWR0aCA9IE1hdGgubWF4KHdpZHRoLCBiYm94LndpZHRoKTtcbiAgY29uc3Qgb3V0ZXJIZWlnaHQgPSBoZWlnaHQgKyBiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZztcbiAgY29uc3Qgb3V0ZXJOb2RlID0gcmMucmVjdGFuZ2xlKC1vdXRlcldpZHRoIC8gMiwgLW91dGVySGVpZ2h0IC8gMiwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQsIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGZpbGw6IFwidHJhbnNwYXJlbnRcIixcbiAgICBzdHJva2U6IFwibm9uZVwiXG4gIH0pO1xuICBjb25zdCBpY29uU2hhcGUgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gaWNvbk5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjb25zdCBvdXRlclNoYXBlID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IG91dGVyTm9kZSk7XG4gIGlmIChub2RlLmljb24pIHtcbiAgICBjb25zdCBpY29uRWxlbSA9IHNoYXBlU3ZnLmFwcGVuZChcImdcIik7XG4gICAgaWNvbkVsZW0uaHRtbChcbiAgICAgIGA8Zz4ke2F3YWl0IGdldEljb25TVkcobm9kZS5pY29uLCB7XG4gICAgICAgIGhlaWdodDogaWNvblNpemUsXG4gICAgICAgIHdpZHRoOiBpY29uU2l6ZSxcbiAgICAgICAgZmFsbGJhY2tQcmVmaXg6IFwiXCJcbiAgICAgIH0pfTwvZz5gXG4gICAgKTtcbiAgICBjb25zdCBpY29uQkJveCA9IGljb25FbGVtLm5vZGUoKS5nZXRCQm94KCk7XG4gICAgY29uc3QgaWNvbldpZHRoID0gaWNvbkJCb3gud2lkdGg7XG4gICAgY29uc3QgaWNvbkhlaWdodCA9IGljb25CQm94LmhlaWdodDtcbiAgICBjb25zdCBpY29uWCA9IGljb25CQm94Lng7XG4gICAgY29uc3QgaWNvblkgPSBpY29uQkJveC55O1xuICAgIGljb25FbGVtLmF0dHIoXG4gICAgICBcInRyYW5zZm9ybVwiLFxuICAgICAgYHRyYW5zbGF0ZSgkey1pY29uV2lkdGggLyAyIC0gaWNvblh9LCR7dG9wTGFiZWwgPyBiYm94LmhlaWdodCAvIDIgKyBsYWJlbFBhZGRpbmcgLyAyIC0gaWNvbkhlaWdodCAvIDIgLSBpY29uWSA6IC1iYm94LmhlaWdodCAvIDIgLSBsYWJlbFBhZGRpbmcgLyAyIC0gaWNvbkhlaWdodCAvIDIgLSBpY29uWX0pYFxuICAgICk7XG4gICAgaWNvbkVsZW0uYXR0cihcInN0eWxlXCIsIGBjb2xvcjogJHtzdHlsZXNNYXAuZ2V0KFwic3Ryb2tlXCIpID8/IG5vZGVCb3JkZXJ9O2ApO1xuICB9XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LWJib3gud2lkdGggLyAyIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwke3RvcExhYmVsID8gLW91dGVySGVpZ2h0IC8gMiA6IG91dGVySGVpZ2h0IC8gMiAtIGJib3guaGVpZ2h0fSlgXG4gICk7XG4gIGljb25TaGFwZS5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkezB9LCR7dG9wTGFiZWwgPyBiYm94LmhlaWdodCAvIDIgKyBsYWJlbFBhZGRpbmcgLyAyIDogLWJib3guaGVpZ2h0IC8gMiAtIGxhYmVsUGFkZGluZyAvIDJ9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBvdXRlclNoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGxvZy5pbmZvKFwiaWNvblNxdWFyZSBpbnRlcnNlY3RcIiwgbm9kZSwgcG9pbnQpO1xuICAgIGlmICghbm9kZS5sYWJlbCkge1xuICAgICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICAgIH1cbiAgICBjb25zdCBkeCA9IG5vZGUueCA/PyAwO1xuICAgIGNvbnN0IGR5ID0gbm9kZS55ID8/IDA7XG4gICAgY29uc3Qgbm9kZUhlaWdodCA9IG5vZGUuaGVpZ2h0ID8/IDA7XG4gICAgbGV0IHBvaW50cyA9IFtdO1xuICAgIGlmICh0b3BMYWJlbCkge1xuICAgICAgcG9pbnRzID0gW1xuICAgICAgICB7IHg6IGR4IC0gYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCArIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggKyBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH0sXG4gICAgICAgIHsgeDogZHggKyB3aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZyB9LFxuICAgICAgICB7IHg6IGR4ICsgd2lkdGggLyAyLCB5OiBkeSArIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggLSB3aWR0aCAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIHdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH0sXG4gICAgICAgIHsgeDogZHggLSBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50cyA9IFtcbiAgICAgICAgeyB4OiBkeCAtIHdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4ICsgd2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggKyB3aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBoZWlnaHQgfSxcbiAgICAgICAgeyB4OiBkeCArIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgaGVpZ2h0IH0sXG4gICAgICAgIHsgeDogZHggKyBiYm94LndpZHRoIC8gMiAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIGJib3gud2lkdGggLyAyLCB5OiBkeSArIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggLSBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGhlaWdodCB9LFxuICAgICAgICB7IHg6IGR4IC0gd2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgaGVpZ2h0IH1cbiAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKGljb24sIFwiaWNvblwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvaWNvbkNpcmNsZS50c1xuaW1wb3J0IHJvdWdoMjIgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGljb25DaXJjbGUocGFyZW50LCBub2RlLCB7IGNvbmZpZzogeyB0aGVtZVZhcmlhYmxlcywgZmxvd2NoYXJ0IH0gfSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgYXNzZXRIZWlnaHQgPSBub2RlLmFzc2V0SGVpZ2h0ID8/IDQ4O1xuICBjb25zdCBhc3NldFdpZHRoID0gbm9kZS5hc3NldFdpZHRoID8/IDQ4O1xuICBjb25zdCBpY29uU2l6ZSA9IE1hdGgubWF4KGFzc2V0SGVpZ2h0LCBhc3NldFdpZHRoKTtcbiAgY29uc3QgZGVmYXVsdFdpZHRoID0gZmxvd2NoYXJ0Py53cmFwcGluZ1dpZHRoO1xuICBub2RlLndpZHRoID0gTWF0aC5tYXgoaWNvblNpemUsIGRlZmF1bHRXaWR0aCA/PyAwKTtcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgXCJpY29uLXNoYXBlIGRlZmF1bHRcIik7XG4gIGNvbnN0IHBhZGRpbmcgPSAyMDtcbiAgY29uc3QgbGFiZWxQYWRkaW5nID0gbm9kZS5sYWJlbCA/IDggOiAwO1xuICBjb25zdCB0b3BMYWJlbCA9IG5vZGUucG9zID09PSBcInRcIjtcbiAgY29uc3QgeyBub2RlQm9yZGVyLCBtYWluQmtnIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3QgeyBzdHlsZXNNYXAgfSA9IGNvbXBpbGVTdHlsZXMobm9kZSk7XG4gIGNvbnN0IHJjID0gcm91Z2gyMi5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IGZpbGwgPSBzdHlsZXNNYXAuZ2V0KFwiZmlsbFwiKTtcbiAgb3B0aW9ucy5zdHJva2UgPSBmaWxsID8/IG1haW5Ca2c7XG4gIGNvbnN0IGljb25FbGVtID0gc2hhcGVTdmcuYXBwZW5kKFwiZ1wiKTtcbiAgaWYgKG5vZGUuaWNvbikge1xuICAgIGljb25FbGVtLmh0bWwoXG4gICAgICBgPGc+JHthd2FpdCBnZXRJY29uU1ZHKG5vZGUuaWNvbiwge1xuICAgICAgICBoZWlnaHQ6IGljb25TaXplLFxuICAgICAgICB3aWR0aDogaWNvblNpemUsXG4gICAgICAgIGZhbGxiYWNrUHJlZml4OiBcIlwiXG4gICAgICB9KX08L2c+YFxuICAgICk7XG4gIH1cbiAgY29uc3QgaWNvbkJCb3ggPSBpY29uRWxlbS5ub2RlKCkuZ2V0QkJveCgpO1xuICBjb25zdCBpY29uV2lkdGggPSBpY29uQkJveC53aWR0aDtcbiAgY29uc3QgaWNvbkhlaWdodCA9IGljb25CQm94LmhlaWdodDtcbiAgY29uc3QgaWNvblggPSBpY29uQkJveC54O1xuICBjb25zdCBpY29uWSA9IGljb25CQm94Lnk7XG4gIGNvbnN0IGRpYW1ldGVyID0gTWF0aC5tYXgoaWNvbldpZHRoLCBpY29uSGVpZ2h0KSAqIE1hdGguU1FSVDIgKyBwYWRkaW5nICogMjtcbiAgY29uc3QgaWNvbk5vZGUgPSByYy5jaXJjbGUoMCwgMCwgZGlhbWV0ZXIsIG9wdGlvbnMpO1xuICBjb25zdCBvdXRlcldpZHRoID0gTWF0aC5tYXgoZGlhbWV0ZXIsIGJib3gud2lkdGgpO1xuICBjb25zdCBvdXRlckhlaWdodCA9IGRpYW1ldGVyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmc7XG4gIGNvbnN0IG91dGVyTm9kZSA9IHJjLnJlY3RhbmdsZSgtb3V0ZXJXaWR0aCAvIDIsIC1vdXRlckhlaWdodCAvIDIsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBmaWxsOiBcInRyYW5zcGFyZW50XCIsXG4gICAgc3Ryb2tlOiBcIm5vbmVcIlxuICB9KTtcbiAgY29uc3QgaWNvblNoYXBlID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IGljb25Ob2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgY29uc3Qgb3V0ZXJTaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBvdXRlck5vZGUpO1xuICBpY29uRWxlbS5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey1pY29uV2lkdGggLyAyIC0gaWNvblh9LCR7dG9wTGFiZWwgPyBiYm94LmhlaWdodCAvIDIgKyBsYWJlbFBhZGRpbmcgLyAyIC0gaWNvbkhlaWdodCAvIDIgLSBpY29uWSA6IC1iYm94LmhlaWdodCAvIDIgLSBsYWJlbFBhZGRpbmcgLyAyIC0gaWNvbkhlaWdodCAvIDIgLSBpY29uWX0pYFxuICApO1xuICBpY29uRWxlbS5hdHRyKFwic3R5bGVcIiwgYGNvbG9yOiAke3N0eWxlc01hcC5nZXQoXCJzdHJva2VcIikgPz8gbm9kZUJvcmRlcn07YCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LWJib3gud2lkdGggLyAyIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwke3RvcExhYmVsID8gLW91dGVySGVpZ2h0IC8gMiA6IG91dGVySGVpZ2h0IC8gMiAtIGJib3guaGVpZ2h0fSlgXG4gICk7XG4gIGljb25TaGFwZS5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkezB9LCR7dG9wTGFiZWwgPyBiYm94LmhlaWdodCAvIDIgKyBsYWJlbFBhZGRpbmcgLyAyIDogLWJib3guaGVpZ2h0IC8gMiAtIGxhYmVsUGFkZGluZyAvIDJ9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBvdXRlclNoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGxvZy5pbmZvKFwiaWNvblNxdWFyZSBpbnRlcnNlY3RcIiwgbm9kZSwgcG9pbnQpO1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShpY29uQ2lyY2xlLCBcImljb25DaXJjbGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2ljb25Sb3VuZGVkLnRzXG5pbXBvcnQgcm91Z2gyMyBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gaWNvblJvdW5kZWQocGFyZW50LCBub2RlLCB7IGNvbmZpZzogeyB0aGVtZVZhcmlhYmxlcywgZmxvd2NoYXJ0IH0gfSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgYXNzZXRIZWlnaHQgPSBub2RlLmFzc2V0SGVpZ2h0ID8/IDQ4O1xuICBjb25zdCBhc3NldFdpZHRoID0gbm9kZS5hc3NldFdpZHRoID8/IDQ4O1xuICBjb25zdCBpY29uU2l6ZSA9IE1hdGgubWF4KGFzc2V0SGVpZ2h0LCBhc3NldFdpZHRoKTtcbiAgY29uc3QgZGVmYXVsdFdpZHRoID0gZmxvd2NoYXJ0Py53cmFwcGluZ1dpZHRoO1xuICBub2RlLndpZHRoID0gTWF0aC5tYXgoaWNvblNpemUsIGRlZmF1bHRXaWR0aCA/PyAwKTtcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgaGFsZlBhZGRpbmcsIGxhYmVsIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihcbiAgICBwYXJlbnQsXG4gICAgbm9kZSxcbiAgICBcImljb24tc2hhcGUgZGVmYXVsdFwiXG4gICk7XG4gIGNvbnN0IHRvcExhYmVsID0gbm9kZS5wb3MgPT09IFwidFwiO1xuICBjb25zdCBoZWlnaHQgPSBpY29uU2l6ZSArIGhhbGZQYWRkaW5nICogMjtcbiAgY29uc3Qgd2lkdGggPSBpY29uU2l6ZSArIGhhbGZQYWRkaW5nICogMjtcbiAgY29uc3QgeyBub2RlQm9yZGVyLCBtYWluQmtnIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3QgeyBzdHlsZXNNYXAgfSA9IGNvbXBpbGVTdHlsZXMobm9kZSk7XG4gIGNvbnN0IHggPSAtd2lkdGggLyAyO1xuICBjb25zdCB5ID0gLWhlaWdodCAvIDI7XG4gIGNvbnN0IGxhYmVsUGFkZGluZyA9IG5vZGUubGFiZWwgPyA4IDogMDtcbiAgY29uc3QgcmMgPSByb3VnaDIzLnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3QgZmlsbCA9IHN0eWxlc01hcC5nZXQoXCJmaWxsXCIpO1xuICBvcHRpb25zLnN0cm9rZSA9IGZpbGwgPz8gbWFpbkJrZztcbiAgY29uc3QgaWNvbk5vZGUgPSByYy5wYXRoKGNyZWF0ZVJvdW5kZWRSZWN0UGF0aEQoeCwgeSwgd2lkdGgsIGhlaWdodCwgNSksIG9wdGlvbnMpO1xuICBjb25zdCBvdXRlcldpZHRoID0gTWF0aC5tYXgod2lkdGgsIGJib3gud2lkdGgpO1xuICBjb25zdCBvdXRlckhlaWdodCA9IGhlaWdodCArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nO1xuICBjb25zdCBvdXRlck5vZGUgPSByYy5yZWN0YW5nbGUoLW91dGVyV2lkdGggLyAyLCAtb3V0ZXJIZWlnaHQgLyAyLCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCwge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgZmlsbDogXCJ0cmFuc3BhcmVudFwiLFxuICAgIHN0cm9rZTogXCJub25lXCJcbiAgfSk7XG4gIGNvbnN0IGljb25TaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBpY29uTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcImNsYXNzXCIsIFwiaWNvbi1zaGFwZTJcIik7XG4gIGNvbnN0IG91dGVyU2hhcGUgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gb3V0ZXJOb2RlKTtcbiAgaWYgKG5vZGUuaWNvbikge1xuICAgIGNvbnN0IGljb25FbGVtID0gc2hhcGVTdmcuYXBwZW5kKFwiZ1wiKTtcbiAgICBpY29uRWxlbS5odG1sKFxuICAgICAgYDxnPiR7YXdhaXQgZ2V0SWNvblNWRyhub2RlLmljb24sIHtcbiAgICAgICAgaGVpZ2h0OiBpY29uU2l6ZSxcbiAgICAgICAgd2lkdGg6IGljb25TaXplLFxuICAgICAgICBmYWxsYmFja1ByZWZpeDogXCJcIlxuICAgICAgfSl9PC9nPmBcbiAgICApO1xuICAgIGNvbnN0IGljb25CQm94ID0gaWNvbkVsZW0ubm9kZSgpLmdldEJCb3goKTtcbiAgICBjb25zdCBpY29uV2lkdGggPSBpY29uQkJveC53aWR0aDtcbiAgICBjb25zdCBpY29uSGVpZ2h0ID0gaWNvbkJCb3guaGVpZ2h0O1xuICAgIGNvbnN0IGljb25YID0gaWNvbkJCb3gueDtcbiAgICBjb25zdCBpY29uWSA9IGljb25CQm94Lnk7XG4gICAgaWNvbkVsZW0uYXR0cihcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBgdHJhbnNsYXRlKCR7LWljb25XaWR0aCAvIDIgLSBpY29uWH0sJHt0b3BMYWJlbCA/IGJib3guaGVpZ2h0IC8gMiArIGxhYmVsUGFkZGluZyAvIDIgLSBpY29uSGVpZ2h0IC8gMiAtIGljb25ZIDogLWJib3guaGVpZ2h0IC8gMiAtIGxhYmVsUGFkZGluZyAvIDIgLSBpY29uSGVpZ2h0IC8gMiAtIGljb25ZfSlgXG4gICAgKTtcbiAgICBpY29uRWxlbS5hdHRyKFwic3R5bGVcIiwgYGNvbG9yOiAke3N0eWxlc01hcC5nZXQoXCJzdHJva2VcIikgPz8gbm9kZUJvcmRlcn07YCk7XG4gIH1cbiAgbGFiZWwuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIGB0cmFuc2xhdGUoJHstYmJveC53aWR0aCAvIDIgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCR7dG9wTGFiZWwgPyAtb3V0ZXJIZWlnaHQgLyAyIDogb3V0ZXJIZWlnaHQgLyAyIC0gYmJveC5oZWlnaHR9KWBcbiAgKTtcbiAgaWNvblNoYXBlLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7MH0sJHt0b3BMYWJlbCA/IGJib3guaGVpZ2h0IC8gMiArIGxhYmVsUGFkZGluZyAvIDIgOiAtYmJveC5oZWlnaHQgLyAyIC0gbGFiZWxQYWRkaW5nIC8gMn0pYFxuICApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIG91dGVyU2hhcGUpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgbG9nLmluZm8oXCJpY29uU3F1YXJlIGludGVyc2VjdFwiLCBub2RlLCBwb2ludCk7XG4gICAgaWYgKCFub2RlLmxhYmVsKSB7XG4gICAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gICAgfVxuICAgIGNvbnN0IGR4ID0gbm9kZS54ID8/IDA7XG4gICAgY29uc3QgZHkgPSBub2RlLnkgPz8gMDtcbiAgICBjb25zdCBub2RlSGVpZ2h0ID0gbm9kZS5oZWlnaHQgPz8gMDtcbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgaWYgKHRvcExhYmVsKSB7XG4gICAgICBwb2ludHMgPSBbXG4gICAgICAgIHsgeDogZHggLSBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCArIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmcgfSxcbiAgICAgICAgeyB4OiBkeCArIHdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH0sXG4gICAgICAgIHsgeDogZHggKyB3aWR0aCAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIHdpZHRoIC8gMiwgeTogZHkgKyBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4IC0gd2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmcgfSxcbiAgICAgICAgeyB4OiBkeCAtIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmcgfVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRzID0gW1xuICAgICAgICB7IHg6IGR4IC0gd2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggKyB3aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCArIHdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGhlaWdodCB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBoZWlnaHQgfSxcbiAgICAgICAgeyB4OiBkeCArIGJib3gud2lkdGggLyAyIC8gMiwgeTogZHkgKyBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4IC0gYmJveC53aWR0aCAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgaGVpZ2h0IH0sXG4gICAgICAgIHsgeDogZHggLSB3aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBoZWlnaHQgfVxuICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoaWNvblJvdW5kZWQsIFwiaWNvblJvdW5kZWRcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL2ljb25TcXVhcmUudHNcbmltcG9ydCByb3VnaDI0IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBpY29uU3F1YXJlKHBhcmVudCwgbm9kZSwgeyBjb25maWc6IHsgdGhlbWVWYXJpYWJsZXMsIGZsb3djaGFydCB9IH0pIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IGFzc2V0SGVpZ2h0ID0gbm9kZS5hc3NldEhlaWdodCA/PyA0ODtcbiAgY29uc3QgYXNzZXRXaWR0aCA9IG5vZGUuYXNzZXRXaWR0aCA/PyA0ODtcbiAgY29uc3QgaWNvblNpemUgPSBNYXRoLm1heChhc3NldEhlaWdodCwgYXNzZXRXaWR0aCk7XG4gIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGZsb3djaGFydD8ud3JhcHBpbmdXaWR0aDtcbiAgbm9kZS53aWR0aCA9IE1hdGgubWF4KGljb25TaXplLCBkZWZhdWx0V2lkdGggPz8gMCk7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGhhbGZQYWRkaW5nLCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIoXG4gICAgcGFyZW50LFxuICAgIG5vZGUsXG4gICAgXCJpY29uLXNoYXBlIGRlZmF1bHRcIlxuICApO1xuICBjb25zdCB0b3BMYWJlbCA9IG5vZGUucG9zID09PSBcInRcIjtcbiAgY29uc3QgaGVpZ2h0ID0gaWNvblNpemUgKyBoYWxmUGFkZGluZyAqIDI7XG4gIGNvbnN0IHdpZHRoID0gaWNvblNpemUgKyBoYWxmUGFkZGluZyAqIDI7XG4gIGNvbnN0IHsgbm9kZUJvcmRlciwgbWFpbkJrZyB9ID0gdGhlbWVWYXJpYWJsZXM7XG4gIGNvbnN0IHsgc3R5bGVzTWFwIH0gPSBjb21waWxlU3R5bGVzKG5vZGUpO1xuICBjb25zdCB4ID0gLXdpZHRoIC8gMjtcbiAgY29uc3QgeSA9IC1oZWlnaHQgLyAyO1xuICBjb25zdCBsYWJlbFBhZGRpbmcgPSBub2RlLmxhYmVsID8gOCA6IDA7XG4gIGNvbnN0IHJjID0gcm91Z2gyNC5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IGZpbGwgPSBzdHlsZXNNYXAuZ2V0KFwiZmlsbFwiKTtcbiAgb3B0aW9ucy5zdHJva2UgPSBmaWxsID8/IG1haW5Ca2c7XG4gIGNvbnN0IGljb25Ob2RlID0gcmMucGF0aChjcmVhdGVSb3VuZGVkUmVjdFBhdGhEKHgsIHksIHdpZHRoLCBoZWlnaHQsIDAuMSksIG9wdGlvbnMpO1xuICBjb25zdCBvdXRlcldpZHRoID0gTWF0aC5tYXgod2lkdGgsIGJib3gud2lkdGgpO1xuICBjb25zdCBvdXRlckhlaWdodCA9IGhlaWdodCArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nO1xuICBjb25zdCBvdXRlck5vZGUgPSByYy5yZWN0YW5nbGUoLW91dGVyV2lkdGggLyAyLCAtb3V0ZXJIZWlnaHQgLyAyLCBvdXRlcldpZHRoLCBvdXRlckhlaWdodCwge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgZmlsbDogXCJ0cmFuc3BhcmVudFwiLFxuICAgIHN0cm9rZTogXCJub25lXCJcbiAgfSk7XG4gIGNvbnN0IGljb25TaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBpY29uTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGNvbnN0IG91dGVyU2hhcGUgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gb3V0ZXJOb2RlKTtcbiAgaWYgKG5vZGUuaWNvbikge1xuICAgIGNvbnN0IGljb25FbGVtID0gc2hhcGVTdmcuYXBwZW5kKFwiZ1wiKTtcbiAgICBpY29uRWxlbS5odG1sKFxuICAgICAgYDxnPiR7YXdhaXQgZ2V0SWNvblNWRyhub2RlLmljb24sIHtcbiAgICAgICAgaGVpZ2h0OiBpY29uU2l6ZSxcbiAgICAgICAgd2lkdGg6IGljb25TaXplLFxuICAgICAgICBmYWxsYmFja1ByZWZpeDogXCJcIlxuICAgICAgfSl9PC9nPmBcbiAgICApO1xuICAgIGNvbnN0IGljb25CQm94ID0gaWNvbkVsZW0ubm9kZSgpLmdldEJCb3goKTtcbiAgICBjb25zdCBpY29uV2lkdGggPSBpY29uQkJveC53aWR0aDtcbiAgICBjb25zdCBpY29uSGVpZ2h0ID0gaWNvbkJCb3guaGVpZ2h0O1xuICAgIGNvbnN0IGljb25YID0gaWNvbkJCb3gueDtcbiAgICBjb25zdCBpY29uWSA9IGljb25CQm94Lnk7XG4gICAgaWNvbkVsZW0uYXR0cihcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBgdHJhbnNsYXRlKCR7LWljb25XaWR0aCAvIDIgLSBpY29uWH0sJHt0b3BMYWJlbCA/IGJib3guaGVpZ2h0IC8gMiArIGxhYmVsUGFkZGluZyAvIDIgLSBpY29uSGVpZ2h0IC8gMiAtIGljb25ZIDogLWJib3guaGVpZ2h0IC8gMiAtIGxhYmVsUGFkZGluZyAvIDIgLSBpY29uSGVpZ2h0IC8gMiAtIGljb25ZfSlgXG4gICAgKTtcbiAgICBpY29uRWxlbS5hdHRyKFwic3R5bGVcIiwgYGNvbG9yOiAke3N0eWxlc01hcC5nZXQoXCJzdHJva2VcIikgPz8gbm9kZUJvcmRlcn07YCk7XG4gIH1cbiAgbGFiZWwuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIGB0cmFuc2xhdGUoJHstYmJveC53aWR0aCAvIDIgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCR7dG9wTGFiZWwgPyAtb3V0ZXJIZWlnaHQgLyAyIDogb3V0ZXJIZWlnaHQgLyAyIC0gYmJveC5oZWlnaHR9KWBcbiAgKTtcbiAgaWNvblNoYXBlLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7MH0sJHt0b3BMYWJlbCA/IGJib3guaGVpZ2h0IC8gMiArIGxhYmVsUGFkZGluZyAvIDIgOiAtYmJveC5oZWlnaHQgLyAyIC0gbGFiZWxQYWRkaW5nIC8gMn0pYFxuICApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIG91dGVyU2hhcGUpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgbG9nLmluZm8oXCJpY29uU3F1YXJlIGludGVyc2VjdFwiLCBub2RlLCBwb2ludCk7XG4gICAgaWYgKCFub2RlLmxhYmVsKSB7XG4gICAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gICAgfVxuICAgIGNvbnN0IGR4ID0gbm9kZS54ID8/IDA7XG4gICAgY29uc3QgZHkgPSBub2RlLnkgPz8gMDtcbiAgICBjb25zdCBub2RlSGVpZ2h0ID0gbm9kZS5oZWlnaHQgPz8gMDtcbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgaWYgKHRvcExhYmVsKSB7XG4gICAgICBwb2ludHMgPSBbXG4gICAgICAgIHsgeDogZHggLSBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCArIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmcgfSxcbiAgICAgICAgeyB4OiBkeCArIHdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH0sXG4gICAgICAgIHsgeDogZHggKyB3aWR0aCAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIHdpZHRoIC8gMiwgeTogZHkgKyBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4IC0gd2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmcgfSxcbiAgICAgICAgeyB4OiBkeCAtIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgYmJveC5oZWlnaHQgKyBsYWJlbFBhZGRpbmcgfVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRzID0gW1xuICAgICAgICB7IHg6IGR4IC0gd2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggKyB3aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCArIHdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGhlaWdodCB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBoZWlnaHQgfSxcbiAgICAgICAgeyB4OiBkeCArIGJib3gud2lkdGggLyAyIC8gMiwgeTogZHkgKyBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4IC0gYmJveC53aWR0aCAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyICsgaGVpZ2h0IH0sXG4gICAgICAgIHsgeDogZHggLSB3aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBoZWlnaHQgfVxuICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoaWNvblNxdWFyZSwgXCJpY29uU3F1YXJlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9pbWFnZVNxdWFyZS50c1xuaW1wb3J0IHJvdWdoMjUgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIGltYWdlU3F1YXJlKHBhcmVudCwgbm9kZSwgeyBjb25maWc6IHsgZmxvd2NoYXJ0IH0gfSkge1xuICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgaW1nLnNyYyA9IG5vZGU/LmltZyA/PyBcIlwiO1xuICBhd2FpdCBpbWcuZGVjb2RlKCk7XG4gIGNvbnN0IGltYWdlTmF0dXJhbFdpZHRoID0gTnVtYmVyKGltZy5uYXR1cmFsV2lkdGgudG9TdHJpbmcoKS5yZXBsYWNlKFwicHhcIiwgXCJcIikpO1xuICBjb25zdCBpbWFnZU5hdHVyYWxIZWlnaHQgPSBOdW1iZXIoaW1nLm5hdHVyYWxIZWlnaHQudG9TdHJpbmcoKS5yZXBsYWNlKFwicHhcIiwgXCJcIikpO1xuICBub2RlLmltYWdlQXNwZWN0UmF0aW8gPSBpbWFnZU5hdHVyYWxXaWR0aCAvIGltYWdlTmF0dXJhbEhlaWdodDtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGZsb3djaGFydD8ud3JhcHBpbmdXaWR0aDtcbiAgbm9kZS5kZWZhdWx0V2lkdGggPSBmbG93Y2hhcnQ/LndyYXBwaW5nV2lkdGg7XG4gIGNvbnN0IGltYWdlUmF3V2lkdGggPSBNYXRoLm1heChcbiAgICBub2RlLmxhYmVsID8gZGVmYXVsdFdpZHRoID8/IDAgOiAwLFxuICAgIG5vZGU/LmFzc2V0V2lkdGggPz8gaW1hZ2VOYXR1cmFsV2lkdGhcbiAgKTtcbiAgY29uc3QgaW1hZ2VXaWR0aCA9IG5vZGUuY29uc3RyYWludCA9PT0gXCJvblwiID8gbm9kZT8uYXNzZXRIZWlnaHQgPyBub2RlLmFzc2V0SGVpZ2h0ICogbm9kZS5pbWFnZUFzcGVjdFJhdGlvIDogaW1hZ2VSYXdXaWR0aCA6IGltYWdlUmF3V2lkdGg7XG4gIGNvbnN0IGltYWdlSGVpZ2h0ID0gbm9kZS5jb25zdHJhaW50ID09PSBcIm9uXCIgPyBpbWFnZVdpZHRoIC8gbm9kZS5pbWFnZUFzcGVjdFJhdGlvIDogbm9kZT8uYXNzZXRIZWlnaHQgPz8gaW1hZ2VOYXR1cmFsSGVpZ2h0O1xuICBub2RlLndpZHRoID0gTWF0aC5tYXgoaW1hZ2VXaWR0aCwgZGVmYXVsdFdpZHRoID8/IDApO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBcImltYWdlLXNoYXBlIGRlZmF1bHRcIik7XG4gIGNvbnN0IHRvcExhYmVsID0gbm9kZS5wb3MgPT09IFwidFwiO1xuICBjb25zdCB4ID0gLWltYWdlV2lkdGggLyAyO1xuICBjb25zdCB5ID0gLWltYWdlSGVpZ2h0IC8gMjtcbiAgY29uc3QgbGFiZWxQYWRkaW5nID0gbm9kZS5sYWJlbCA/IDggOiAwO1xuICBjb25zdCByYyA9IHJvdWdoMjUuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBpbWFnZU5vZGUgPSByYy5yZWN0YW5nbGUoeCwgeSwgaW1hZ2VXaWR0aCwgaW1hZ2VIZWlnaHQsIG9wdGlvbnMpO1xuICBjb25zdCBvdXRlcldpZHRoID0gTWF0aC5tYXgoaW1hZ2VXaWR0aCwgYmJveC53aWR0aCk7XG4gIGNvbnN0IG91dGVySGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKyBiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZztcbiAgY29uc3Qgb3V0ZXJOb2RlID0gcmMucmVjdGFuZ2xlKC1vdXRlcldpZHRoIC8gMiwgLW91dGVySGVpZ2h0IC8gMiwgb3V0ZXJXaWR0aCwgb3V0ZXJIZWlnaHQsIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHN0cm9rZTogXCJub25lXCJcbiAgfSk7XG4gIGNvbnN0IGljb25TaGFwZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBpbWFnZU5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjb25zdCBvdXRlclNoYXBlID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IG91dGVyTm9kZSk7XG4gIGlmIChub2RlLmltZykge1xuICAgIGNvbnN0IGltYWdlID0gc2hhcGVTdmcuYXBwZW5kKFwiaW1hZ2VcIik7XG4gICAgaW1hZ2UuYXR0cihcImhyZWZcIiwgbm9kZS5pbWcpO1xuICAgIGltYWdlLmF0dHIoXCJ3aWR0aFwiLCBpbWFnZVdpZHRoKTtcbiAgICBpbWFnZS5hdHRyKFwiaGVpZ2h0XCIsIGltYWdlSGVpZ2h0KTtcbiAgICBpbWFnZS5hdHRyKFwicHJlc2VydmVBc3BlY3RSYXRpb1wiLCBcIm5vbmVcIik7XG4gICAgaW1hZ2UuYXR0cihcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBgdHJhbnNsYXRlKCR7LWltYWdlV2lkdGggLyAyfSwke3RvcExhYmVsID8gb3V0ZXJIZWlnaHQgLyAyIC0gaW1hZ2VIZWlnaHQgOiAtb3V0ZXJIZWlnaHQgLyAyfSlgXG4gICAgKTtcbiAgfVxuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey1iYm94LndpZHRoIC8gMiAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sJHt0b3BMYWJlbCA/IC1pbWFnZUhlaWdodCAvIDIgLSBiYm94LmhlaWdodCAvIDIgLSBsYWJlbFBhZGRpbmcgLyAyIDogaW1hZ2VIZWlnaHQgLyAyIC0gYmJveC5oZWlnaHQgLyAyICsgbGFiZWxQYWRkaW5nIC8gMn0pYFxuICApO1xuICBpY29uU2hhcGUuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIGB0cmFuc2xhdGUoJHswfSwke3RvcExhYmVsID8gYmJveC5oZWlnaHQgLyAyICsgbGFiZWxQYWRkaW5nIC8gMiA6IC1iYm94LmhlaWdodCAvIDIgLSBsYWJlbFBhZGRpbmcgLyAyfSlgXG4gICk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgb3V0ZXJTaGFwZSk7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBsb2cuaW5mbyhcImljb25TcXVhcmUgaW50ZXJzZWN0XCIsIG5vZGUsIHBvaW50KTtcbiAgICBpZiAoIW5vZGUubGFiZWwpIHtcbiAgICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5yZWN0KG5vZGUsIHBvaW50KTtcbiAgICB9XG4gICAgY29uc3QgZHggPSBub2RlLnggPz8gMDtcbiAgICBjb25zdCBkeSA9IG5vZGUueSA/PyAwO1xuICAgIGNvbnN0IG5vZGVIZWlnaHQgPSBub2RlLmhlaWdodCA/PyAwO1xuICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICBpZiAodG9wTGFiZWwpIHtcbiAgICAgIHBvaW50cyA9IFtcbiAgICAgICAgeyB4OiBkeCAtIGJib3gud2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggKyBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZyB9LFxuICAgICAgICB7IHg6IGR4ICsgaW1hZ2VXaWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZyB9LFxuICAgICAgICB7IHg6IGR4ICsgaW1hZ2VXaWR0aCAvIDIsIHk6IGR5ICsgbm9kZUhlaWdodCAvIDIgfSxcbiAgICAgICAgeyB4OiBkeCAtIGltYWdlV2lkdGggLyAyLCB5OiBkeSArIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggLSBpbWFnZVdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH0sXG4gICAgICAgIHsgeDogZHggLSBiYm94LndpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiArIGJib3guaGVpZ2h0ICsgbGFiZWxQYWRkaW5nIH1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50cyA9IFtcbiAgICAgICAgeyB4OiBkeCAtIGltYWdlV2lkdGggLyAyLCB5OiBkeSAtIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggKyBpbWFnZVdpZHRoIC8gMiwgeTogZHkgLSBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4ICsgaW1hZ2VXaWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBpbWFnZUhlaWdodCB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBpbWFnZUhlaWdodCB9LFxuICAgICAgICB7IHg6IGR4ICsgYmJveC53aWR0aCAvIDIgLyAyLCB5OiBkeSArIG5vZGVIZWlnaHQgLyAyIH0sXG4gICAgICAgIHsgeDogZHggLSBiYm94LndpZHRoIC8gMiwgeTogZHkgKyBub2RlSGVpZ2h0IC8gMiB9LFxuICAgICAgICB7IHg6IGR4IC0gYmJveC53aWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBpbWFnZUhlaWdodCB9LFxuICAgICAgICB7IHg6IGR4IC0gaW1hZ2VXaWR0aCAvIDIsIHk6IGR5IC0gbm9kZUhlaWdodCAvIDIgKyBpbWFnZUhlaWdodCB9XG4gICAgICBdO1xuICAgIH1cbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShpbWFnZVNxdWFyZSwgXCJpbWFnZVNxdWFyZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvaW52ZXJ0ZWRUcmFwZXpvaWQudHNcbmltcG9ydCByb3VnaDI2IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBpbnZfdHJhcGV6b2lkKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBNYXRoLm1heChiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCBoID0gTWF0aC5tYXgoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAwIH0sXG4gICAgeyB4OiB3ICsgMyAqIGggLyA2LCB5OiAtaCB9LFxuICAgIHsgeDogLTMgKiBoIC8gNiwgeTogLWggfVxuICBdO1xuICBsZXQgcG9seWdvbjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoMjYuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICAgIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgICBjb25zdCByb3VnaE5vZGUgPSByYy5wYXRoKHBhdGhEYXRhLCBvcHRpb25zKTtcbiAgICBwb2x5Z29uID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7LXcgLyAyfSwgJHtoIC8gMn0pYCk7XG4gICAgaWYgKGNzc1N0eWxlcykge1xuICAgICAgcG9seWdvbi5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcG9seWdvbiA9IGluc2VydFBvbHlnb25TaGFwZShzaGFwZVN2ZywgdywgaCwgcG9pbnRzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcykge1xuICAgIHBvbHlnb24uYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIG5vZGUud2lkdGggPSB3O1xuICBub2RlLmhlaWdodCA9IGg7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcG9seWdvbik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKGludl90cmFwZXpvaWQsIFwiaW52X3RyYXBlem9pZFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvZHJhd1JlY3QudHNcbmltcG9ydCByb3VnaDI3IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBkcmF3UmVjdChwYXJlbnQsIG5vZGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB0b3RhbFdpZHRoID0gTWF0aC5tYXgoYmJveC53aWR0aCArIG9wdGlvbnMubGFiZWxQYWRkaW5nWCAqIDIsIG5vZGU/LndpZHRoIHx8IDApO1xuICBjb25zdCB0b3RhbEhlaWdodCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgb3B0aW9ucy5sYWJlbFBhZGRpbmdZICogMiwgbm9kZT8uaGVpZ2h0IHx8IDApO1xuICBjb25zdCB4ID0gLXRvdGFsV2lkdGggLyAyO1xuICBjb25zdCB5ID0gLXRvdGFsSGVpZ2h0IC8gMjtcbiAgbGV0IHJlY3QyO1xuICBsZXQgeyByeCwgcnkgfSA9IG5vZGU7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBpZiAob3B0aW9ucz8ucnggJiYgb3B0aW9ucy5yeSkge1xuICAgIHJ4ID0gb3B0aW9ucy5yeDtcbiAgICByeSA9IG9wdGlvbnMucnk7XG4gIH1cbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2gyNy5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG9wdGlvbnMyID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJ4IHx8IHJ5ID8gcmMucGF0aChjcmVhdGVSb3VuZGVkUmVjdFBhdGhEKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCByeCB8fCAwKSwgb3B0aW9uczIpIDogcmMucmVjdGFuZ2xlKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCBvcHRpb25zMik7XG4gICAgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIoY3NzU3R5bGVzKSk7XG4gIH0gZWxzZSB7XG4gICAgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgIHJlY3QyLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcykuYXR0cihcInJ4XCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIocngpKS5hdHRyKFwicnlcIiwgaGFuZGxlVW5kZWZpbmVkQXR0cihyeSkpLmF0dHIoXCJ4XCIsIHgpLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJ3aWR0aFwiLCB0b3RhbFdpZHRoKS5hdHRyKFwiaGVpZ2h0XCIsIHRvdGFsSGVpZ2h0KTtcbiAgfVxuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHJlY3QyKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5yZWN0KG5vZGUsIHBvaW50KTtcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKGRyYXdSZWN0LCBcImRyYXdSZWN0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9sYWJlbFJlY3QudHNcbmFzeW5jIGZ1bmN0aW9uIGxhYmVsUmVjdChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgXCJsYWJlbFwiKTtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBjb25zdCB0b3RhbFdpZHRoID0gMC4xO1xuICBjb25zdCB0b3RhbEhlaWdodCA9IDAuMTtcbiAgcmVjdDIuYXR0cihcIndpZHRoXCIsIHRvdGFsV2lkdGgpLmF0dHIoXCJoZWlnaHRcIiwgdG90YWxIZWlnaHQpO1xuICBzaGFwZVN2Zy5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbCBlZGdlTGFiZWxcIik7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LShiYm94LndpZHRoIC8gMikgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCAkey0oYmJveC5oZWlnaHQgLyAyKSAtIChiYm94LnkgLSAoYmJveC50b3AgPz8gMCkpfSlgXG4gICk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcmVjdDIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobGFiZWxSZWN0LCBcImxhYmVsUmVjdFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvbGVhbkxlZnQudHNcbmltcG9ydCByb3VnaDI4IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBsZWFuX2xlZnQocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94IH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IE1hdGgubWF4KGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKSwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiB3ICsgMyAqIGggLyA2LCB5OiAwIH0sXG4gICAgeyB4OiB3LCB5OiAtaCB9LFxuICAgIHsgeDogLSgzICogaCkgLyA2LCB5OiAtaCB9XG4gIF07XG4gIGxldCBwb2x5Z29uO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2gyOC5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gICAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJjLnBhdGgocGF0aERhdGEsIG9wdGlvbnMpO1xuICAgIHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstdyAvIDJ9LCAke2ggLyAyfSlgKTtcbiAgICBpZiAoY3NzU3R5bGVzKSB7XG4gICAgICBwb2x5Z29uLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwb2x5Z29uID0gaW5zZXJ0UG9seWdvblNoYXBlKHNoYXBlU3ZnLCB3LCBoLCBwb2ludHMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzKSB7XG4gICAgcG9seWdvbi5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgbm9kZS53aWR0aCA9IHc7XG4gIG5vZGUuaGVpZ2h0ID0gaDtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBwb2x5Z29uKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobGVhbl9sZWZ0LCBcImxlYW5fbGVmdFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvbGVhblJpZ2h0LnRzXG5pbXBvcnQgcm91Z2gyOSBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gbGVhbl9yaWdodChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gTWF0aC5tYXgoYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCksIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCBoID0gTWF0aC5tYXgoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHg6IC0zICogaCAvIDYsIHk6IDAgfSxcbiAgICB7IHg6IHcsIHk6IDAgfSxcbiAgICB7IHg6IHcgKyAzICogaCAvIDYsIHk6IC1oIH0sXG4gICAgeyB4OiAwLCB5OiAtaCB9XG4gIF07XG4gIGxldCBwb2x5Z29uO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2gyOS5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gICAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJjLnBhdGgocGF0aERhdGEsIG9wdGlvbnMpO1xuICAgIHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstdyAvIDJ9LCAke2ggLyAyfSlgKTtcbiAgICBpZiAoY3NzU3R5bGVzKSB7XG4gICAgICBwb2x5Z29uLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwb2x5Z29uID0gaW5zZXJ0UG9seWdvblNoYXBlKHNoYXBlU3ZnLCB3LCBoLCBwb2ludHMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzKSB7XG4gICAgcG9seWdvbi5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgbm9kZS53aWR0aCA9IHc7XG4gIG5vZGUuaGVpZ2h0ID0gaDtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBwb2x5Z29uKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobGVhbl9yaWdodCwgXCJsZWFuX3JpZ2h0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9saWdodG5pbmdCb2x0LnRzXG5pbXBvcnQgcm91Z2gzMCBmcm9tIFwicm91Z2hqc1wiO1xuZnVuY3Rpb24gbGlnaHRuaW5nQm9sdChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbCA9IFwiXCI7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSkuYXR0cihcImlkXCIsIG5vZGUuZG9tSWQgPz8gbm9kZS5pZCk7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KDM1LCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoMzUsIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3QgZ2FwID0gNztcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogd2lkdGgsIHk6IDAgfSxcbiAgICB7IHg6IDAsIHk6IGhlaWdodCArIGdhcCAvIDIgfSxcbiAgICB7IHg6IHdpZHRoIC0gMiAqIGdhcCwgeTogaGVpZ2h0ICsgZ2FwIC8gMiB9LFxuICAgIHsgeDogMCwgeTogMiAqIGhlaWdodCB9LFxuICAgIHsgeDogd2lkdGgsIHk6IGhlaWdodCAtIGdhcCAvIDIgfSxcbiAgICB7IHg6IDIgKiBnYXAsIHk6IGhlaWdodCAtIGdhcCAvIDIgfVxuICBdO1xuICBjb25zdCByYyA9IHJvdWdoMzAuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBsaW5lUGF0aCA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHBvaW50cyk7XG4gIGNvbnN0IGxpbmVOb2RlID0gcmMucGF0aChsaW5lUGF0aCwgb3B0aW9ucyk7XG4gIGNvbnN0IGxpZ2h0bmluZ0JvbHQyID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IGxpbmVOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBsaWdodG5pbmdCb2x0Mi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIGxpZ2h0bmluZ0JvbHQyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIGxpZ2h0bmluZ0JvbHQyLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgtJHt3aWR0aCAvIDJ9LCR7LWhlaWdodH0pYCk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgbGlnaHRuaW5nQm9sdDIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgbG9nLmluZm8oXCJsaWdodG5pbmdCb2x0IGludGVyc2VjdFwiLCBub2RlLCBwb2ludCk7XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobGlnaHRuaW5nQm9sdCwgXCJsaWdodG5pbmdCb2x0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9saW5lZEN5bGluZGVyLnRzXG5pbXBvcnQgcm91Z2gzMSBmcm9tIFwicm91Z2hqc1wiO1xudmFyIGNyZWF0ZUN5bGluZGVyUGF0aEQyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeCwgeSwgd2lkdGgsIGhlaWdodCwgcngsIHJ5LCBvdXRlck9mZnNldCkgPT4ge1xuICByZXR1cm4gW1xuICAgIGBNJHt4fSwke3kgKyByeX1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHt3aWR0aH0sMGAsXG4gICAgYGEke3J4fSwke3J5fSAwLDAsMCAkey13aWR0aH0sMGAsXG4gICAgYGwwLCR7aGVpZ2h0fWAsXG4gICAgYGEke3J4fSwke3J5fSAwLDAsMCAke3dpZHRofSwwYCxcbiAgICBgbDAsJHstaGVpZ2h0fWAsXG4gICAgYE0ke3h9LCR7eSArIHJ5ICsgb3V0ZXJPZmZzZXR9YCxcbiAgICBgYSR7cnh9LCR7cnl9IDAsMCwwICR7d2lkdGh9LDBgXG4gIF0uam9pbihcIiBcIik7XG59LCBcImNyZWF0ZUN5bGluZGVyUGF0aERcIik7XG52YXIgY3JlYXRlT3V0ZXJDeWxpbmRlclBhdGhEMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHgsIHksIHdpZHRoLCBoZWlnaHQsIHJ4LCByeSwgb3V0ZXJPZmZzZXQpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBgTSR7eH0sJHt5ICsgcnl9YCxcbiAgICBgTSR7eCArIHdpZHRofSwke3kgKyByeX1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHstd2lkdGh9LDBgLFxuICAgIGBsMCwke2hlaWdodH1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHt3aWR0aH0sMGAsXG4gICAgYGwwLCR7LWhlaWdodH1gLFxuICAgIGBNJHt4fSwke3kgKyByeSArIG91dGVyT2Zmc2V0fWAsXG4gICAgYGEke3J4fSwke3J5fSAwLDAsMCAke3dpZHRofSwwYFxuICBdLmpvaW4oXCIgXCIpO1xufSwgXCJjcmVhdGVPdXRlckN5bGluZGVyUGF0aERcIik7XG52YXIgY3JlYXRlSW5uZXJDeWxpbmRlclBhdGhEMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHgsIHksIHdpZHRoLCBoZWlnaHQsIHJ4LCByeSkgPT4ge1xuICByZXR1cm4gW2BNJHt4IC0gd2lkdGggLyAyfSwkey1oZWlnaHQgLyAyfWAsIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHt3aWR0aH0sMGBdLmpvaW4oXCIgXCIpO1xufSwgXCJjcmVhdGVJbm5lckN5bGluZGVyUGF0aERcIik7XG5hc3luYyBmdW5jdGlvbiBsaW5lZEN5bGluZGVyKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gTWF0aC5tYXgoYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCksIG5vZGUud2lkdGggPz8gMCk7XG4gIGNvbnN0IHJ4ID0gdyAvIDI7XG4gIGNvbnN0IHJ5ID0gcnggLyAoMi41ICsgdyAvIDUwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgcnkgKyAobm9kZS5wYWRkaW5nID8/IDApLCBub2RlLmhlaWdodCA/PyAwKTtcbiAgY29uc3Qgb3V0ZXJPZmZzZXQgPSBoICogMC4xO1xuICBsZXQgY3lsaW5kZXIyO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2gzMS5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG91dGVyUGF0aERhdGEgPSBjcmVhdGVPdXRlckN5bGluZGVyUGF0aEQyKDAsIDAsIHcsIGgsIHJ4LCByeSwgb3V0ZXJPZmZzZXQpO1xuICAgIGNvbnN0IGlubmVyUGF0aERhdGEgPSBjcmVhdGVJbm5lckN5bGluZGVyUGF0aEQyKDAsIHJ5LCB3LCBoLCByeCwgcnkpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gICAgY29uc3Qgb3V0ZXJOb2RlID0gcmMucGF0aChvdXRlclBhdGhEYXRhLCBvcHRpb25zKTtcbiAgICBjb25zdCBpbm5lckxpbmUgPSByYy5wYXRoKGlubmVyUGF0aERhdGEsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGlubmVyTGluZUVsID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IGlubmVyTGluZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgaW5uZXJMaW5lRWwuYXR0cihcImNsYXNzXCIsIFwibGluZVwiKTtcbiAgICBjeWxpbmRlcjIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gb3V0ZXJOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjeWxpbmRlcjIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICAgIGlmIChjc3NTdHlsZXMpIHtcbiAgICAgIGN5bGluZGVyMi5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVDeWxpbmRlclBhdGhEMigwLCAwLCB3LCBoLCByeCwgcnksIG91dGVyT2Zmc2V0KTtcbiAgICBjeWxpbmRlcjIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJwYXRoXCIsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJkXCIsIHBhdGhEYXRhKS5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIoY3NzU3R5bGVzKSkuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIGN5bGluZGVyMi5hdHRyKFwibGFiZWwtb2Zmc2V0LXlcIiwgcnkpO1xuICBjeWxpbmRlcjIuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7LXcgLyAyfSwgJHstKGggLyAyICsgcnkpfSlgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBjeWxpbmRlcjIpO1xuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey0oYmJveC53aWR0aCAvIDIpIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwgJHstKGJib3guaGVpZ2h0IC8gMikgKyByeSAtIChiYm94LnkgLSAoYmJveC50b3AgPz8gMCkpfSlgXG4gICk7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5yZWN0KG5vZGUsIHBvaW50KTtcbiAgICBjb25zdCB4ID0gcG9zLnggLSAobm9kZS54ID8/IDApO1xuICAgIGlmIChyeCAhPSAwICYmIChNYXRoLmFicyh4KSA8IChub2RlLndpZHRoID8/IDApIC8gMiB8fCBNYXRoLmFicyh4KSA9PSAobm9kZS53aWR0aCA/PyAwKSAvIDIgJiYgTWF0aC5hYnMocG9zLnkgLSAobm9kZS55ID8/IDApKSA+IChub2RlLmhlaWdodCA/PyAwKSAvIDIgLSByeSkpIHtcbiAgICAgIGxldCB5ID0gcnkgKiByeSAqICgxIC0geCAqIHggLyAocnggKiByeCkpO1xuICAgICAgaWYgKHkgPiAwKSB7XG4gICAgICAgIHkgPSBNYXRoLnNxcnQoeSk7XG4gICAgICB9XG4gICAgICB5ID0gcnkgLSB5O1xuICAgICAgaWYgKHBvaW50LnkgLSAobm9kZS55ID8/IDApID4gMCkge1xuICAgICAgICB5ID0gLXk7XG4gICAgICB9XG4gICAgICBwb3MueSArPSB5O1xuICAgIH1cbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobGluZWRDeWxpbmRlciwgXCJsaW5lZEN5bGluZGVyXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9saW5lZFdhdmVFZGdlZFJlY3QudHNcbmltcG9ydCByb3VnaDMyIGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBsaW5lZFdhdmVFZGdlZFJlY3QocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBNYXRoLm1heChiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCBoID0gTWF0aC5tYXgoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCB3YXZlQW1wbGl0dWRlID0gaCAvIDQ7XG4gIGNvbnN0IGZpbmFsSCA9IGggKyB3YXZlQW1wbGl0dWRlO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgcmMgPSByb3VnaDMyLnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogLXcgLyAyIC0gdyAvIDIgKiAwLjEsIHk6IC1maW5hbEggLyAyIH0sXG4gICAgeyB4OiAtdyAvIDIgLSB3IC8gMiAqIDAuMSwgeTogZmluYWxIIC8gMiB9LFxuICAgIC4uLmdlbmVyYXRlRnVsbFNpbmVXYXZlUG9pbnRzKFxuICAgICAgLXcgLyAyIC0gdyAvIDIgKiAwLjEsXG4gICAgICBmaW5hbEggLyAyLFxuICAgICAgdyAvIDIgKyB3IC8gMiAqIDAuMSxcbiAgICAgIGZpbmFsSCAvIDIsXG4gICAgICB3YXZlQW1wbGl0dWRlLFxuICAgICAgMC44XG4gICAgKSxcbiAgICB7IHg6IHcgLyAyICsgdyAvIDIgKiAwLjEsIHk6IC1maW5hbEggLyAyIH0sXG4gICAgeyB4OiAtdyAvIDIgLSB3IC8gMiAqIDAuMSwgeTogLWZpbmFsSCAvIDIgfSxcbiAgICB7IHg6IC13IC8gMiwgeTogLWZpbmFsSCAvIDIgfSxcbiAgICB7IHg6IC13IC8gMiwgeTogZmluYWxIIC8gMiAqIDEuMSB9LFxuICAgIHsgeDogLXcgLyAyLCB5OiAtZmluYWxIIC8gMiB9XG4gIF07XG4gIGNvbnN0IHBvbHkgPSByYy5wb2x5Z29uKFxuICAgIHBvaW50cy5tYXAoKHApID0+IFtwLngsIHAueV0pLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgY29uc3Qgd2F2ZUVkZ2VSZWN0ID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHBvbHksIFwiOmZpcnN0LWNoaWxkXCIpO1xuICB3YXZlRWRnZVJlY3QuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHdhdmVFZGdlUmVjdC5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHdhdmVFZGdlUmVjdC5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICB3YXZlRWRnZVJlY3QuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsJHstd2F2ZUFtcGxpdHVkZSAvIDJ9KWApO1xuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey13IC8gMiArIChub2RlLnBhZGRpbmcgPz8gMCkgKyB3IC8gMiAqIDAuMSAvIDIgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCR7LWggLyAyICsgKG5vZGUucGFkZGluZyA/PyAwKSAtIHdhdmVBbXBsaXR1ZGUgLyAyIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCB3YXZlRWRnZVJlY3QpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobGluZWRXYXZlRWRnZWRSZWN0LCBcImxpbmVkV2F2ZUVkZ2VkUmVjdFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvbXVsdGlSZWN0LnRzXG5pbXBvcnQgcm91Z2gzMyBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gbXVsdGlSZWN0KHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gTWF0aC5tYXgoYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3QgcmVjdE9mZnNldCA9IDU7XG4gIGNvbnN0IHggPSAtdyAvIDI7XG4gIGNvbnN0IHkgPSAtaCAvIDI7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoMzMuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgY29uc3Qgb3V0ZXJQYXRoUG9pbnRzID0gW1xuICAgIHsgeDogeCAtIHJlY3RPZmZzZXQsIHk6IHkgKyByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiB4IC0gcmVjdE9mZnNldCwgeTogeSArIGggKyByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiB4ICsgdyAtIHJlY3RPZmZzZXQsIHk6IHkgKyBoICsgcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHcgLSByZWN0T2Zmc2V0LCB5OiB5ICsgaCB9LFxuICAgIHsgeDogeCArIHcsIHk6IHkgKyBoIH0sXG4gICAgeyB4OiB4ICsgdywgeTogeSArIGggLSByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiB4ICsgdyArIHJlY3RPZmZzZXQsIHk6IHkgKyBoIC0gcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHcgKyByZWN0T2Zmc2V0LCB5OiB5IC0gcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHJlY3RPZmZzZXQsIHk6IHkgLSByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiB4ICsgcmVjdE9mZnNldCwgeSB9LFxuICAgIHsgeCwgeSB9LFxuICAgIHsgeCwgeTogeSArIHJlY3RPZmZzZXQgfVxuICBdO1xuICBjb25zdCBpbm5lclBhdGhQb2ludHMgPSBbXG4gICAgeyB4LCB5OiB5ICsgcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHcgLSByZWN0T2Zmc2V0LCB5OiB5ICsgcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHcgLSByZWN0T2Zmc2V0LCB5OiB5ICsgaCB9LFxuICAgIHsgeDogeCArIHcsIHk6IHkgKyBoIH0sXG4gICAgeyB4OiB4ICsgdywgeSB9LFxuICAgIHsgeCwgeSB9XG4gIF07XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3Qgb3V0ZXJQYXRoID0gY3JlYXRlUGF0aEZyb21Qb2ludHMob3V0ZXJQYXRoUG9pbnRzKTtcbiAgY29uc3Qgb3V0ZXJOb2RlID0gcmMucGF0aChvdXRlclBhdGgsIG9wdGlvbnMpO1xuICBjb25zdCBpbm5lclBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhpbm5lclBhdGhQb2ludHMpO1xuICBjb25zdCBpbm5lck5vZGUgPSByYy5wYXRoKGlubmVyUGF0aCwgeyAuLi5vcHRpb25zLCBmaWxsOiBcIm5vbmVcIiB9KTtcbiAgY29uc3QgbXVsdGlSZWN0MiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBpbm5lck5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBtdWx0aVJlY3QyLmluc2VydCgoKSA9PiBvdXRlck5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBtdWx0aVJlY3QyLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBtdWx0aVJlY3QyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgbXVsdGlSZWN0Mi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey0oYmJveC53aWR0aCAvIDIpIC0gcmVjdE9mZnNldCAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7LShiYm94LmhlaWdodCAvIDIpICsgcmVjdE9mZnNldCAtIChiYm94LnkgLSAoYmJveC50b3AgPz8gMCkpfSlgXG4gICk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgbXVsdGlSZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIG91dGVyUGF0aFBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShtdWx0aVJlY3QsIFwibXVsdGlSZWN0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9tdWx0aVdhdmVFZGdlZFJlY3RhbmdsZS50c1xuaW1wb3J0IHJvdWdoMzQgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIG11bHRpV2F2ZUVkZ2VkUmVjdGFuZ2xlKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gTWF0aC5tYXgoYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3Qgd2F2ZUFtcGxpdHVkZSA9IGggLyA0O1xuICBjb25zdCBmaW5hbEggPSBoICsgd2F2ZUFtcGxpdHVkZTtcbiAgY29uc3QgeCA9IC13IC8gMjtcbiAgY29uc3QgeSA9IC1maW5hbEggLyAyO1xuICBjb25zdCByZWN0T2Zmc2V0ID0gNTtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHdhdmVQb2ludHMgPSBnZW5lcmF0ZUZ1bGxTaW5lV2F2ZVBvaW50cyhcbiAgICB4IC0gcmVjdE9mZnNldCxcbiAgICB5ICsgZmluYWxIICsgcmVjdE9mZnNldCxcbiAgICB4ICsgdyAtIHJlY3RPZmZzZXQsXG4gICAgeSArIGZpbmFsSCArIHJlY3RPZmZzZXQsXG4gICAgd2F2ZUFtcGxpdHVkZSxcbiAgICAwLjhcbiAgKTtcbiAgY29uc3QgbGFzdFdhdmVQb2ludCA9IHdhdmVQb2ludHM/Llt3YXZlUG9pbnRzLmxlbmd0aCAtIDFdO1xuICBjb25zdCBvdXRlclBhdGhQb2ludHMgPSBbXG4gICAgeyB4OiB4IC0gcmVjdE9mZnNldCwgeTogeSArIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggLSByZWN0T2Zmc2V0LCB5OiB5ICsgZmluYWxIICsgcmVjdE9mZnNldCB9LFxuICAgIC4uLndhdmVQb2ludHMsXG4gICAgeyB4OiB4ICsgdyAtIHJlY3RPZmZzZXQsIHk6IGxhc3RXYXZlUG9pbnQueSAtIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyB3LCB5OiBsYXN0V2F2ZVBvaW50LnkgLSByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiB4ICsgdywgeTogbGFzdFdhdmVQb2ludC55IC0gMiAqIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyB3ICsgcmVjdE9mZnNldCwgeTogbGFzdFdhdmVQb2ludC55IC0gMiAqIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyB3ICsgcmVjdE9mZnNldCwgeTogeSAtIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyByZWN0T2Zmc2V0LCB5OiB5IC0gcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHJlY3RPZmZzZXQsIHkgfSxcbiAgICB7IHgsIHkgfSxcbiAgICB7IHgsIHk6IHkgKyByZWN0T2Zmc2V0IH1cbiAgXTtcbiAgY29uc3QgaW5uZXJQYXRoUG9pbnRzID0gW1xuICAgIHsgeCwgeTogeSArIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyB3IC0gcmVjdE9mZnNldCwgeTogeSArIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyB3IC0gcmVjdE9mZnNldCwgeTogbGFzdFdhdmVQb2ludC55IC0gcmVjdE9mZnNldCB9LFxuICAgIHsgeDogeCArIHcsIHk6IGxhc3RXYXZlUG9pbnQueSAtIHJlY3RPZmZzZXQgfSxcbiAgICB7IHg6IHggKyB3LCB5IH0sXG4gICAgeyB4LCB5IH1cbiAgXTtcbiAgY29uc3QgcmMgPSByb3VnaDM0LnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3Qgb3V0ZXJQYXRoID0gY3JlYXRlUGF0aEZyb21Qb2ludHMob3V0ZXJQYXRoUG9pbnRzKTtcbiAgY29uc3Qgb3V0ZXJOb2RlID0gcmMucGF0aChvdXRlclBhdGgsIG9wdGlvbnMpO1xuICBjb25zdCBpbm5lclBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhpbm5lclBhdGhQb2ludHMpO1xuICBjb25zdCBpbm5lck5vZGUgPSByYy5wYXRoKGlubmVyUGF0aCwgb3B0aW9ucyk7XG4gIGNvbnN0IHNoYXBlID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IG91dGVyTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIHNoYXBlLmluc2VydCgoKSA9PiBpbm5lck5vZGUpO1xuICBzaGFwZS5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIik7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgc2hhcGUuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBzaGFwZS5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBzaGFwZS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwkey13YXZlQW1wbGl0dWRlIC8gMn0pYCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LShiYm94LndpZHRoIC8gMikgLSByZWN0T2Zmc2V0IC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwgJHstKGJib3guaGVpZ2h0IC8gMikgKyByZWN0T2Zmc2V0IC0gd2F2ZUFtcGxpdHVkZSAvIDIgLSAoYmJveC55IC0gKGJib3gudG9wID8/IDApKX0pYFxuICApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHNoYXBlKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgb3V0ZXJQYXRoUG9pbnRzLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKG11bHRpV2F2ZUVkZ2VkUmVjdGFuZ2xlLCBcIm11bHRpV2F2ZUVkZ2VkUmVjdGFuZ2xlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9ub3RlLnRzXG5pbXBvcnQgcm91Z2gzNSBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gbm90ZShwYXJlbnQsIG5vZGUsIHsgY29uZmlnOiB7IHRoZW1lVmFyaWFibGVzIH0gfSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgdXNlSHRtbExhYmVscyA9IG5vZGUudXNlSHRtbExhYmVscyB8fCBnZXRDb25maWcoKS5mbG93Y2hhcnQ/Lmh0bWxMYWJlbHMgIT09IGZhbHNlO1xuICBpZiAoIXVzZUh0bWxMYWJlbHMpIHtcbiAgICBub2RlLmNlbnRlckxhYmVsID0gdHJ1ZTtcbiAgfVxuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94IH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdG90YWxXaWR0aCA9IE1hdGgubWF4KGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8ud2lkdGggPz8gMCk7XG4gIGNvbnN0IHRvdGFsSGVpZ2h0ID0gTWF0aC5tYXgoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCB4ID0gLXRvdGFsV2lkdGggLyAyO1xuICBjb25zdCB5ID0gLXRvdGFsSGVpZ2h0IC8gMjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHJjID0gcm91Z2gzNS5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge1xuICAgIGZpbGw6IHRoZW1lVmFyaWFibGVzLm5vdGVCa2dDb2xvcixcbiAgICBzdHJva2U6IHRoZW1lVmFyaWFibGVzLm5vdGVCb3JkZXJDb2xvclxuICB9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBub3RlU2hhcGVOb2RlID0gcmMucmVjdGFuZ2xlKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCBvcHRpb25zKTtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gbm90ZVNoYXBlTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIHJlY3QyLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICByZWN0Mi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHJlY3QyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcmVjdDIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUobm90ZSwgXCJub3RlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9xdWVzdGlvbi50c1xuaW1wb3J0IHJvdWdoMzYgZnJvbSBcInJvdWdoanNcIjtcbnZhciBjcmVhdGVEZWNpc2lvbkJveFBhdGhEID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeCwgeSwgc2l6ZSkgPT4ge1xuICByZXR1cm4gW1xuICAgIGBNJHt4ICsgc2l6ZSAvIDJ9LCR7eX1gLFxuICAgIGBMJHt4ICsgc2l6ZX0sJHt5IC0gc2l6ZSAvIDJ9YCxcbiAgICBgTCR7eCArIHNpemUgLyAyfSwke3kgLSBzaXplfWAsXG4gICAgYEwke3h9LCR7eSAtIHNpemUgLyAyfWAsXG4gICAgXCJaXCJcbiAgXS5qb2luKFwiIFwiKTtcbn0sIFwiY3JlYXRlRGVjaXNpb25Cb3hQYXRoRFwiKTtcbmFzeW5jIGZ1bmN0aW9uIHF1ZXN0aW9uKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQgKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IHMgPSB3ICsgaDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogcyAvIDIsIHk6IDAgfSxcbiAgICB7IHg6IHMsIHk6IC1zIC8gMiB9LFxuICAgIHsgeDogcyAvIDIsIHk6IC1zIH0sXG4gICAgeyB4OiAwLCB5OiAtcyAvIDIgfVxuICBdO1xuICBsZXQgcG9seWdvbjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoMzYuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICAgIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlRGVjaXNpb25Cb3hQYXRoRCgwLCAwLCBzKTtcbiAgICBjb25zdCByb3VnaE5vZGUgPSByYy5wYXRoKHBhdGhEYXRhLCBvcHRpb25zKTtcbiAgICBwb2x5Z29uID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7LXMgLyAyfSwgJHtzIC8gMn0pYCk7XG4gICAgaWYgKGNzc1N0eWxlcykge1xuICAgICAgcG9seWdvbi5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcG9seWdvbiA9IGluc2VydFBvbHlnb25TaGFwZShzaGFwZVN2ZywgcywgcywgcG9pbnRzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcykge1xuICAgIHBvbHlnb24uYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcG9seWdvbik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBsb2cuZGVidWcoXG4gICAgICBcIkFQQTEyIEludGVyc2VjdCBjYWxsZWQgU1BMSVRcXG5wb2ludDpcIixcbiAgICAgIHBvaW50LFxuICAgICAgXCJcXG5ub2RlOlxcblwiLFxuICAgICAgbm9kZSxcbiAgICAgIFwiXFxucmVzOlwiLFxuICAgICAgaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KVxuICAgICk7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShxdWVzdGlvbiwgXCJxdWVzdGlvblwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvcmVjdExlZnRJbnZBcnJvdy50c1xuaW1wb3J0IHJvdWdoMzcgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIHJlY3RfbGVmdF9pbnZfYXJyb3cocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBNYXRoLm1heChiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSwgbm9kZT8ud2lkdGggPz8gMCk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCksIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3QgeCA9IC13IC8gMjtcbiAgY29uc3QgeSA9IC1oIC8gMjtcbiAgY29uc3Qgbm90Y2ggPSB5IC8gMjtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogeCArIG5vdGNoLCB5IH0sXG4gICAgeyB4LCB5OiAwIH0sXG4gICAgeyB4OiB4ICsgbm90Y2gsIHk6IC15IH0sXG4gICAgeyB4OiAteCwgeTogLXkgfSxcbiAgICB7IHg6IC14LCB5IH1cbiAgXTtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHJjID0gcm91Z2gzNy5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgY29uc3Qgcm91Z2hOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gIGNvbnN0IHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcG9seWdvbi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIik7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHBvbHlnb24uc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgcG9seWdvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstbm90Y2ggLyAyfSwwKWApO1xuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey1ub3RjaCAvIDIgLSBiYm94LndpZHRoIC8gMiAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7LShiYm94LmhlaWdodCAvIDIpIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBwb2x5Z29uKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUocmVjdF9sZWZ0X2ludl9hcnJvdywgXCJyZWN0X2xlZnRfaW52X2Fycm93XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9yZWN0V2l0aFRpdGxlLnRzXG5pbXBvcnQgeyBzZWxlY3QgYXMgc2VsZWN0NCB9IGZyb20gXCJkM1wiO1xuaW1wb3J0IHJvdWdoMzggZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIHJlY3RXaXRoVGl0bGUocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBsZXQgY2xhc3NlcztcbiAgaWYgKCFub2RlLmNzc0NsYXNzZXMpIHtcbiAgICBjbGFzc2VzID0gXCJub2RlIGRlZmF1bHRcIjtcbiAgfSBlbHNlIHtcbiAgICBjbGFzc2VzID0gXCJub2RlIFwiICsgbm9kZS5jc3NDbGFzc2VzO1xuICB9XG4gIGNvbnN0IHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIGNsYXNzZXMpLmF0dHIoXCJpZFwiLCBub2RlLmRvbUlkIHx8IG5vZGUuaWQpO1xuICBjb25zdCBnID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiKTtcbiAgY29uc3QgbGFiZWwgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgY29uc3QgZGVzY3JpcHRpb24gPSBub2RlLmRlc2NyaXB0aW9uO1xuICBjb25zdCB0aXRsZSA9IG5vZGUubGFiZWw7XG4gIGNvbnN0IHRleHQyID0gbGFiZWwubm9kZSgpLmFwcGVuZENoaWxkKGF3YWl0IGNyZWF0ZUxhYmVsX2RlZmF1bHQodGl0bGUsIG5vZGUubGFiZWxTdHlsZSwgdHJ1ZSwgdHJ1ZSkpO1xuICBsZXQgYmJveCA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICBpZiAoZXZhbHVhdGUoZ2V0Q29uZmlnMigpPy5mbG93Y2hhcnQ/Lmh0bWxMYWJlbHMpKSB7XG4gICAgY29uc3QgZGl2MiA9IHRleHQyLmNoaWxkcmVuWzBdO1xuICAgIGNvbnN0IGR2MiA9IHNlbGVjdDQodGV4dDIpO1xuICAgIGJib3ggPSBkaXYyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGR2Mi5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCk7XG4gICAgZHYyLmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQpO1xuICB9XG4gIGxvZy5pbmZvKFwiVGV4dCAyXCIsIGRlc2NyaXB0aW9uKTtcbiAgY29uc3QgdGV4dFJvd3MgPSBkZXNjcmlwdGlvbiB8fCBbXTtcbiAgY29uc3QgdGl0bGVCb3ggPSB0ZXh0Mi5nZXRCQm94KCk7XG4gIGNvbnN0IGRlc2NyID0gbGFiZWwubm9kZSgpLmFwcGVuZENoaWxkKFxuICAgIGF3YWl0IGNyZWF0ZUxhYmVsX2RlZmF1bHQoXG4gICAgICB0ZXh0Um93cy5qb2luID8gdGV4dFJvd3Muam9pbihcIjxici8+XCIpIDogdGV4dFJvd3MsXG4gICAgICBub2RlLmxhYmVsU3R5bGUsXG4gICAgICB0cnVlLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgKTtcbiAgY29uc3QgZGl2ID0gZGVzY3IuY2hpbGRyZW5bMF07XG4gIGNvbnN0IGR2ID0gc2VsZWN0NChkZXNjcik7XG4gIGJib3ggPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGR2LmF0dHIoXCJ3aWR0aFwiLCBiYm94LndpZHRoKTtcbiAgZHYuYXR0cihcImhlaWdodFwiLCBiYm94LmhlaWdodCk7XG4gIGNvbnN0IGhhbGZQYWRkaW5nID0gKG5vZGUucGFkZGluZyB8fCAwKSAvIDI7XG4gIHNlbGVjdDQoZGVzY3IpLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcInRyYW5zbGF0ZSggXCIgKyAoYmJveC53aWR0aCA+IHRpdGxlQm94LndpZHRoID8gMCA6ICh0aXRsZUJveC53aWR0aCAtIGJib3gud2lkdGgpIC8gMikgKyBcIiwgXCIgKyAodGl0bGVCb3guaGVpZ2h0ICsgaGFsZlBhZGRpbmcgKyA1KSArIFwiKVwiXG4gICk7XG4gIHNlbGVjdDQodGV4dDIpLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcInRyYW5zbGF0ZSggXCIgKyAoYmJveC53aWR0aCA8IHRpdGxlQm94LndpZHRoID8gMCA6IC0odGl0bGVCb3gud2lkdGggLSBiYm94LndpZHRoKSAvIDIpICsgXCIsIDApXCJcbiAgKTtcbiAgYmJveCA9IGxhYmVsLm5vZGUoKS5nZXRCQm94KCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcInRyYW5zbGF0ZShcIiArIC1iYm94LndpZHRoIC8gMiArIFwiLCBcIiArICgtYmJveC5oZWlnaHQgLyAyIC0gaGFsZlBhZGRpbmcgKyAzKSArIFwiKVwiXG4gICk7XG4gIGNvbnN0IHRvdGFsV2lkdGggPSBiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyB8fCAwKTtcbiAgY29uc3QgdG90YWxIZWlnaHQgPSBiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgfHwgMCk7XG4gIGNvbnN0IHggPSAtYmJveC53aWR0aCAvIDIgLSBoYWxmUGFkZGluZztcbiAgY29uc3QgeSA9IC1iYm94LmhlaWdodCAvIDIgLSBoYWxmUGFkZGluZztcbiAgbGV0IHJlY3QyO1xuICBsZXQgaW5uZXJMaW5lO1xuICBpZiAobm9kZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaDM4LnN2ZyhzaGFwZVN2Zyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgICBjb25zdCByb3VnaE5vZGUgPSByYy5wYXRoKFxuICAgICAgY3JlYXRlUm91bmRlZFJlY3RQYXRoRCh4LCB5LCB0b3RhbFdpZHRoLCB0b3RhbEhlaWdodCwgbm9kZS5yeCB8fCAwKSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IHJvdWdoTGluZSA9IHJjLmxpbmUoXG4gICAgICAtYmJveC53aWR0aCAvIDIgLSBoYWxmUGFkZGluZyxcbiAgICAgIC1iYm94LmhlaWdodCAvIDIgLSBoYWxmUGFkZGluZyArIHRpdGxlQm94LmhlaWdodCArIGhhbGZQYWRkaW5nLFxuICAgICAgYmJveC53aWR0aCAvIDIgKyBoYWxmUGFkZGluZyxcbiAgICAgIC1iYm94LmhlaWdodCAvIDIgLSBoYWxmUGFkZGluZyArIHRpdGxlQm94LmhlaWdodCArIGhhbGZQYWRkaW5nLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgaW5uZXJMaW5lID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHtcbiAgICAgIGxvZy5kZWJ1ZyhcIlJvdWdoIG5vZGUgaW5zZXJ0IENYQ1wiLCByb3VnaE5vZGUpO1xuICAgICAgcmV0dXJuIHJvdWdoTGluZTtcbiAgICB9LCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICByZWN0MiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiB7XG4gICAgICBsb2cuZGVidWcoXCJSb3VnaCBub2RlIGluc2VydCBDWENcIiwgcm91Z2hOb2RlKTtcbiAgICAgIHJldHVybiByb3VnaE5vZGU7XG4gICAgfSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIH0gZWxzZSB7XG4gICAgcmVjdDIgPSBnLmluc2VydChcInJlY3RcIiwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgaW5uZXJMaW5lID0gZy5pbnNlcnQoXCJsaW5lXCIpO1xuICAgIHJlY3QyLmF0dHIoXCJjbGFzc1wiLCBcIm91dGVyIHRpdGxlLXN0YXRlXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKS5hdHRyKFwieFwiLCAtYmJveC53aWR0aCAvIDIgLSBoYWxmUGFkZGluZykuYXR0cihcInlcIiwgLWJib3guaGVpZ2h0IC8gMiAtIGhhbGZQYWRkaW5nKS5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgfHwgMCkpLmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nIHx8IDApKTtcbiAgICBpbm5lckxpbmUuYXR0cihcImNsYXNzXCIsIFwiZGl2aWRlclwiKS5hdHRyKFwieDFcIiwgLWJib3gud2lkdGggLyAyIC0gaGFsZlBhZGRpbmcpLmF0dHIoXCJ4MlwiLCBiYm94LndpZHRoIC8gMiArIGhhbGZQYWRkaW5nKS5hdHRyKFwieTFcIiwgLWJib3guaGVpZ2h0IC8gMiAtIGhhbGZQYWRkaW5nICsgdGl0bGVCb3guaGVpZ2h0ICsgaGFsZlBhZGRpbmcpLmF0dHIoXCJ5MlwiLCAtYmJveC5oZWlnaHQgLyAyIC0gaGFsZlBhZGRpbmcgKyB0aXRsZUJveC5oZWlnaHQgKyBoYWxmUGFkZGluZyk7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCByZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShyZWN0V2l0aFRpdGxlLCBcInJlY3RXaXRoVGl0bGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3JvdW5kZWRSZWN0LnRzXG5hc3luYyBmdW5jdGlvbiByb3VuZGVkUmVjdChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICByeDogNSxcbiAgICByeTogNSxcbiAgICBjbGFzc2VzOiBcIlwiLFxuICAgIGxhYmVsUGFkZGluZ1g6IChub2RlPy5wYWRkaW5nIHx8IDApICogMSxcbiAgICBsYWJlbFBhZGRpbmdZOiAobm9kZT8ucGFkZGluZyB8fCAwKSAqIDFcbiAgfTtcbiAgcmV0dXJuIGRyYXdSZWN0KHBhcmVudCwgbm9kZSwgb3B0aW9ucyk7XG59XG5fX25hbWUocm91bmRlZFJlY3QsIFwicm91bmRlZFJlY3RcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3NoYWRlZFByb2Nlc3MudHNcbmltcG9ydCByb3VnaDM5IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiBzaGFkZWRQcm9jZXNzKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCBoYWxmUGFkZGluZyA9IG5vZGU/LnBhZGRpbmcgPz8gMDtcbiAgY29uc3QgdyA9IE1hdGgubWF4KGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8ud2lkdGggPz8gMCk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGNvbnN0IHggPSAtYmJveC53aWR0aCAvIDIgLSBoYWxmUGFkZGluZztcbiAgY29uc3QgeSA9IC1iYm94LmhlaWdodCAvIDIgLSBoYWxmUGFkZGluZztcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGNvbnN0IHJjID0gcm91Z2gzOS5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHBvaW50cyA9IFtcbiAgICB7IHgsIHkgfSxcbiAgICB7IHg6IHggKyB3ICsgOCwgeSB9LFxuICAgIHsgeDogeCArIHcgKyA4LCB5OiB5ICsgaCB9LFxuICAgIHsgeDogeCAtIDgsIHk6IHkgKyBoIH0sXG4gICAgeyB4OiB4IC0gOCwgeSB9LFxuICAgIHsgeCwgeSB9LFxuICAgIHsgeCwgeTogeSArIGggfVxuICBdO1xuICBjb25zdCByb3VnaE5vZGUgPSByYy5wb2x5Z29uKFxuICAgIHBvaW50cy5tYXAoKHApID0+IFtwLngsIHAueV0pLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcmVjdDIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpLmF0dHIoXCJzdHlsZVwiLCBoYW5kbGVVbmRlZmluZWRBdHRyKGNzc1N0eWxlcykpO1xuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICByZWN0Mi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHJlY3QyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LXcgLyAyICsgNCArIChub2RlLnBhZGRpbmcgPz8gMCkgLSAoYmJveC54IC0gKGJib3gubGVmdCA/PyAwKSl9LCR7LWggLyAyICsgKG5vZGUucGFkZGluZyA/PyAwKSAtIChiYm94LnkgLSAoYmJveC50b3AgPz8gMCkpfSlgXG4gICk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcmVjdDIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoc2hhZGVkUHJvY2VzcywgXCJzaGFkZWRQcm9jZXNzXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9zbG9wZWRSZWN0LnRzXG5pbXBvcnQgcm91Z2g0MCBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gc2xvcGVkUmVjdChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGxhYmVsIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IE1hdGgubWF4KGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8ud2lkdGggPz8gMCk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGNvbnN0IHggPSAtdyAvIDI7XG4gIGNvbnN0IHkgPSAtaCAvIDI7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoNDAuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4LCB5IH0sXG4gICAgeyB4LCB5OiB5ICsgaCB9LFxuICAgIHsgeDogeCArIHcsIHk6IHkgKyBoIH0sXG4gICAgeyB4OiB4ICsgdywgeTogeSAtIGggLyAyIH1cbiAgXTtcbiAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCBzaGFwZU5vZGUgPSByYy5wYXRoKHBhdGhEYXRhLCBvcHRpb25zKTtcbiAgY29uc3QgcG9seWdvbiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBzaGFwZU5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICBwb2x5Z29uLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBwb2x5Z29uLnNlbGVjdENoaWxkcmVuKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBwb2x5Z29uLnNlbGVjdENoaWxkcmVuKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgcG9seWdvbi5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwgJHtoIC8gNH0pYCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LXcgLyAyICsgKG5vZGUucGFkZGluZyA/PyAwKSAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7LWggLyA0ICsgKG5vZGUucGFkZGluZyA/PyAwKSAtIChiYm94LnkgLSAoYmJveC50b3AgPz8gMCkpfSlgXG4gICk7XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcG9seWdvbik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShzbG9wZWRSZWN0LCBcInNsb3BlZFJlY3RcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3NxdWFyZVJlY3QudHNcbmFzeW5jIGZ1bmN0aW9uIHNxdWFyZVJlY3QyKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHJ4OiAwLFxuICAgIHJ5OiAwLFxuICAgIGNsYXNzZXM6IFwiXCIsXG4gICAgbGFiZWxQYWRkaW5nWDogKG5vZGU/LnBhZGRpbmcgfHwgMCkgKiAyLFxuICAgIGxhYmVsUGFkZGluZ1k6IChub2RlPy5wYWRkaW5nIHx8IDApICogMVxuICB9O1xuICByZXR1cm4gZHJhd1JlY3QocGFyZW50LCBub2RlLCBvcHRpb25zKTtcbn1cbl9fbmFtZShzcXVhcmVSZWN0MiwgXCJzcXVhcmVSZWN0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9zdGFkaXVtLnRzXG5pbXBvcnQgcm91Z2g0MSBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gc3RhZGl1bShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQgKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgaCAvIDQgKyBub2RlLnBhZGRpbmc7XG4gIGxldCByZWN0MjtcbiAgY29uc3QgeyBjc3NTdHlsZXMgfSA9IG5vZGU7XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoNDEuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICAgIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUm91bmRlZFJlY3RQYXRoRCgtdyAvIDIsIC1oIC8gMiwgdywgaCwgaCAvIDIpO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJjLnBhdGgocGF0aERhdGEsIG9wdGlvbnMpO1xuICAgIHJlY3QyID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgcmVjdDIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpLmF0dHIoXCJzdHlsZVwiLCBoYW5kbGVVbmRlZmluZWRBdHRyKGNzc1N0eWxlcykpO1xuICB9IGVsc2Uge1xuICAgIHJlY3QyID0gc2hhcGVTdmcuaW5zZXJ0KFwicmVjdFwiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpLmF0dHIoXCJyeFwiLCBoIC8gMikuYXR0cihcInJ5XCIsIGggLyAyKS5hdHRyKFwieFwiLCAtdyAvIDIpLmF0dHIoXCJ5XCIsIC1oIC8gMikuYXR0cihcIndpZHRoXCIsIHcpLmF0dHIoXCJoZWlnaHRcIiwgaCk7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCByZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShzdGFkaXVtLCBcInN0YWRpdW1cIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3N0YXRlLnRzXG5hc3luYyBmdW5jdGlvbiBzdGF0ZShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICByeDogNSxcbiAgICByeTogNSxcbiAgICBjbGFzc2VzOiBcImZsb3djaGFydC1ub2RlXCJcbiAgfTtcbiAgcmV0dXJuIGRyYXdSZWN0KHBhcmVudCwgbm9kZSwgb3B0aW9ucyk7XG59XG5fX25hbWUoc3RhdGUsIFwic3RhdGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3N0YXRlRW5kLnRzXG5pbXBvcnQgcm91Z2g0MiBmcm9tIFwicm91Z2hqc1wiO1xuZnVuY3Rpb24gc3RhdGVFbmQocGFyZW50LCBub2RlLCB7IGNvbmZpZzogeyB0aGVtZVZhcmlhYmxlcyB9IH0pIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCB7IGxpbmVDb2xvciwgc3RhdGVCb3JkZXIsIG5vZGVCb3JkZXIgfSA9IHRoZW1lVmFyaWFibGVzO1xuICBjb25zdCBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm5vZGUgZGVmYXVsdFwiKS5hdHRyKFwiaWRcIiwgbm9kZS5kb21JZCB8fCBub2RlLmlkKTtcbiAgY29uc3QgcmMgPSByb3VnaDQyLnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3Qgcm91Z2hOb2RlID0gcmMuY2lyY2xlKDAsIDAsIDE0LCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBzdHJva2U6IGxpbmVDb2xvcixcbiAgICBzdHJva2VXaWR0aDogMlxuICB9KTtcbiAgY29uc3QgaW5uZXJGaWxsID0gc3RhdGVCb3JkZXIgPz8gbm9kZUJvcmRlcjtcbiAgY29uc3Qgcm91Z2hJbm5lck5vZGUgPSByYy5jaXJjbGUoMCwgMCwgNSwge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgZmlsbDogaW5uZXJGaWxsLFxuICAgIHN0cm9rZTogaW5uZXJGaWxsLFxuICAgIHN0cm9rZVdpZHRoOiAyLFxuICAgIGZpbGxTdHlsZTogXCJzb2xpZFwiXG4gIH0pO1xuICBjb25zdCBjaXJjbGUyID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIGNpcmNsZTIuaW5zZXJ0KCgpID0+IHJvdWdoSW5uZXJOb2RlKTtcbiAgaWYgKGNzc1N0eWxlcykge1xuICAgIGNpcmNsZTIuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcykge1xuICAgIGNpcmNsZTIuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBjaXJjbGUyKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5jaXJjbGUobm9kZSwgNywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoc3RhdGVFbmQsIFwic3RhdGVFbmRcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3N0YXRlU3RhcnQudHNcbmltcG9ydCByb3VnaDQzIGZyb20gXCJyb3VnaGpzXCI7XG5mdW5jdGlvbiBzdGF0ZVN0YXJ0KHBhcmVudCwgbm9kZSwgeyBjb25maWc6IHsgdGhlbWVWYXJpYWJsZXMgfSB9KSB7XG4gIGNvbnN0IHsgbGluZUNvbG9yIH0gPSB0aGVtZVZhcmlhYmxlcztcbiAgY29uc3Qgc2hhcGVTdmcgPSBwYXJlbnQuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJub2RlIGRlZmF1bHRcIikuYXR0cihcImlkXCIsIG5vZGUuZG9tSWQgfHwgbm9kZS5pZCk7XG4gIGxldCBjaXJjbGUyO1xuICBpZiAobm9kZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaDQzLnN2ZyhzaGFwZVN2Zyk7XG4gICAgY29uc3Qgcm91Z2hOb2RlID0gcmMuY2lyY2xlKDAsIDAsIDE0LCBzb2xpZFN0YXRlRmlsbChsaW5lQ29sb3IpKTtcbiAgICBjaXJjbGUyID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTm9kZSk7XG4gICAgY2lyY2xlMi5hdHRyKFwiY2xhc3NcIiwgXCJzdGF0ZS1zdGFydFwiKS5hdHRyKFwiclwiLCA3KS5hdHRyKFwid2lkdGhcIiwgMTQpLmF0dHIoXCJoZWlnaHRcIiwgMTQpO1xuICB9IGVsc2Uge1xuICAgIGNpcmNsZTIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJjaXJjbGVcIiwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgY2lyY2xlMi5hdHRyKFwiY2xhc3NcIiwgXCJzdGF0ZS1zdGFydFwiKS5hdHRyKFwiclwiLCA3KS5hdHRyKFwid2lkdGhcIiwgMTQpLmF0dHIoXCJoZWlnaHRcIiwgMTQpO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgY2lyY2xlMik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQuY2lyY2xlKG5vZGUsIDcsIHBvaW50KTtcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKHN0YXRlU3RhcnQsIFwic3RhdGVTdGFydFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvc3Vicm91dGluZS50c1xuaW1wb3J0IHJvdWdoNDQgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIHN1YnJvdXRpbmUocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94IH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgaGFsZlBhZGRpbmcgPSAobm9kZT8ucGFkZGluZyB8fCAwKSAvIDI7XG4gIGNvbnN0IHcgPSBiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nO1xuICBjb25zdCBoID0gYmJveC5oZWlnaHQgKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IHggPSAtYmJveC53aWR0aCAvIDIgLSBoYWxmUGFkZGluZztcbiAgY29uc3QgeSA9IC1iYm94LmhlaWdodCAvIDIgLSBoYWxmUGFkZGluZztcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogMCwgeTogMCB9LFxuICAgIHsgeDogdywgeTogMCB9LFxuICAgIHsgeDogdywgeTogLWggfSxcbiAgICB7IHg6IDAsIHk6IC1oIH0sXG4gICAgeyB4OiAwLCB5OiAwIH0sXG4gICAgeyB4OiAtOCwgeTogMCB9LFxuICAgIHsgeDogdyArIDgsIHk6IDAgfSxcbiAgICB7IHg6IHcgKyA4LCB5OiAtaCB9LFxuICAgIHsgeDogLTgsIHk6IC1oIH0sXG4gICAgeyB4OiAtOCwgeTogMCB9XG4gIF07XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCByYyA9IHJvdWdoNDQuc3ZnKHNoYXBlU3ZnKTtcbiAgICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJjLnJlY3RhbmdsZSh4IC0gOCwgeSwgdyArIDE2LCBoLCBvcHRpb25zKTtcbiAgICBjb25zdCBsMSA9IHJjLmxpbmUoeCwgeSwgeCwgeSArIGgsIG9wdGlvbnMpO1xuICAgIGNvbnN0IGwyID0gcmMubGluZSh4ICsgdywgeSwgeCArIHcsIHkgKyBoLCBvcHRpb25zKTtcbiAgICBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gbDEsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICAgIHNoYXBlU3ZnLmluc2VydCgoKSA9PiBsMiwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gICAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIGhhbmRsZVVuZGVmaW5lZEF0dHIoY3NzU3R5bGVzKSk7XG4gICAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCByZWN0Mik7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZWwgPSBpbnNlcnRQb2x5Z29uU2hhcGUoc2hhcGVTdmcsIHcsIGgsIHBvaW50cyk7XG4gICAgaWYgKG5vZGVTdHlsZXMpIHtcbiAgICAgIGVsLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgICB9XG4gICAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBlbCk7XG4gIH1cbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoc3Vicm91dGluZSwgXCJzdWJyb3V0aW5lXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy90YWdnZWRSZWN0LnRzXG5pbXBvcnQgcm91Z2g0NSBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gdGFnZ2VkUmVjdChwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gTWF0aC5tYXgoYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3QgeCA9IC13IC8gMjtcbiAgY29uc3QgeSA9IC1oIC8gMjtcbiAgY29uc3QgdGFnV2lkdGggPSAwLjIgKiBoO1xuICBjb25zdCB0YWdIZWlnaHQgPSAwLjIgKiBoO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgcmMgPSByb3VnaDQ1LnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGNvbnN0IHJlY3RQb2ludHMgPSBbXG4gICAgeyB4OiB4IC0gdGFnV2lkdGggLyAyLCB5IH0sXG4gICAgeyB4OiB4ICsgdyArIHRhZ1dpZHRoIC8gMiwgeSB9LFxuICAgIHsgeDogeCArIHcgKyB0YWdXaWR0aCAvIDIsIHk6IHkgKyBoIH0sXG4gICAgeyB4OiB4IC0gdGFnV2lkdGggLyAyLCB5OiB5ICsgaCB9XG4gIF07XG4gIGNvbnN0IHRhZ1BvaW50cyA9IFtcbiAgICB7IHg6IHggKyB3IC0gdGFnV2lkdGggLyAyLCB5OiB5ICsgaCB9LFxuICAgIHsgeDogeCArIHcgKyB0YWdXaWR0aCAvIDIsIHk6IHkgKyBoIH0sXG4gICAgeyB4OiB4ICsgdyArIHRhZ1dpZHRoIC8gMiwgeTogeSArIGggLSB0YWdIZWlnaHQgfVxuICBdO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHJlY3RQYXRoID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocmVjdFBvaW50cyk7XG4gIGNvbnN0IHJlY3ROb2RlID0gcmMucGF0aChyZWN0UGF0aCwgb3B0aW9ucyk7XG4gIGNvbnN0IHRhZ1BhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyh0YWdQb2ludHMpO1xuICBjb25zdCB0YWdOb2RlID0gcmMucGF0aCh0YWdQYXRoLCB7IC4uLm9wdGlvbnMsIGZpbGxTdHlsZTogXCJzb2xpZFwiIH0pO1xuICBjb25zdCB0YWdnZWRSZWN0MiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiB0YWdOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgdGFnZ2VkUmVjdDIuaW5zZXJ0KCgpID0+IHJlY3ROb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgdGFnZ2VkUmVjdDIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHRhZ2dlZFJlY3QyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgdGFnZ2VkUmVjdDIuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCB0YWdnZWRSZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHJlY3RQb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUodGFnZ2VkUmVjdCwgXCJ0YWdnZWRSZWN0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy90YWdnZWRXYXZlRWRnZWRSZWN0YW5nbGUudHNcbmltcG9ydCByb3VnaDQ2IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiB0YWdnZWRXYXZlRWRnZWRSZWN0YW5nbGUocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHcgPSBNYXRoLm1heChiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCBoID0gTWF0aC5tYXgoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCB3YXZlQW1wbGl0dWRlID0gaCAvIDQ7XG4gIGNvbnN0IHRhZ1dpZHRoID0gMC4yICogdztcbiAgY29uc3QgdGFnSGVpZ2h0ID0gMC4yICogaDtcbiAgY29uc3QgZmluYWxIID0gaCArIHdhdmVBbXBsaXR1ZGU7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoNDYuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAtdyAvIDIgLSB3IC8gMiAqIDAuMSwgeTogZmluYWxIIC8gMiB9LFxuICAgIC4uLmdlbmVyYXRlRnVsbFNpbmVXYXZlUG9pbnRzKFxuICAgICAgLXcgLyAyIC0gdyAvIDIgKiAwLjEsXG4gICAgICBmaW5hbEggLyAyLFxuICAgICAgdyAvIDIgKyB3IC8gMiAqIDAuMSxcbiAgICAgIGZpbmFsSCAvIDIsXG4gICAgICB3YXZlQW1wbGl0dWRlLFxuICAgICAgMC44XG4gICAgKSxcbiAgICB7IHg6IHcgLyAyICsgdyAvIDIgKiAwLjEsIHk6IC1maW5hbEggLyAyIH0sXG4gICAgeyB4OiAtdyAvIDIgLSB3IC8gMiAqIDAuMSwgeTogLWZpbmFsSCAvIDIgfVxuICBdO1xuICBjb25zdCB4ID0gLXcgLyAyICsgdyAvIDIgKiAwLjE7XG4gIGNvbnN0IHkgPSAtZmluYWxIIC8gMiAtIHRhZ0hlaWdodCAqIDAuNDtcbiAgY29uc3QgdGFnUG9pbnRzID0gW1xuICAgIHsgeDogeCArIHcgLSB0YWdXaWR0aCwgeTogKHkgKyBoKSAqIDEuNCB9LFxuICAgIHsgeDogeCArIHcsIHk6IHkgKyBoIC0gdGFnSGVpZ2h0IH0sXG4gICAgeyB4OiB4ICsgdywgeTogKHkgKyBoKSAqIDAuOSB9LFxuICAgIC4uLmdlbmVyYXRlRnVsbFNpbmVXYXZlUG9pbnRzKFxuICAgICAgeCArIHcsXG4gICAgICAoeSArIGgpICogMS4zLFxuICAgICAgeCArIHcgLSB0YWdXaWR0aCxcbiAgICAgICh5ICsgaCkgKiAxLjUsXG4gICAgICAtaCAqIDAuMDMsXG4gICAgICAwLjVcbiAgICApXG4gIF07XG4gIGNvbnN0IHdhdmVFZGdlUmVjdFBhdGggPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCB3YXZlRWRnZVJlY3ROb2RlID0gcmMucGF0aCh3YXZlRWRnZVJlY3RQYXRoLCBvcHRpb25zKTtcbiAgY29uc3QgdGFnZ2VkV2F2ZUVkZ2VSZWN0UGF0aCA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHRhZ1BvaW50cyk7XG4gIGNvbnN0IHRhZ2dlZFdhdmVFZGdlUmVjdE5vZGUgPSByYy5wYXRoKHRhZ2dlZFdhdmVFZGdlUmVjdFBhdGgsIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGZpbGxTdHlsZTogXCJzb2xpZFwiXG4gIH0pO1xuICBjb25zdCB3YXZlRWRnZVJlY3QgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gdGFnZ2VkV2F2ZUVkZ2VSZWN0Tm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIHdhdmVFZGdlUmVjdC5pbnNlcnQoKCkgPT4gd2F2ZUVkZ2VSZWN0Tm9kZSwgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIHdhdmVFZGdlUmVjdC5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIik7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgd2F2ZUVkZ2VSZWN0LnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgd2F2ZUVkZ2VSZWN0LnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHdhdmVFZGdlUmVjdC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoMCwkey13YXZlQW1wbGl0dWRlIC8gMn0pYCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LXcgLyAyICsgKG5vZGUucGFkZGluZyA/PyAwKSAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sJHstaCAvIDIgKyAobm9kZS5wYWRkaW5nID8/IDApIC0gd2F2ZUFtcGxpdHVkZSAvIDIgLSAoYmJveC55IC0gKGJib3gudG9wID8/IDApKX0pYFxuICApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHdhdmVFZGdlUmVjdCk7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZSh0YWdnZWRXYXZlRWRnZWRSZWN0YW5nbGUsIFwidGFnZ2VkV2F2ZUVkZ2VkUmVjdGFuZ2xlXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy90ZXh0LnRzXG5hc3luYyBmdW5jdGlvbiB0ZXh0KHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHRvdGFsV2lkdGggPSBNYXRoLm1heChiYm94LndpZHRoICsgbm9kZS5wYWRkaW5nLCBub2RlPy53aWR0aCB8fCAwKTtcbiAgY29uc3QgdG90YWxIZWlnaHQgPSBNYXRoLm1heChiYm94LmhlaWdodCArIG5vZGUucGFkZGluZywgbm9kZT8uaGVpZ2h0IHx8IDApO1xuICBjb25zdCB4ID0gLXRvdGFsV2lkdGggLyAyO1xuICBjb25zdCB5ID0gLXRvdGFsSGVpZ2h0IC8gMjtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoXCJyZWN0XCIsIFwiOmZpcnN0LWNoaWxkXCIpO1xuICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgXCJ0ZXh0XCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKS5hdHRyKFwicnhcIiwgMCkuYXR0cihcInJ5XCIsIDApLmF0dHIoXCJ4XCIsIHgpLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJ3aWR0aFwiLCB0b3RhbFdpZHRoKS5hdHRyKFwiaGVpZ2h0XCIsIHRvdGFsSGVpZ2h0KTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCByZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZSh0ZXh0LCBcInRleHRcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3RpbHRlZEN5bGluZGVyLnRzXG5pbXBvcnQgcm91Z2g0NyBmcm9tIFwicm91Z2hqc1wiO1xudmFyIGNyZWF0ZUN5bGluZGVyUGF0aEQzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeCwgeSwgd2lkdGgsIGhlaWdodCwgcngsIHJ5KSA9PiB7XG4gIHJldHVybiBgTSR7eH0sJHt5fVxuICAgIGEke3J4fSwke3J5fSAwLDAsMSAkezB9LCR7LWhlaWdodH1cbiAgICBsJHt3aWR0aH0sJHswfVxuICAgIGEke3J4fSwke3J5fSAwLDAsMSAkezB9LCR7aGVpZ2h0fVxuICAgIE0ke3dpZHRofSwkey1oZWlnaHR9XG4gICAgYSR7cnh9LCR7cnl9IDAsMCwwICR7MH0sJHtoZWlnaHR9XG4gICAgbCR7LXdpZHRofSwkezB9YDtcbn0sIFwiY3JlYXRlQ3lsaW5kZXJQYXRoRFwiKTtcbnZhciBjcmVhdGVPdXRlckN5bGluZGVyUGF0aEQzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeCwgeSwgd2lkdGgsIGhlaWdodCwgcngsIHJ5KSA9PiB7XG4gIHJldHVybiBbXG4gICAgYE0ke3h9LCR7eX1gLFxuICAgIGBNJHt4ICsgd2lkdGh9LCR7eX1gLFxuICAgIGBhJHtyeH0sJHtyeX0gMCwwLDAgJHswfSwkey1oZWlnaHR9YCxcbiAgICBgbCR7LXdpZHRofSwwYCxcbiAgICBgYSR7cnh9LCR7cnl9IDAsMCwwICR7MH0sJHtoZWlnaHR9YCxcbiAgICBgbCR7d2lkdGh9LDBgXG4gIF0uam9pbihcIiBcIik7XG59LCBcImNyZWF0ZU91dGVyQ3lsaW5kZXJQYXRoRFwiKTtcbnZhciBjcmVhdGVJbm5lckN5bGluZGVyUGF0aEQzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoeCwgeSwgd2lkdGgsIGhlaWdodCwgcngsIHJ5KSA9PiB7XG4gIHJldHVybiBbYE0ke3ggKyB3aWR0aCAvIDJ9LCR7LWhlaWdodCAvIDJ9YCwgYGEke3J4fSwke3J5fSAwLDAsMCAwLCR7aGVpZ2h0fWBdLmpvaW4oXCIgXCIpO1xufSwgXCJjcmVhdGVJbm5lckN5bGluZGVyUGF0aERcIik7XG5hc3luYyBmdW5jdGlvbiB0aWx0ZWRDeWxpbmRlcihwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGxhYmVsLCBoYWxmUGFkZGluZyB9ID0gYXdhaXQgbGFiZWxIZWxwZXIoXG4gICAgcGFyZW50LFxuICAgIG5vZGUsXG4gICAgZ2V0Tm9kZUNsYXNzZXMobm9kZSlcbiAgKTtcbiAgY29uc3QgbGFiZWxQYWRkaW5nID0gbm9kZS5sb29rID09PSBcIm5lb1wiID8gaGFsZlBhZGRpbmcgKiAyIDogaGFsZlBhZGRpbmc7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZztcbiAgY29uc3QgcnkgPSBoIC8gMjtcbiAgY29uc3QgcnggPSByeSAvICgyLjUgKyBoIC8gNTApO1xuICBjb25zdCB3ID0gYmJveC53aWR0aCArIHJ4ICsgbGFiZWxQYWRkaW5nO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgbGV0IGN5bGluZGVyMjtcbiAgaWYgKG5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2g0Ny5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG91dGVyUGF0aERhdGEgPSBjcmVhdGVPdXRlckN5bGluZGVyUGF0aEQzKDAsIDAsIHcsIGgsIHJ4LCByeSk7XG4gICAgY29uc3QgaW5uZXJQYXRoRGF0YSA9IGNyZWF0ZUlubmVyQ3lsaW5kZXJQYXRoRDMoMCwgMCwgdywgaCwgcngsIHJ5KTtcbiAgICBjb25zdCBvdXRlck5vZGUgPSByYy5wYXRoKG91dGVyUGF0aERhdGEsIHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KSk7XG4gICAgY29uc3QgaW5uZXJMaW5lID0gcmMucGF0aChpbm5lclBhdGhEYXRhLCB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7IGZpbGw6IFwibm9uZVwiIH0pKTtcbiAgICBjeWxpbmRlcjIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gaW5uZXJMaW5lLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjeWxpbmRlcjIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gb3V0ZXJOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICBjeWxpbmRlcjIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICAgIGlmIChjc3NTdHlsZXMpIHtcbiAgICAgIGN5bGluZGVyMi5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVDeWxpbmRlclBhdGhEMygwLCAwLCB3LCBoLCByeCwgcnkpO1xuICAgIGN5bGluZGVyMiA9IHNoYXBlU3ZnLmluc2VydChcInBhdGhcIiwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcImRcIiwgcGF0aERhdGEpLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKS5hdHRyKFwic3R5bGVcIiwgaGFuZGxlVW5kZWZpbmVkQXR0cihjc3NTdHlsZXMpKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gICAgY3lsaW5kZXIyLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgICBpZiAoY3NzU3R5bGVzKSB7XG4gICAgICBjeWxpbmRlcjIuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgICB9XG4gICAgaWYgKG5vZGVTdHlsZXMpIHtcbiAgICAgIGN5bGluZGVyMi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgICB9XG4gIH1cbiAgY3lsaW5kZXIyLmF0dHIoXCJsYWJlbC1vZmZzZXQteFwiLCByeCk7XG4gIGN5bGluZGVyMi5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstdyAvIDJ9LCAke2ggLyAyfSApYCk7XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LShiYm94LndpZHRoIC8gMikgLSByeCAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7LShiYm94LmhlaWdodCAvIDIpIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCBjeWxpbmRlcjIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gICAgY29uc3QgeSA9IHBvcy55IC0gKG5vZGUueSA/PyAwKTtcbiAgICBpZiAocnkgIT0gMCAmJiAoTWF0aC5hYnMoeSkgPCAobm9kZS5oZWlnaHQgPz8gMCkgLyAyIHx8IE1hdGguYWJzKHkpID09IChub2RlLmhlaWdodCA/PyAwKSAvIDIgJiYgTWF0aC5hYnMocG9zLnggLSAobm9kZS54ID8/IDApKSA+IChub2RlLndpZHRoID8/IDApIC8gMiAtIHJ4KSkge1xuICAgICAgbGV0IHggPSByeCAqIHJ4ICogKDEgLSB5ICogeSAvIChyeSAqIHJ5KSk7XG4gICAgICBpZiAoeCAhPSAwKSB7XG4gICAgICAgIHggPSBNYXRoLnNxcnQoTWF0aC5hYnMoeCkpO1xuICAgICAgfVxuICAgICAgeCA9IHJ4IC0geDtcbiAgICAgIGlmIChwb2ludC54IC0gKG5vZGUueCA/PyAwKSA+IDApIHtcbiAgICAgICAgeCA9IC14O1xuICAgICAgfVxuICAgICAgcG9zLnggKz0geDtcbiAgICB9XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKHRpbHRlZEN5bGluZGVyLCBcInRpbHRlZEN5bGluZGVyXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy90cmFwZXpvaWQudHNcbmltcG9ydCByb3VnaDQ4IGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiB0cmFwZXpvaWQocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94IH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IGJib3gud2lkdGggKyBub2RlLnBhZGRpbmc7XG4gIGNvbnN0IGggPSBiYm94LmhlaWdodCArIG5vZGUucGFkZGluZztcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogLTMgKiBoIC8gNiwgeTogMCB9LFxuICAgIHsgeDogdyArIDMgKiBoIC8gNiwgeTogMCB9LFxuICAgIHsgeDogdywgeTogLWggfSxcbiAgICB7IHg6IDAsIHk6IC1oIH1cbiAgXTtcbiAgbGV0IHBvbHlnb247XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBpZiAobm9kZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaDQ4LnN2ZyhzaGFwZVN2Zyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgICBjb25zdCBwYXRoRGF0YSA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHBvaW50cyk7XG4gICAgY29uc3Qgcm91Z2hOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gICAgcG9seWdvbiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey13IC8gMn0sICR7aCAvIDJ9KWApO1xuICAgIGlmIChjc3NTdHlsZXMpIHtcbiAgICAgIHBvbHlnb24uYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBvbHlnb24gPSBpbnNlcnRQb2x5Z29uU2hhcGUoc2hhcGVTdmcsIHcsIGgsIHBvaW50cyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMpIHtcbiAgICBwb2x5Z29uLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBub2RlLndpZHRoID0gdztcbiAgbm9kZS5oZWlnaHQgPSBoO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHBvbHlnb24pO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgcG9pbnRzLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZSh0cmFwZXpvaWQsIFwidHJhcGV6b2lkXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy90cmFwZXpvaWRhbFBlbnRhZ29uLnRzXG5pbXBvcnQgcm91Z2g0OSBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gdHJhcGV6b2lkYWxQZW50YWdvbihwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCBtaW5XaWR0aCA9IDYwLCBtaW5IZWlnaHQgPSAyMDtcbiAgY29uc3QgdyA9IE1hdGgubWF4KG1pbldpZHRoLCBiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCBoID0gTWF0aC5tYXgobWluSGVpZ2h0LCBiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoNDkuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAtdyAvIDIgKiAwLjgsIHk6IC1oIC8gMiB9LFxuICAgIHsgeDogdyAvIDIgKiAwLjgsIHk6IC1oIC8gMiB9LFxuICAgIHsgeDogdyAvIDIsIHk6IC1oIC8gMiAqIDAuNiB9LFxuICAgIHsgeDogdyAvIDIsIHk6IGggLyAyIH0sXG4gICAgeyB4OiAtdyAvIDIsIHk6IGggLyAyIH0sXG4gICAgeyB4OiAtdyAvIDIsIHk6IC1oIC8gMiAqIDAuNiB9XG4gIF07XG4gIGNvbnN0IHBhdGhEYXRhID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgY29uc3Qgc2hhcGVOb2RlID0gcmMucGF0aChwYXRoRGF0YSwgb3B0aW9ucyk7XG4gIGNvbnN0IHBvbHlnb24gPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gc2hhcGVOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcG9seWdvbi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIik7XG4gIGlmIChjc3NTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RDaGlsZHJlbihcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgcG9seWdvbi5zZWxlY3RDaGlsZHJlbihcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcG9seWdvbik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZSh0cmFwZXpvaWRhbFBlbnRhZ29uLCBcInRyYXBlem9pZGFsUGVudGFnb25cIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3RyaWFuZ2xlLnRzXG5pbXBvcnQgcm91Z2g1MCBmcm9tIFwicm91Z2hqc1wiO1xuYXN5bmMgZnVuY3Rpb24gdHJpYW5nbGUocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94LCBsYWJlbCB9ID0gYXdhaXQgbGFiZWxIZWxwZXIocGFyZW50LCBub2RlLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSk7XG4gIGNvbnN0IHVzZUh0bWxMYWJlbHMgPSBldmFsdWF0ZShnZXRDb25maWcyKCkuZmxvd2NoYXJ0Py5odG1sTGFiZWxzKTtcbiAgY29uc3QgdyA9IGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApO1xuICBjb25zdCBoID0gdyArIGJib3guaGVpZ2h0O1xuICBjb25zdCB0dyA9IHcgKyBiYm94LmhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogMCwgeTogMCB9LFxuICAgIHsgeDogdHcsIHk6IDAgfSxcbiAgICB7IHg6IHR3IC8gMiwgeTogLWggfVxuICBdO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgcmMgPSByb3VnaDUwLnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3QgcGF0aERhdGEgPSBjcmVhdGVQYXRoRnJvbVBvaW50cyhwb2ludHMpO1xuICBjb25zdCByb3VnaE5vZGUgPSByYy5wYXRoKHBhdGhEYXRhLCBvcHRpb25zKTtcbiAgY29uc3QgcG9seWdvbiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaE5vZGUsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey1oIC8gMn0sICR7aCAvIDJ9KWApO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHBvbHlnb24uc2VsZWN0Q2hpbGRyZW4oXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHBvbHlnb24uc2VsZWN0Q2hpbGRyZW4oXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgfVxuICBub2RlLndpZHRoID0gdztcbiAgbm9kZS5oZWlnaHQgPSBoO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHBvbHlnb24pO1xuICBsYWJlbC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkey1iYm94LndpZHRoIC8gMiAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7aCAvIDIgLSAoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApIC8gKHVzZUh0bWxMYWJlbHMgPyAyIDogMSkgLSAoYmJveC55IC0gKGJib3gudG9wID8/IDApKSl9KWBcbiAgKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGxvZy5pbmZvKFwiVHJpYW5nbGUgaW50ZXJzZWN0XCIsIG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUodHJpYW5nbGUsIFwidHJpYW5nbGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3dhdmVFZGdlZFJlY3RhbmdsZS50c1xuaW1wb3J0IHJvdWdoNTEgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIHdhdmVFZGdlZFJlY3RhbmdsZShwYXJlbnQsIG5vZGUpIHtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcywgbm9kZVN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgbm9kZS5sYWJlbFN0eWxlID0gbGFiZWxTdHlsZXM7XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3gsIGxhYmVsIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgdyA9IE1hdGgubWF4KGJib3gud2lkdGggKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8ud2lkdGggPz8gMCk7XG4gIGNvbnN0IGggPSBNYXRoLm1heChiYm94LmhlaWdodCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy5oZWlnaHQgPz8gMCk7XG4gIGNvbnN0IHdhdmVBbXBsaXR1ZGUgPSBoIC8gODtcbiAgY29uc3QgZmluYWxIID0gaCArIHdhdmVBbXBsaXR1ZGU7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCBtaW5XaWR0aCA9IDcwO1xuICBjb25zdCB3aWR0aERpZiA9IG1pbldpZHRoIC0gdztcbiAgY29uc3QgZXh0cmFXID0gd2lkdGhEaWYgPiAwID8gd2lkdGhEaWYgLyAyIDogMDtcbiAgY29uc3QgcmMgPSByb3VnaDUxLnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3QgcG9pbnRzID0gW1xuICAgIHsgeDogLXcgLyAyIC0gZXh0cmFXLCB5OiBmaW5hbEggLyAyIH0sXG4gICAgLi4uZ2VuZXJhdGVGdWxsU2luZVdhdmVQb2ludHMoXG4gICAgICAtdyAvIDIgLSBleHRyYVcsXG4gICAgICBmaW5hbEggLyAyLFxuICAgICAgdyAvIDIgKyBleHRyYVcsXG4gICAgICBmaW5hbEggLyAyLFxuICAgICAgd2F2ZUFtcGxpdHVkZSxcbiAgICAgIDAuOFxuICAgICksXG4gICAgeyB4OiB3IC8gMiArIGV4dHJhVywgeTogLWZpbmFsSCAvIDIgfSxcbiAgICB7IHg6IC13IC8gMiAtIGV4dHJhVywgeTogLWZpbmFsSCAvIDIgfVxuICBdO1xuICBjb25zdCB3YXZlRWRnZVJlY3RQYXRoID0gY3JlYXRlUGF0aEZyb21Qb2ludHMocG9pbnRzKTtcbiAgY29uc3Qgd2F2ZUVkZ2VSZWN0Tm9kZSA9IHJjLnBhdGgod2F2ZUVkZ2VSZWN0UGF0aCwgb3B0aW9ucyk7XG4gIGNvbnN0IHdhdmVFZGdlUmVjdCA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiB3YXZlRWRnZVJlY3ROb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgd2F2ZUVkZ2VSZWN0LmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICB3YXZlRWRnZVJlY3Quc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgY3NzU3R5bGVzKTtcbiAgfVxuICBpZiAobm9kZVN0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICB3YXZlRWRnZVJlY3Quc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgd2F2ZUVkZ2VSZWN0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCR7LXdhdmVBbXBsaXR1ZGUgLyAyfSlgKTtcbiAgbGFiZWwuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIGB0cmFuc2xhdGUoJHstdyAvIDIgKyAobm9kZS5wYWRkaW5nID8/IDApIC0gKGJib3gueCAtIChiYm94LmxlZnQgPz8gMCkpfSwkey1oIC8gMiArIChub2RlLnBhZGRpbmcgPz8gMCkgLSB3YXZlQW1wbGl0dWRlIC0gKGJib3gueSAtIChiYm94LnRvcCA/PyAwKSl9KWBcbiAgKTtcbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCB3YXZlRWRnZVJlY3QpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgY29uc3QgcG9zID0gaW50ZXJzZWN0X2RlZmF1bHQucG9seWdvbihub2RlLCBwb2ludHMsIHBvaW50KTtcbiAgICByZXR1cm4gcG9zO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUod2F2ZUVkZ2VkUmVjdGFuZ2xlLCBcIndhdmVFZGdlZFJlY3RhbmdsZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvd2F2ZVJlY3RhbmdsZS50c1xuaW1wb3J0IHJvdWdoNTIgZnJvbSBcInJvdWdoanNcIjtcbmFzeW5jIGZ1bmN0aW9uIHdhdmVSZWN0YW5nbGUocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCB7IHNoYXBlU3ZnLCBiYm94IH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIG5vZGUsIGdldE5vZGVDbGFzc2VzKG5vZGUpKTtcbiAgY29uc3QgbWluV2lkdGggPSAxMDA7XG4gIGNvbnN0IG1pbkhlaWdodCA9IDUwO1xuICBjb25zdCBiYXNlV2lkdGggPSBNYXRoLm1heChiYm94LndpZHRoICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LndpZHRoID8/IDApO1xuICBjb25zdCBiYXNlSGVpZ2h0ID0gTWF0aC5tYXgoYmJveC5oZWlnaHQgKyAobm9kZS5wYWRkaW5nID8/IDApICogMiwgbm9kZT8uaGVpZ2h0ID8/IDApO1xuICBjb25zdCBhc3BlY3RSYXRpbyA9IGJhc2VXaWR0aCAvIGJhc2VIZWlnaHQ7XG4gIGxldCB3ID0gYmFzZVdpZHRoO1xuICBsZXQgaCA9IGJhc2VIZWlnaHQ7XG4gIGlmICh3ID4gaCAqIGFzcGVjdFJhdGlvKSB7XG4gICAgaCA9IHcgLyBhc3BlY3RSYXRpbztcbiAgfSBlbHNlIHtcbiAgICB3ID0gaCAqIGFzcGVjdFJhdGlvO1xuICB9XG4gIHcgPSBNYXRoLm1heCh3LCBtaW5XaWR0aCk7XG4gIGggPSBNYXRoLm1heChoLCBtaW5IZWlnaHQpO1xuICBjb25zdCB3YXZlQW1wbGl0dWRlID0gTWF0aC5taW4oaCAqIDAuMiwgaCAvIDQpO1xuICBjb25zdCBmaW5hbEggPSBoICsgd2F2ZUFtcGxpdHVkZSAqIDI7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoNTIuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCBwb2ludHMgPSBbXG4gICAgeyB4OiAtdyAvIDIsIHk6IGZpbmFsSCAvIDIgfSxcbiAgICAuLi5nZW5lcmF0ZUZ1bGxTaW5lV2F2ZVBvaW50cygtdyAvIDIsIGZpbmFsSCAvIDIsIHcgLyAyLCBmaW5hbEggLyAyLCB3YXZlQW1wbGl0dWRlLCAxKSxcbiAgICB7IHg6IHcgLyAyLCB5OiAtZmluYWxIIC8gMiB9LFxuICAgIC4uLmdlbmVyYXRlRnVsbFNpbmVXYXZlUG9pbnRzKHcgLyAyLCAtZmluYWxIIC8gMiwgLXcgLyAyLCAtZmluYWxIIC8gMiwgd2F2ZUFtcGxpdHVkZSwgLTEpXG4gIF07XG4gIGNvbnN0IHdhdmVSZWN0UGF0aCA9IGNyZWF0ZVBhdGhGcm9tUG9pbnRzKHBvaW50cyk7XG4gIGNvbnN0IHdhdmVSZWN0Tm9kZSA9IHJjLnBhdGgod2F2ZVJlY3RQYXRoLCBvcHRpb25zKTtcbiAgY29uc3Qgd2F2ZVJlY3QgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gd2F2ZVJlY3ROb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgd2F2ZVJlY3QuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICBpZiAoY3NzU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHdhdmVSZWN0LnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyk7XG4gIH1cbiAgaWYgKG5vZGVTdHlsZXMgJiYgbm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgd2F2ZVJlY3Quc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcyk7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCB3YXZlUmVjdCk7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICBjb25zdCBwb3MgPSBpbnRlcnNlY3RfZGVmYXVsdC5wb2x5Z29uKG5vZGUsIHBvaW50cywgcG9pbnQpO1xuICAgIHJldHVybiBwb3M7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZSh3YXZlUmVjdGFuZ2xlLCBcIndhdmVSZWN0YW5nbGVcIik7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvc2hhcGVzL3dpbmRvd1BhbmUudHNcbmltcG9ydCByb3VnaDUzIGZyb20gXCJyb3VnaGpzXCI7XG5hc3luYyBmdW5jdGlvbiB3aW5kb3dQYW5lKHBhcmVudCwgbm9kZSkge1xuICBjb25zdCB7IGxhYmVsU3R5bGVzLCBub2RlU3R5bGVzIH0gPSBzdHlsZXMyU3RyaW5nKG5vZGUpO1xuICBub2RlLmxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlcztcbiAgY29uc3QgeyBzaGFwZVN2ZywgYmJveCwgbGFiZWwgfSA9IGF3YWl0IGxhYmVsSGVscGVyKHBhcmVudCwgbm9kZSwgZ2V0Tm9kZUNsYXNzZXMobm9kZSkpO1xuICBjb25zdCB3ID0gTWF0aC5tYXgoYmJveC53aWR0aCArIChub2RlLnBhZGRpbmcgPz8gMCkgKiAyLCBub2RlPy53aWR0aCA/PyAwKTtcbiAgY29uc3QgaCA9IE1hdGgubWF4KGJib3guaGVpZ2h0ICsgKG5vZGUucGFkZGluZyA/PyAwKSAqIDIsIG5vZGU/LmhlaWdodCA/PyAwKTtcbiAgY29uc3QgcmVjdE9mZnNldCA9IDU7XG4gIGNvbnN0IHggPSAtdyAvIDI7XG4gIGNvbnN0IHkgPSAtaCAvIDI7XG4gIGNvbnN0IHsgY3NzU3R5bGVzIH0gPSBub2RlO1xuICBjb25zdCByYyA9IHJvdWdoNTMuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgY29uc3Qgb3V0ZXJQYXRoUG9pbnRzID0gW1xuICAgIHsgeDogeCAtIHJlY3RPZmZzZXQsIHk6IHkgLSByZWN0T2Zmc2V0IH0sXG4gICAgeyB4OiB4IC0gcmVjdE9mZnNldCwgeTogeSArIGggfSxcbiAgICB7IHg6IHggKyB3LCB5OiB5ICsgaCB9LFxuICAgIHsgeDogeCArIHcsIHk6IHkgLSByZWN0T2Zmc2V0IH1cbiAgXTtcbiAgY29uc3QgcGF0aCA9IGBNJHt4IC0gcmVjdE9mZnNldH0sJHt5IC0gcmVjdE9mZnNldH0gTCR7eCArIHd9LCR7eSAtIHJlY3RPZmZzZXR9IEwke3ggKyB3fSwke3kgKyBofSBMJHt4IC0gcmVjdE9mZnNldH0sJHt5ICsgaH0gTCR7eCAtIHJlY3RPZmZzZXR9LCR7eSAtIHJlY3RPZmZzZXR9XG4gICAgICAgICAgICAgICAgTSR7eCAtIHJlY3RPZmZzZXR9LCR7eX0gTCR7eCArIHd9LCR7eX1cbiAgICAgICAgICAgICAgICBNJHt4fSwke3kgLSByZWN0T2Zmc2V0fSBMJHt4fSwke3kgKyBofWA7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3Qgbm8gPSByYy5wYXRoKHBhdGgsIG9wdGlvbnMpO1xuICBjb25zdCB3aW5kb3dQYW5lMiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiBubywgXCI6Zmlyc3QtY2hpbGRcIik7XG4gIHdpbmRvd1BhbmUyLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3JlY3RPZmZzZXQgLyAyfSwgJHtyZWN0T2Zmc2V0IC8gMn0pYCk7XG4gIHdpbmRvd1BhbmUyLmF0dHIoXCJjbGFzc1wiLCBcImJhc2ljIGxhYmVsLWNvbnRhaW5lclwiKTtcbiAgaWYgKGNzc1N0eWxlcyAmJiBub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICB3aW5kb3dQYW5lMi5zZWxlY3RBbGwoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMpO1xuICB9XG4gIGlmIChub2RlU3R5bGVzICYmIG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIHdpbmRvd1BhbmUyLnNlbGVjdEFsbChcInBhdGhcIikuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIGxhYmVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7LShiYm94LndpZHRoIC8gMikgKyByZWN0T2Zmc2V0IC8gMiAtIChiYm94LnggLSAoYmJveC5sZWZ0ID8/IDApKX0sICR7LShiYm94LmhlaWdodCAvIDIpICsgcmVjdE9mZnNldCAvIDIgLSAoYmJveC55IC0gKGJib3gudG9wID8/IDApKX0pYFxuICApO1xuICB1cGRhdGVOb2RlQm91bmRzKG5vZGUsIHdpbmRvd1BhbmUyKTtcbiAgbm9kZS5pbnRlcnNlY3QgPSBmdW5jdGlvbihwb2ludCkge1xuICAgIGNvbnN0IHBvcyA9IGludGVyc2VjdF9kZWZhdWx0LnBvbHlnb24obm9kZSwgb3V0ZXJQYXRoUG9pbnRzLCBwb2ludCk7XG4gICAgcmV0dXJuIHBvcztcbiAgfTtcbiAgcmV0dXJuIHNoYXBlU3ZnO1xufVxuX19uYW1lKHdpbmRvd1BhbmUsIFwid2luZG93UGFuZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvZXJCb3gudHNcbmltcG9ydCByb3VnaDU0IGZyb20gXCJyb3VnaGpzXCI7XG5pbXBvcnQgeyBzZWxlY3QgYXMgc2VsZWN0NSB9IGZyb20gXCJkM1wiO1xuYXN5bmMgZnVuY3Rpb24gZXJCb3gocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IGVudGl0eU5vZGUgPSBub2RlO1xuICBpZiAoZW50aXR5Tm9kZS5hbGlhcykge1xuICAgIG5vZGUubGFiZWwgPSBlbnRpdHlOb2RlLmFsaWFzO1xuICB9XG4gIGlmIChub2RlLmxvb2sgPT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBjb25zdCB7IHRoZW1lVmFyaWFibGVzOiB0aGVtZVZhcmlhYmxlczIgfSA9IGdldENvbmZpZygpO1xuICAgIGNvbnN0IHsgYmFja2dyb3VuZCB9ID0gdGhlbWVWYXJpYWJsZXMyO1xuICAgIGNvbnN0IGJhY2tncm91bmROb2RlID0ge1xuICAgICAgLi4ubm9kZSxcbiAgICAgIGlkOiBub2RlLmlkICsgXCItYmFja2dyb3VuZFwiLFxuICAgICAgbG9vazogXCJkZWZhdWx0XCIsXG4gICAgICBjc3NTdHlsZXM6IFtcInN0cm9rZTogbm9uZVwiLCBgZmlsbDogJHtiYWNrZ3JvdW5kfWBdXG4gICAgfTtcbiAgICBhd2FpdCBlckJveChwYXJlbnQsIGJhY2tncm91bmROb2RlKTtcbiAgfVxuICBjb25zdCBjb25maWcgPSBnZXRDb25maWcoKTtcbiAgbm9kZS51c2VIdG1sTGFiZWxzID0gY29uZmlnLmh0bWxMYWJlbHM7XG4gIGxldCBQQURESU5HID0gY29uZmlnLmVyPy5kaWFncmFtUGFkZGluZyA/PyAxMDtcbiAgbGV0IFRFWFRfUEFERElORyA9IGNvbmZpZy5lcj8uZW50aXR5UGFkZGluZyA/PyA2O1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0gbm9kZTtcbiAgY29uc3QgeyBsYWJlbFN0eWxlcyB9ID0gc3R5bGVzMlN0cmluZyhub2RlKTtcbiAgaWYgKGVudGl0eU5vZGUuYXR0cmlidXRlcy5sZW5ndGggPT09IDAgJiYgbm9kZS5sYWJlbCkge1xuICAgIGNvbnN0IG9wdGlvbnMyID0ge1xuICAgICAgcng6IDAsXG4gICAgICByeTogMCxcbiAgICAgIGxhYmVsUGFkZGluZ1g6IFBBRERJTkcsXG4gICAgICBsYWJlbFBhZGRpbmdZOiBQQURESU5HICogMS41LFxuICAgICAgY2xhc3NlczogXCJcIlxuICAgIH07XG4gICAgaWYgKGNhbGN1bGF0ZVRleHRXaWR0aChub2RlLmxhYmVsLCBjb25maWcpICsgb3B0aW9uczIubGFiZWxQYWRkaW5nWCAqIDIgPCBjb25maWcuZXIubWluRW50aXR5V2lkdGgpIHtcbiAgICAgIG5vZGUud2lkdGggPSBjb25maWcuZXIubWluRW50aXR5V2lkdGg7XG4gICAgfVxuICAgIGNvbnN0IHNoYXBlU3ZnMiA9IGF3YWl0IGRyYXdSZWN0KHBhcmVudCwgbm9kZSwgb3B0aW9uczIpO1xuICAgIGlmICghZXZhbHVhdGUoY29uZmlnLmh0bWxMYWJlbHMpKSB7XG4gICAgICBjb25zdCB0ZXh0RWxlbWVudCA9IHNoYXBlU3ZnMi5zZWxlY3QoXCJ0ZXh0XCIpO1xuICAgICAgY29uc3QgYmJveCA9IHRleHRFbGVtZW50Lm5vZGUoKT8uZ2V0QkJveCgpO1xuICAgICAgdGV4dEVsZW1lbnQuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7LWJib3gud2lkdGggLyAyfSwgMClgKTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYXBlU3ZnMjtcbiAgfVxuICBpZiAoIWNvbmZpZy5odG1sTGFiZWxzKSB7XG4gICAgUEFERElORyAqPSAxLjI1O1xuICAgIFRFWFRfUEFERElORyAqPSAxLjI1O1xuICB9XG4gIGxldCBjc3NDbGFzc2VzID0gZ2V0Tm9kZUNsYXNzZXMobm9kZSk7XG4gIGlmICghY3NzQ2xhc3Nlcykge1xuICAgIGNzc0NsYXNzZXMgPSBcIm5vZGUgZGVmYXVsdFwiO1xuICB9XG4gIGNvbnN0IHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIGNzc0NsYXNzZXMpLmF0dHIoXCJpZFwiLCBub2RlLmRvbUlkIHx8IG5vZGUuaWQpO1xuICBjb25zdCBuYW1lQkJveCA9IGF3YWl0IGFkZFRleHQoc2hhcGVTdmcsIG5vZGUubGFiZWwgPz8gXCJcIiwgY29uZmlnLCAwLCAwLCBbXCJuYW1lXCJdLCBsYWJlbFN0eWxlcyk7XG4gIG5hbWVCQm94LmhlaWdodCArPSBURVhUX1BBRERJTkc7XG4gIGxldCB5T2Zmc2V0ID0gMDtcbiAgY29uc3QgeU9mZnNldHMgPSBbXTtcbiAgbGV0IG1heFR5cGVXaWR0aCA9IDA7XG4gIGxldCBtYXhOYW1lV2lkdGggPSAwO1xuICBsZXQgbWF4S2V5c1dpZHRoID0gMDtcbiAgbGV0IG1heENvbW1lbnRXaWR0aCA9IDA7XG4gIGxldCBrZXlzUHJlc2VudCA9IHRydWU7XG4gIGxldCBjb21tZW50UHJlc2VudCA9IHRydWU7XG4gIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGVudGl0eU5vZGUuYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHR5cGVCQm94ID0gYXdhaXQgYWRkVGV4dChcbiAgICAgIHNoYXBlU3ZnLFxuICAgICAgYXR0cmlidXRlLnR5cGUsXG4gICAgICBjb25maWcsXG4gICAgICAwLFxuICAgICAgeU9mZnNldCxcbiAgICAgIFtcImF0dHJpYnV0ZS10eXBlXCJdLFxuICAgICAgbGFiZWxTdHlsZXNcbiAgICApO1xuICAgIG1heFR5cGVXaWR0aCA9IE1hdGgubWF4KG1heFR5cGVXaWR0aCwgdHlwZUJCb3gud2lkdGggKyBQQURESU5HKTtcbiAgICBjb25zdCBuYW1lQkJveDIgPSBhd2FpdCBhZGRUZXh0KFxuICAgICAgc2hhcGVTdmcsXG4gICAgICBhdHRyaWJ1dGUubmFtZSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIDAsXG4gICAgICB5T2Zmc2V0LFxuICAgICAgW1wiYXR0cmlidXRlLW5hbWVcIl0sXG4gICAgICBsYWJlbFN0eWxlc1xuICAgICk7XG4gICAgbWF4TmFtZVdpZHRoID0gTWF0aC5tYXgobWF4TmFtZVdpZHRoLCBuYW1lQkJveDIud2lkdGggKyBQQURESU5HKTtcbiAgICBjb25zdCBrZXlzQkJveCA9IGF3YWl0IGFkZFRleHQoXG4gICAgICBzaGFwZVN2ZyxcbiAgICAgIGF0dHJpYnV0ZS5rZXlzLmpvaW4oKSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIDAsXG4gICAgICB5T2Zmc2V0LFxuICAgICAgW1wiYXR0cmlidXRlLWtleXNcIl0sXG4gICAgICBsYWJlbFN0eWxlc1xuICAgICk7XG4gICAgbWF4S2V5c1dpZHRoID0gTWF0aC5tYXgobWF4S2V5c1dpZHRoLCBrZXlzQkJveC53aWR0aCArIFBBRERJTkcpO1xuICAgIGNvbnN0IGNvbW1lbnRCQm94ID0gYXdhaXQgYWRkVGV4dChcbiAgICAgIHNoYXBlU3ZnLFxuICAgICAgYXR0cmlidXRlLmNvbW1lbnQsXG4gICAgICBjb25maWcsXG4gICAgICAwLFxuICAgICAgeU9mZnNldCxcbiAgICAgIFtcImF0dHJpYnV0ZS1jb21tZW50XCJdLFxuICAgICAgbGFiZWxTdHlsZXNcbiAgICApO1xuICAgIG1heENvbW1lbnRXaWR0aCA9IE1hdGgubWF4KG1heENvbW1lbnRXaWR0aCwgY29tbWVudEJCb3gud2lkdGggKyBQQURESU5HKTtcbiAgICB5T2Zmc2V0ICs9IE1hdGgubWF4KHR5cGVCQm94LmhlaWdodCwgbmFtZUJCb3gyLmhlaWdodCwga2V5c0JCb3guaGVpZ2h0LCBjb21tZW50QkJveC5oZWlnaHQpICsgVEVYVF9QQURESU5HO1xuICAgIHlPZmZzZXRzLnB1c2goeU9mZnNldCk7XG4gIH1cbiAgeU9mZnNldHMucG9wKCk7XG4gIGxldCB0b3RhbFdpZHRoU2VjdGlvbnMgPSA0O1xuICBpZiAobWF4S2V5c1dpZHRoIDw9IFBBRERJTkcpIHtcbiAgICBrZXlzUHJlc2VudCA9IGZhbHNlO1xuICAgIG1heEtleXNXaWR0aCA9IDA7XG4gICAgdG90YWxXaWR0aFNlY3Rpb25zLS07XG4gIH1cbiAgaWYgKG1heENvbW1lbnRXaWR0aCA8PSBQQURESU5HKSB7XG4gICAgY29tbWVudFByZXNlbnQgPSBmYWxzZTtcbiAgICBtYXhDb21tZW50V2lkdGggPSAwO1xuICAgIHRvdGFsV2lkdGhTZWN0aW9ucy0tO1xuICB9XG4gIGNvbnN0IHNoYXBlQkJveCA9IHNoYXBlU3ZnLm5vZGUoKS5nZXRCQm94KCk7XG4gIGlmIChuYW1lQkJveC53aWR0aCArIFBBRERJTkcgKiAyIC0gKG1heFR5cGVXaWR0aCArIG1heE5hbWVXaWR0aCArIG1heEtleXNXaWR0aCArIG1heENvbW1lbnRXaWR0aCkgPiAwKSB7XG4gICAgY29uc3QgZGlmZmVyZW5jZSA9IG5hbWVCQm94LndpZHRoICsgUEFERElORyAqIDIgLSAobWF4VHlwZVdpZHRoICsgbWF4TmFtZVdpZHRoICsgbWF4S2V5c1dpZHRoICsgbWF4Q29tbWVudFdpZHRoKTtcbiAgICBtYXhUeXBlV2lkdGggKz0gZGlmZmVyZW5jZSAvIHRvdGFsV2lkdGhTZWN0aW9ucztcbiAgICBtYXhOYW1lV2lkdGggKz0gZGlmZmVyZW5jZSAvIHRvdGFsV2lkdGhTZWN0aW9ucztcbiAgICBpZiAobWF4S2V5c1dpZHRoID4gMCkge1xuICAgICAgbWF4S2V5c1dpZHRoICs9IGRpZmZlcmVuY2UgLyB0b3RhbFdpZHRoU2VjdGlvbnM7XG4gICAgfVxuICAgIGlmIChtYXhDb21tZW50V2lkdGggPiAwKSB7XG4gICAgICBtYXhDb21tZW50V2lkdGggKz0gZGlmZmVyZW5jZSAvIHRvdGFsV2lkdGhTZWN0aW9ucztcbiAgICB9XG4gIH1cbiAgY29uc3QgbWF4V2lkdGggPSBtYXhUeXBlV2lkdGggKyBtYXhOYW1lV2lkdGggKyBtYXhLZXlzV2lkdGggKyBtYXhDb21tZW50V2lkdGg7XG4gIGNvbnN0IHJjID0gcm91Z2g1NC5zdmcoc2hhcGVTdmcpO1xuICBjb25zdCBvcHRpb25zID0gdXNlck5vZGVPdmVycmlkZXMobm9kZSwge30pO1xuICBpZiAobm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgb3B0aW9ucy5yb3VnaG5lc3MgPSAwO1xuICAgIG9wdGlvbnMuZmlsbFN0eWxlID0gXCJzb2xpZFwiO1xuICB9XG4gIGNvbnN0IHcgPSBNYXRoLm1heChzaGFwZUJCb3gud2lkdGggKyBQQURESU5HICogMiwgbm9kZT8ud2lkdGggfHwgMCwgbWF4V2lkdGgpO1xuICBjb25zdCBoID0gTWF0aC5tYXgoc2hhcGVCQm94LmhlaWdodCArICh5T2Zmc2V0c1swXSB8fCB5T2Zmc2V0KSArIFRFWFRfUEFERElORywgbm9kZT8uaGVpZ2h0IHx8IDApO1xuICBjb25zdCB4ID0gLXcgLyAyO1xuICBjb25zdCB5ID0gLWggLyAyO1xuICBzaGFwZVN2Zy5zZWxlY3RBbGwoXCJnOm5vdCg6Zmlyc3QtY2hpbGQpXCIpLmVhY2goKF8sIGksIG5vZGVzKSA9PiB7XG4gICAgY29uc3QgdGV4dDIgPSBzZWxlY3Q1KG5vZGVzW2ldKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSB0ZXh0Mi5hdHRyKFwidHJhbnNmb3JtXCIpO1xuICAgIGxldCB0cmFuc2xhdGVYID0gMDtcbiAgICBsZXQgdHJhbnNsYXRlWSA9IDA7XG4gICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgY29uc3QgcmVnZXggPSBSZWdFeHAoL3RyYW5zbGF0ZVxcKChbXixdKyksKFteKV0rKVxcKS8pO1xuICAgICAgY29uc3QgdHJhbnNsYXRlID0gcmVnZXguZXhlYyh0cmFuc2Zvcm0pO1xuICAgICAgaWYgKHRyYW5zbGF0ZSkge1xuICAgICAgICB0cmFuc2xhdGVYID0gcGFyc2VGbG9hdCh0cmFuc2xhdGVbMV0pO1xuICAgICAgICB0cmFuc2xhdGVZID0gcGFyc2VGbG9hdCh0cmFuc2xhdGVbMl0pO1xuICAgICAgICBpZiAodGV4dDIuYXR0cihcImNsYXNzXCIpLmluY2x1ZGVzKFwiYXR0cmlidXRlLW5hbWVcIikpIHtcbiAgICAgICAgICB0cmFuc2xhdGVYICs9IG1heFR5cGVXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmICh0ZXh0Mi5hdHRyKFwiY2xhc3NcIikuaW5jbHVkZXMoXCJhdHRyaWJ1dGUta2V5c1wiKSkge1xuICAgICAgICAgIHRyYW5zbGF0ZVggKz0gbWF4VHlwZVdpZHRoICsgbWF4TmFtZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKHRleHQyLmF0dHIoXCJjbGFzc1wiKS5pbmNsdWRlcyhcImF0dHJpYnV0ZS1jb21tZW50XCIpKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWCArPSBtYXhUeXBlV2lkdGggKyBtYXhOYW1lV2lkdGggKyBtYXhLZXlzV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGV4dDIuYXR0cihcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBgdHJhbnNsYXRlKCR7eCArIFBBRERJTkcgLyAyICsgdHJhbnNsYXRlWH0sICR7dHJhbnNsYXRlWSArIHkgKyBuYW1lQkJveC5oZWlnaHQgKyBURVhUX1BBRERJTkcgLyAyfSlgXG4gICAgKTtcbiAgfSk7XG4gIHNoYXBlU3ZnLnNlbGVjdChcIi5uYW1lXCIpLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAtbmFtZUJCb3gud2lkdGggLyAyICsgXCIsIFwiICsgKHkgKyBURVhUX1BBRERJTkcgLyAyKSArIFwiKVwiKTtcbiAgY29uc3Qgcm91Z2hSZWN0ID0gcmMucmVjdGFuZ2xlKHgsIHksIHcsIGgsIG9wdGlvbnMpO1xuICBjb25zdCByZWN0MiA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaFJlY3QsIFwiOmZpcnN0LWNoaWxkXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMuam9pbihcIlwiKSk7XG4gIGNvbnN0IHsgdGhlbWVWYXJpYWJsZXMgfSA9IGdldENvbmZpZygpO1xuICBjb25zdCB7IHJvd0V2ZW4sIHJvd09kZCwgbm9kZUJvcmRlciB9ID0gdGhlbWVWYXJpYWJsZXM7XG4gIHlPZmZzZXRzLnB1c2goMCk7XG4gIGZvciAoY29uc3QgW2ksIHlPZmZzZXQyXSBvZiB5T2Zmc2V0cy5lbnRyaWVzKCkpIHtcbiAgICBpZiAoaSA9PT0gMCAmJiB5T2Zmc2V0cy5sZW5ndGggPiAxKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgaXNFdmVuID0gaSAlIDIgPT09IDAgJiYgeU9mZnNldDIgIT09IDA7XG4gICAgY29uc3Qgcm91Z2hSZWN0MiA9IHJjLnJlY3RhbmdsZSh4LCBuYW1lQkJveC5oZWlnaHQgKyB5ICsgeU9mZnNldDIsIHcsIG5hbWVCQm94LmhlaWdodCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGZpbGw6IGlzRXZlbiA/IHJvd0V2ZW4gOiByb3dPZGQsXG4gICAgICBzdHJva2U6IG5vZGVCb3JkZXJcbiAgICB9KTtcbiAgICBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hSZWN0MiwgXCJnLmxhYmVsXCIpLmF0dHIoXCJzdHlsZVwiLCBjc3NTdHlsZXMuam9pbihcIlwiKSkuYXR0cihcImNsYXNzXCIsIGByb3ctcmVjdC0ke2kgJSAyID09PSAwID8gXCJldmVuXCIgOiBcIm9kZFwifWApO1xuICB9XG4gIGxldCByb3VnaExpbmUgPSByYy5saW5lKHgsIG5hbWVCQm94LmhlaWdodCArIHksIHcgKyB4LCBuYW1lQkJveC5oZWlnaHQgKyB5LCBvcHRpb25zKTtcbiAgc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTGluZSkuYXR0cihcImNsYXNzXCIsIFwiZGl2aWRlclwiKTtcbiAgcm91Z2hMaW5lID0gcmMubGluZShtYXhUeXBlV2lkdGggKyB4LCBuYW1lQkJveC5oZWlnaHQgKyB5LCBtYXhUeXBlV2lkdGggKyB4LCBoICsgeSwgb3B0aW9ucyk7XG4gIHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaExpbmUpLmF0dHIoXCJjbGFzc1wiLCBcImRpdmlkZXJcIik7XG4gIGlmIChrZXlzUHJlc2VudCkge1xuICAgIHJvdWdoTGluZSA9IHJjLmxpbmUoXG4gICAgICBtYXhUeXBlV2lkdGggKyBtYXhOYW1lV2lkdGggKyB4LFxuICAgICAgbmFtZUJCb3guaGVpZ2h0ICsgeSxcbiAgICAgIG1heFR5cGVXaWR0aCArIG1heE5hbWVXaWR0aCArIHgsXG4gICAgICBoICsgeSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaExpbmUpLmF0dHIoXCJjbGFzc1wiLCBcImRpdmlkZXJcIik7XG4gIH1cbiAgaWYgKGNvbW1lbnRQcmVzZW50KSB7XG4gICAgcm91Z2hMaW5lID0gcmMubGluZShcbiAgICAgIG1heFR5cGVXaWR0aCArIG1heE5hbWVXaWR0aCArIG1heEtleXNXaWR0aCArIHgsXG4gICAgICBuYW1lQkJveC5oZWlnaHQgKyB5LFxuICAgICAgbWF4VHlwZVdpZHRoICsgbWF4TmFtZVdpZHRoICsgbWF4S2V5c1dpZHRoICsgeCxcbiAgICAgIGggKyB5LFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTGluZSkuYXR0cihcImNsYXNzXCIsIFwiZGl2aWRlclwiKTtcbiAgfVxuICBmb3IgKGNvbnN0IHlPZmZzZXQyIG9mIHlPZmZzZXRzKSB7XG4gICAgcm91Z2hMaW5lID0gcmMubGluZShcbiAgICAgIHgsXG4gICAgICBuYW1lQkJveC5oZWlnaHQgKyB5ICsgeU9mZnNldDIsXG4gICAgICB3ICsgeCxcbiAgICAgIG5hbWVCQm94LmhlaWdodCArIHkgKyB5T2Zmc2V0MixcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaExpbmUpLmF0dHIoXCJjbGFzc1wiLCBcImRpdmlkZXJcIik7XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCByZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShlckJveCwgXCJlckJveFwiKTtcbmFzeW5jIGZ1bmN0aW9uIGFkZFRleHQoc2hhcGVTdmcsIGxhYmVsVGV4dCwgY29uZmlnLCB0cmFuc2xhdGVYID0gMCwgdHJhbnNsYXRlWSA9IDAsIGNsYXNzZXMgPSBbXSwgc3R5bGUgPSBcIlwiKSB7XG4gIGNvbnN0IGxhYmVsID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgYGxhYmVsICR7Y2xhc3Nlcy5qb2luKFwiIFwiKX1gKS5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt0cmFuc2xhdGVYfSwgJHt0cmFuc2xhdGVZfSlgKS5hdHRyKFwic3R5bGVcIiwgc3R5bGUpO1xuICBpZiAobGFiZWxUZXh0ICE9PSBwYXJzZUdlbmVyaWNUeXBlcyhsYWJlbFRleHQpKSB7XG4gICAgbGFiZWxUZXh0ID0gcGFyc2VHZW5lcmljVHlwZXMobGFiZWxUZXh0KTtcbiAgICBsYWJlbFRleHQgPSBsYWJlbFRleHQucmVwbGFjZUFsbChcIjxcIiwgXCImbHQ7XCIpLnJlcGxhY2VBbGwoXCI+XCIsIFwiJmd0O1wiKTtcbiAgfVxuICBjb25zdCB0ZXh0MiA9IGxhYmVsLm5vZGUoKS5hcHBlbmRDaGlsZChcbiAgICBhd2FpdCBjcmVhdGVUZXh0KFxuICAgICAgbGFiZWwsXG4gICAgICBsYWJlbFRleHQsXG4gICAgICB7XG4gICAgICAgIHdpZHRoOiBjYWxjdWxhdGVUZXh0V2lkdGgobGFiZWxUZXh0LCBjb25maWcpICsgMTAwLFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgdXNlSHRtbExhYmVsczogY29uZmlnLmh0bWxMYWJlbHNcbiAgICAgIH0sXG4gICAgICBjb25maWdcbiAgICApXG4gICk7XG4gIGlmIChsYWJlbFRleHQuaW5jbHVkZXMoXCImbHQ7XCIpIHx8IGxhYmVsVGV4dC5pbmNsdWRlcyhcIiZndDtcIikpIHtcbiAgICBsZXQgY2hpbGQgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBjaGlsZC50ZXh0Q29udGVudCA9IGNoaWxkLnRleHRDb250ZW50LnJlcGxhY2VBbGwoXCImbHQ7XCIsIFwiPFwiKS5yZXBsYWNlQWxsKFwiJmd0O1wiLCBcIj5cIik7XG4gICAgd2hpbGUgKGNoaWxkLmNoaWxkTm9kZXNbMF0pIHtcbiAgICAgIGNoaWxkID0gY2hpbGQuY2hpbGROb2Rlc1swXTtcbiAgICAgIGNoaWxkLnRleHRDb250ZW50ID0gY2hpbGQudGV4dENvbnRlbnQucmVwbGFjZUFsbChcIiZsdDtcIiwgXCI8XCIpLnJlcGxhY2VBbGwoXCImZ3Q7XCIsIFwiPlwiKTtcbiAgICB9XG4gIH1cbiAgbGV0IGJib3ggPSB0ZXh0Mi5nZXRCQm94KCk7XG4gIGlmIChldmFsdWF0ZShjb25maWcuaHRtbExhYmVscykpIHtcbiAgICBjb25zdCBkaXYgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBkaXYuc3R5bGUudGV4dEFsaWduID0gXCJzdGFydFwiO1xuICAgIGNvbnN0IGR2ID0gc2VsZWN0NSh0ZXh0Mik7XG4gICAgYmJveCA9IGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBkdi5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCk7XG4gICAgZHYuYXR0cihcImhlaWdodFwiLCBiYm94LmhlaWdodCk7XG4gIH1cbiAgcmV0dXJuIGJib3g7XG59XG5fX25hbWUoYWRkVGV4dCwgXCJhZGRUZXh0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9jbGFzc0JveC50c1xuaW1wb3J0IHsgc2VsZWN0IGFzIHNlbGVjdDcgfSBmcm9tIFwiZDNcIjtcbmltcG9ydCByb3VnaDU1IGZyb20gXCJyb3VnaGpzXCI7XG5cbi8vIHNyYy9kaWFncmFtcy9jbGFzcy9zaGFwZVV0aWwudHNcbmltcG9ydCB7IHNlbGVjdCBhcyBzZWxlY3Q2IH0gZnJvbSBcImQzXCI7XG5hc3luYyBmdW5jdGlvbiB0ZXh0SGVscGVyKHBhcmVudCwgbm9kZSwgY29uZmlnLCB1c2VIdG1sTGFiZWxzLCBHQVAgPSBjb25maWcuY2xhc3MucGFkZGluZyA/PyAxMikge1xuICBjb25zdCBURVhUX1BBRERJTkcgPSAhdXNlSHRtbExhYmVscyA/IDMgOiAwO1xuICBjb25zdCBzaGFwZVN2ZyA9IHBhcmVudC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBnZXROb2RlQ2xhc3Nlcyhub2RlKSkuYXR0cihcImlkXCIsIG5vZGUuZG9tSWQgfHwgbm9kZS5pZCk7XG4gIGxldCBhbm5vdGF0aW9uR3JvdXAgPSBudWxsO1xuICBsZXQgbGFiZWxHcm91cCA9IG51bGw7XG4gIGxldCBtZW1iZXJzR3JvdXAgPSBudWxsO1xuICBsZXQgbWV0aG9kc0dyb3VwID0gbnVsbDtcbiAgbGV0IGFubm90YXRpb25Hcm91cEhlaWdodCA9IDA7XG4gIGxldCBsYWJlbEdyb3VwSGVpZ2h0ID0gMDtcbiAgbGV0IG1lbWJlcnNHcm91cEhlaWdodCA9IDA7XG4gIGFubm90YXRpb25Hcm91cCA9IHNoYXBlU3ZnLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiYW5ub3RhdGlvbi1ncm91cCB0ZXh0XCIpO1xuICBpZiAobm9kZS5hbm5vdGF0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgYW5ub3RhdGlvbiA9IG5vZGUuYW5ub3RhdGlvbnNbMF07XG4gICAgYXdhaXQgYWRkVGV4dDIoYW5ub3RhdGlvbkdyb3VwLCB7IHRleHQ6IGBcXHhBQiR7YW5ub3RhdGlvbn1cXHhCQmAgfSwgMCk7XG4gICAgY29uc3QgYW5ub3RhdGlvbkdyb3VwQkJveCA9IGFubm90YXRpb25Hcm91cC5ub2RlKCkuZ2V0QkJveCgpO1xuICAgIGFubm90YXRpb25Hcm91cEhlaWdodCA9IGFubm90YXRpb25Hcm91cEJCb3guaGVpZ2h0O1xuICB9XG4gIGxhYmVsR3JvdXAgPSBzaGFwZVN2Zy5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsLWdyb3VwIHRleHRcIik7XG4gIGF3YWl0IGFkZFRleHQyKGxhYmVsR3JvdXAsIG5vZGUsIDAsIFtcImZvbnQtd2VpZ2h0OiBib2xkZXJcIl0pO1xuICBjb25zdCBsYWJlbEdyb3VwQkJveCA9IGxhYmVsR3JvdXAubm9kZSgpLmdldEJCb3goKTtcbiAgbGFiZWxHcm91cEhlaWdodCA9IGxhYmVsR3JvdXBCQm94LmhlaWdodDtcbiAgbWVtYmVyc0dyb3VwID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJtZW1iZXJzLWdyb3VwIHRleHRcIik7XG4gIGxldCB5T2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBtZW1iZXIgb2Ygbm9kZS5tZW1iZXJzKSB7XG4gICAgY29uc3QgaGVpZ2h0ID0gYXdhaXQgYWRkVGV4dDIobWVtYmVyc0dyb3VwLCBtZW1iZXIsIHlPZmZzZXQsIFttZW1iZXIucGFyc2VDbGFzc2lmaWVyKCldKTtcbiAgICB5T2Zmc2V0ICs9IGhlaWdodCArIFRFWFRfUEFERElORztcbiAgfVxuICBtZW1iZXJzR3JvdXBIZWlnaHQgPSBtZW1iZXJzR3JvdXAubm9kZSgpLmdldEJCb3goKS5oZWlnaHQ7XG4gIGlmIChtZW1iZXJzR3JvdXBIZWlnaHQgPD0gMCkge1xuICAgIG1lbWJlcnNHcm91cEhlaWdodCA9IEdBUCAvIDI7XG4gIH1cbiAgbWV0aG9kc0dyb3VwID0gc2hhcGVTdmcuaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJtZXRob2RzLWdyb3VwIHRleHRcIik7XG4gIGxldCBtZXRob2RzWU9mZnNldCA9IDA7XG4gIGZvciAoY29uc3QgbWV0aG9kIG9mIG5vZGUubWV0aG9kcykge1xuICAgIGNvbnN0IGhlaWdodCA9IGF3YWl0IGFkZFRleHQyKG1ldGhvZHNHcm91cCwgbWV0aG9kLCBtZXRob2RzWU9mZnNldCwgW21ldGhvZC5wYXJzZUNsYXNzaWZpZXIoKV0pO1xuICAgIG1ldGhvZHNZT2Zmc2V0ICs9IGhlaWdodCArIFRFWFRfUEFERElORztcbiAgfVxuICBsZXQgYmJveCA9IHNoYXBlU3ZnLm5vZGUoKS5nZXRCQm94KCk7XG4gIGlmIChhbm5vdGF0aW9uR3JvdXAgIT09IG51bGwpIHtcbiAgICBjb25zdCBhbm5vdGF0aW9uR3JvdXBCQm94ID0gYW5ub3RhdGlvbkdyb3VwLm5vZGUoKS5nZXRCQm94KCk7XG4gICAgYW5ub3RhdGlvbkdyb3VwLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey1hbm5vdGF0aW9uR3JvdXBCQm94LndpZHRoIC8gMn0pYCk7XG4gIH1cbiAgbGFiZWxHcm91cC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHstbGFiZWxHcm91cEJCb3gud2lkdGggLyAyfSwgJHthbm5vdGF0aW9uR3JvdXBIZWlnaHR9KWApO1xuICBiYm94ID0gc2hhcGVTdmcubm9kZSgpLmdldEJCb3goKTtcbiAgbWVtYmVyc0dyb3VwLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBgdHJhbnNsYXRlKCR7MH0sICR7YW5ub3RhdGlvbkdyb3VwSGVpZ2h0ICsgbGFiZWxHcm91cEhlaWdodCArIEdBUCAqIDJ9KWBcbiAgKTtcbiAgYmJveCA9IHNoYXBlU3ZnLm5vZGUoKS5nZXRCQm94KCk7XG4gIG1ldGhvZHNHcm91cC5hdHRyKFxuICAgIFwidHJhbnNmb3JtXCIsXG4gICAgYHRyYW5zbGF0ZSgkezB9LCAke2Fubm90YXRpb25Hcm91cEhlaWdodCArIGxhYmVsR3JvdXBIZWlnaHQgKyAobWVtYmVyc0dyb3VwSGVpZ2h0ID8gbWVtYmVyc0dyb3VwSGVpZ2h0ICsgR0FQICogNCA6IEdBUCAqIDIpfSlgXG4gICk7XG4gIGJib3ggPSBzaGFwZVN2Zy5ub2RlKCkuZ2V0QkJveCgpO1xuICByZXR1cm4geyBzaGFwZVN2ZywgYmJveCB9O1xufVxuX19uYW1lKHRleHRIZWxwZXIsIFwidGV4dEhlbHBlclwiKTtcbmFzeW5jIGZ1bmN0aW9uIGFkZFRleHQyKHBhcmVudEdyb3VwLCBub2RlLCB5T2Zmc2V0LCBzdHlsZXMgPSBbXSkge1xuICBjb25zdCB0ZXh0RWwgPSBwYXJlbnRHcm91cC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpLmF0dHIoXCJzdHlsZVwiLCBzdHlsZXMuam9pbihcIjsgXCIpKTtcbiAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnKCk7XG4gIGxldCB1c2VIdG1sTGFiZWxzID0gXCJ1c2VIdG1sTGFiZWxzXCIgaW4gbm9kZSA/IG5vZGUudXNlSHRtbExhYmVscyA6IGV2YWx1YXRlKGNvbmZpZy5odG1sTGFiZWxzKSA/PyB0cnVlO1xuICBsZXQgdGV4dENvbnRlbnQgPSBcIlwiO1xuICBpZiAoXCJ0ZXh0XCIgaW4gbm9kZSkge1xuICAgIHRleHRDb250ZW50ID0gbm9kZS50ZXh0O1xuICB9IGVsc2Uge1xuICAgIHRleHRDb250ZW50ID0gbm9kZS5sYWJlbDtcbiAgfVxuICBpZiAoIXVzZUh0bWxMYWJlbHMgJiYgdGV4dENvbnRlbnQuc3RhcnRzV2l0aChcIlxcXFxcIikpIHtcbiAgICB0ZXh0Q29udGVudCA9IHRleHRDb250ZW50LnN1YnN0cmluZygxKTtcbiAgfVxuICBpZiAoaGFzS2F0ZXgodGV4dENvbnRlbnQpKSB7XG4gICAgdXNlSHRtbExhYmVscyA9IHRydWU7XG4gIH1cbiAgY29uc3QgdGV4dDIgPSBhd2FpdCBjcmVhdGVUZXh0KFxuICAgIHRleHRFbCxcbiAgICBzYW5pdGl6ZVRleHQyKGRlY29kZUVudGl0aWVzKHRleHRDb250ZW50KSksXG4gICAge1xuICAgICAgd2lkdGg6IGNhbGN1bGF0ZVRleHRXaWR0aCh0ZXh0Q29udGVudCwgY29uZmlnKSArIDUwLFxuICAgICAgLy8gQWRkIHJvb20gZm9yIGVycm9yIHdoZW4gc3BsaXR0aW5nIHRleHQgaW50byBtdWx0aXBsZSBsaW5lc1xuICAgICAgY2xhc3NlczogXCJtYXJrZG93bi1ub2RlLWxhYmVsXCIsXG4gICAgICB1c2VIdG1sTGFiZWxzXG4gICAgfSxcbiAgICBjb25maWdcbiAgKTtcbiAgbGV0IGJib3g7XG4gIGxldCBudW1iZXJPZkxpbmVzID0gMTtcbiAgaWYgKCF1c2VIdG1sTGFiZWxzKSB7XG4gICAgaWYgKHN0eWxlcy5pbmNsdWRlcyhcImZvbnQtd2VpZ2h0OiBib2xkZXJcIikpIHtcbiAgICAgIHNlbGVjdDYodGV4dDIpLnNlbGVjdEFsbChcInRzcGFuXCIpLmF0dHIoXCJmb250LXdlaWdodFwiLCBcIlwiKTtcbiAgICB9XG4gICAgbnVtYmVyT2ZMaW5lcyA9IHRleHQyLmNoaWxkcmVuLmxlbmd0aDtcbiAgICBjb25zdCB0ZXh0Q2hpbGQgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBpZiAodGV4dDIudGV4dENvbnRlbnQgPT09IFwiXCIgfHwgdGV4dDIudGV4dENvbnRlbnQuaW5jbHVkZXMoXCImZ3RcIikpIHtcbiAgICAgIHRleHRDaGlsZC50ZXh0Q29udGVudCA9IHRleHRDb250ZW50WzBdICsgdGV4dENvbnRlbnQuc3Vic3RyaW5nKDEpLnJlcGxhY2VBbGwoXCImZ3Q7XCIsIFwiPlwiKS5yZXBsYWNlQWxsKFwiJmx0O1wiLCBcIjxcIikudHJpbSgpO1xuICAgICAgY29uc3QgcHJlc2VydmVTcGFjZSA9IHRleHRDb250ZW50WzFdID09PSBcIiBcIjtcbiAgICAgIGlmIChwcmVzZXJ2ZVNwYWNlKSB7XG4gICAgICAgIHRleHRDaGlsZC50ZXh0Q29udGVudCA9IHRleHRDaGlsZC50ZXh0Q29udGVudFswXSArIFwiIFwiICsgdGV4dENoaWxkLnRleHRDb250ZW50LnN1YnN0cmluZygxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRleHRDaGlsZC50ZXh0Q29udGVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGV4dENoaWxkLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gICAgYmJveCA9IHRleHQyLmdldEJCb3goKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkaXYgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBjb25zdCBkdiA9IHNlbGVjdDYodGV4dDIpO1xuICAgIG51bWJlck9mTGluZXMgPSBkaXYuaW5uZXJIVE1MLnNwbGl0KFwiPGJyPlwiKS5sZW5ndGg7XG4gICAgaWYgKGRpdi5pbm5lckhUTUwuaW5jbHVkZXMoXCI8L21hdGg+XCIpKSB7XG4gICAgICBudW1iZXJPZkxpbmVzICs9IGRpdi5pbm5lckhUTUwuc3BsaXQoXCI8bXJvdz5cIikubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgY29uc3QgaW1hZ2VzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW1nXCIpO1xuICAgIGlmIChpbWFnZXMpIHtcbiAgICAgIGNvbnN0IG5vSW1nVGV4dCA9IHRleHRDb250ZW50LnJlcGxhY2UoLzxpbWdbXj5dKj4vZywgXCJcIikudHJpbSgpID09PSBcIlwiO1xuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIFsuLi5pbWFnZXNdLm1hcChcbiAgICAgICAgICAoaW1nKSA9PiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzZXR1cEltYWdlKCkge1xuICAgICAgICAgICAgICBpbWcuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgICAgICAgICAgICBpbWcuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwiY29sdW1uXCI7XG4gICAgICAgICAgICAgIGlmIChub0ltZ1RleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5Rm9udFNpemUgPSBjb25maWcuZm9udFNpemU/LnRvU3RyaW5nKCkgPz8gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSkuZm9udFNpemU7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5sYXJnaW5nRmFjdG9yID0gNTtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IHBhcnNlSW50KGJvZHlGb250U2l6ZSwgMTApICogZW5sYXJnaW5nRmFjdG9yICsgXCJweFwiO1xuICAgICAgICAgICAgICAgIGltZy5zdHlsZS5taW5XaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICAgIGltZy5zdHlsZS5tYXhXaWR0aCA9IHdpZHRoO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGltZy5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcyhpbWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX19uYW1lKHNldHVwSW1hZ2UsIFwic2V0dXBJbWFnZVwiKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoaW1nLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgc2V0dXBJbWFnZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgc2V0dXBJbWFnZSk7XG4gICAgICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgc2V0dXBJbWFnZSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gICAgYmJveCA9IGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBkdi5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCk7XG4gICAgZHYuYXR0cihcImhlaWdodFwiLCBiYm94LmhlaWdodCk7XG4gIH1cbiAgdGV4dEVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArICgtYmJveC5oZWlnaHQgLyAoMiAqIG51bWJlck9mTGluZXMpICsgeU9mZnNldCkgKyBcIilcIik7XG4gIHJldHVybiBiYm94LmhlaWdodDtcbn1cbl9fbmFtZShhZGRUZXh0MiwgXCJhZGRUZXh0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9jbGFzc0JveC50c1xuYXN5bmMgZnVuY3Rpb24gY2xhc3NCb3gocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZzIoKTtcbiAgY29uc3QgUEFERElORyA9IGNvbmZpZy5jbGFzcy5wYWRkaW5nID8/IDEyO1xuICBjb25zdCBHQVAgPSBQQURESU5HO1xuICBjb25zdCB1c2VIdG1sTGFiZWxzID0gbm9kZS51c2VIdG1sTGFiZWxzID8/IGV2YWx1YXRlKGNvbmZpZy5odG1sTGFiZWxzKSA/PyB0cnVlO1xuICBjb25zdCBjbGFzc05vZGUgPSBub2RlO1xuICBjbGFzc05vZGUuYW5ub3RhdGlvbnMgPSBjbGFzc05vZGUuYW5ub3RhdGlvbnMgPz8gW107XG4gIGNsYXNzTm9kZS5tZW1iZXJzID0gY2xhc3NOb2RlLm1lbWJlcnMgPz8gW107XG4gIGNsYXNzTm9kZS5tZXRob2RzID0gY2xhc3NOb2RlLm1ldGhvZHMgPz8gW107XG4gIGNvbnN0IHsgc2hhcGVTdmcsIGJib3ggfSA9IGF3YWl0IHRleHRIZWxwZXIocGFyZW50LCBub2RlLCBjb25maWcsIHVzZUh0bWxMYWJlbHMsIEdBUCk7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBub2RlLmNzc1N0eWxlcyA9IGNsYXNzTm9kZS5zdHlsZXMgfHwgXCJcIjtcbiAgY29uc3Qgc3R5bGVzID0gY2xhc3NOb2RlLnN0eWxlcz8uam9pbihcIjtcIikgfHwgbm9kZVN0eWxlcyB8fCBcIlwiO1xuICBpZiAoIW5vZGUuY3NzU3R5bGVzKSB7XG4gICAgbm9kZS5jc3NTdHlsZXMgPSBzdHlsZXMucmVwbGFjZUFsbChcIiFpbXBvcnRhbnRcIiwgXCJcIikuc3BsaXQoXCI7XCIpO1xuICB9XG4gIGNvbnN0IHJlbmRlckV4dHJhQm94ID0gY2xhc3NOb2RlLm1lbWJlcnMubGVuZ3RoID09PSAwICYmIGNsYXNzTm9kZS5tZXRob2RzLmxlbmd0aCA9PT0gMCAmJiAhY29uZmlnLmNsYXNzPy5oaWRlRW1wdHlNZW1iZXJzQm94O1xuICBjb25zdCByYyA9IHJvdWdoNTUuc3ZnKHNoYXBlU3ZnKTtcbiAgY29uc3Qgb3B0aW9ucyA9IHVzZXJOb2RlT3ZlcnJpZGVzKG5vZGUsIHt9KTtcbiAgaWYgKG5vZGUubG9vayAhPT0gXCJoYW5kRHJhd25cIikge1xuICAgIG9wdGlvbnMucm91Z2huZXNzID0gMDtcbiAgICBvcHRpb25zLmZpbGxTdHlsZSA9IFwic29saWRcIjtcbiAgfVxuICBjb25zdCB3ID0gYmJveC53aWR0aDtcbiAgbGV0IGggPSBiYm94LmhlaWdodDtcbiAgaWYgKGNsYXNzTm9kZS5tZW1iZXJzLmxlbmd0aCA9PT0gMCAmJiBjbGFzc05vZGUubWV0aG9kcy5sZW5ndGggPT09IDApIHtcbiAgICBoICs9IEdBUDtcbiAgfSBlbHNlIGlmIChjbGFzc05vZGUubWVtYmVycy5sZW5ndGggPiAwICYmIGNsYXNzTm9kZS5tZXRob2RzLmxlbmd0aCA9PT0gMCkge1xuICAgIGggKz0gR0FQICogMjtcbiAgfVxuICBjb25zdCB4ID0gLXcgLyAyO1xuICBjb25zdCB5ID0gLWggLyAyO1xuICBjb25zdCByb3VnaFJlY3QgPSByYy5yZWN0YW5nbGUoXG4gICAgeCAtIFBBRERJTkcsXG4gICAgeSAtIFBBRERJTkcgLSAocmVuZGVyRXh0cmFCb3ggPyBQQURESU5HIDogY2xhc3NOb2RlLm1lbWJlcnMubGVuZ3RoID09PSAwICYmIGNsYXNzTm9kZS5tZXRob2RzLmxlbmd0aCA9PT0gMCA/IC1QQURESU5HIC8gMiA6IDApLFxuICAgIHcgKyAyICogUEFERElORyxcbiAgICBoICsgMiAqIFBBRERJTkcgKyAocmVuZGVyRXh0cmFCb3ggPyBQQURESU5HICogMiA6IGNsYXNzTm9kZS5tZW1iZXJzLmxlbmd0aCA9PT0gMCAmJiBjbGFzc05vZGUubWV0aG9kcy5sZW5ndGggPT09IDAgPyAtUEFERElORyA6IDApLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hSZWN0LCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcmVjdDIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpO1xuICBjb25zdCByZWN0QkJveCA9IHJlY3QyLm5vZGUoKS5nZXRCQm94KCk7XG4gIHNoYXBlU3ZnLnNlbGVjdEFsbChcIi50ZXh0XCIpLmVhY2goKF8sIGksIG5vZGVzKSA9PiB7XG4gICAgY29uc3QgdGV4dDIgPSBzZWxlY3Q3KG5vZGVzW2ldKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSB0ZXh0Mi5hdHRyKFwidHJhbnNmb3JtXCIpO1xuICAgIGxldCB0cmFuc2xhdGVZID0gMDtcbiAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICBjb25zdCByZWdleCA9IFJlZ0V4cCgvdHJhbnNsYXRlXFwoKFteLF0rKSwoW14pXSspXFwpLyk7XG4gICAgICBjb25zdCB0cmFuc2xhdGUgPSByZWdleC5leGVjKHRyYW5zZm9ybSk7XG4gICAgICBpZiAodHJhbnNsYXRlKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSBwYXJzZUZsb2F0KHRyYW5zbGF0ZVsyXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBuZXdUcmFuc2xhdGVZID0gdHJhbnNsYXRlWSArIHkgKyBQQURESU5HIC0gKHJlbmRlckV4dHJhQm94ID8gUEFERElORyA6IGNsYXNzTm9kZS5tZW1iZXJzLmxlbmd0aCA9PT0gMCAmJiBjbGFzc05vZGUubWV0aG9kcy5sZW5ndGggPT09IDAgPyAtUEFERElORyAvIDIgOiAwKTtcbiAgICBpZiAoIXVzZUh0bWxMYWJlbHMpIHtcbiAgICAgIG5ld1RyYW5zbGF0ZVkgLT0gNDtcbiAgICB9XG4gICAgbGV0IG5ld1RyYW5zbGF0ZVggPSB4O1xuICAgIGlmICh0ZXh0Mi5hdHRyKFwiY2xhc3NcIikuaW5jbHVkZXMoXCJsYWJlbC1ncm91cFwiKSB8fCB0ZXh0Mi5hdHRyKFwiY2xhc3NcIikuaW5jbHVkZXMoXCJhbm5vdGF0aW9uLWdyb3VwXCIpKSB7XG4gICAgICBuZXdUcmFuc2xhdGVYID0gLXRleHQyLm5vZGUoKT8uZ2V0QkJveCgpLndpZHRoIC8gMiB8fCAwO1xuICAgICAgc2hhcGVTdmcuc2VsZWN0QWxsKFwidGV4dFwiKS5lYWNoKGZ1bmN0aW9uKF8yLCBpMiwgbm9kZXMyKSB7XG4gICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlczJbaTJdKS50ZXh0QW5jaG9yID09PSBcIm1pZGRsZVwiKSB7XG4gICAgICAgICAgbmV3VHJhbnNsYXRlWCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICB0ZXh0Mi5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHtuZXdUcmFuc2xhdGVYfSwgJHtuZXdUcmFuc2xhdGVZfSlgKTtcbiAgfSk7XG4gIGNvbnN0IGFubm90YXRpb25Hcm91cEhlaWdodCA9IHNoYXBlU3ZnLnNlbGVjdChcIi5hbm5vdGF0aW9uLWdyb3VwXCIpLm5vZGUoKS5nZXRCQm94KCkuaGVpZ2h0IC0gKHJlbmRlckV4dHJhQm94ID8gUEFERElORyAvIDIgOiAwKSB8fCAwO1xuICBjb25zdCBsYWJlbEdyb3VwSGVpZ2h0ID0gc2hhcGVTdmcuc2VsZWN0KFwiLmxhYmVsLWdyb3VwXCIpLm5vZGUoKS5nZXRCQm94KCkuaGVpZ2h0IC0gKHJlbmRlckV4dHJhQm94ID8gUEFERElORyAvIDIgOiAwKSB8fCAwO1xuICBjb25zdCBtZW1iZXJzR3JvdXBIZWlnaHQgPSBzaGFwZVN2Zy5zZWxlY3QoXCIubWVtYmVycy1ncm91cFwiKS5ub2RlKCkuZ2V0QkJveCgpLmhlaWdodCAtIChyZW5kZXJFeHRyYUJveCA/IFBBRERJTkcgLyAyIDogMCkgfHwgMDtcbiAgaWYgKGNsYXNzTm9kZS5tZW1iZXJzLmxlbmd0aCA+IDAgfHwgY2xhc3NOb2RlLm1ldGhvZHMubGVuZ3RoID4gMCB8fCByZW5kZXJFeHRyYUJveCkge1xuICAgIGNvbnN0IHJvdWdoTGluZSA9IHJjLmxpbmUoXG4gICAgICByZWN0QkJveC54LFxuICAgICAgYW5ub3RhdGlvbkdyb3VwSGVpZ2h0ICsgbGFiZWxHcm91cEhlaWdodCArIHkgKyBQQURESU5HLFxuICAgICAgcmVjdEJCb3gueCArIHJlY3RCQm94LndpZHRoLFxuICAgICAgYW5ub3RhdGlvbkdyb3VwSGVpZ2h0ICsgbGFiZWxHcm91cEhlaWdodCArIHkgKyBQQURESU5HLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgY29uc3QgbGluZSA9IHNoYXBlU3ZnLmluc2VydCgoKSA9PiByb3VnaExpbmUpO1xuICAgIGxpbmUuYXR0cihcImNsYXNzXCIsIFwiZGl2aWRlclwiKS5hdHRyKFwic3R5bGVcIiwgc3R5bGVzKTtcbiAgfVxuICBpZiAocmVuZGVyRXh0cmFCb3ggfHwgY2xhc3NOb2RlLm1lbWJlcnMubGVuZ3RoID4gMCB8fCBjbGFzc05vZGUubWV0aG9kcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgcm91Z2hMaW5lID0gcmMubGluZShcbiAgICAgIHJlY3RCQm94LngsXG4gICAgICBhbm5vdGF0aW9uR3JvdXBIZWlnaHQgKyBsYWJlbEdyb3VwSGVpZ2h0ICsgbWVtYmVyc0dyb3VwSGVpZ2h0ICsgeSArIEdBUCAqIDIgKyBQQURESU5HLFxuICAgICAgcmVjdEJCb3gueCArIHJlY3RCQm94LndpZHRoLFxuICAgICAgYW5ub3RhdGlvbkdyb3VwSGVpZ2h0ICsgbGFiZWxHcm91cEhlaWdodCArIG1lbWJlcnNHcm91cEhlaWdodCArIHkgKyBQQURESU5HICsgR0FQICogMixcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGxpbmUgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hMaW5lKTtcbiAgICBsaW5lLmF0dHIoXCJjbGFzc1wiLCBcImRpdmlkZXJcIikuYXR0cihcInN0eWxlXCIsIHN0eWxlcyk7XG4gIH1cbiAgaWYgKGNsYXNzTm9kZS5sb29rICE9PSBcImhhbmREcmF3blwiKSB7XG4gICAgc2hhcGVTdmcuc2VsZWN0QWxsKFwicGF0aFwiKS5hdHRyKFwic3R5bGVcIiwgc3R5bGVzKTtcbiAgfVxuICByZWN0Mi5zZWxlY3QoXCI6bnRoLWNoaWxkKDIpXCIpLmF0dHIoXCJzdHlsZVwiLCBzdHlsZXMpO1xuICBzaGFwZVN2Zy5zZWxlY3RBbGwoXCIuZGl2aWRlclwiKS5zZWxlY3QoXCJwYXRoXCIpLmF0dHIoXCJzdHlsZVwiLCBzdHlsZXMpO1xuICBpZiAobm9kZS5sYWJlbFN0eWxlKSB7XG4gICAgc2hhcGVTdmcuc2VsZWN0QWxsKFwic3BhblwiKS5hdHRyKFwic3R5bGVcIiwgbm9kZS5sYWJlbFN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICBzaGFwZVN2Zy5zZWxlY3RBbGwoXCJzcGFuXCIpLmF0dHIoXCJzdHlsZVwiLCBzdHlsZXMpO1xuICB9XG4gIGlmICghdXNlSHRtbExhYmVscykge1xuICAgIGNvbnN0IGNvbG9yUmVnZXggPSBSZWdFeHAoL2NvbG9yXFxzKjpcXHMqKFteO10qKS8pO1xuICAgIGNvbnN0IG1hdGNoID0gY29sb3JSZWdleC5leGVjKHN0eWxlcyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBjb2xvclN0eWxlID0gbWF0Y2hbMF0ucmVwbGFjZShcImNvbG9yXCIsIFwiZmlsbFwiKTtcbiAgICAgIHNoYXBlU3ZnLnNlbGVjdEFsbChcInRzcGFuXCIpLmF0dHIoXCJzdHlsZVwiLCBjb2xvclN0eWxlKTtcbiAgICB9IGVsc2UgaWYgKGxhYmVsU3R5bGVzKSB7XG4gICAgICBjb25zdCBtYXRjaDIgPSBjb2xvclJlZ2V4LmV4ZWMobGFiZWxTdHlsZXMpO1xuICAgICAgaWYgKG1hdGNoMikge1xuICAgICAgICBjb25zdCBjb2xvclN0eWxlID0gbWF0Y2gyWzBdLnJlcGxhY2UoXCJjb2xvclwiLCBcImZpbGxcIik7XG4gICAgICAgIHNoYXBlU3ZnLnNlbGVjdEFsbChcInRzcGFuXCIpLmF0dHIoXCJzdHlsZVwiLCBjb2xvclN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdXBkYXRlTm9kZUJvdW5kcyhub2RlLCByZWN0Mik7XG4gIG5vZGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24ocG9pbnQpIHtcbiAgICByZXR1cm4gaW50ZXJzZWN0X2RlZmF1bHQucmVjdChub2RlLCBwb2ludCk7XG4gIH07XG4gIHJldHVybiBzaGFwZVN2Zztcbn1cbl9fbmFtZShjbGFzc0JveCwgXCJjbGFzc0JveFwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9zaGFwZXMvcmVxdWlyZW1lbnRCb3gudHNcbmltcG9ydCByb3VnaDU2IGZyb20gXCJyb3VnaGpzXCI7XG5pbXBvcnQgeyBzZWxlY3QgYXMgc2VsZWN0OCB9IGZyb20gXCJkM1wiO1xuYXN5bmMgZnVuY3Rpb24gcmVxdWlyZW1lbnRCb3gocGFyZW50LCBub2RlKSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcobm9kZSk7XG4gIG5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzO1xuICBjb25zdCByZXF1aXJlbWVudE5vZGUgPSBub2RlO1xuICBjb25zdCBlbGVtZW50Tm9kZSA9IG5vZGU7XG4gIGNvbnN0IHBhZGRpbmcgPSAyMDtcbiAgY29uc3QgZ2FwID0gMjA7XG4gIGNvbnN0IGlzUmVxdWlyZW1lbnROb2RlID0gXCJ2ZXJpZnlNZXRob2RcIiBpbiBub2RlO1xuICBjb25zdCBjbGFzc2VzID0gZ2V0Tm9kZUNsYXNzZXMobm9kZSk7XG4gIGNvbnN0IHNoYXBlU3ZnID0gcGFyZW50Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIGNsYXNzZXMpLmF0dHIoXCJpZFwiLCBub2RlLmRvbUlkID8/IG5vZGUuaWQpO1xuICBsZXQgdHlwZUhlaWdodDtcbiAgaWYgKGlzUmVxdWlyZW1lbnROb2RlKSB7XG4gICAgdHlwZUhlaWdodCA9IGF3YWl0IGFkZFRleHQzKFxuICAgICAgc2hhcGVTdmcsXG4gICAgICBgJmx0OyZsdDske3JlcXVpcmVtZW50Tm9kZS50eXBlfSZndDsmZ3Q7YCxcbiAgICAgIDAsXG4gICAgICBub2RlLmxhYmVsU3R5bGVcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHR5cGVIZWlnaHQgPSBhd2FpdCBhZGRUZXh0MyhzaGFwZVN2ZywgXCImbHQ7Jmx0O0VsZW1lbnQmZ3Q7Jmd0O1wiLCAwLCBub2RlLmxhYmVsU3R5bGUpO1xuICB9XG4gIGxldCBhY2N1bXVsYXRpdmVIZWlnaHQgPSB0eXBlSGVpZ2h0O1xuICBjb25zdCBuYW1lSGVpZ2h0ID0gYXdhaXQgYWRkVGV4dDMoXG4gICAgc2hhcGVTdmcsXG4gICAgcmVxdWlyZW1lbnROb2RlLm5hbWUsXG4gICAgYWNjdW11bGF0aXZlSGVpZ2h0LFxuICAgIG5vZGUubGFiZWxTdHlsZSArIFwiOyBmb250LXdlaWdodDogYm9sZDtcIlxuICApO1xuICBhY2N1bXVsYXRpdmVIZWlnaHQgKz0gbmFtZUhlaWdodCArIGdhcDtcbiAgaWYgKGlzUmVxdWlyZW1lbnROb2RlKSB7XG4gICAgY29uc3QgaWRIZWlnaHQgPSBhd2FpdCBhZGRUZXh0MyhcbiAgICAgIHNoYXBlU3ZnLFxuICAgICAgYCR7cmVxdWlyZW1lbnROb2RlLnJlcXVpcmVtZW50SWQgPyBgSWQ6ICR7cmVxdWlyZW1lbnROb2RlLnJlcXVpcmVtZW50SWR9YCA6IFwiXCJ9YCxcbiAgICAgIGFjY3VtdWxhdGl2ZUhlaWdodCxcbiAgICAgIG5vZGUubGFiZWxTdHlsZVxuICAgICk7XG4gICAgYWNjdW11bGF0aXZlSGVpZ2h0ICs9IGlkSGVpZ2h0O1xuICAgIGNvbnN0IHRleHRIZWlnaHQgPSBhd2FpdCBhZGRUZXh0MyhcbiAgICAgIHNoYXBlU3ZnLFxuICAgICAgYCR7cmVxdWlyZW1lbnROb2RlLnRleHQgPyBgVGV4dDogJHtyZXF1aXJlbWVudE5vZGUudGV4dH1gIDogXCJcIn1gLFxuICAgICAgYWNjdW11bGF0aXZlSGVpZ2h0LFxuICAgICAgbm9kZS5sYWJlbFN0eWxlXG4gICAgKTtcbiAgICBhY2N1bXVsYXRpdmVIZWlnaHQgKz0gdGV4dEhlaWdodDtcbiAgICBjb25zdCByaXNrSGVpZ2h0ID0gYXdhaXQgYWRkVGV4dDMoXG4gICAgICBzaGFwZVN2ZyxcbiAgICAgIGAke3JlcXVpcmVtZW50Tm9kZS5yaXNrID8gYFJpc2s6ICR7cmVxdWlyZW1lbnROb2RlLnJpc2t9YCA6IFwiXCJ9YCxcbiAgICAgIGFjY3VtdWxhdGl2ZUhlaWdodCxcbiAgICAgIG5vZGUubGFiZWxTdHlsZVxuICAgICk7XG4gICAgYWNjdW11bGF0aXZlSGVpZ2h0ICs9IHJpc2tIZWlnaHQ7XG4gICAgYXdhaXQgYWRkVGV4dDMoXG4gICAgICBzaGFwZVN2ZyxcbiAgICAgIGAke3JlcXVpcmVtZW50Tm9kZS52ZXJpZnlNZXRob2QgPyBgVmVyaWZpY2F0aW9uOiAke3JlcXVpcmVtZW50Tm9kZS52ZXJpZnlNZXRob2R9YCA6IFwiXCJ9YCxcbiAgICAgIGFjY3VtdWxhdGl2ZUhlaWdodCxcbiAgICAgIG5vZGUubGFiZWxTdHlsZVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdHlwZUhlaWdodDIgPSBhd2FpdCBhZGRUZXh0MyhcbiAgICAgIHNoYXBlU3ZnLFxuICAgICAgYCR7ZWxlbWVudE5vZGUudHlwZSA/IGBUeXBlOiAke2VsZW1lbnROb2RlLnR5cGV9YCA6IFwiXCJ9YCxcbiAgICAgIGFjY3VtdWxhdGl2ZUhlaWdodCxcbiAgICAgIG5vZGUubGFiZWxTdHlsZVxuICAgICk7XG4gICAgYWNjdW11bGF0aXZlSGVpZ2h0ICs9IHR5cGVIZWlnaHQyO1xuICAgIGF3YWl0IGFkZFRleHQzKFxuICAgICAgc2hhcGVTdmcsXG4gICAgICBgJHtlbGVtZW50Tm9kZS5kb2NSZWYgPyBgRG9jIFJlZjogJHtlbGVtZW50Tm9kZS5kb2NSZWZ9YCA6IFwiXCJ9YCxcbiAgICAgIGFjY3VtdWxhdGl2ZUhlaWdodCxcbiAgICAgIG5vZGUubGFiZWxTdHlsZVxuICAgICk7XG4gIH1cbiAgY29uc3QgdG90YWxXaWR0aCA9IChzaGFwZVN2Zy5ub2RlKCk/LmdldEJCb3goKS53aWR0aCA/PyAyMDApICsgcGFkZGluZztcbiAgY29uc3QgdG90YWxIZWlnaHQgPSAoc2hhcGVTdmcubm9kZSgpPy5nZXRCQm94KCkuaGVpZ2h0ID8/IDIwMCkgKyBwYWRkaW5nO1xuICBjb25zdCB4ID0gLXRvdGFsV2lkdGggLyAyO1xuICBjb25zdCB5ID0gLXRvdGFsSGVpZ2h0IC8gMjtcbiAgY29uc3QgcmMgPSByb3VnaDU2LnN2ZyhzaGFwZVN2Zyk7XG4gIGNvbnN0IG9wdGlvbnMgPSB1c2VyTm9kZU92ZXJyaWRlcyhub2RlLCB7fSk7XG4gIGlmIChub2RlLmxvb2sgIT09IFwiaGFuZERyYXduXCIpIHtcbiAgICBvcHRpb25zLnJvdWdobmVzcyA9IDA7XG4gICAgb3B0aW9ucy5maWxsU3R5bGUgPSBcInNvbGlkXCI7XG4gIH1cbiAgY29uc3Qgcm91Z2hSZWN0ID0gcmMucmVjdGFuZ2xlKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCBvcHRpb25zKTtcbiAgY29uc3QgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hSZWN0LCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgcmVjdDIuYXR0cihcImNsYXNzXCIsIFwiYmFzaWMgbGFiZWwtY29udGFpbmVyXCIpLmF0dHIoXCJzdHlsZVwiLCBub2RlU3R5bGVzKTtcbiAgc2hhcGVTdmcuc2VsZWN0QWxsKFwiLmxhYmVsXCIpLmVhY2goKF8sIGksIG5vZGVzKSA9PiB7XG4gICAgY29uc3QgdGV4dDIgPSBzZWxlY3Q4KG5vZGVzW2ldKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSB0ZXh0Mi5hdHRyKFwidHJhbnNmb3JtXCIpO1xuICAgIGxldCB0cmFuc2xhdGVYID0gMDtcbiAgICBsZXQgdHJhbnNsYXRlWSA9IDA7XG4gICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgY29uc3QgcmVnZXggPSBSZWdFeHAoL3RyYW5zbGF0ZVxcKChbXixdKyksKFteKV0rKVxcKS8pO1xuICAgICAgY29uc3QgdHJhbnNsYXRlID0gcmVnZXguZXhlYyh0cmFuc2Zvcm0pO1xuICAgICAgaWYgKHRyYW5zbGF0ZSkge1xuICAgICAgICB0cmFuc2xhdGVYID0gcGFyc2VGbG9hdCh0cmFuc2xhdGVbMV0pO1xuICAgICAgICB0cmFuc2xhdGVZID0gcGFyc2VGbG9hdCh0cmFuc2xhdGVbMl0pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBuZXdUcmFuc2xhdGVZID0gdHJhbnNsYXRlWSAtIHRvdGFsSGVpZ2h0IC8gMjtcbiAgICBsZXQgbmV3VHJhbnNsYXRlWCA9IHggKyBwYWRkaW5nIC8gMjtcbiAgICBpZiAoaSA9PT0gMCB8fCBpID09PSAxKSB7XG4gICAgICBuZXdUcmFuc2xhdGVYID0gdHJhbnNsYXRlWDtcbiAgICB9XG4gICAgdGV4dDIuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bmV3VHJhbnNsYXRlWH0sICR7bmV3VHJhbnNsYXRlWSArIHBhZGRpbmd9KWApO1xuICB9KTtcbiAgaWYgKGFjY3VtdWxhdGl2ZUhlaWdodCA+IHR5cGVIZWlnaHQgKyBuYW1lSGVpZ2h0ICsgZ2FwKSB7XG4gICAgY29uc3Qgcm91Z2hMaW5lID0gcmMubGluZShcbiAgICAgIHgsXG4gICAgICB5ICsgdHlwZUhlaWdodCArIG5hbWVIZWlnaHQgKyBnYXAsXG4gICAgICB4ICsgdG90YWxXaWR0aCxcbiAgICAgIHkgKyB0eXBlSGVpZ2h0ICsgbmFtZUhlaWdodCArIGdhcCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGRpdmlkZXJMaW5lID0gc2hhcGVTdmcuaW5zZXJ0KCgpID0+IHJvdWdoTGluZSk7XG4gICAgZGl2aWRlckxpbmUuYXR0cihcInN0eWxlXCIsIG5vZGVTdHlsZXMpO1xuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMobm9kZSwgcmVjdDIpO1xuICBub2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qobm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUocmVxdWlyZW1lbnRCb3gsIFwicmVxdWlyZW1lbnRCb3hcIik7XG5hc3luYyBmdW5jdGlvbiBhZGRUZXh0MyhwYXJlbnRHcm91cCwgaW5wdXRUZXh0LCB5T2Zmc2V0LCBzdHlsZSA9IFwiXCIpIHtcbiAgaWYgKGlucHV0VGV4dCA9PT0gXCJcIikge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IHRleHRFbCA9IHBhcmVudEdyb3VwLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwibGFiZWxcIikuYXR0cihcInN0eWxlXCIsIHN0eWxlKTtcbiAgY29uc3QgY29uZmlnID0gZ2V0Q29uZmlnMigpO1xuICBjb25zdCB1c2VIdG1sTGFiZWxzID0gY29uZmlnLmh0bWxMYWJlbHMgPz8gdHJ1ZTtcbiAgY29uc3QgdGV4dDIgPSBhd2FpdCBjcmVhdGVUZXh0KFxuICAgIHRleHRFbCxcbiAgICBzYW5pdGl6ZVRleHQyKGRlY29kZUVudGl0aWVzKGlucHV0VGV4dCkpLFxuICAgIHtcbiAgICAgIHdpZHRoOiBjYWxjdWxhdGVUZXh0V2lkdGgoaW5wdXRUZXh0LCBjb25maWcpICsgNTAsXG4gICAgICAvLyBBZGQgcm9vbSBmb3IgZXJyb3Igd2hlbiBzcGxpdHRpbmcgdGV4dCBpbnRvIG11bHRpcGxlIGxpbmVzXG4gICAgICBjbGFzc2VzOiBcIm1hcmtkb3duLW5vZGUtbGFiZWxcIixcbiAgICAgIHVzZUh0bWxMYWJlbHMsXG4gICAgICBzdHlsZVxuICAgIH0sXG4gICAgY29uZmlnXG4gICk7XG4gIGxldCBiYm94O1xuICBpZiAoIXVzZUh0bWxMYWJlbHMpIHtcbiAgICBjb25zdCB0ZXh0Q2hpbGQgPSB0ZXh0Mi5jaGlsZHJlblswXTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRleHRDaGlsZC5jaGlsZHJlbikge1xuICAgICAgY2hpbGQudGV4dENvbnRlbnQgPSBjaGlsZC50ZXh0Q29udGVudC5yZXBsYWNlQWxsKFwiJmd0O1wiLCBcIj5cIikucmVwbGFjZUFsbChcIiZsdDtcIiwgXCI8XCIpO1xuICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgYmJveCA9IHRleHQyLmdldEJCb3goKTtcbiAgICBiYm94LmhlaWdodCArPSA2O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRpdiA9IHRleHQyLmNoaWxkcmVuWzBdO1xuICAgIGNvbnN0IGR2ID0gc2VsZWN0OCh0ZXh0Mik7XG4gICAgYmJveCA9IGRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBkdi5hdHRyKFwid2lkdGhcIiwgYmJveC53aWR0aCk7XG4gICAgZHYuYXR0cihcImhlaWdodFwiLCBiYm94LmhlaWdodCk7XG4gIH1cbiAgdGV4dEVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgkey1iYm94LndpZHRoIC8gMn0sJHstYmJveC5oZWlnaHQgLyAyICsgeU9mZnNldH0pYCk7XG4gIHJldHVybiBiYm94LmhlaWdodDtcbn1cbl9fbmFtZShhZGRUZXh0MywgXCJhZGRUZXh0XCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy9rYW5iYW5JdGVtLnRzXG5pbXBvcnQgcm91Z2g1NyBmcm9tIFwicm91Z2hqc1wiO1xudmFyIGNvbG9yRnJvbVByaW9yaXR5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocHJpb3JpdHkpID0+IHtcbiAgc3dpdGNoIChwcmlvcml0eSkge1xuICAgIGNhc2UgXCJWZXJ5IEhpZ2hcIjpcbiAgICAgIHJldHVybiBcInJlZFwiO1xuICAgIGNhc2UgXCJIaWdoXCI6XG4gICAgICByZXR1cm4gXCJvcmFuZ2VcIjtcbiAgICBjYXNlIFwiTWVkaXVtXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICAvLyBubyBzdHJva2VcbiAgICBjYXNlIFwiTG93XCI6XG4gICAgICByZXR1cm4gXCJibHVlXCI7XG4gICAgY2FzZSBcIlZlcnkgTG93XCI6XG4gICAgICByZXR1cm4gXCJsaWdodGJsdWVcIjtcbiAgfVxufSwgXCJjb2xvckZyb21Qcmlvcml0eVwiKTtcbmFzeW5jIGZ1bmN0aW9uIGthbmJhbkl0ZW0ocGFyZW50LCBrYW5iYW5Ob2RlLCB7IGNvbmZpZyB9KSB7XG4gIGNvbnN0IHsgbGFiZWxTdHlsZXMsIG5vZGVTdHlsZXMgfSA9IHN0eWxlczJTdHJpbmcoa2FuYmFuTm9kZSk7XG4gIGthbmJhbk5vZGUubGFiZWxTdHlsZSA9IGxhYmVsU3R5bGVzIHx8IFwiXCI7XG4gIGNvbnN0IGxhYmVsUGFkZGluZ1ggPSAxMDtcbiAgY29uc3Qgb3JnV2lkdGggPSBrYW5iYW5Ob2RlLndpZHRoO1xuICBrYW5iYW5Ob2RlLndpZHRoID0gKGthbmJhbk5vZGUud2lkdGggPz8gMjAwKSAtIDEwO1xuICBjb25zdCB7XG4gICAgc2hhcGVTdmcsXG4gICAgYmJveCxcbiAgICBsYWJlbDogbGFiZWxFbFRpdGxlXG4gIH0gPSBhd2FpdCBsYWJlbEhlbHBlcihwYXJlbnQsIGthbmJhbk5vZGUsIGdldE5vZGVDbGFzc2VzKGthbmJhbk5vZGUpKTtcbiAgY29uc3QgcGFkZGluZyA9IGthbmJhbk5vZGUucGFkZGluZyB8fCAxMDtcbiAgbGV0IHRpY2tldFVybCA9IFwiXCI7XG4gIGxldCBsaW5rO1xuICBpZiAoXCJ0aWNrZXRcIiBpbiBrYW5iYW5Ob2RlICYmIGthbmJhbk5vZGUudGlja2V0ICYmIGNvbmZpZz8ua2FuYmFuPy50aWNrZXRCYXNlVXJsKSB7XG4gICAgdGlja2V0VXJsID0gY29uZmlnPy5rYW5iYW4/LnRpY2tldEJhc2VVcmwucmVwbGFjZShcIiNUSUNLRVQjXCIsIGthbmJhbk5vZGUudGlja2V0KTtcbiAgICBsaW5rID0gc2hhcGVTdmcuaW5zZXJ0KFwic3ZnOmFcIiwgXCI6Zmlyc3QtY2hpbGRcIikuYXR0cihcImNsYXNzXCIsIFwia2FuYmFuLXRpY2tldC1saW5rXCIpLmF0dHIoXCJ4bGluazpocmVmXCIsIHRpY2tldFVybCkuYXR0cihcInRhcmdldFwiLCBcIl9ibGFua1wiKTtcbiAgfVxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHVzZUh0bWxMYWJlbHM6IGthbmJhbk5vZGUudXNlSHRtbExhYmVscyxcbiAgICBsYWJlbFN0eWxlOiBrYW5iYW5Ob2RlLmxhYmVsU3R5bGUgfHwgXCJcIixcbiAgICB3aWR0aDoga2FuYmFuTm9kZS53aWR0aCxcbiAgICBpbWc6IGthbmJhbk5vZGUuaW1nLFxuICAgIHBhZGRpbmc6IGthbmJhbk5vZGUucGFkZGluZyB8fCA4LFxuICAgIGNlbnRlckxhYmVsOiBmYWxzZVxuICB9O1xuICBsZXQgbGFiZWxFbCwgYmJveDI7XG4gIGlmIChsaW5rKSB7XG4gICAgKHsgbGFiZWw6IGxhYmVsRWwsIGJib3g6IGJib3gyIH0gPSBhd2FpdCBpbnNlcnRMYWJlbChcbiAgICAgIGxpbmssXG4gICAgICBcInRpY2tldFwiIGluIGthbmJhbk5vZGUgJiYga2FuYmFuTm9kZS50aWNrZXQgfHwgXCJcIixcbiAgICAgIG9wdGlvbnNcbiAgICApKTtcbiAgfSBlbHNlIHtcbiAgICAoeyBsYWJlbDogbGFiZWxFbCwgYmJveDogYmJveDIgfSA9IGF3YWl0IGluc2VydExhYmVsKFxuICAgICAgc2hhcGVTdmcsXG4gICAgICBcInRpY2tldFwiIGluIGthbmJhbk5vZGUgJiYga2FuYmFuTm9kZS50aWNrZXQgfHwgXCJcIixcbiAgICAgIG9wdGlvbnNcbiAgICApKTtcbiAgfVxuICBjb25zdCB7IGxhYmVsOiBsYWJlbEVsQXNzaWduZWQsIGJib3g6IGJib3hBc3NpZ25lZCB9ID0gYXdhaXQgaW5zZXJ0TGFiZWwoXG4gICAgc2hhcGVTdmcsXG4gICAgXCJhc3NpZ25lZFwiIGluIGthbmJhbk5vZGUgJiYga2FuYmFuTm9kZS5hc3NpZ25lZCB8fCBcIlwiLFxuICAgIG9wdGlvbnNcbiAgKTtcbiAga2FuYmFuTm9kZS53aWR0aCA9IG9yZ1dpZHRoO1xuICBjb25zdCBsYWJlbFBhZGRpbmdZID0gMTA7XG4gIGNvbnN0IHRvdGFsV2lkdGggPSBrYW5iYW5Ob2RlPy53aWR0aCB8fCAwO1xuICBjb25zdCBoZWlnaHRBZGogPSBNYXRoLm1heChiYm94Mi5oZWlnaHQsIGJib3hBc3NpZ25lZC5oZWlnaHQpIC8gMjtcbiAgY29uc3QgdG90YWxIZWlnaHQgPSBNYXRoLm1heChiYm94LmhlaWdodCArIGxhYmVsUGFkZGluZ1kgKiAyLCBrYW5iYW5Ob2RlPy5oZWlnaHQgfHwgMCkgKyBoZWlnaHRBZGo7XG4gIGNvbnN0IHggPSAtdG90YWxXaWR0aCAvIDI7XG4gIGNvbnN0IHkgPSAtdG90YWxIZWlnaHQgLyAyO1xuICBsYWJlbEVsVGl0bGUuYXR0cihcbiAgICBcInRyYW5zZm9ybVwiLFxuICAgIFwidHJhbnNsYXRlKFwiICsgKHBhZGRpbmcgLSB0b3RhbFdpZHRoIC8gMikgKyBcIiwgXCIgKyAoLWhlaWdodEFkaiAtIGJib3guaGVpZ2h0IC8gMikgKyBcIilcIlxuICApO1xuICBsYWJlbEVsLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcInRyYW5zbGF0ZShcIiArIChwYWRkaW5nIC0gdG90YWxXaWR0aCAvIDIpICsgXCIsIFwiICsgKC1oZWlnaHRBZGogKyBiYm94LmhlaWdodCAvIDIpICsgXCIpXCJcbiAgKTtcbiAgbGFiZWxFbEFzc2lnbmVkLmF0dHIoXG4gICAgXCJ0cmFuc2Zvcm1cIixcbiAgICBcInRyYW5zbGF0ZShcIiArIChwYWRkaW5nICsgdG90YWxXaWR0aCAvIDIgLSBiYm94QXNzaWduZWQud2lkdGggLSAyICogbGFiZWxQYWRkaW5nWCkgKyBcIiwgXCIgKyAoLWhlaWdodEFkaiArIGJib3guaGVpZ2h0IC8gMikgKyBcIilcIlxuICApO1xuICBsZXQgcmVjdDI7XG4gIGNvbnN0IHsgcngsIHJ5IH0gPSBrYW5iYW5Ob2RlO1xuICBjb25zdCB7IGNzc1N0eWxlcyB9ID0ga2FuYmFuTm9kZTtcbiAgaWYgKGthbmJhbk5vZGUubG9vayA9PT0gXCJoYW5kRHJhd25cIikge1xuICAgIGNvbnN0IHJjID0gcm91Z2g1Ny5zdmcoc2hhcGVTdmcpO1xuICAgIGNvbnN0IG9wdGlvbnMyID0gdXNlck5vZGVPdmVycmlkZXMoa2FuYmFuTm9kZSwge30pO1xuICAgIGNvbnN0IHJvdWdoTm9kZSA9IHJ4IHx8IHJ5ID8gcmMucGF0aChjcmVhdGVSb3VuZGVkUmVjdFBhdGhEKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCByeCB8fCAwKSwgb3B0aW9uczIpIDogcmMucmVjdGFuZ2xlKHgsIHksIHRvdGFsV2lkdGgsIHRvdGFsSGVpZ2h0LCBvcHRpb25zMik7XG4gICAgcmVjdDIgPSBzaGFwZVN2Zy5pbnNlcnQoKCkgPT4gcm91Z2hOb2RlLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXJcIikuYXR0cihcInN0eWxlXCIsIGNzc1N0eWxlcyA/IGNzc1N0eWxlcyA6IG51bGwpO1xuICB9IGVsc2Uge1xuICAgIHJlY3QyID0gc2hhcGVTdmcuaW5zZXJ0KFwicmVjdFwiLCBcIjpmaXJzdC1jaGlsZFwiKTtcbiAgICByZWN0Mi5hdHRyKFwiY2xhc3NcIiwgXCJiYXNpYyBsYWJlbC1jb250YWluZXIgX19BUEFfX1wiKS5hdHRyKFwic3R5bGVcIiwgbm9kZVN0eWxlcykuYXR0cihcInJ4XCIsIHJ4ID8/IDUpLmF0dHIoXCJyeVwiLCByeSA/PyA1KS5hdHRyKFwieFwiLCB4KS5hdHRyKFwieVwiLCB5KS5hdHRyKFwid2lkdGhcIiwgdG90YWxXaWR0aCkuYXR0cihcImhlaWdodFwiLCB0b3RhbEhlaWdodCk7XG4gICAgY29uc3QgcHJpb3JpdHkgPSBcInByaW9yaXR5XCIgaW4ga2FuYmFuTm9kZSAmJiBrYW5iYW5Ob2RlLnByaW9yaXR5O1xuICAgIGlmIChwcmlvcml0eSkge1xuICAgICAgY29uc3QgbGluZSA9IHNoYXBlU3ZnLmFwcGVuZChcImxpbmVcIik7XG4gICAgICBjb25zdCBsaW5lWCA9IHggKyAyO1xuICAgICAgY29uc3QgeTEgPSB5ICsgTWF0aC5mbG9vcigocnggPz8gMCkgLyAyKTtcbiAgICAgIGNvbnN0IHkyID0geSArIHRvdGFsSGVpZ2h0IC0gTWF0aC5mbG9vcigocnggPz8gMCkgLyAyKTtcbiAgICAgIGxpbmUuYXR0cihcIngxXCIsIGxpbmVYKS5hdHRyKFwieTFcIiwgeTEpLmF0dHIoXCJ4MlwiLCBsaW5lWCkuYXR0cihcInkyXCIsIHkyKS5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIFwiNFwiKS5hdHRyKFwic3Ryb2tlXCIsIGNvbG9yRnJvbVByaW9yaXR5KHByaW9yaXR5KSk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZU5vZGVCb3VuZHMoa2FuYmFuTm9kZSwgcmVjdDIpO1xuICBrYW5iYW5Ob2RlLmhlaWdodCA9IHRvdGFsSGVpZ2h0O1xuICBrYW5iYW5Ob2RlLmludGVyc2VjdCA9IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIGludGVyc2VjdF9kZWZhdWx0LnJlY3Qoa2FuYmFuTm9kZSwgcG9pbnQpO1xuICB9O1xuICByZXR1cm4gc2hhcGVTdmc7XG59XG5fX25hbWUoa2FuYmFuSXRlbSwgXCJrYW5iYW5JdGVtXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL3NoYXBlcy50c1xudmFyIHNoYXBlc0RlZnMgPSBbXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiUHJvY2Vzc1wiLFxuICAgIG5hbWU6IFwiUmVjdGFuZ2xlXCIsXG4gICAgc2hvcnROYW1lOiBcInJlY3RcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTdGFuZGFyZCBwcm9jZXNzIHNoYXBlXCIsXG4gICAgYWxpYXNlczogW1wicHJvY1wiLCBcInByb2Nlc3NcIiwgXCJyZWN0YW5nbGVcIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJzcXVhcmVSZWN0XCJdLFxuICAgIGhhbmRsZXI6IHNxdWFyZVJlY3QyXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiRXZlbnRcIixcbiAgICBuYW1lOiBcIlJvdW5kZWQgUmVjdGFuZ2xlXCIsXG4gICAgc2hvcnROYW1lOiBcInJvdW5kZWRcIixcbiAgICBkZXNjcmlwdGlvbjogXCJSZXByZXNlbnRzIGFuIGV2ZW50XCIsXG4gICAgYWxpYXNlczogW1wiZXZlbnRcIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJyb3VuZGVkUmVjdFwiXSxcbiAgICBoYW5kbGVyOiByb3VuZGVkUmVjdFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIlRlcm1pbmFsIFBvaW50XCIsXG4gICAgbmFtZTogXCJTdGFkaXVtXCIsXG4gICAgc2hvcnROYW1lOiBcInN0YWRpdW1cIixcbiAgICBkZXNjcmlwdGlvbjogXCJUZXJtaW5hbCBwb2ludFwiLFxuICAgIGFsaWFzZXM6IFtcInRlcm1pbmFsXCIsIFwicGlsbFwiXSxcbiAgICBoYW5kbGVyOiBzdGFkaXVtXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiU3VicHJvY2Vzc1wiLFxuICAgIG5hbWU6IFwiRnJhbWVkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJmci1yZWN0XCIsXG4gICAgZGVzY3JpcHRpb246IFwiU3VicHJvY2Vzc1wiLFxuICAgIGFsaWFzZXM6IFtcInN1YnByb2Nlc3NcIiwgXCJzdWJwcm9jXCIsIFwiZnJhbWVkLXJlY3RhbmdsZVwiLCBcInN1YnJvdXRpbmVcIl0sXG4gICAgaGFuZGxlcjogc3Vicm91dGluZVxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkRhdGFiYXNlXCIsXG4gICAgbmFtZTogXCJDeWxpbmRlclwiLFxuICAgIHNob3J0TmFtZTogXCJjeWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJEYXRhYmFzZSBzdG9yYWdlXCIsXG4gICAgYWxpYXNlczogW1wiZGJcIiwgXCJkYXRhYmFzZVwiLCBcImN5bGluZGVyXCJdLFxuICAgIGhhbmRsZXI6IGN5bGluZGVyXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiU3RhcnRcIixcbiAgICBuYW1lOiBcIkNpcmNsZVwiLFxuICAgIHNob3J0TmFtZTogXCJjaXJjbGVcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTdGFydGluZyBwb2ludFwiLFxuICAgIGFsaWFzZXM6IFtcImNpcmNcIl0sXG4gICAgaGFuZGxlcjogY2lyY2xlXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiRGVjaXNpb25cIixcbiAgICBuYW1lOiBcIkRpYW1vbmRcIixcbiAgICBzaG9ydE5hbWU6IFwiZGlhbVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkRlY2lzaW9uLW1ha2luZyBzdGVwXCIsXG4gICAgYWxpYXNlczogW1wiZGVjaXNpb25cIiwgXCJkaWFtb25kXCIsIFwicXVlc3Rpb25cIl0sXG4gICAgaGFuZGxlcjogcXVlc3Rpb25cbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJQcmVwYXJlIENvbmRpdGlvbmFsXCIsXG4gICAgbmFtZTogXCJIZXhhZ29uXCIsXG4gICAgc2hvcnROYW1lOiBcImhleFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlByZXBhcmF0aW9uIG9yIGNvbmRpdGlvbiBzdGVwXCIsXG4gICAgYWxpYXNlczogW1wiaGV4YWdvblwiLCBcInByZXBhcmVcIl0sXG4gICAgaGFuZGxlcjogaGV4YWdvblxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkRhdGEgSW5wdXQvT3V0cHV0XCIsXG4gICAgbmFtZTogXCJMZWFuIFJpZ2h0XCIsXG4gICAgc2hvcnROYW1lOiBcImxlYW4tclwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlJlcHJlc2VudHMgaW5wdXQgb3Igb3V0cHV0XCIsXG4gICAgYWxpYXNlczogW1wibGVhbi1yaWdodFwiLCBcImluLW91dFwiXSxcbiAgICBpbnRlcm5hbEFsaWFzZXM6IFtcImxlYW5fcmlnaHRcIl0sXG4gICAgaGFuZGxlcjogbGVhbl9yaWdodFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkRhdGEgSW5wdXQvT3V0cHV0XCIsXG4gICAgbmFtZTogXCJMZWFuIExlZnRcIixcbiAgICBzaG9ydE5hbWU6IFwibGVhbi1sXCIsXG4gICAgZGVzY3JpcHRpb246IFwiUmVwcmVzZW50cyBvdXRwdXQgb3IgaW5wdXRcIixcbiAgICBhbGlhc2VzOiBbXCJsZWFuLWxlZnRcIiwgXCJvdXQtaW5cIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJsZWFuX2xlZnRcIl0sXG4gICAgaGFuZGxlcjogbGVhbl9sZWZ0XG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiUHJpb3JpdHkgQWN0aW9uXCIsXG4gICAgbmFtZTogXCJUcmFwZXpvaWQgQmFzZSBCb3R0b21cIixcbiAgICBzaG9ydE5hbWU6IFwidHJhcC1iXCIsXG4gICAgZGVzY3JpcHRpb246IFwiUHJpb3JpdHkgYWN0aW9uXCIsXG4gICAgYWxpYXNlczogW1wicHJpb3JpdHlcIiwgXCJ0cmFwZXpvaWQtYm90dG9tXCIsIFwidHJhcGV6b2lkXCJdLFxuICAgIGhhbmRsZXI6IHRyYXBlem9pZFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIk1hbnVhbCBPcGVyYXRpb25cIixcbiAgICBuYW1lOiBcIlRyYXBlem9pZCBCYXNlIFRvcFwiLFxuICAgIHNob3J0TmFtZTogXCJ0cmFwLXRcIixcbiAgICBkZXNjcmlwdGlvbjogXCJSZXByZXNlbnRzIGEgbWFudWFsIHRhc2tcIixcbiAgICBhbGlhc2VzOiBbXCJtYW51YWxcIiwgXCJ0cmFwZXpvaWQtdG9wXCIsIFwiaW52LXRyYXBlem9pZFwiXSxcbiAgICBpbnRlcm5hbEFsaWFzZXM6IFtcImludl90cmFwZXpvaWRcIl0sXG4gICAgaGFuZGxlcjogaW52X3RyYXBlem9pZFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIlN0b3BcIixcbiAgICBuYW1lOiBcIkRvdWJsZSBDaXJjbGVcIixcbiAgICBzaG9ydE5hbWU6IFwiZGJsLWNpcmNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJSZXByZXNlbnRzIGEgc3RvcCBwb2ludFwiLFxuICAgIGFsaWFzZXM6IFtcImRvdWJsZS1jaXJjbGVcIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJkb3VibGVjaXJjbGVcIl0sXG4gICAgaGFuZGxlcjogZG91YmxlY2lyY2xlXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiVGV4dCBCbG9ja1wiLFxuICAgIG5hbWU6IFwiVGV4dCBCbG9ja1wiLFxuICAgIHNob3J0TmFtZTogXCJ0ZXh0XCIsXG4gICAgZGVzY3JpcHRpb246IFwiVGV4dCBibG9ja1wiLFxuICAgIGhhbmRsZXI6IHRleHRcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJDYXJkXCIsXG4gICAgbmFtZTogXCJOb3RjaGVkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJub3RjaC1yZWN0XCIsXG4gICAgZGVzY3JpcHRpb246IFwiUmVwcmVzZW50cyBhIGNhcmRcIixcbiAgICBhbGlhc2VzOiBbXCJjYXJkXCIsIFwibm90Y2hlZC1yZWN0YW5nbGVcIl0sXG4gICAgaGFuZGxlcjogY2FyZFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkxpbmVkL1NoYWRlZCBQcm9jZXNzXCIsXG4gICAgbmFtZTogXCJMaW5lZCBSZWN0YW5nbGVcIixcbiAgICBzaG9ydE5hbWU6IFwibGluLXJlY3RcIixcbiAgICBkZXNjcmlwdGlvbjogXCJMaW5lZCBwcm9jZXNzIHNoYXBlXCIsXG4gICAgYWxpYXNlczogW1wibGluZWQtcmVjdGFuZ2xlXCIsIFwibGluZWQtcHJvY2Vzc1wiLCBcImxpbi1wcm9jXCIsIFwic2hhZGVkLXByb2Nlc3NcIl0sXG4gICAgaGFuZGxlcjogc2hhZGVkUHJvY2Vzc1xuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIlN0YXJ0XCIsXG4gICAgbmFtZTogXCJTbWFsbCBDaXJjbGVcIixcbiAgICBzaG9ydE5hbWU6IFwic20tY2lyY1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlNtYWxsIHN0YXJ0aW5nIHBvaW50XCIsXG4gICAgYWxpYXNlczogW1wic3RhcnRcIiwgXCJzbWFsbC1jaXJjbGVcIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJzdGF0ZVN0YXJ0XCJdLFxuICAgIGhhbmRsZXI6IHN0YXRlU3RhcnRcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJTdG9wXCIsXG4gICAgbmFtZTogXCJGcmFtZWQgQ2lyY2xlXCIsXG4gICAgc2hvcnROYW1lOiBcImZyLWNpcmNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTdG9wIHBvaW50XCIsXG4gICAgYWxpYXNlczogW1wic3RvcFwiLCBcImZyYW1lZC1jaXJjbGVcIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJzdGF0ZUVuZFwiXSxcbiAgICBoYW5kbGVyOiBzdGF0ZUVuZFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkZvcmsvSm9pblwiLFxuICAgIG5hbWU6IFwiRmlsbGVkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJmb3JrXCIsXG4gICAgZGVzY3JpcHRpb246IFwiRm9yayBvciBqb2luIGluIHByb2Nlc3MgZmxvd1wiLFxuICAgIGFsaWFzZXM6IFtcImpvaW5cIl0sXG4gICAgaW50ZXJuYWxBbGlhc2VzOiBbXCJmb3JrSm9pblwiXSxcbiAgICBoYW5kbGVyOiBmb3JrSm9pblxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkNvbGxhdGVcIixcbiAgICBuYW1lOiBcIkhvdXJnbGFzc1wiLFxuICAgIHNob3J0TmFtZTogXCJob3VyZ2xhc3NcIixcbiAgICBkZXNjcmlwdGlvbjogXCJSZXByZXNlbnRzIGEgY29sbGF0ZSBvcGVyYXRpb25cIixcbiAgICBhbGlhc2VzOiBbXCJob3VyZ2xhc3NcIiwgXCJjb2xsYXRlXCJdLFxuICAgIGhhbmRsZXI6IGhvdXJnbGFzc1xuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkNvbW1lbnRcIixcbiAgICBuYW1lOiBcIkN1cmx5IEJyYWNlXCIsXG4gICAgc2hvcnROYW1lOiBcImJyYWNlXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQWRkcyBhIGNvbW1lbnRcIixcbiAgICBhbGlhc2VzOiBbXCJjb21tZW50XCIsIFwiYnJhY2UtbFwiXSxcbiAgICBoYW5kbGVyOiBjdXJseUJyYWNlTGVmdFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkNvbW1lbnQgUmlnaHRcIixcbiAgICBuYW1lOiBcIkN1cmx5IEJyYWNlXCIsXG4gICAgc2hvcnROYW1lOiBcImJyYWNlLXJcIixcbiAgICBkZXNjcmlwdGlvbjogXCJBZGRzIGEgY29tbWVudFwiLFxuICAgIGhhbmRsZXI6IGN1cmx5QnJhY2VSaWdodFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkNvbW1lbnQgd2l0aCBicmFjZXMgb24gYm90aCBzaWRlc1wiLFxuICAgIG5hbWU6IFwiQ3VybHkgQnJhY2VzXCIsXG4gICAgc2hvcnROYW1lOiBcImJyYWNlc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkFkZHMgYSBjb21tZW50XCIsXG4gICAgaGFuZGxlcjogY3VybHlCcmFjZXNcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJDb20gTGlua1wiLFxuICAgIG5hbWU6IFwiTGlnaHRuaW5nIEJvbHRcIixcbiAgICBzaG9ydE5hbWU6IFwiYm9sdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkNvbW11bmljYXRpb24gbGlua1wiLFxuICAgIGFsaWFzZXM6IFtcImNvbS1saW5rXCIsIFwibGlnaHRuaW5nLWJvbHRcIl0sXG4gICAgaGFuZGxlcjogbGlnaHRuaW5nQm9sdFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkRvY3VtZW50XCIsXG4gICAgbmFtZTogXCJEb2N1bWVudFwiLFxuICAgIHNob3J0TmFtZTogXCJkb2NcIixcbiAgICBkZXNjcmlwdGlvbjogXCJSZXByZXNlbnRzIGEgZG9jdW1lbnRcIixcbiAgICBhbGlhc2VzOiBbXCJkb2NcIiwgXCJkb2N1bWVudFwiXSxcbiAgICBoYW5kbGVyOiB3YXZlRWRnZWRSZWN0YW5nbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJEZWxheVwiLFxuICAgIG5hbWU6IFwiSGFsZi1Sb3VuZGVkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJkZWxheVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlJlcHJlc2VudHMgYSBkZWxheVwiLFxuICAgIGFsaWFzZXM6IFtcImhhbGYtcm91bmRlZC1yZWN0YW5nbGVcIl0sXG4gICAgaGFuZGxlcjogaGFsZlJvdW5kZWRSZWN0YW5nbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJEaXJlY3QgQWNjZXNzIFN0b3JhZ2VcIixcbiAgICBuYW1lOiBcIkhvcml6b250YWwgQ3lsaW5kZXJcIixcbiAgICBzaG9ydE5hbWU6IFwiaC1jeWxcIixcbiAgICBkZXNjcmlwdGlvbjogXCJEaXJlY3QgYWNjZXNzIHN0b3JhZ2VcIixcbiAgICBhbGlhc2VzOiBbXCJkYXNcIiwgXCJob3Jpem9udGFsLWN5bGluZGVyXCJdLFxuICAgIGhhbmRsZXI6IHRpbHRlZEN5bGluZGVyXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiRGlzayBTdG9yYWdlXCIsXG4gICAgbmFtZTogXCJMaW5lZCBDeWxpbmRlclwiLFxuICAgIHNob3J0TmFtZTogXCJsaW4tY3lsXCIsXG4gICAgZGVzY3JpcHRpb246IFwiRGlzayBzdG9yYWdlXCIsXG4gICAgYWxpYXNlczogW1wiZGlza1wiLCBcImxpbmVkLWN5bGluZGVyXCJdLFxuICAgIGhhbmRsZXI6IGxpbmVkQ3lsaW5kZXJcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJEaXNwbGF5XCIsXG4gICAgbmFtZTogXCJDdXJ2ZWQgVHJhcGV6b2lkXCIsXG4gICAgc2hvcnROYW1lOiBcImN1cnYtdHJhcFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlJlcHJlc2VudHMgYSBkaXNwbGF5XCIsXG4gICAgYWxpYXNlczogW1wiY3VydmVkLXRyYXBlem9pZFwiLCBcImRpc3BsYXlcIl0sXG4gICAgaGFuZGxlcjogY3VydmVkVHJhcGV6b2lkXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiRGl2aWRlZCBQcm9jZXNzXCIsXG4gICAgbmFtZTogXCJEaXZpZGVkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJkaXYtcmVjdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkRpdmlkZWQgcHJvY2VzcyBzaGFwZVwiLFxuICAgIGFsaWFzZXM6IFtcImRpdi1wcm9jXCIsIFwiZGl2aWRlZC1yZWN0YW5nbGVcIiwgXCJkaXZpZGVkLXByb2Nlc3NcIl0sXG4gICAgaGFuZGxlcjogZGl2aWRlZFJlY3RhbmdsZVxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkV4dHJhY3RcIixcbiAgICBuYW1lOiBcIlRyaWFuZ2xlXCIsXG4gICAgc2hvcnROYW1lOiBcInRyaVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkV4dHJhY3Rpb24gcHJvY2Vzc1wiLFxuICAgIGFsaWFzZXM6IFtcImV4dHJhY3RcIiwgXCJ0cmlhbmdsZVwiXSxcbiAgICBoYW5kbGVyOiB0cmlhbmdsZVxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkludGVybmFsIFN0b3JhZ2VcIixcbiAgICBuYW1lOiBcIldpbmRvdyBQYW5lXCIsXG4gICAgc2hvcnROYW1lOiBcIndpbi1wYW5lXCIsXG4gICAgZGVzY3JpcHRpb246IFwiSW50ZXJuYWwgc3RvcmFnZVwiLFxuICAgIGFsaWFzZXM6IFtcImludGVybmFsLXN0b3JhZ2VcIiwgXCJ3aW5kb3ctcGFuZVwiXSxcbiAgICBoYW5kbGVyOiB3aW5kb3dQYW5lXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiSnVuY3Rpb25cIixcbiAgICBuYW1lOiBcIkZpbGxlZCBDaXJjbGVcIixcbiAgICBzaG9ydE5hbWU6IFwiZi1jaXJjXCIsXG4gICAgZGVzY3JpcHRpb246IFwiSnVuY3Rpb24gcG9pbnRcIixcbiAgICBhbGlhc2VzOiBbXCJqdW5jdGlvblwiLCBcImZpbGxlZC1jaXJjbGVcIl0sXG4gICAgaGFuZGxlcjogZmlsbGVkQ2lyY2xlXG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiTG9vcCBMaW1pdFwiLFxuICAgIG5hbWU6IFwiVHJhcGV6b2lkYWwgUGVudGFnb25cIixcbiAgICBzaG9ydE5hbWU6IFwibm90Y2gtcGVudFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkxvb3AgbGltaXQgc3RlcFwiLFxuICAgIGFsaWFzZXM6IFtcImxvb3AtbGltaXRcIiwgXCJub3RjaGVkLXBlbnRhZ29uXCJdLFxuICAgIGhhbmRsZXI6IHRyYXBlem9pZGFsUGVudGFnb25cbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJNYW51YWwgRmlsZVwiLFxuICAgIG5hbWU6IFwiRmxpcHBlZCBUcmlhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJmbGlwLXRyaVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIk1hbnVhbCBmaWxlIG9wZXJhdGlvblwiLFxuICAgIGFsaWFzZXM6IFtcIm1hbnVhbC1maWxlXCIsIFwiZmxpcHBlZC10cmlhbmdsZVwiXSxcbiAgICBoYW5kbGVyOiBmbGlwcGVkVHJpYW5nbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJNYW51YWwgSW5wdXRcIixcbiAgICBuYW1lOiBcIlNsb3BlZCBSZWN0YW5nbGVcIixcbiAgICBzaG9ydE5hbWU6IFwic2wtcmVjdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIk1hbnVhbCBpbnB1dCBzdGVwXCIsXG4gICAgYWxpYXNlczogW1wibWFudWFsLWlucHV0XCIsIFwic2xvcGVkLXJlY3RhbmdsZVwiXSxcbiAgICBoYW5kbGVyOiBzbG9wZWRSZWN0XG4gIH0sXG4gIHtcbiAgICBzZW1hbnRpY05hbWU6IFwiTXVsdGktRG9jdW1lbnRcIixcbiAgICBuYW1lOiBcIlN0YWNrZWQgRG9jdW1lbnRcIixcbiAgICBzaG9ydE5hbWU6IFwiZG9jc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIk11bHRpcGxlIGRvY3VtZW50c1wiLFxuICAgIGFsaWFzZXM6IFtcImRvY3VtZW50c1wiLCBcInN0LWRvY1wiLCBcInN0YWNrZWQtZG9jdW1lbnRcIl0sXG4gICAgaGFuZGxlcjogbXVsdGlXYXZlRWRnZWRSZWN0YW5nbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJNdWx0aS1Qcm9jZXNzXCIsXG4gICAgbmFtZTogXCJTdGFja2VkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJzdC1yZWN0XCIsXG4gICAgZGVzY3JpcHRpb246IFwiTXVsdGlwbGUgcHJvY2Vzc2VzXCIsXG4gICAgYWxpYXNlczogW1wicHJvY3NcIiwgXCJwcm9jZXNzZXNcIiwgXCJzdGFja2VkLXJlY3RhbmdsZVwiXSxcbiAgICBoYW5kbGVyOiBtdWx0aVJlY3RcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJTdG9yZWQgRGF0YVwiLFxuICAgIG5hbWU6IFwiQm93IFRpZSBSZWN0YW5nbGVcIixcbiAgICBzaG9ydE5hbWU6IFwiYm93LXJlY3RcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTdG9yZWQgZGF0YVwiLFxuICAgIGFsaWFzZXM6IFtcInN0b3JlZC1kYXRhXCIsIFwiYm93LXRpZS1yZWN0YW5nbGVcIl0sXG4gICAgaGFuZGxlcjogYm93VGllUmVjdFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIlN1bW1hcnlcIixcbiAgICBuYW1lOiBcIkNyb3NzZWQgQ2lyY2xlXCIsXG4gICAgc2hvcnROYW1lOiBcImNyb3NzLWNpcmNcIixcbiAgICBkZXNjcmlwdGlvbjogXCJTdW1tYXJ5XCIsXG4gICAgYWxpYXNlczogW1wic3VtbWFyeVwiLCBcImNyb3NzZWQtY2lyY2xlXCJdLFxuICAgIGhhbmRsZXI6IGNyb3NzZWRDaXJjbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJUYWdnZWQgRG9jdW1lbnRcIixcbiAgICBuYW1lOiBcIlRhZ2dlZCBEb2N1bWVudFwiLFxuICAgIHNob3J0TmFtZTogXCJ0YWctZG9jXCIsXG4gICAgZGVzY3JpcHRpb246IFwiVGFnZ2VkIGRvY3VtZW50XCIsXG4gICAgYWxpYXNlczogW1widGFnLWRvY1wiLCBcInRhZ2dlZC1kb2N1bWVudFwiXSxcbiAgICBoYW5kbGVyOiB0YWdnZWRXYXZlRWRnZWRSZWN0YW5nbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJUYWdnZWQgUHJvY2Vzc1wiLFxuICAgIG5hbWU6IFwiVGFnZ2VkIFJlY3RhbmdsZVwiLFxuICAgIHNob3J0TmFtZTogXCJ0YWctcmVjdFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlRhZ2dlZCBwcm9jZXNzXCIsXG4gICAgYWxpYXNlczogW1widGFnZ2VkLXJlY3RhbmdsZVwiLCBcInRhZy1wcm9jXCIsIFwidGFnZ2VkLXByb2Nlc3NcIl0sXG4gICAgaGFuZGxlcjogdGFnZ2VkUmVjdFxuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIlBhcGVyIFRhcGVcIixcbiAgICBuYW1lOiBcIkZsYWdcIixcbiAgICBzaG9ydE5hbWU6IFwiZmxhZ1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlBhcGVyIHRhcGVcIixcbiAgICBhbGlhc2VzOiBbXCJwYXBlci10YXBlXCJdLFxuICAgIGhhbmRsZXI6IHdhdmVSZWN0YW5nbGVcbiAgfSxcbiAge1xuICAgIHNlbWFudGljTmFtZTogXCJPZGRcIixcbiAgICBuYW1lOiBcIk9kZFwiLFxuICAgIHNob3J0TmFtZTogXCJvZGRcIixcbiAgICBkZXNjcmlwdGlvbjogXCJPZGQgc2hhcGVcIixcbiAgICBpbnRlcm5hbEFsaWFzZXM6IFtcInJlY3RfbGVmdF9pbnZfYXJyb3dcIl0sXG4gICAgaGFuZGxlcjogcmVjdF9sZWZ0X2ludl9hcnJvd1xuICB9LFxuICB7XG4gICAgc2VtYW50aWNOYW1lOiBcIkxpbmVkIERvY3VtZW50XCIsXG4gICAgbmFtZTogXCJMaW5lZCBEb2N1bWVudFwiLFxuICAgIHNob3J0TmFtZTogXCJsaW4tZG9jXCIsXG4gICAgZGVzY3JpcHRpb246IFwiTGluZWQgZG9jdW1lbnRcIixcbiAgICBhbGlhc2VzOiBbXCJsaW5lZC1kb2N1bWVudFwiXSxcbiAgICBoYW5kbGVyOiBsaW5lZFdhdmVFZGdlZFJlY3RcbiAgfVxuXTtcbnZhciBnZW5lcmF0ZVNoYXBlTWFwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGNvbnN0IHVuZG9jdW1lbnRlZFNoYXBlcyA9IHtcbiAgICAvLyBTdGF0ZXNcbiAgICBzdGF0ZSxcbiAgICBjaG9pY2UsXG4gICAgbm90ZSxcbiAgICAvLyBSZWN0YW5nbGVzXG4gICAgcmVjdFdpdGhUaXRsZSxcbiAgICBsYWJlbFJlY3QsXG4gICAgLy8gSWNvbnNcbiAgICBpY29uU3F1YXJlLFxuICAgIGljb25DaXJjbGUsXG4gICAgaWNvbixcbiAgICBpY29uUm91bmRlZCxcbiAgICBpbWFnZVNxdWFyZSxcbiAgICBhbmNob3IsXG4gICAgLy8gS2FuYmFuIGRpYWdyYW1cbiAgICBrYW5iYW5JdGVtLFxuICAgIC8vIGNsYXNzIGRpYWdyYW1cbiAgICBjbGFzc0JveCxcbiAgICAvLyBlciBkaWFncmFtXG4gICAgZXJCb3gsXG4gICAgLy8gUmVxdWlyZW1lbnQgZGlhZ3JhbVxuICAgIHJlcXVpcmVtZW50Qm94XG4gIH07XG4gIGNvbnN0IGVudHJpZXMgPSBbXG4gICAgLi4uT2JqZWN0LmVudHJpZXModW5kb2N1bWVudGVkU2hhcGVzKSxcbiAgICAuLi5zaGFwZXNEZWZzLmZsYXRNYXAoKHNoYXBlKSA9PiB7XG4gICAgICBjb25zdCBhbGlhc2VzID0gW1xuICAgICAgICBzaGFwZS5zaG9ydE5hbWUsXG4gICAgICAgIC4uLlwiYWxpYXNlc1wiIGluIHNoYXBlID8gc2hhcGUuYWxpYXNlcyA6IFtdLFxuICAgICAgICAuLi5cImludGVybmFsQWxpYXNlc1wiIGluIHNoYXBlID8gc2hhcGUuaW50ZXJuYWxBbGlhc2VzIDogW11cbiAgICAgIF07XG4gICAgICByZXR1cm4gYWxpYXNlcy5tYXAoKGFsaWFzKSA9PiBbYWxpYXMsIHNoYXBlLmhhbmRsZXJdKTtcbiAgICB9KVxuICBdO1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGVudHJpZXMpO1xufSwgXCJnZW5lcmF0ZVNoYXBlTWFwXCIpO1xudmFyIHNoYXBlczIgPSBnZW5lcmF0ZVNoYXBlTWFwKCk7XG5mdW5jdGlvbiBpc1ZhbGlkU2hhcGUoc2hhcGUpIHtcbiAgcmV0dXJuIHNoYXBlIGluIHNoYXBlczI7XG59XG5fX25hbWUoaXNWYWxpZFNoYXBlLCBcImlzVmFsaWRTaGFwZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9ub2Rlcy50c1xudmFyIG5vZGVFbGVtcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG5hc3luYyBmdW5jdGlvbiBpbnNlcnROb2RlKGVsZW0sIG5vZGUsIHJlbmRlck9wdGlvbnMpIHtcbiAgbGV0IG5ld0VsO1xuICBsZXQgZWw7XG4gIGlmIChub2RlLnNoYXBlID09PSBcInJlY3RcIikge1xuICAgIGlmIChub2RlLnJ4ICYmIG5vZGUucnkpIHtcbiAgICAgIG5vZGUuc2hhcGUgPSBcInJvdW5kZWRSZWN0XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2hhcGUgPSBcInNxdWFyZVJlY3RcIjtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2hhcGVIYW5kbGVyID0gbm9kZS5zaGFwZSA/IHNoYXBlczJbbm9kZS5zaGFwZV0gOiB2b2lkIDA7XG4gIGlmICghc2hhcGVIYW5kbGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBzdWNoIHNoYXBlOiAke25vZGUuc2hhcGV9LiBQbGVhc2UgY2hlY2sgeW91ciBzeW50YXguYCk7XG4gIH1cbiAgaWYgKG5vZGUubGluaykge1xuICAgIGxldCB0YXJnZXQ7XG4gICAgaWYgKHJlbmRlck9wdGlvbnMuY29uZmlnLnNlY3VyaXR5TGV2ZWwgPT09IFwic2FuZGJveFwiKSB7XG4gICAgICB0YXJnZXQgPSBcIl90b3BcIjtcbiAgICB9IGVsc2UgaWYgKG5vZGUubGlua1RhcmdldCkge1xuICAgICAgdGFyZ2V0ID0gbm9kZS5saW5rVGFyZ2V0IHx8IFwiX2JsYW5rXCI7XG4gICAgfVxuICAgIG5ld0VsID0gZWxlbS5pbnNlcnQoXCJzdmc6YVwiKS5hdHRyKFwieGxpbms6aHJlZlwiLCBub2RlLmxpbmspLmF0dHIoXCJ0YXJnZXRcIiwgdGFyZ2V0ID8/IG51bGwpO1xuICAgIGVsID0gYXdhaXQgc2hhcGVIYW5kbGVyKG5ld0VsLCBub2RlLCByZW5kZXJPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBlbCA9IGF3YWl0IHNoYXBlSGFuZGxlcihlbGVtLCBub2RlLCByZW5kZXJPcHRpb25zKTtcbiAgICBuZXdFbCA9IGVsO1xuICB9XG4gIGlmIChub2RlLnRvb2x0aXApIHtcbiAgICBlbC5hdHRyKFwidGl0bGVcIiwgbm9kZS50b29sdGlwKTtcbiAgfVxuICBub2RlRWxlbXMuc2V0KG5vZGUuaWQsIG5ld0VsKTtcbiAgaWYgKG5vZGUuaGF2ZUNhbGxiYWNrKSB7XG4gICAgbmV3RWwuYXR0cihcImNsYXNzXCIsIG5ld0VsLmF0dHIoXCJjbGFzc1wiKSArIFwiIGNsaWNrYWJsZVwiKTtcbiAgfVxuICByZXR1cm4gbmV3RWw7XG59XG5fX25hbWUoaW5zZXJ0Tm9kZSwgXCJpbnNlcnROb2RlXCIpO1xudmFyIHNldE5vZGVFbGVtID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZWxlbSwgbm9kZSkgPT4ge1xuICBub2RlRWxlbXMuc2V0KG5vZGUuaWQsIGVsZW0pO1xufSwgXCJzZXROb2RlRWxlbVwiKTtcbnZhciBjbGVhcjIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgbm9kZUVsZW1zLmNsZWFyKCk7XG59LCBcImNsZWFyXCIpO1xudmFyIHBvc2l0aW9uTm9kZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG5vZGUpID0+IHtcbiAgY29uc3QgZWwgPSBub2RlRWxlbXMuZ2V0KG5vZGUuaWQpO1xuICBsb2cudHJhY2UoXG4gICAgXCJUcmFuc2Zvcm1pbmcgbm9kZVwiLFxuICAgIG5vZGUuZGlmZixcbiAgICBub2RlLFxuICAgIFwidHJhbnNsYXRlKFwiICsgKG5vZGUueCAtIG5vZGUud2lkdGggLyAyIC0gNSkgKyBcIiwgXCIgKyBub2RlLndpZHRoIC8gMiArIFwiKVwiXG4gICk7XG4gIGNvbnN0IHBhZGRpbmcgPSA4O1xuICBjb25zdCBkaWZmID0gbm9kZS5kaWZmIHx8IDA7XG4gIGlmIChub2RlLmNsdXN0ZXJOb2RlKSB7XG4gICAgZWwuYXR0cihcbiAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICBcInRyYW5zbGF0ZShcIiArIChub2RlLnggKyBkaWZmIC0gbm9kZS53aWR0aCAvIDIpICsgXCIsIFwiICsgKG5vZGUueSAtIG5vZGUuaGVpZ2h0IC8gMiAtIHBhZGRpbmcpICsgXCIpXCJcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBub2RlLnggKyBcIiwgXCIgKyBub2RlLnkgKyBcIilcIik7XG4gIH1cbiAgcmV0dXJuIGRpZmY7XG59LCBcInBvc2l0aW9uTm9kZVwiKTtcblxuZXhwb3J0IHtcbiAgbGFiZWxIZWxwZXIsXG4gIHVwZGF0ZU5vZGVCb3VuZHMsXG4gIGlzTGFiZWxTdHlsZSxcbiAgY3JlYXRlTGFiZWxfZGVmYXVsdCxcbiAgaXNWYWxpZFNoYXBlLFxuICBpbnNlcnRDbHVzdGVyLFxuICBjbGVhcixcbiAgaW5zZXJ0Tm9kZSxcbiAgc2V0Tm9kZUVsZW0sXG4gIGNsZWFyMixcbiAgcG9zaXRpb25Ob2RlXG59O1xuIiwiaW1wb3J0IHtcbiAgZ2V0TGluZUZ1bmN0aW9uc1dpdGhPZmZzZXRcbn0gZnJvbSBcIi4vY2h1bmstVlYzTTY3SVAubWpzXCI7XG5pbXBvcnQge1xuICBjcmVhdGVMYWJlbF9kZWZhdWx0LFxuICBpc0xhYmVsU3R5bGVcbn0gZnJvbSBcIi4vY2h1bmstSFJVNkREQ0gubWpzXCI7XG5pbXBvcnQge1xuICBnZXRTdWJHcmFwaFRpdGxlTWFyZ2luc1xufSBmcm9tIFwiLi9jaHVuay1LNTU3TjVJWi5tanNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVRleHRcbn0gZnJvbSBcIi4vY2h1bmstQzNNUTVBTk0ubWpzXCI7XG5pbXBvcnQge1xuICB1dGlsc19kZWZhdWx0XG59IGZyb20gXCIuL2NodW5rLU80Tkk2VU5VLm1qc1wiO1xuaW1wb3J0IHtcbiAgX19uYW1lLFxuICBldmFsdWF0ZSxcbiAgZ2V0Q29uZmlnMiBhcyBnZXRDb25maWcsXG4gIGxvZ1xufSBmcm9tIFwiLi9jaHVuay1ZVEpOVDdEVS5tanNcIjtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9lZGdlcy5qc1xuaW1wb3J0IHtcbiAgY3VydmVCYXNpcyxcbiAgY3VydmVMaW5lYXIsXG4gIGN1cnZlQ2FyZGluYWwsXG4gIGN1cnZlQnVtcFgsXG4gIGN1cnZlQnVtcFksXG4gIGN1cnZlQ2F0bXVsbFJvbSxcbiAgY3VydmVNb25vdG9uZVgsXG4gIGN1cnZlTW9ub3RvbmVZLFxuICBjdXJ2ZU5hdHVyYWwsXG4gIGN1cnZlU3RlcCxcbiAgY3VydmVTdGVwQWZ0ZXIsXG4gIGN1cnZlU3RlcEJlZm9yZSxcbiAgbGluZSxcbiAgc2VsZWN0XG59IGZyb20gXCJkM1wiO1xuaW1wb3J0IHJvdWdoIGZyb20gXCJyb3VnaGpzXCI7XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXJpbmctZWxlbWVudHMvZWRnZU1hcmtlci50c1xudmFyIGFkZEVkZ2VNYXJrZXJzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc3ZnUGF0aCwgZWRnZSwgdXJsLCBpZCwgZGlhZ3JhbVR5cGUsIHN0cm9rZUNvbG9yKSA9PiB7XG4gIGlmIChlZGdlLmFycm93VHlwZVN0YXJ0KSB7XG4gICAgYWRkRWRnZU1hcmtlcihzdmdQYXRoLCBcInN0YXJ0XCIsIGVkZ2UuYXJyb3dUeXBlU3RhcnQsIHVybCwgaWQsIGRpYWdyYW1UeXBlLCBzdHJva2VDb2xvcik7XG4gIH1cbiAgaWYgKGVkZ2UuYXJyb3dUeXBlRW5kKSB7XG4gICAgYWRkRWRnZU1hcmtlcihzdmdQYXRoLCBcImVuZFwiLCBlZGdlLmFycm93VHlwZUVuZCwgdXJsLCBpZCwgZGlhZ3JhbVR5cGUsIHN0cm9rZUNvbG9yKTtcbiAgfVxufSwgXCJhZGRFZGdlTWFya2Vyc1wiKTtcbnZhciBhcnJvd1R5cGVzTWFwID0ge1xuICBhcnJvd19jcm9zczogeyB0eXBlOiBcImNyb3NzXCIsIGZpbGw6IGZhbHNlIH0sXG4gIGFycm93X3BvaW50OiB7IHR5cGU6IFwicG9pbnRcIiwgZmlsbDogdHJ1ZSB9LFxuICBhcnJvd19iYXJiOiB7IHR5cGU6IFwiYmFyYlwiLCBmaWxsOiB0cnVlIH0sXG4gIGFycm93X2NpcmNsZTogeyB0eXBlOiBcImNpcmNsZVwiLCBmaWxsOiBmYWxzZSB9LFxuICBhZ2dyZWdhdGlvbjogeyB0eXBlOiBcImFnZ3JlZ2F0aW9uXCIsIGZpbGw6IGZhbHNlIH0sXG4gIGV4dGVuc2lvbjogeyB0eXBlOiBcImV4dGVuc2lvblwiLCBmaWxsOiBmYWxzZSB9LFxuICBjb21wb3NpdGlvbjogeyB0eXBlOiBcImNvbXBvc2l0aW9uXCIsIGZpbGw6IHRydWUgfSxcbiAgZGVwZW5kZW5jeTogeyB0eXBlOiBcImRlcGVuZGVuY3lcIiwgZmlsbDogdHJ1ZSB9LFxuICBsb2xsaXBvcDogeyB0eXBlOiBcImxvbGxpcG9wXCIsIGZpbGw6IGZhbHNlIH0sXG4gIG9ubHlfb25lOiB7IHR5cGU6IFwib25seU9uZVwiLCBmaWxsOiBmYWxzZSB9LFxuICB6ZXJvX29yX29uZTogeyB0eXBlOiBcInplcm9Pck9uZVwiLCBmaWxsOiBmYWxzZSB9LFxuICBvbmVfb3JfbW9yZTogeyB0eXBlOiBcIm9uZU9yTW9yZVwiLCBmaWxsOiBmYWxzZSB9LFxuICB6ZXJvX29yX21vcmU6IHsgdHlwZTogXCJ6ZXJvT3JNb3JlXCIsIGZpbGw6IGZhbHNlIH0sXG4gIHJlcXVpcmVtZW50X2Fycm93OiB7IHR5cGU6IFwicmVxdWlyZW1lbnRfYXJyb3dcIiwgZmlsbDogZmFsc2UgfSxcbiAgcmVxdWlyZW1lbnRfY29udGFpbnM6IHsgdHlwZTogXCJyZXF1aXJlbWVudF9jb250YWluc1wiLCBmaWxsOiBmYWxzZSB9XG59O1xudmFyIGFkZEVkZ2VNYXJrZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzdmdQYXRoLCBwb3NpdGlvbiwgYXJyb3dUeXBlLCB1cmwsIGlkLCBkaWFncmFtVHlwZSwgc3Ryb2tlQ29sb3IpID0+IHtcbiAgY29uc3QgYXJyb3dUeXBlSW5mbyA9IGFycm93VHlwZXNNYXBbYXJyb3dUeXBlXTtcbiAgaWYgKCFhcnJvd1R5cGVJbmZvKSB7XG4gICAgbG9nLndhcm4oYFVua25vd24gYXJyb3cgdHlwZTogJHthcnJvd1R5cGV9YCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGVuZE1hcmtlclR5cGUgPSBhcnJvd1R5cGVJbmZvLnR5cGU7XG4gIGNvbnN0IHN1ZmZpeCA9IHBvc2l0aW9uID09PSBcInN0YXJ0XCIgPyBcIlN0YXJ0XCIgOiBcIkVuZFwiO1xuICBjb25zdCBvcmlnaW5hbE1hcmtlcklkID0gYCR7aWR9XyR7ZGlhZ3JhbVR5cGV9LSR7ZW5kTWFya2VyVHlwZX0ke3N1ZmZpeH1gO1xuICBpZiAoc3Ryb2tlQ29sb3IgJiYgc3Ryb2tlQ29sb3IudHJpbSgpICE9PSBcIlwiKSB7XG4gICAgY29uc3QgY29sb3JJZCA9IHN0cm9rZUNvbG9yLnJlcGxhY2UoL1teXFxkQS1aYS16XS9nLCBcIl9cIik7XG4gICAgY29uc3QgY29sb3JlZE1hcmtlcklkID0gYCR7b3JpZ2luYWxNYXJrZXJJZH1fJHtjb2xvcklkfWA7XG4gICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjb2xvcmVkTWFya2VySWQpKSB7XG4gICAgICBjb25zdCBvcmlnaW5hbE1hcmtlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG9yaWdpbmFsTWFya2VySWQpO1xuICAgICAgaWYgKG9yaWdpbmFsTWFya2VyKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yZWRNYXJrZXIgPSBvcmlnaW5hbE1hcmtlci5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIGNvbG9yZWRNYXJrZXIuaWQgPSBjb2xvcmVkTWFya2VySWQ7XG4gICAgICAgIGNvbnN0IHBhdGhzID0gY29sb3JlZE1hcmtlci5xdWVyeVNlbGVjdG9yQWxsKFwicGF0aCwgY2lyY2xlLCBsaW5lXCIpO1xuICAgICAgICBwYXRocy5mb3JFYWNoKChwYXRoKSA9PiB7XG4gICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgc3Ryb2tlQ29sb3IpO1xuICAgICAgICAgIGlmIChhcnJvd1R5cGVJbmZvLmZpbGwpIHtcbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBzdHJva2VDb2xvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb3JpZ2luYWxNYXJrZXIucGFyZW50Tm9kZT8uYXBwZW5kQ2hpbGQoY29sb3JlZE1hcmtlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN2Z1BhdGguYXR0cihgbWFya2VyLSR7cG9zaXRpb259YCwgYHVybCgke3VybH0jJHtjb2xvcmVkTWFya2VySWR9KWApO1xuICB9IGVsc2Uge1xuICAgIHN2Z1BhdGguYXR0cihgbWFya2VyLSR7cG9zaXRpb259YCwgYHVybCgke3VybH0jJHtvcmlnaW5hbE1hcmtlcklkfSlgKTtcbiAgfVxufSwgXCJhZGRFZGdlTWFya2VyXCIpO1xuXG4vLyBzcmMvcmVuZGVyaW5nLXV0aWwvcmVuZGVyaW5nLWVsZW1lbnRzL2VkZ2VzLmpzXG52YXIgZWRnZUxhYmVscyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG52YXIgdGVybWluYWxMYWJlbHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xudmFyIGNsZWFyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGVkZ2VMYWJlbHMuY2xlYXIoKTtcbiAgdGVybWluYWxMYWJlbHMuY2xlYXIoKTtcbn0sIFwiY2xlYXJcIik7XG52YXIgZ2V0TGFiZWxTdHlsZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzdHlsZUFycmF5KSA9PiB7XG4gIGxldCBzdHlsZXMgPSBzdHlsZUFycmF5ID8gc3R5bGVBcnJheS5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYyArIFwiO1wiICsgc3R5bGUsIFwiXCIpIDogXCJcIjtcbiAgcmV0dXJuIHN0eWxlcztcbn0sIFwiZ2V0TGFiZWxTdHlsZXNcIik7XG52YXIgaW5zZXJ0RWRnZUxhYmVsID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoZWxlbSwgZWRnZSkgPT4ge1xuICBsZXQgdXNlSHRtbExhYmVscyA9IGV2YWx1YXRlKGdldENvbmZpZygpLmZsb3djaGFydC5odG1sTGFiZWxzKTtcbiAgY29uc3QgbGFiZWxFbGVtZW50ID0gYXdhaXQgY3JlYXRlVGV4dChlbGVtLCBlZGdlLmxhYmVsLCB7XG4gICAgc3R5bGU6IGdldExhYmVsU3R5bGVzKGVkZ2UubGFiZWxTdHlsZSksXG4gICAgdXNlSHRtbExhYmVscyxcbiAgICBhZGRTdmdCYWNrZ3JvdW5kOiB0cnVlLFxuICAgIGlzTm9kZTogZmFsc2VcbiAgfSk7XG4gIGxvZy5pbmZvKFwiYWJjODJcIiwgZWRnZSwgZWRnZS5sYWJlbFR5cGUpO1xuICBjb25zdCBlZGdlTGFiZWwgPSBlbGVtLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiZWRnZUxhYmVsXCIpO1xuICBjb25zdCBsYWJlbCA9IGVkZ2VMYWJlbC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImxhYmVsXCIpO1xuICBsYWJlbC5ub2RlKCkuYXBwZW5kQ2hpbGQobGFiZWxFbGVtZW50KTtcbiAgbGV0IGJib3ggPSBsYWJlbEVsZW1lbnQuZ2V0QkJveCgpO1xuICBpZiAodXNlSHRtbExhYmVscykge1xuICAgIGNvbnN0IGRpdiA9IGxhYmVsRWxlbWVudC5jaGlsZHJlblswXTtcbiAgICBjb25zdCBkdiA9IHNlbGVjdChsYWJlbEVsZW1lbnQpO1xuICAgIGJib3ggPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgZHYuYXR0cihcIndpZHRoXCIsIGJib3gud2lkdGgpO1xuICAgIGR2LmF0dHIoXCJoZWlnaHRcIiwgYmJveC5oZWlnaHQpO1xuICB9XG4gIGxhYmVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyAtYmJveC53aWR0aCAvIDIgKyBcIiwgXCIgKyAtYmJveC5oZWlnaHQgLyAyICsgXCIpXCIpO1xuICBlZGdlTGFiZWxzLnNldChlZGdlLmlkLCBlZGdlTGFiZWwpO1xuICBlZGdlLndpZHRoID0gYmJveC53aWR0aDtcbiAgZWRnZS5oZWlnaHQgPSBiYm94LmhlaWdodDtcbiAgbGV0IGZvO1xuICBpZiAoZWRnZS5zdGFydExhYmVsTGVmdCkge1xuICAgIGNvbnN0IHN0YXJ0TGFiZWxFbGVtZW50ID0gYXdhaXQgY3JlYXRlTGFiZWxfZGVmYXVsdChcbiAgICAgIGVkZ2Uuc3RhcnRMYWJlbExlZnQsXG4gICAgICBnZXRMYWJlbFN0eWxlcyhlZGdlLmxhYmVsU3R5bGUpXG4gICAgKTtcbiAgICBjb25zdCBzdGFydEVkZ2VMYWJlbExlZnQgPSBlbGVtLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiZWRnZVRlcm1pbmFsc1wiKTtcbiAgICBjb25zdCBpbm5lciA9IHN0YXJ0RWRnZUxhYmVsTGVmdC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImlubmVyXCIpO1xuICAgIGZvID0gaW5uZXIubm9kZSgpLmFwcGVuZENoaWxkKHN0YXJ0TGFiZWxFbGVtZW50KTtcbiAgICBjb25zdCBzbEJveCA9IHN0YXJ0TGFiZWxFbGVtZW50LmdldEJCb3goKTtcbiAgICBpbm5lci5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgLXNsQm94LndpZHRoIC8gMiArIFwiLCBcIiArIC1zbEJveC5oZWlnaHQgLyAyICsgXCIpXCIpO1xuICAgIGlmICghdGVybWluYWxMYWJlbHMuZ2V0KGVkZ2UuaWQpKSB7XG4gICAgICB0ZXJtaW5hbExhYmVscy5zZXQoZWRnZS5pZCwge30pO1xuICAgIH1cbiAgICB0ZXJtaW5hbExhYmVscy5nZXQoZWRnZS5pZCkuc3RhcnRMZWZ0ID0gc3RhcnRFZGdlTGFiZWxMZWZ0O1xuICAgIHNldFRlcm1pbmFsV2lkdGgoZm8sIGVkZ2Uuc3RhcnRMYWJlbExlZnQpO1xuICB9XG4gIGlmIChlZGdlLnN0YXJ0TGFiZWxSaWdodCkge1xuICAgIGNvbnN0IHN0YXJ0TGFiZWxFbGVtZW50ID0gYXdhaXQgY3JlYXRlTGFiZWxfZGVmYXVsdChcbiAgICAgIGVkZ2Uuc3RhcnRMYWJlbFJpZ2h0LFxuICAgICAgZ2V0TGFiZWxTdHlsZXMoZWRnZS5sYWJlbFN0eWxlKVxuICAgICk7XG4gICAgY29uc3Qgc3RhcnRFZGdlTGFiZWxSaWdodCA9IGVsZW0uaW5zZXJ0KFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJlZGdlVGVybWluYWxzXCIpO1xuICAgIGNvbnN0IGlubmVyID0gc3RhcnRFZGdlTGFiZWxSaWdodC5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImlubmVyXCIpO1xuICAgIGZvID0gc3RhcnRFZGdlTGFiZWxSaWdodC5ub2RlKCkuYXBwZW5kQ2hpbGQoc3RhcnRMYWJlbEVsZW1lbnQpO1xuICAgIGlubmVyLm5vZGUoKS5hcHBlbmRDaGlsZChzdGFydExhYmVsRWxlbWVudCk7XG4gICAgY29uc3Qgc2xCb3ggPSBzdGFydExhYmVsRWxlbWVudC5nZXRCQm94KCk7XG4gICAgaW5uZXIuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIC1zbEJveC53aWR0aCAvIDIgKyBcIiwgXCIgKyAtc2xCb3guaGVpZ2h0IC8gMiArIFwiKVwiKTtcbiAgICBpZiAoIXRlcm1pbmFsTGFiZWxzLmdldChlZGdlLmlkKSkge1xuICAgICAgdGVybWluYWxMYWJlbHMuc2V0KGVkZ2UuaWQsIHt9KTtcbiAgICB9XG4gICAgdGVybWluYWxMYWJlbHMuZ2V0KGVkZ2UuaWQpLnN0YXJ0UmlnaHQgPSBzdGFydEVkZ2VMYWJlbFJpZ2h0O1xuICAgIHNldFRlcm1pbmFsV2lkdGgoZm8sIGVkZ2Uuc3RhcnRMYWJlbFJpZ2h0KTtcbiAgfVxuICBpZiAoZWRnZS5lbmRMYWJlbExlZnQpIHtcbiAgICBjb25zdCBlbmRMYWJlbEVsZW1lbnQgPSBhd2FpdCBjcmVhdGVMYWJlbF9kZWZhdWx0KGVkZ2UuZW5kTGFiZWxMZWZ0LCBnZXRMYWJlbFN0eWxlcyhlZGdlLmxhYmVsU3R5bGUpKTtcbiAgICBjb25zdCBlbmRFZGdlTGFiZWxMZWZ0ID0gZWxlbS5pbnNlcnQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcImVkZ2VUZXJtaW5hbHNcIik7XG4gICAgY29uc3QgaW5uZXIgPSBlbmRFZGdlTGFiZWxMZWZ0Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiaW5uZXJcIik7XG4gICAgZm8gPSBpbm5lci5ub2RlKCkuYXBwZW5kQ2hpbGQoZW5kTGFiZWxFbGVtZW50KTtcbiAgICBjb25zdCBzbEJveCA9IGVuZExhYmVsRWxlbWVudC5nZXRCQm94KCk7XG4gICAgaW5uZXIuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIC1zbEJveC53aWR0aCAvIDIgKyBcIiwgXCIgKyAtc2xCb3guaGVpZ2h0IC8gMiArIFwiKVwiKTtcbiAgICBlbmRFZGdlTGFiZWxMZWZ0Lm5vZGUoKS5hcHBlbmRDaGlsZChlbmRMYWJlbEVsZW1lbnQpO1xuICAgIGlmICghdGVybWluYWxMYWJlbHMuZ2V0KGVkZ2UuaWQpKSB7XG4gICAgICB0ZXJtaW5hbExhYmVscy5zZXQoZWRnZS5pZCwge30pO1xuICAgIH1cbiAgICB0ZXJtaW5hbExhYmVscy5nZXQoZWRnZS5pZCkuZW5kTGVmdCA9IGVuZEVkZ2VMYWJlbExlZnQ7XG4gICAgc2V0VGVybWluYWxXaWR0aChmbywgZWRnZS5lbmRMYWJlbExlZnQpO1xuICB9XG4gIGlmIChlZGdlLmVuZExhYmVsUmlnaHQpIHtcbiAgICBjb25zdCBlbmRMYWJlbEVsZW1lbnQgPSBhd2FpdCBjcmVhdGVMYWJlbF9kZWZhdWx0KGVkZ2UuZW5kTGFiZWxSaWdodCwgZ2V0TGFiZWxTdHlsZXMoZWRnZS5sYWJlbFN0eWxlKSk7XG4gICAgY29uc3QgZW5kRWRnZUxhYmVsUmlnaHQgPSBlbGVtLmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiZWRnZVRlcm1pbmFsc1wiKTtcbiAgICBjb25zdCBpbm5lciA9IGVuZEVkZ2VMYWJlbFJpZ2h0Lmluc2VydChcImdcIikuYXR0cihcImNsYXNzXCIsIFwiaW5uZXJcIik7XG4gICAgZm8gPSBpbm5lci5ub2RlKCkuYXBwZW5kQ2hpbGQoZW5kTGFiZWxFbGVtZW50KTtcbiAgICBjb25zdCBzbEJveCA9IGVuZExhYmVsRWxlbWVudC5nZXRCQm94KCk7XG4gICAgaW5uZXIuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIC1zbEJveC53aWR0aCAvIDIgKyBcIiwgXCIgKyAtc2xCb3guaGVpZ2h0IC8gMiArIFwiKVwiKTtcbiAgICBlbmRFZGdlTGFiZWxSaWdodC5ub2RlKCkuYXBwZW5kQ2hpbGQoZW5kTGFiZWxFbGVtZW50KTtcbiAgICBpZiAoIXRlcm1pbmFsTGFiZWxzLmdldChlZGdlLmlkKSkge1xuICAgICAgdGVybWluYWxMYWJlbHMuc2V0KGVkZ2UuaWQsIHt9KTtcbiAgICB9XG4gICAgdGVybWluYWxMYWJlbHMuZ2V0KGVkZ2UuaWQpLmVuZFJpZ2h0ID0gZW5kRWRnZUxhYmVsUmlnaHQ7XG4gICAgc2V0VGVybWluYWxXaWR0aChmbywgZWRnZS5lbmRMYWJlbFJpZ2h0KTtcbiAgfVxuICByZXR1cm4gbGFiZWxFbGVtZW50O1xufSwgXCJpbnNlcnRFZGdlTGFiZWxcIik7XG5mdW5jdGlvbiBzZXRUZXJtaW5hbFdpZHRoKGZvLCB2YWx1ZSkge1xuICBpZiAoZ2V0Q29uZmlnKCkuZmxvd2NoYXJ0Lmh0bWxMYWJlbHMgJiYgZm8pIHtcbiAgICBmby5zdHlsZS53aWR0aCA9IHZhbHVlLmxlbmd0aCAqIDkgKyBcInB4XCI7XG4gICAgZm8uc3R5bGUuaGVpZ2h0ID0gXCIxMnB4XCI7XG4gIH1cbn1cbl9fbmFtZShzZXRUZXJtaW5hbFdpZHRoLCBcInNldFRlcm1pbmFsV2lkdGhcIik7XG52YXIgcG9zaXRpb25FZGdlTGFiZWwgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlZGdlLCBwYXRocykgPT4ge1xuICBsb2cuZGVidWcoXCJNb3ZpbmcgbGFiZWwgYWJjODggXCIsIGVkZ2UuaWQsIGVkZ2UubGFiZWwsIGVkZ2VMYWJlbHMuZ2V0KGVkZ2UuaWQpLCBwYXRocyk7XG4gIGxldCBwYXRoID0gcGF0aHMudXBkYXRlZFBhdGggPyBwYXRocy51cGRhdGVkUGF0aCA6IHBhdGhzLm9yaWdpbmFsUGF0aDtcbiAgY29uc3Qgc2l0ZUNvbmZpZyA9IGdldENvbmZpZygpO1xuICBjb25zdCB7IHN1YkdyYXBoVGl0bGVUb3RhbE1hcmdpbiB9ID0gZ2V0U3ViR3JhcGhUaXRsZU1hcmdpbnMoc2l0ZUNvbmZpZyk7XG4gIGlmIChlZGdlLmxhYmVsKSB7XG4gICAgY29uc3QgZWwgPSBlZGdlTGFiZWxzLmdldChlZGdlLmlkKTtcbiAgICBsZXQgeCA9IGVkZ2UueDtcbiAgICBsZXQgeSA9IGVkZ2UueTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgY29uc3QgcG9zID0gdXRpbHNfZGVmYXVsdC5jYWxjTGFiZWxQb3NpdGlvbihwYXRoKTtcbiAgICAgIGxvZy5kZWJ1ZyhcbiAgICAgICAgXCJNb3ZpbmcgbGFiZWwgXCIgKyBlZGdlLmxhYmVsICsgXCIgZnJvbSAoXCIsXG4gICAgICAgIHgsXG4gICAgICAgIFwiLFwiLFxuICAgICAgICB5LFxuICAgICAgICBcIikgdG8gKFwiLFxuICAgICAgICBwb3MueCxcbiAgICAgICAgXCIsXCIsXG4gICAgICAgIHBvcy55LFxuICAgICAgICBcIikgYWJjODhcIlxuICAgICAgKTtcbiAgICAgIGlmIChwYXRocy51cGRhdGVkUGF0aCkge1xuICAgICAgICB4ID0gcG9zLng7XG4gICAgICAgIHkgPSBwb3MueTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7eH0sICR7eSArIHN1YkdyYXBoVGl0bGVUb3RhbE1hcmdpbiAvIDJ9KWApO1xuICB9XG4gIGlmIChlZGdlLnN0YXJ0TGFiZWxMZWZ0KSB7XG4gICAgY29uc3QgZWwgPSB0ZXJtaW5hbExhYmVscy5nZXQoZWRnZS5pZCkuc3RhcnRMZWZ0O1xuICAgIGxldCB4ID0gZWRnZS54O1xuICAgIGxldCB5ID0gZWRnZS55O1xuICAgIGlmIChwYXRoKSB7XG4gICAgICBjb25zdCBwb3MgPSB1dGlsc19kZWZhdWx0LmNhbGNUZXJtaW5hbExhYmVsUG9zaXRpb24oZWRnZS5hcnJvd1R5cGVTdGFydCA/IDEwIDogMCwgXCJzdGFydF9sZWZ0XCIsIHBhdGgpO1xuICAgICAgeCA9IHBvcy54O1xuICAgICAgeSA9IHBvcy55O1xuICAgIH1cbiAgICBlbC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgKTtcbiAgfVxuICBpZiAoZWRnZS5zdGFydExhYmVsUmlnaHQpIHtcbiAgICBjb25zdCBlbCA9IHRlcm1pbmFsTGFiZWxzLmdldChlZGdlLmlkKS5zdGFydFJpZ2h0O1xuICAgIGxldCB4ID0gZWRnZS54O1xuICAgIGxldCB5ID0gZWRnZS55O1xuICAgIGlmIChwYXRoKSB7XG4gICAgICBjb25zdCBwb3MgPSB1dGlsc19kZWZhdWx0LmNhbGNUZXJtaW5hbExhYmVsUG9zaXRpb24oXG4gICAgICAgIGVkZ2UuYXJyb3dUeXBlU3RhcnQgPyAxMCA6IDAsXG4gICAgICAgIFwic3RhcnRfcmlnaHRcIixcbiAgICAgICAgcGF0aFxuICAgICAgKTtcbiAgICAgIHggPSBwb3MueDtcbiAgICAgIHkgPSBwb3MueTtcbiAgICB9XG4gICAgZWwuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7eH0sICR7eX0pYCk7XG4gIH1cbiAgaWYgKGVkZ2UuZW5kTGFiZWxMZWZ0KSB7XG4gICAgY29uc3QgZWwgPSB0ZXJtaW5hbExhYmVscy5nZXQoZWRnZS5pZCkuZW5kTGVmdDtcbiAgICBsZXQgeCA9IGVkZ2UueDtcbiAgICBsZXQgeSA9IGVkZ2UueTtcbiAgICBpZiAocGF0aCkge1xuICAgICAgY29uc3QgcG9zID0gdXRpbHNfZGVmYXVsdC5jYWxjVGVybWluYWxMYWJlbFBvc2l0aW9uKGVkZ2UuYXJyb3dUeXBlRW5kID8gMTAgOiAwLCBcImVuZF9sZWZ0XCIsIHBhdGgpO1xuICAgICAgeCA9IHBvcy54O1xuICAgICAgeSA9IHBvcy55O1xuICAgIH1cbiAgICBlbC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgKTtcbiAgfVxuICBpZiAoZWRnZS5lbmRMYWJlbFJpZ2h0KSB7XG4gICAgY29uc3QgZWwgPSB0ZXJtaW5hbExhYmVscy5nZXQoZWRnZS5pZCkuZW5kUmlnaHQ7XG4gICAgbGV0IHggPSBlZGdlLng7XG4gICAgbGV0IHkgPSBlZGdlLnk7XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGNvbnN0IHBvcyA9IHV0aWxzX2RlZmF1bHQuY2FsY1Rlcm1pbmFsTGFiZWxQb3NpdGlvbihlZGdlLmFycm93VHlwZUVuZCA/IDEwIDogMCwgXCJlbmRfcmlnaHRcIiwgcGF0aCk7XG4gICAgICB4ID0gcG9zLng7XG4gICAgICB5ID0gcG9zLnk7XG4gICAgfVxuICAgIGVsLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke3h9LCAke3l9KWApO1xuICB9XG59LCBcInBvc2l0aW9uRWRnZUxhYmVsXCIpO1xudmFyIG91dHNpZGVOb2RlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobm9kZSwgcG9pbnQyKSA9PiB7XG4gIGNvbnN0IHggPSBub2RlLng7XG4gIGNvbnN0IHkgPSBub2RlLnk7XG4gIGNvbnN0IGR4ID0gTWF0aC5hYnMocG9pbnQyLnggLSB4KTtcbiAgY29uc3QgZHkgPSBNYXRoLmFicyhwb2ludDIueSAtIHkpO1xuICBjb25zdCB3ID0gbm9kZS53aWR0aCAvIDI7XG4gIGNvbnN0IGggPSBub2RlLmhlaWdodCAvIDI7XG4gIHJldHVybiBkeCA+PSB3IHx8IGR5ID49IGg7XG59LCBcIm91dHNpZGVOb2RlXCIpO1xudmFyIGludGVyc2VjdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG5vZGUsIG91dHNpZGVQb2ludCwgaW5zaWRlUG9pbnQpID0+IHtcbiAgbG9nLmRlYnVnKGBpbnRlcnNlY3Rpb24gY2FsYyBhYmM4OTpcbiAgb3V0c2lkZVBvaW50OiAke0pTT04uc3RyaW5naWZ5KG91dHNpZGVQb2ludCl9XG4gIGluc2lkZVBvaW50IDogJHtKU09OLnN0cmluZ2lmeShpbnNpZGVQb2ludCl9XG4gIG5vZGUgICAgICAgIDogeDoke25vZGUueH0geToke25vZGUueX0gdzoke25vZGUud2lkdGh9IGg6JHtub2RlLmhlaWdodH1gKTtcbiAgY29uc3QgeCA9IG5vZGUueDtcbiAgY29uc3QgeSA9IG5vZGUueTtcbiAgY29uc3QgZHggPSBNYXRoLmFicyh4IC0gaW5zaWRlUG9pbnQueCk7XG4gIGNvbnN0IHcgPSBub2RlLndpZHRoIC8gMjtcbiAgbGV0IHIgPSBpbnNpZGVQb2ludC54IDwgb3V0c2lkZVBvaW50LnggPyB3IC0gZHggOiB3ICsgZHg7XG4gIGNvbnN0IGggPSBub2RlLmhlaWdodCAvIDI7XG4gIGNvbnN0IFEgPSBNYXRoLmFicyhvdXRzaWRlUG9pbnQueSAtIGluc2lkZVBvaW50LnkpO1xuICBjb25zdCBSID0gTWF0aC5hYnMob3V0c2lkZVBvaW50LnggLSBpbnNpZGVQb2ludC54KTtcbiAgaWYgKE1hdGguYWJzKHkgLSBvdXRzaWRlUG9pbnQueSkgKiB3ID4gTWF0aC5hYnMoeCAtIG91dHNpZGVQb2ludC54KSAqIGgpIHtcbiAgICBsZXQgcSA9IGluc2lkZVBvaW50LnkgPCBvdXRzaWRlUG9pbnQueSA/IG91dHNpZGVQb2ludC55IC0gaCAtIHkgOiB5IC0gaCAtIG91dHNpZGVQb2ludC55O1xuICAgIHIgPSBSICogcSAvIFE7XG4gICAgY29uc3QgcmVzID0ge1xuICAgICAgeDogaW5zaWRlUG9pbnQueCA8IG91dHNpZGVQb2ludC54ID8gaW5zaWRlUG9pbnQueCArIHIgOiBpbnNpZGVQb2ludC54IC0gUiArIHIsXG4gICAgICB5OiBpbnNpZGVQb2ludC55IDwgb3V0c2lkZVBvaW50LnkgPyBpbnNpZGVQb2ludC55ICsgUSAtIHEgOiBpbnNpZGVQb2ludC55IC0gUSArIHFcbiAgICB9O1xuICAgIGlmIChyID09PSAwKSB7XG4gICAgICByZXMueCA9IG91dHNpZGVQb2ludC54O1xuICAgICAgcmVzLnkgPSBvdXRzaWRlUG9pbnQueTtcbiAgICB9XG4gICAgaWYgKFIgPT09IDApIHtcbiAgICAgIHJlcy54ID0gb3V0c2lkZVBvaW50Lng7XG4gICAgfVxuICAgIGlmIChRID09PSAwKSB7XG4gICAgICByZXMueSA9IG91dHNpZGVQb2ludC55O1xuICAgIH1cbiAgICBsb2cuZGVidWcoYGFiYzg5IHRvcC9ib3R0b20gY2FsYywgUSAke1F9LCBxICR7cX0sIFIgJHtSfSwgciAke3J9YCwgcmVzKTtcbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2Uge1xuICAgIGlmIChpbnNpZGVQb2ludC54IDwgb3V0c2lkZVBvaW50LngpIHtcbiAgICAgIHIgPSBvdXRzaWRlUG9pbnQueCAtIHcgLSB4O1xuICAgIH0gZWxzZSB7XG4gICAgICByID0geCAtIHcgLSBvdXRzaWRlUG9pbnQueDtcbiAgICB9XG4gICAgbGV0IHEgPSBRICogciAvIFI7XG4gICAgbGV0IF94ID0gaW5zaWRlUG9pbnQueCA8IG91dHNpZGVQb2ludC54ID8gaW5zaWRlUG9pbnQueCArIFIgLSByIDogaW5zaWRlUG9pbnQueCAtIFIgKyByO1xuICAgIGxldCBfeSA9IGluc2lkZVBvaW50LnkgPCBvdXRzaWRlUG9pbnQueSA/IGluc2lkZVBvaW50LnkgKyBxIDogaW5zaWRlUG9pbnQueSAtIHE7XG4gICAgbG9nLmRlYnVnKGBzaWRlcyBjYWxjIGFiYzg5LCBRICR7UX0sIHEgJHtxfSwgUiAke1J9LCByICR7cn1gLCB7IF94LCBfeSB9KTtcbiAgICBpZiAociA9PT0gMCkge1xuICAgICAgX3ggPSBvdXRzaWRlUG9pbnQueDtcbiAgICAgIF95ID0gb3V0c2lkZVBvaW50Lnk7XG4gICAgfVxuICAgIGlmIChSID09PSAwKSB7XG4gICAgICBfeCA9IG91dHNpZGVQb2ludC54O1xuICAgIH1cbiAgICBpZiAoUSA9PT0gMCkge1xuICAgICAgX3kgPSBvdXRzaWRlUG9pbnQueTtcbiAgICB9XG4gICAgcmV0dXJuIHsgeDogX3gsIHk6IF95IH07XG4gIH1cbn0sIFwiaW50ZXJzZWN0aW9uXCIpO1xudmFyIGN1dFBhdGhBdEludGVyc2VjdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKF9wb2ludHMsIGJvdW5kYXJ5Tm9kZSkgPT4ge1xuICBsb2cud2FybihcImFiYzg4IGN1dFBhdGhBdEludGVyc2VjdFwiLCBfcG9pbnRzLCBib3VuZGFyeU5vZGUpO1xuICBsZXQgcG9pbnRzID0gW107XG4gIGxldCBsYXN0UG9pbnRPdXRzaWRlID0gX3BvaW50c1swXTtcbiAgbGV0IGlzSW5zaWRlID0gZmFsc2U7XG4gIF9wb2ludHMuZm9yRWFjaCgocG9pbnQyKSA9PiB7XG4gICAgbG9nLmluZm8oXCJhYmM4OCBjaGVja2luZyBwb2ludFwiLCBwb2ludDIsIGJvdW5kYXJ5Tm9kZSk7XG4gICAgaWYgKCFvdXRzaWRlTm9kZShib3VuZGFyeU5vZGUsIHBvaW50MikgJiYgIWlzSW5zaWRlKSB7XG4gICAgICBjb25zdCBpbnRlciA9IGludGVyc2VjdGlvbihib3VuZGFyeU5vZGUsIGxhc3RQb2ludE91dHNpZGUsIHBvaW50Mik7XG4gICAgICBsb2cuZGVidWcoXCJhYmM4OCBpbnNpZGVcIiwgcG9pbnQyLCBsYXN0UG9pbnRPdXRzaWRlLCBpbnRlcik7XG4gICAgICBsb2cuZGVidWcoXCJhYmM4OCBpbnRlcnNlY3Rpb25cIiwgaW50ZXIsIGJvdW5kYXJ5Tm9kZSk7XG4gICAgICBsZXQgcG9pbnRQcmVzZW50ID0gZmFsc2U7XG4gICAgICBwb2ludHMuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICBwb2ludFByZXNlbnQgPSBwb2ludFByZXNlbnQgfHwgcC54ID09PSBpbnRlci54ICYmIHAueSA9PT0gaW50ZXIueTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFwb2ludHMuc29tZSgoZSkgPT4gZS54ID09PSBpbnRlci54ICYmIGUueSA9PT0gaW50ZXIueSkpIHtcbiAgICAgICAgcG9pbnRzLnB1c2goaW50ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLndhcm4oXCJhYmM4OCBubyBpbnRlcnNlY3RcIiwgaW50ZXIsIHBvaW50cyk7XG4gICAgICB9XG4gICAgICBpc0luc2lkZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy53YXJuKFwiYWJjODggb3V0c2lkZVwiLCBwb2ludDIsIGxhc3RQb2ludE91dHNpZGUpO1xuICAgICAgbGFzdFBvaW50T3V0c2lkZSA9IHBvaW50MjtcbiAgICAgIGlmICghaXNJbnNpZGUpIHtcbiAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBsb2cuZGVidWcoXCJyZXR1cm5pbmcgcG9pbnRzXCIsIHBvaW50cyk7XG4gIHJldHVybiBwb2ludHM7XG59LCBcImN1dFBhdGhBdEludGVyc2VjdFwiKTtcbmZ1bmN0aW9uIGV4dHJhY3RDb3JuZXJQb2ludHMocG9pbnRzKSB7XG4gIGNvbnN0IGNvcm5lclBvaW50cyA9IFtdO1xuICBjb25zdCBjb3JuZXJQb2ludFBvc2l0aW9ucyA9IFtdO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHBvaW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBwcmV2ID0gcG9pbnRzW2kgLSAxXTtcbiAgICBjb25zdCBjdXJyID0gcG9pbnRzW2ldO1xuICAgIGNvbnN0IG5leHQgPSBwb2ludHNbaSArIDFdO1xuICAgIGlmIChwcmV2LnggPT09IGN1cnIueCAmJiBjdXJyLnkgPT09IG5leHQueSAmJiBNYXRoLmFicyhjdXJyLnggLSBuZXh0LngpID4gNSAmJiBNYXRoLmFicyhjdXJyLnkgLSBwcmV2LnkpID4gNSkge1xuICAgICAgY29ybmVyUG9pbnRzLnB1c2goY3Vycik7XG4gICAgICBjb3JuZXJQb2ludFBvc2l0aW9ucy5wdXNoKGkpO1xuICAgIH0gZWxzZSBpZiAocHJldi55ID09PSBjdXJyLnkgJiYgY3Vyci54ID09PSBuZXh0LnggJiYgTWF0aC5hYnMoY3Vyci54IC0gcHJldi54KSA+IDUgJiYgTWF0aC5hYnMoY3Vyci55IC0gbmV4dC55KSA+IDUpIHtcbiAgICAgIGNvcm5lclBvaW50cy5wdXNoKGN1cnIpO1xuICAgICAgY29ybmVyUG9pbnRQb3NpdGlvbnMucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgY29ybmVyUG9pbnRzLCBjb3JuZXJQb2ludFBvc2l0aW9ucyB9O1xufVxuX19uYW1lKGV4dHJhY3RDb3JuZXJQb2ludHMsIFwiZXh0cmFjdENvcm5lclBvaW50c1wiKTtcbnZhciBmaW5kQWRqYWNlbnRQb2ludCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24ocG9pbnRBLCBwb2ludEIsIGRpc3RhbmNlKSB7XG4gIGNvbnN0IHhEaWZmID0gcG9pbnRCLnggLSBwb2ludEEueDtcbiAgY29uc3QgeURpZmYgPSBwb2ludEIueSAtIHBvaW50QS55O1xuICBjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoeERpZmYgKiB4RGlmZiArIHlEaWZmICogeURpZmYpO1xuICBjb25zdCByYXRpbyA9IGRpc3RhbmNlIC8gbGVuZ3RoO1xuICByZXR1cm4geyB4OiBwb2ludEIueCAtIHJhdGlvICogeERpZmYsIHk6IHBvaW50Qi55IC0gcmF0aW8gKiB5RGlmZiB9O1xufSwgXCJmaW5kQWRqYWNlbnRQb2ludFwiKTtcbnZhciBmaXhDb3JuZXJzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihsaW5lRGF0YSkge1xuICBjb25zdCB7IGNvcm5lclBvaW50UG9zaXRpb25zIH0gPSBleHRyYWN0Q29ybmVyUG9pbnRzKGxpbmVEYXRhKTtcbiAgY29uc3QgbmV3TGluZURhdGEgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjb3JuZXJQb2ludFBvc2l0aW9ucy5pbmNsdWRlcyhpKSkge1xuICAgICAgY29uc3QgcHJldlBvaW50ID0gbGluZURhdGFbaSAtIDFdO1xuICAgICAgY29uc3QgbmV4dFBvaW50ID0gbGluZURhdGFbaSArIDFdO1xuICAgICAgY29uc3QgY29ybmVyUG9pbnQgPSBsaW5lRGF0YVtpXTtcbiAgICAgIGNvbnN0IG5ld1ByZXZQb2ludCA9IGZpbmRBZGphY2VudFBvaW50KHByZXZQb2ludCwgY29ybmVyUG9pbnQsIDUpO1xuICAgICAgY29uc3QgbmV3TmV4dFBvaW50ID0gZmluZEFkamFjZW50UG9pbnQobmV4dFBvaW50LCBjb3JuZXJQb2ludCwgNSk7XG4gICAgICBjb25zdCB4RGlmZiA9IG5ld05leHRQb2ludC54IC0gbmV3UHJldlBvaW50Lng7XG4gICAgICBjb25zdCB5RGlmZiA9IG5ld05leHRQb2ludC55IC0gbmV3UHJldlBvaW50Lnk7XG4gICAgICBuZXdMaW5lRGF0YS5wdXNoKG5ld1ByZXZQb2ludCk7XG4gICAgICBjb25zdCBhID0gTWF0aC5zcXJ0KDIpICogMjtcbiAgICAgIGxldCBuZXdDb3JuZXJQb2ludCA9IHsgeDogY29ybmVyUG9pbnQueCwgeTogY29ybmVyUG9pbnQueSB9O1xuICAgICAgaWYgKE1hdGguYWJzKG5leHRQb2ludC54IC0gcHJldlBvaW50LngpID4gMTAgJiYgTWF0aC5hYnMobmV4dFBvaW50LnkgLSBwcmV2UG9pbnQueSkgPj0gMTApIHtcbiAgICAgICAgbG9nLmRlYnVnKFxuICAgICAgICAgIFwiQ29ybmVyIHBvaW50IGZpeGluZ1wiLFxuICAgICAgICAgIE1hdGguYWJzKG5leHRQb2ludC54IC0gcHJldlBvaW50LngpLFxuICAgICAgICAgIE1hdGguYWJzKG5leHRQb2ludC55IC0gcHJldlBvaW50LnkpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHIgPSA1O1xuICAgICAgICBpZiAoY29ybmVyUG9pbnQueCA9PT0gbmV3UHJldlBvaW50LngpIHtcbiAgICAgICAgICBuZXdDb3JuZXJQb2ludCA9IHtcbiAgICAgICAgICAgIHg6IHhEaWZmIDwgMCA/IG5ld1ByZXZQb2ludC54IC0gciArIGEgOiBuZXdQcmV2UG9pbnQueCArIHIgLSBhLFxuICAgICAgICAgICAgeTogeURpZmYgPCAwID8gbmV3UHJldlBvaW50LnkgLSBhIDogbmV3UHJldlBvaW50LnkgKyBhXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdDb3JuZXJQb2ludCA9IHtcbiAgICAgICAgICAgIHg6IHhEaWZmIDwgMCA/IG5ld1ByZXZQb2ludC54IC0gYSA6IG5ld1ByZXZQb2ludC54ICsgYSxcbiAgICAgICAgICAgIHk6IHlEaWZmIDwgMCA/IG5ld1ByZXZQb2ludC55IC0gciArIGEgOiBuZXdQcmV2UG9pbnQueSArIHIgLSBhXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmRlYnVnKFxuICAgICAgICAgIFwiQ29ybmVyIHBvaW50IHNraXBwaW5nIGZpeGluZ1wiLFxuICAgICAgICAgIE1hdGguYWJzKG5leHRQb2ludC54IC0gcHJldlBvaW50LngpLFxuICAgICAgICAgIE1hdGguYWJzKG5leHRQb2ludC55IC0gcHJldlBvaW50LnkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBuZXdMaW5lRGF0YS5wdXNoKG5ld0Nvcm5lclBvaW50LCBuZXdOZXh0UG9pbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdMaW5lRGF0YS5wdXNoKGxpbmVEYXRhW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0xpbmVEYXRhO1xufSwgXCJmaXhDb3JuZXJzXCIpO1xudmFyIGluc2VydEVkZ2UgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKGVsZW0sIGVkZ2UsIGNsdXN0ZXJEYiwgZGlhZ3JhbVR5cGUsIHN0YXJ0Tm9kZSwgZW5kTm9kZSwgaWQpIHtcbiAgY29uc3QgeyBoYW5kRHJhd25TZWVkIH0gPSBnZXRDb25maWcoKTtcbiAgbGV0IHBvaW50cyA9IGVkZ2UucG9pbnRzO1xuICBsZXQgcG9pbnRzSGFzQ2hhbmdlZCA9IGZhbHNlO1xuICBjb25zdCB0YWlsID0gc3RhcnROb2RlO1xuICB2YXIgaGVhZCA9IGVuZE5vZGU7XG4gIGNvbnN0IGVkZ2VDbGFzc1N0eWxlcyA9IFtdO1xuICBmb3IgKGNvbnN0IGtleSBpbiBlZGdlLmNzc0NvbXBpbGVkU3R5bGVzKSB7XG4gICAgaWYgKGlzTGFiZWxTdHlsZShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgZWRnZUNsYXNzU3R5bGVzLnB1c2goZWRnZS5jc3NDb21waWxlZFN0eWxlc1trZXldKTtcbiAgfVxuICBpZiAoaGVhZC5pbnRlcnNlY3QgJiYgdGFpbC5pbnRlcnNlY3QpIHtcbiAgICBwb2ludHMgPSBwb2ludHMuc2xpY2UoMSwgZWRnZS5wb2ludHMubGVuZ3RoIC0gMSk7XG4gICAgcG9pbnRzLnVuc2hpZnQodGFpbC5pbnRlcnNlY3QocG9pbnRzWzBdKSk7XG4gICAgbG9nLmRlYnVnKFxuICAgICAgXCJMYXN0IHBvaW50IEFQQTEyXCIsXG4gICAgICBlZGdlLnN0YXJ0LFxuICAgICAgXCItLT5cIixcbiAgICAgIGVkZ2UuZW5kLFxuICAgICAgcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSxcbiAgICAgIGhlYWQsXG4gICAgICBoZWFkLmludGVyc2VjdChwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdKVxuICAgICk7XG4gICAgcG9pbnRzLnB1c2goaGVhZC5pbnRlcnNlY3QocG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSkpO1xuICB9XG4gIGlmIChlZGdlLnRvQ2x1c3Rlcikge1xuICAgIGxvZy5pbmZvKFwidG8gY2x1c3RlciBhYmM4OFwiLCBjbHVzdGVyRGIuZ2V0KGVkZ2UudG9DbHVzdGVyKSk7XG4gICAgcG9pbnRzID0gY3V0UGF0aEF0SW50ZXJzZWN0KGVkZ2UucG9pbnRzLCBjbHVzdGVyRGIuZ2V0KGVkZ2UudG9DbHVzdGVyKS5ub2RlKTtcbiAgICBwb2ludHNIYXNDaGFuZ2VkID0gdHJ1ZTtcbiAgfVxuICBpZiAoZWRnZS5mcm9tQ2x1c3Rlcikge1xuICAgIGxvZy5kZWJ1ZyhcbiAgICAgIFwiZnJvbSBjbHVzdGVyIGFiYzg4XCIsXG4gICAgICBjbHVzdGVyRGIuZ2V0KGVkZ2UuZnJvbUNsdXN0ZXIpLFxuICAgICAgSlNPTi5zdHJpbmdpZnkocG9pbnRzLCBudWxsLCAyKVxuICAgICk7XG4gICAgcG9pbnRzID0gY3V0UGF0aEF0SW50ZXJzZWN0KHBvaW50cy5yZXZlcnNlKCksIGNsdXN0ZXJEYi5nZXQoZWRnZS5mcm9tQ2x1c3Rlcikubm9kZSkucmV2ZXJzZSgpO1xuICAgIHBvaW50c0hhc0NoYW5nZWQgPSB0cnVlO1xuICB9XG4gIGxldCBsaW5lRGF0YSA9IHBvaW50cy5maWx0ZXIoKHApID0+ICFOdW1iZXIuaXNOYU4ocC55KSk7XG4gIGxpbmVEYXRhID0gZml4Q29ybmVycyhsaW5lRGF0YSk7XG4gIGxldCBjdXJ2ZSA9IGN1cnZlQmFzaXM7XG4gIGN1cnZlID0gY3VydmVMaW5lYXI7XG4gIHN3aXRjaCAoZWRnZS5jdXJ2ZSkge1xuICAgIGNhc2UgXCJsaW5lYXJcIjpcbiAgICAgIGN1cnZlID0gY3VydmVMaW5lYXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYmFzaXNcIjpcbiAgICAgIGN1cnZlID0gY3VydmVCYXNpcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXJkaW5hbFwiOlxuICAgICAgY3VydmUgPSBjdXJ2ZUNhcmRpbmFsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJ1bXBYXCI6XG4gICAgICBjdXJ2ZSA9IGN1cnZlQnVtcFg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYnVtcFlcIjpcbiAgICAgIGN1cnZlID0gY3VydmVCdW1wWTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXRtdWxsUm9tXCI6XG4gICAgICBjdXJ2ZSA9IGN1cnZlQ2F0bXVsbFJvbTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtb25vdG9uZVhcIjpcbiAgICAgIGN1cnZlID0gY3VydmVNb25vdG9uZVg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibW9ub3RvbmVZXCI6XG4gICAgICBjdXJ2ZSA9IGN1cnZlTW9ub3RvbmVZO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm5hdHVyYWxcIjpcbiAgICAgIGN1cnZlID0gY3VydmVOYXR1cmFsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0ZXBcIjpcbiAgICAgIGN1cnZlID0gY3VydmVTdGVwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0ZXBBZnRlclwiOlxuICAgICAgY3VydmUgPSBjdXJ2ZVN0ZXBBZnRlcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdGVwQmVmb3JlXCI6XG4gICAgICBjdXJ2ZSA9IGN1cnZlU3RlcEJlZm9yZTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjdXJ2ZSA9IGN1cnZlQmFzaXM7XG4gIH1cbiAgY29uc3QgeyB4LCB5IH0gPSBnZXRMaW5lRnVuY3Rpb25zV2l0aE9mZnNldChlZGdlKTtcbiAgY29uc3QgbGluZUZ1bmN0aW9uID0gbGluZSgpLngoeCkueSh5KS5jdXJ2ZShjdXJ2ZSk7XG4gIGxldCBzdHJva2VDbGFzc2VzO1xuICBzd2l0Y2ggKGVkZ2UudGhpY2tuZXNzKSB7XG4gICAgY2FzZSBcIm5vcm1hbFwiOlxuICAgICAgc3Ryb2tlQ2xhc3NlcyA9IFwiZWRnZS10aGlja25lc3Mtbm9ybWFsXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGhpY2tcIjpcbiAgICAgIHN0cm9rZUNsYXNzZXMgPSBcImVkZ2UtdGhpY2tuZXNzLXRoaWNrXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW52aXNpYmxlXCI6XG4gICAgICBzdHJva2VDbGFzc2VzID0gXCJlZGdlLXRoaWNrbmVzcy1pbnZpc2libGVcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdHJva2VDbGFzc2VzID0gXCJlZGdlLXRoaWNrbmVzcy1ub3JtYWxcIjtcbiAgfVxuICBzd2l0Y2ggKGVkZ2UucGF0dGVybikge1xuICAgIGNhc2UgXCJzb2xpZFwiOlxuICAgICAgc3Ryb2tlQ2xhc3NlcyArPSBcIiBlZGdlLXBhdHRlcm4tc29saWRcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkb3R0ZWRcIjpcbiAgICAgIHN0cm9rZUNsYXNzZXMgKz0gXCIgZWRnZS1wYXR0ZXJuLWRvdHRlZFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhc2hlZFwiOlxuICAgICAgc3Ryb2tlQ2xhc3NlcyArPSBcIiBlZGdlLXBhdHRlcm4tZGFzaGVkXCI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3Ryb2tlQ2xhc3NlcyArPSBcIiBlZGdlLXBhdHRlcm4tc29saWRcIjtcbiAgfVxuICBsZXQgc3ZnUGF0aDtcbiAgbGV0IGxpbmVQYXRoID0gbGluZUZ1bmN0aW9uKGxpbmVEYXRhKTtcbiAgY29uc3QgZWRnZVN0eWxlcyA9IEFycmF5LmlzQXJyYXkoZWRnZS5zdHlsZSkgPyBlZGdlLnN0eWxlIDogW2VkZ2Uuc3R5bGVdO1xuICBsZXQgc3Ryb2tlQ29sb3IgPSBlZGdlU3R5bGVzLmZpbmQoKHN0eWxlKSA9PiBzdHlsZT8uc3RhcnRzV2l0aChcInN0cm9rZTpcIikpO1xuICBpZiAoZWRnZS5sb29rID09PSBcImhhbmREcmF3blwiKSB7XG4gICAgY29uc3QgcmMgPSByb3VnaC5zdmcoZWxlbSk7XG4gICAgT2JqZWN0LmFzc2lnbihbXSwgbGluZURhdGEpO1xuICAgIGNvbnN0IHN2Z1BhdGhOb2RlID0gcmMucGF0aChsaW5lUGF0aCwge1xuICAgICAgcm91Z2huZXNzOiAwLjMsXG4gICAgICBzZWVkOiBoYW5kRHJhd25TZWVkXG4gICAgfSk7XG4gICAgc3Ryb2tlQ2xhc3NlcyArPSBcIiB0cmFuc2l0aW9uXCI7XG4gICAgc3ZnUGF0aCA9IHNlbGVjdChzdmdQYXRoTm9kZSkuc2VsZWN0KFwicGF0aFwiKS5hdHRyKFwiaWRcIiwgZWRnZS5pZCkuYXR0cihcImNsYXNzXCIsIFwiIFwiICsgc3Ryb2tlQ2xhc3NlcyArIChlZGdlLmNsYXNzZXMgPyBcIiBcIiArIGVkZ2UuY2xhc3NlcyA6IFwiXCIpKS5hdHRyKFwic3R5bGVcIiwgZWRnZVN0eWxlcyA/IGVkZ2VTdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBhY2MgKyBcIjtcIiArIHN0eWxlLCBcIlwiKSA6IFwiXCIpO1xuICAgIGxldCBkID0gc3ZnUGF0aC5hdHRyKFwiZFwiKTtcbiAgICBzdmdQYXRoLmF0dHIoXCJkXCIsIGQpO1xuICAgIGVsZW0ubm9kZSgpLmFwcGVuZENoaWxkKHN2Z1BhdGgubm9kZSgpKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdHlsZXNGcm9tQ2xhc3NlcyA9IGVkZ2VDbGFzc1N0eWxlcy5qb2luKFwiO1wiKTtcbiAgICBjb25zdCBzdHlsZXMgPSBlZGdlU3R5bGVzID8gZWRnZVN0eWxlcy5yZWR1Y2UoKGFjYywgc3R5bGUpID0+IGFjYyArIHN0eWxlICsgXCI7XCIsIFwiXCIpIDogXCJcIjtcbiAgICBsZXQgYW5pbWF0aW9uQ2xhc3MgPSBcIlwiO1xuICAgIGlmIChlZGdlLmFuaW1hdGUpIHtcbiAgICAgIGFuaW1hdGlvbkNsYXNzID0gXCIgZWRnZS1hbmltYXRpb24tZmFzdFwiO1xuICAgIH1cbiAgICBpZiAoZWRnZS5hbmltYXRpb24pIHtcbiAgICAgIGFuaW1hdGlvbkNsYXNzID0gXCIgZWRnZS1hbmltYXRpb24tXCIgKyBlZGdlLmFuaW1hdGlvbjtcbiAgICB9XG4gICAgY29uc3QgcGF0aFN0eWxlID0gc3R5bGVzRnJvbUNsYXNzZXMgPyBzdHlsZXNGcm9tQ2xhc3NlcyArIFwiO1wiICsgc3R5bGVzICsgXCI7XCIgOiBzdHlsZXM7XG4gICAgc3ZnUGF0aCA9IGVsZW0uYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBsaW5lUGF0aCkuYXR0cihcImlkXCIsIGVkZ2UuaWQpLmF0dHIoXG4gICAgICBcImNsYXNzXCIsXG4gICAgICBcIiBcIiArIHN0cm9rZUNsYXNzZXMgKyAoZWRnZS5jbGFzc2VzID8gXCIgXCIgKyBlZGdlLmNsYXNzZXMgOiBcIlwiKSArIChhbmltYXRpb25DbGFzcyA/PyBcIlwiKVxuICAgICkuYXR0cihcInN0eWxlXCIsIHBhdGhTdHlsZSk7XG4gICAgc3Ryb2tlQ29sb3IgPSBwYXRoU3R5bGUubWF0Y2goL3N0cm9rZTooW147XSspLyk/LlsxXTtcbiAgfVxuICBsZXQgdXJsID0gXCJcIjtcbiAgaWYgKGdldENvbmZpZygpLmZsb3djaGFydC5hcnJvd01hcmtlckFic29sdXRlIHx8IGdldENvbmZpZygpLnN0YXRlLmFycm93TWFya2VyQWJzb2x1dGUpIHtcbiAgICB1cmwgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2g7XG4gICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcKC9nLCBcIlxcXFwoXCIpLnJlcGxhY2UoL1xcKS9nLCBcIlxcXFwpXCIpO1xuICB9XG4gIGxvZy5pbmZvKFwiYXJyb3dUeXBlU3RhcnRcIiwgZWRnZS5hcnJvd1R5cGVTdGFydCk7XG4gIGxvZy5pbmZvKFwiYXJyb3dUeXBlRW5kXCIsIGVkZ2UuYXJyb3dUeXBlRW5kKTtcbiAgYWRkRWRnZU1hcmtlcnMoc3ZnUGF0aCwgZWRnZSwgdXJsLCBpZCwgZGlhZ3JhbVR5cGUsIHN0cm9rZUNvbG9yKTtcbiAgbGV0IHBhdGhzID0ge307XG4gIGlmIChwb2ludHNIYXNDaGFuZ2VkKSB7XG4gICAgcGF0aHMudXBkYXRlZFBhdGggPSBwb2ludHM7XG4gIH1cbiAgcGF0aHMub3JpZ2luYWxQYXRoID0gZWRnZS5wb2ludHM7XG4gIHJldHVybiBwYXRocztcbn0sIFwiaW5zZXJ0RWRnZVwiKTtcblxuLy8gc3JjL3JlbmRlcmluZy11dGlsL3JlbmRlcmluZy1lbGVtZW50cy9tYXJrZXJzLmpzXG52YXIgaW5zZXJ0TWFya2VycyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIG1hcmtlckFycmF5LCB0eXBlLCBpZCkgPT4ge1xuICBtYXJrZXJBcnJheS5mb3JFYWNoKChtYXJrZXJOYW1lKSA9PiB7XG4gICAgbWFya2Vyc1ttYXJrZXJOYW1lXShlbGVtLCB0eXBlLCBpZCk7XG4gIH0pO1xufSwgXCJpbnNlcnRNYXJrZXJzXCIpO1xudmFyIGV4dGVuc2lvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGxvZy50cmFjZShcIk1ha2luZyBtYXJrZXJzIGZvciBcIiwgaWQpO1xuICBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLWV4dGVuc2lvblN0YXJ0XCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciBleHRlbnNpb24gXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxOCkuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDE5MCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAyNDApLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNIDEsNyBMMTgsMTMgViAxIFpcIik7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItZXh0ZW5zaW9uRW5kXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciBleHRlbnNpb24gXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxKS5hdHRyKFwicmVmWVwiLCA3KS5hdHRyKFwibWFya2VyV2lkdGhcIiwgMjApLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgMjgpLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNIDEsMSBWIDEzIEwxOCw3IFpcIik7XG59LCBcImV4dGVuc2lvblwiKTtcbnZhciBjb21wb3NpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItY29tcG9zaXRpb25TdGFydFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtYXJrZXIgY29tcG9zaXRpb24gXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxOCkuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDE5MCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAyNDApLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNIDE4LDcgTDksMTMgTDEsNyBMOSwxIFpcIik7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItY29tcG9zaXRpb25FbmRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIGNvbXBvc2l0aW9uIFwiICsgdHlwZSkuYXR0cihcInJlZlhcIiwgMSkuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDIwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDI4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAxOCw3IEw5LDEzIEwxLDcgTDksMSBaXCIpO1xufSwgXCJjb21wb3NpdGlvblwiKTtcbnZhciBhZ2dyZWdhdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItYWdncmVnYXRpb25TdGFydFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtYXJrZXIgYWdncmVnYXRpb24gXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxOCkuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDE5MCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAyNDApLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNIDE4LDcgTDksMTMgTDEsNyBMOSwxIFpcIik7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItYWdncmVnYXRpb25FbmRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIGFnZ3JlZ2F0aW9uIFwiICsgdHlwZSkuYXR0cihcInJlZlhcIiwgMSkuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDIwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDI4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAxOCw3IEw5LDEzIEwxLDcgTDksMSBaXCIpO1xufSwgXCJhZ2dyZWdhdGlvblwiKTtcbnZhciBkZXBlbmRlbmN5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZWxlbSwgdHlwZSwgaWQpID0+IHtcbiAgZWxlbS5hcHBlbmQoXCJkZWZzXCIpLmFwcGVuZChcIm1hcmtlclwiKS5hdHRyKFwiaWRcIiwgaWQgKyBcIl9cIiArIHR5cGUgKyBcIi1kZXBlbmRlbmN5U3RhcnRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIGRlcGVuZGVuY3kgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCA2KS5hdHRyKFwicmVmWVwiLCA3KS5hdHRyKFwibWFya2VyV2lkdGhcIiwgMTkwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDI0MCkuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk0gNSw3IEw5LDEzIEwxLDcgTDksMSBaXCIpO1xuICBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLWRlcGVuZGVuY3lFbmRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIGRlcGVuZGVuY3kgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxMykuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDIwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDI4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAxOCw3IEw5LDEzIEwxNCw3IEw5LDEgWlwiKTtcbn0sIFwiZGVwZW5kZW5jeVwiKTtcbnZhciBsb2xsaXBvcCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItbG9sbGlwb3BTdGFydFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtYXJrZXIgbG9sbGlwb3AgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxMykuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDE5MCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAyNDApLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcImNpcmNsZVwiKS5hdHRyKFwic3Ryb2tlXCIsIFwiYmxhY2tcIikuYXR0cihcImZpbGxcIiwgXCJ0cmFuc3BhcmVudFwiKS5hdHRyKFwiY3hcIiwgNykuYXR0cihcImN5XCIsIDcpLmF0dHIoXCJyXCIsIDYpO1xuICBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLWxvbGxpcG9wRW5kXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciBsb2xsaXBvcCBcIiArIHR5cGUpLmF0dHIoXCJyZWZYXCIsIDEpLmF0dHIoXCJyZWZZXCIsIDcpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCAxOTApLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgMjQwKS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcInN0cm9rZVwiLCBcImJsYWNrXCIpLmF0dHIoXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIikuYXR0cihcImN4XCIsIDcpLmF0dHIoXCJjeVwiLCA3KS5hdHRyKFwiclwiLCA2KTtcbn0sIFwibG9sbGlwb3BcIik7XG52YXIgcG9pbnQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbGVtLCB0eXBlLCBpZCkgPT4ge1xuICBlbGVtLmFwcGVuZChcIm1hcmtlclwiKS5hdHRyKFwiaWRcIiwgaWQgKyBcIl9cIiArIHR5cGUgKyBcIi1wb2ludEVuZFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtYXJrZXIgXCIgKyB0eXBlKS5hdHRyKFwidmlld0JveFwiLCBcIjAgMCAxMCAxMFwiKS5hdHRyKFwicmVmWFwiLCA1KS5hdHRyKFwicmVmWVwiLCA1KS5hdHRyKFwibWFya2VyVW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKS5hdHRyKFwibWFya2VyV2lkdGhcIiwgOCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCA4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAwIDAgTCAxMCA1IEwgMCAxMCB6XCIpLmF0dHIoXCJjbGFzc1wiLCBcImFycm93TWFya2VyUGF0aFwiKS5zdHlsZShcInN0cm9rZS13aWR0aFwiLCAxKS5zdHlsZShcInN0cm9rZS1kYXNoYXJyYXlcIiwgXCIxLDBcIik7XG4gIGVsZW0uYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLXBvaW50U3RhcnRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIFwiICsgdHlwZSkuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgMTAgMTBcIikuYXR0cihcInJlZlhcIiwgNC41KS5hdHRyKFwicmVmWVwiLCA1KS5hdHRyKFwibWFya2VyVW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKS5hdHRyKFwibWFya2VyV2lkdGhcIiwgOCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCA4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAwIDUgTCAxMCAxMCBMIDEwIDAgelwiKS5hdHRyKFwiY2xhc3NcIiwgXCJhcnJvd01hcmtlclBhdGhcIikuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgMSkuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIFwiMSwwXCIpO1xufSwgXCJwb2ludFwiKTtcbnZhciBjaXJjbGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbGVtLCB0eXBlLCBpZCkgPT4ge1xuICBlbGVtLmFwcGVuZChcIm1hcmtlclwiKS5hdHRyKFwiaWRcIiwgaWQgKyBcIl9cIiArIHR5cGUgKyBcIi1jaXJjbGVFbmRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIFwiICsgdHlwZSkuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgMTAgMTBcIikuYXR0cihcInJlZlhcIiwgMTEpLmF0dHIoXCJyZWZZXCIsIDUpLmF0dHIoXCJtYXJrZXJVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCAxMSkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAxMSkuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwiY2lyY2xlXCIpLmF0dHIoXCJjeFwiLCBcIjVcIikuYXR0cihcImN5XCIsIFwiNVwiKS5hdHRyKFwiclwiLCBcIjVcIikuYXR0cihcImNsYXNzXCIsIFwiYXJyb3dNYXJrZXJQYXRoXCIpLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDEpLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjEsMFwiKTtcbiAgZWxlbS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItY2lyY2xlU3RhcnRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIFwiICsgdHlwZSkuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgMTAgMTBcIikuYXR0cihcInJlZlhcIiwgLTEpLmF0dHIoXCJyZWZZXCIsIDUpLmF0dHIoXCJtYXJrZXJVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCAxMSkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAxMSkuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwiY2lyY2xlXCIpLmF0dHIoXCJjeFwiLCBcIjVcIikuYXR0cihcImN5XCIsIFwiNVwiKS5hdHRyKFwiclwiLCBcIjVcIikuYXR0cihcImNsYXNzXCIsIFwiYXJyb3dNYXJrZXJQYXRoXCIpLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDEpLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjEsMFwiKTtcbn0sIFwiY2lyY2xlXCIpO1xudmFyIGNyb3NzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZWxlbSwgdHlwZSwgaWQpID0+IHtcbiAgZWxlbS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItY3Jvc3NFbmRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIGNyb3NzIFwiICsgdHlwZSkuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgMTEgMTFcIikuYXR0cihcInJlZlhcIiwgMTIpLmF0dHIoXCJyZWZZXCIsIDUuMikuYXR0cihcIm1hcmtlclVuaXRzXCIsIFwidXNlclNwYWNlT25Vc2VcIikuYXR0cihcIm1hcmtlcldpZHRoXCIsIDExKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDExKS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAxLDEgbCA5LDkgTSAxMCwxIGwgLTksOVwiKS5hdHRyKFwiY2xhc3NcIiwgXCJhcnJvd01hcmtlclBhdGhcIikuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgMikuc3R5bGUoXCJzdHJva2UtZGFzaGFycmF5XCIsIFwiMSwwXCIpO1xuICBlbGVtLmFwcGVuZChcIm1hcmtlclwiKS5hdHRyKFwiaWRcIiwgaWQgKyBcIl9cIiArIHR5cGUgKyBcIi1jcm9zc1N0YXJ0XCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciBjcm9zcyBcIiArIHR5cGUpLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAwIDExIDExXCIpLmF0dHIoXCJyZWZYXCIsIC0xKS5hdHRyKFwicmVmWVwiLCA1LjIpLmF0dHIoXCJtYXJrZXJVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCAxMSkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAxMSkuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk0gMSwxIGwgOSw5IE0gMTAsMSBsIC05LDlcIikuYXR0cihcImNsYXNzXCIsIFwiYXJyb3dNYXJrZXJQYXRoXCIpLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDIpLnN0eWxlKFwic3Ryb2tlLWRhc2hhcnJheVwiLCBcIjEsMFwiKTtcbn0sIFwiY3Jvc3NcIik7XG52YXIgYmFyYiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItYmFyYkVuZFwiKS5hdHRyKFwicmVmWFwiLCAxOSkuYXR0cihcInJlZllcIiwgNykuYXR0cihcIm1hcmtlcldpZHRoXCIsIDIwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDE0KS5hdHRyKFwibWFya2VyVW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTSAxOSw3IEw5LDEzIEwxNCw3IEw5LDEgWlwiKTtcbn0sIFwiYmFyYlwiKTtcbnZhciBvbmx5X29uZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItb25seU9uZVN0YXJ0XCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciBvbmx5T25lIFwiICsgdHlwZSkuYXR0cihcInJlZlhcIiwgMCkuYXR0cihcInJlZllcIiwgOSkuYXR0cihcIm1hcmtlcldpZHRoXCIsIDE4KS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDE4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTTksMCBMOSwxOCBNMTUsMCBMMTUsMThcIik7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItb25seU9uZUVuZFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJtYXJrZXIgb25seU9uZSBcIiArIHR5cGUpLmF0dHIoXCJyZWZYXCIsIDE4KS5hdHRyKFwicmVmWVwiLCA5KS5hdHRyKFwibWFya2VyV2lkdGhcIiwgMTgpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgMTgpLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNMywwIEwzLDE4IE05LDAgTDksMThcIik7XG59LCBcIm9ubHlfb25lXCIpO1xudmFyIHplcm9fb3Jfb25lID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZWxlbSwgdHlwZSwgaWQpID0+IHtcbiAgY29uc3Qgc3RhcnRNYXJrZXIgPSBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLXplcm9Pck9uZVN0YXJ0XCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciB6ZXJvT3JPbmUgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAwKS5hdHRyKFwicmVmWVwiLCA5KS5hdHRyKFwibWFya2VyV2lkdGhcIiwgMzApLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgMTgpLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpO1xuICBzdGFydE1hcmtlci5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKS5hdHRyKFwiY3hcIiwgMjEpLmF0dHIoXCJjeVwiLCA5KS5hdHRyKFwiclwiLCA2KTtcbiAgc3RhcnRNYXJrZXIuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk05LDAgTDksMThcIik7XG4gIGNvbnN0IGVuZE1hcmtlciA9IGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItemVyb09yT25lRW5kXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciB6ZXJvT3JPbmUgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAzMCkuYXR0cihcInJlZllcIiwgOSkuYXR0cihcIm1hcmtlcldpZHRoXCIsIDMwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDE4KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKTtcbiAgZW5kTWFya2VyLmFwcGVuZChcImNpcmNsZVwiKS5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpLmF0dHIoXCJjeFwiLCA5KS5hdHRyKFwiY3lcIiwgOSkuYXR0cihcInJcIiwgNik7XG4gIGVuZE1hcmtlci5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTTIxLDAgTDIxLDE4XCIpO1xufSwgXCJ6ZXJvX29yX29uZVwiKTtcbnZhciBvbmVfb3JfbW9yZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItb25lT3JNb3JlU3RhcnRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIG9uZU9yTW9yZSBcIiArIHR5cGUpLmF0dHIoXCJyZWZYXCIsIDE4KS5hdHRyKFwicmVmWVwiLCAxOCkuYXR0cihcIm1hcmtlcldpZHRoXCIsIDQ1KS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDM2KS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJkXCIsIFwiTTAsMTggUSAxOCwwIDM2LDE4IFEgMTgsMzYgMCwxOCBNNDIsOSBMNDIsMjdcIik7XG4gIGVsZW0uYXBwZW5kKFwiZGVmc1wiKS5hcHBlbmQoXCJtYXJrZXJcIikuYXR0cihcImlkXCIsIGlkICsgXCJfXCIgKyB0eXBlICsgXCItb25lT3JNb3JlRW5kXCIpLmF0dHIoXCJjbGFzc1wiLCBcIm1hcmtlciBvbmVPck1vcmUgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAyNykuYXR0cihcInJlZllcIiwgMTgpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA0NSkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAzNikuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk0zLDkgTDMsMjcgTTksMTggUTI3LDAgNDUsMTggUTI3LDM2IDksMThcIik7XG59LCBcIm9uZV9vcl9tb3JlXCIpO1xudmFyIHplcm9fb3JfbW9yZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVsZW0sIHR5cGUsIGlkKSA9PiB7XG4gIGNvbnN0IHN0YXJ0TWFya2VyID0gZWxlbS5hcHBlbmQoXCJkZWZzXCIpLmFwcGVuZChcIm1hcmtlclwiKS5hdHRyKFwiaWRcIiwgaWQgKyBcIl9cIiArIHR5cGUgKyBcIi16ZXJvT3JNb3JlU3RhcnRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIHplcm9Pck1vcmUgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAxOCkuYXR0cihcInJlZllcIiwgMTgpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA1NykuYXR0cihcIm1hcmtlckhlaWdodFwiLCAzNikuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIik7XG4gIHN0YXJ0TWFya2VyLmFwcGVuZChcImNpcmNsZVwiKS5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpLmF0dHIoXCJjeFwiLCA0OCkuYXR0cihcImN5XCIsIDE4KS5hdHRyKFwiclwiLCA2KTtcbiAgc3RhcnRNYXJrZXIuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiZFwiLCBcIk0wLDE4IFExOCwwIDM2LDE4IFExOCwzNiAwLDE4XCIpO1xuICBjb25zdCBlbmRNYXJrZXIgPSBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLXplcm9Pck1vcmVFbmRcIikuYXR0cihcImNsYXNzXCIsIFwibWFya2VyIHplcm9Pck1vcmUgXCIgKyB0eXBlKS5hdHRyKFwicmVmWFwiLCAzOSkuYXR0cihcInJlZllcIiwgMTgpLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA1NykuYXR0cihcIm1hcmtlckhlaWdodFwiLCAzNikuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIik7XG4gIGVuZE1hcmtlci5hcHBlbmQoXCJjaXJjbGVcIikuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKS5hdHRyKFwiY3hcIiwgOSkuYXR0cihcImN5XCIsIDE4KS5hdHRyKFwiclwiLCA2KTtcbiAgZW5kTWFya2VyLmFwcGVuZChcInBhdGhcIikuYXR0cihcImRcIiwgXCJNMjEsMTggUTM5LDAgNTcsMTggUTM5LDM2IDIxLDE4XCIpO1xufSwgXCJ6ZXJvX29yX21vcmVcIik7XG52YXIgcmVxdWlyZW1lbnRfYXJyb3cgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbGVtLCB0eXBlLCBpZCkgPT4ge1xuICBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLXJlcXVpcmVtZW50X2Fycm93RW5kXCIpLmF0dHIoXCJyZWZYXCIsIDIwKS5hdHRyKFwicmVmWVwiLCAxMCkuYXR0cihcIm1hcmtlcldpZHRoXCIsIDIwKS5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDIwKS5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKS5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXG4gICAgXCJkXCIsXG4gICAgYE0wLDBcbiAgICAgIEwyMCwxMFxuICAgICAgTTIwLDEwXG4gICAgICBMMCwyMGBcbiAgKTtcbn0sIFwicmVxdWlyZW1lbnRfYXJyb3dcIik7XG52YXIgcmVxdWlyZW1lbnRfY29udGFpbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlbGVtLCB0eXBlLCBpZCkgPT4ge1xuICBjb25zdCBjb250YWluc05vZGUgPSBlbGVtLmFwcGVuZChcImRlZnNcIikuYXBwZW5kKFwibWFya2VyXCIpLmF0dHIoXCJpZFwiLCBpZCArIFwiX1wiICsgdHlwZSArIFwiLXJlcXVpcmVtZW50X2NvbnRhaW5zU3RhcnRcIikuYXR0cihcInJlZlhcIiwgMCkuYXR0cihcInJlZllcIiwgMTApLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCAyMCkuYXR0cihcIm1hcmtlckhlaWdodFwiLCAyMCkuYXR0cihcIm9yaWVudFwiLCBcImF1dG9cIikuYXBwZW5kKFwiZ1wiKTtcbiAgY29udGFpbnNOb2RlLmFwcGVuZChcImNpcmNsZVwiKS5hdHRyKFwiY3hcIiwgMTApLmF0dHIoXCJjeVwiLCAxMCkuYXR0cihcInJcIiwgOSkuYXR0cihcImZpbGxcIiwgXCJub25lXCIpO1xuICBjb250YWluc05vZGUuYXBwZW5kKFwibGluZVwiKS5hdHRyKFwieDFcIiwgMSkuYXR0cihcIngyXCIsIDE5KS5hdHRyKFwieTFcIiwgMTApLmF0dHIoXCJ5MlwiLCAxMCk7XG4gIGNvbnRhaW5zTm9kZS5hcHBlbmQoXCJsaW5lXCIpLmF0dHIoXCJ5MVwiLCAxKS5hdHRyKFwieTJcIiwgMTkpLmF0dHIoXCJ4MVwiLCAxMCkuYXR0cihcIngyXCIsIDEwKTtcbn0sIFwicmVxdWlyZW1lbnRfY29udGFpbnNcIik7XG52YXIgbWFya2VycyA9IHtcbiAgZXh0ZW5zaW9uLFxuICBjb21wb3NpdGlvbixcbiAgYWdncmVnYXRpb24sXG4gIGRlcGVuZGVuY3ksXG4gIGxvbGxpcG9wLFxuICBwb2ludCxcbiAgY2lyY2xlLFxuICBjcm9zcyxcbiAgYmFyYixcbiAgb25seV9vbmUsXG4gIHplcm9fb3Jfb25lLFxuICBvbmVfb3JfbW9yZSxcbiAgemVyb19vcl9tb3JlLFxuICByZXF1aXJlbWVudF9hcnJvdyxcbiAgcmVxdWlyZW1lbnRfY29udGFpbnNcbn07XG52YXIgbWFya2Vyc19kZWZhdWx0ID0gaW5zZXJ0TWFya2VycztcblxuZXhwb3J0IHtcbiAgY2xlYXIsXG4gIGluc2VydEVkZ2VMYWJlbCxcbiAgcG9zaXRpb25FZGdlTGFiZWwsXG4gIGluc2VydEVkZ2UsXG4gIG1hcmtlcnNfZGVmYXVsdFxufTtcbiIsImltcG9ydCB7XG4gIF9fbmFtZVxufSBmcm9tIFwiLi9jaHVuay1ZVEpOVDdEVS5tanNcIjtcblxuLy8gc3JjL3V0aWxzL3N1YkdyYXBoVGl0bGVNYXJnaW5zLnRzXG52YXIgZ2V0U3ViR3JhcGhUaXRsZU1hcmdpbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh7XG4gIGZsb3djaGFydFxufSkgPT4ge1xuICBjb25zdCBzdWJHcmFwaFRpdGxlVG9wTWFyZ2luID0gZmxvd2NoYXJ0Py5zdWJHcmFwaFRpdGxlTWFyZ2luPy50b3AgPz8gMDtcbiAgY29uc3Qgc3ViR3JhcGhUaXRsZUJvdHRvbU1hcmdpbiA9IGZsb3djaGFydD8uc3ViR3JhcGhUaXRsZU1hcmdpbj8uYm90dG9tID8/IDA7XG4gIGNvbnN0IHN1YkdyYXBoVGl0bGVUb3RhbE1hcmdpbiA9IHN1YkdyYXBoVGl0bGVUb3BNYXJnaW4gKyBzdWJHcmFwaFRpdGxlQm90dG9tTWFyZ2luO1xuICByZXR1cm4ge1xuICAgIHN1YkdyYXBoVGl0bGVUb3BNYXJnaW4sXG4gICAgc3ViR3JhcGhUaXRsZUJvdHRvbU1hcmdpbixcbiAgICBzdWJHcmFwaFRpdGxlVG90YWxNYXJnaW5cbiAgfTtcbn0sIFwiZ2V0U3ViR3JhcGhUaXRsZU1hcmdpbnNcIik7XG5cbmV4cG9ydCB7XG4gIGdldFN1YkdyYXBoVGl0bGVNYXJnaW5zXG59O1xuIiwiaW1wb3J0IHtcbiAgX19uYW1lLFxuICBhc3NpZ25XaXRoRGVwdGhfZGVmYXVsdCxcbiAgY29tbW9uX2RlZmF1bHQsXG4gIGRldGVjdFR5cGUsXG4gIGRpcmVjdGl2ZVJlZ2V4LFxuICBsb2csXG4gIHNhbml0aXplRGlyZWN0aXZlXG59IGZyb20gXCIuL2NodW5rLVlUSk5UN0RVLm1qc1wiO1xuXG4vLyBzcmMvdXRpbHMudHNcbmltcG9ydCB7IHNhbml0aXplVXJsIH0gZnJvbSBcIkBicmFpbnRyZWUvc2FuaXRpemUtdXJsXCI7XG5pbXBvcnQge1xuICBjdXJ2ZUJhc2lzLFxuICBjdXJ2ZUJhc2lzQ2xvc2VkLFxuICBjdXJ2ZUJhc2lzT3BlbixcbiAgY3VydmVCdW1wWCxcbiAgY3VydmVCdW1wWSxcbiAgY3VydmVCdW5kbGUsXG4gIGN1cnZlQ2FyZGluYWxDbG9zZWQsXG4gIGN1cnZlQ2FyZGluYWxPcGVuLFxuICBjdXJ2ZUNhcmRpbmFsLFxuICBjdXJ2ZUNhdG11bGxSb21DbG9zZWQsXG4gIGN1cnZlQ2F0bXVsbFJvbU9wZW4sXG4gIGN1cnZlQ2F0bXVsbFJvbSxcbiAgY3VydmVMaW5lYXIsXG4gIGN1cnZlTGluZWFyQ2xvc2VkLFxuICBjdXJ2ZU1vbm90b25lWCxcbiAgY3VydmVNb25vdG9uZVksXG4gIGN1cnZlTmF0dXJhbCxcbiAgY3VydmVTdGVwLFxuICBjdXJ2ZVN0ZXBBZnRlcixcbiAgY3VydmVTdGVwQmVmb3JlLFxuICBzZWxlY3Rcbn0gZnJvbSBcImQzXCI7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tIFwibG9kYXNoLWVzL21lbW9pemUuanNcIjtcbmltcG9ydCBtZXJnZSBmcm9tIFwibG9kYXNoLWVzL21lcmdlLmpzXCI7XG52YXIgWkVST19XSURUSF9TUEFDRSA9IFwiXFx1MjAwQlwiO1xudmFyIGQzQ3VydmVUeXBlcyA9IHtcbiAgY3VydmVCYXNpcyxcbiAgY3VydmVCYXNpc0Nsb3NlZCxcbiAgY3VydmVCYXNpc09wZW4sXG4gIGN1cnZlQnVtcFgsXG4gIGN1cnZlQnVtcFksXG4gIGN1cnZlQnVuZGxlLFxuICBjdXJ2ZUNhcmRpbmFsQ2xvc2VkLFxuICBjdXJ2ZUNhcmRpbmFsT3BlbixcbiAgY3VydmVDYXJkaW5hbCxcbiAgY3VydmVDYXRtdWxsUm9tQ2xvc2VkLFxuICBjdXJ2ZUNhdG11bGxSb21PcGVuLFxuICBjdXJ2ZUNhdG11bGxSb20sXG4gIGN1cnZlTGluZWFyLFxuICBjdXJ2ZUxpbmVhckNsb3NlZCxcbiAgY3VydmVNb25vdG9uZVgsXG4gIGN1cnZlTW9ub3RvbmVZLFxuICBjdXJ2ZU5hdHVyYWwsXG4gIGN1cnZlU3RlcCxcbiAgY3VydmVTdGVwQWZ0ZXIsXG4gIGN1cnZlU3RlcEJlZm9yZVxufTtcbnZhciBkaXJlY3RpdmVXaXRob3V0T3BlbiA9IC9cXHMqKD86KFxcdyspKD89Oik6fChcXHcrKSlcXHMqKD86KFxcdyspfCgoPzooPyF9JXsyfSkufFxccj9cXG4pKikpP1xccyooPzp9JXsyfSk/L2dpO1xudmFyIGRldGVjdEluaXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKHRleHQsIGNvbmZpZykge1xuICBjb25zdCBpbml0cyA9IGRldGVjdERpcmVjdGl2ZSh0ZXh0LCAvKD86aW5pdFxcYil8KD86aW5pdGlhbGl6ZVxcYikvKTtcbiAgbGV0IHJlc3VsdHMgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5pdHMpKSB7XG4gICAgY29uc3QgYXJncyA9IGluaXRzLm1hcCgoaW5pdCkgPT4gaW5pdC5hcmdzKTtcbiAgICBzYW5pdGl6ZURpcmVjdGl2ZShhcmdzKTtcbiAgICByZXN1bHRzID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQocmVzdWx0cywgWy4uLmFyZ3NdKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHRzID0gaW5pdHMuYXJncztcbiAgfVxuICBpZiAoIXJlc3VsdHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHR5cGUgPSBkZXRlY3RUeXBlKHRleHQsIGNvbmZpZyk7XG4gIGNvbnN0IHByb3AgPSBcImNvbmZpZ1wiO1xuICBpZiAocmVzdWx0c1twcm9wXSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGUgPT09IFwiZmxvd2NoYXJ0LXYyXCIpIHtcbiAgICAgIHR5cGUgPSBcImZsb3djaGFydFwiO1xuICAgIH1cbiAgICByZXN1bHRzW3R5cGVdID0gcmVzdWx0c1twcm9wXTtcbiAgICBkZWxldGUgcmVzdWx0c1twcm9wXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn0sIFwiZGV0ZWN0SW5pdFwiKTtcbnZhciBkZXRlY3REaXJlY3RpdmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKHRleHQsIHR5cGUgPSBudWxsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgY29tbWVudFdpdGhvdXREaXJlY3RpdmVzID0gbmV3IFJlZ0V4cChcbiAgICAgIGBbJV17Mn0oPyFbe10ke2RpcmVjdGl2ZVdpdGhvdXRPcGVuLnNvdXJjZX0pKD89W31dWyVdezJ9KS4qXG5gLFxuICAgICAgXCJpZ1wiXG4gICAgKTtcbiAgICB0ZXh0ID0gdGV4dC50cmltKCkucmVwbGFjZShjb21tZW50V2l0aG91dERpcmVjdGl2ZXMsIFwiXCIpLnJlcGxhY2UoLycvZ20sICdcIicpO1xuICAgIGxvZy5kZWJ1ZyhcbiAgICAgIGBEZXRlY3RpbmcgZGlhZ3JhbSBkaXJlY3RpdmUke3R5cGUgIT09IG51bGwgPyBcIiB0eXBlOlwiICsgdHlwZSA6IFwiXCJ9IGJhc2VkIG9uIHRoZSB0ZXh0OiR7dGV4dH1gXG4gICAgKTtcbiAgICBsZXQgbWF0Y2g7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKChtYXRjaCA9IGRpcmVjdGl2ZVJlZ2V4LmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG4gICAgICBpZiAobWF0Y2guaW5kZXggPT09IGRpcmVjdGl2ZVJlZ2V4Lmxhc3RJbmRleCkge1xuICAgICAgICBkaXJlY3RpdmVSZWdleC5sYXN0SW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChtYXRjaCAmJiAhdHlwZSB8fCB0eXBlICYmIG1hdGNoWzFdPy5tYXRjaCh0eXBlKSB8fCB0eXBlICYmIG1hdGNoWzJdPy5tYXRjaCh0eXBlKSkge1xuICAgICAgICBjb25zdCB0eXBlMiA9IG1hdGNoWzFdID8gbWF0Y2hbMV0gOiBtYXRjaFsyXTtcbiAgICAgICAgY29uc3QgYXJncyA9IG1hdGNoWzNdID8gbWF0Y2hbM10udHJpbSgpIDogbWF0Y2hbNF0gPyBKU09OLnBhcnNlKG1hdGNoWzRdLnRyaW0oKSkgOiBudWxsO1xuICAgICAgICByZXN1bHQucHVzaCh7IHR5cGU6IHR5cGUyLCBhcmdzIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogdGV4dCwgYXJnczogbnVsbCB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoXG4gICAgICBgRVJST1I6ICR7ZXJyb3IubWVzc2FnZX0gLSBVbmFibGUgdG8gcGFyc2UgZGlyZWN0aXZlIHR5cGU6ICcke3R5cGV9JyBiYXNlZCBvbiB0aGUgdGV4dDogJyR7dGV4dH0nYFxuICAgICk7XG4gICAgcmV0dXJuIHsgdHlwZTogdm9pZCAwLCBhcmdzOiBudWxsIH07XG4gIH1cbn0sIFwiZGV0ZWN0RGlyZWN0aXZlXCIpO1xudmFyIHJlbW92ZURpcmVjdGl2ZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKHRleHQpIHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZShkaXJlY3RpdmVSZWdleCwgXCJcIik7XG59LCBcInJlbW92ZURpcmVjdGl2ZXNcIik7XG52YXIgaXNTdWJzdHJpbmdJbkFycmF5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihzdHIsIGFycikge1xuICBmb3IgKGNvbnN0IFtpLCBlbGVtZW50XSBvZiBhcnIuZW50cmllcygpKSB7XG4gICAgaWYgKGVsZW1lbnQubWF0Y2goc3RyKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn0sIFwiaXNTdWJzdHJpbmdJbkFycmF5XCIpO1xuZnVuY3Rpb24gaW50ZXJwb2xhdGVUb0N1cnZlKGludGVycG9sYXRlLCBkZWZhdWx0Q3VydmUpIHtcbiAgaWYgKCFpbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybiBkZWZhdWx0Q3VydmU7XG4gIH1cbiAgY29uc3QgY3VydmVOYW1lID0gYGN1cnZlJHtpbnRlcnBvbGF0ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGludGVycG9sYXRlLnNsaWNlKDEpfWA7XG4gIHJldHVybiBkM0N1cnZlVHlwZXNbY3VydmVOYW1lXSA/PyBkZWZhdWx0Q3VydmU7XG59XG5fX25hbWUoaW50ZXJwb2xhdGVUb0N1cnZlLCBcImludGVycG9sYXRlVG9DdXJ2ZVwiKTtcbmZ1bmN0aW9uIGZvcm1hdFVybChsaW5rU3RyLCBjb25maWcpIHtcbiAgY29uc3QgdXJsID0gbGlua1N0ci50cmltKCk7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxuICBpZiAoY29uZmlnLnNlY3VyaXR5TGV2ZWwgIT09IFwibG9vc2VcIikge1xuICAgIHJldHVybiBzYW5pdGl6ZVVybCh1cmwpO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5fX25hbWUoZm9ybWF0VXJsLCBcImZvcm1hdFVybFwiKTtcbnZhciBydW5GdW5jID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZnVuY3Rpb25OYW1lLCAuLi5wYXJhbXMpID0+IHtcbiAgY29uc3QgYXJyUGF0aHMgPSBmdW5jdGlvbk5hbWUuc3BsaXQoXCIuXCIpO1xuICBjb25zdCBsZW4gPSBhcnJQYXRocy5sZW5ndGggLSAxO1xuICBjb25zdCBmbk5hbWUgPSBhcnJQYXRoc1tsZW5dO1xuICBsZXQgb2JqID0gd2luZG93O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb2JqID0gb2JqW2FyclBhdGhzW2ldXTtcbiAgICBpZiAoIW9iaikge1xuICAgICAgbG9nLmVycm9yKGBGdW5jdGlvbiBuYW1lOiAke2Z1bmN0aW9uTmFtZX0gbm90IGZvdW5kIGluIHdpbmRvd2ApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBvYmpbZm5OYW1lXSguLi5wYXJhbXMpO1xufSwgXCJydW5GdW5jXCIpO1xuZnVuY3Rpb24gZGlzdGFuY2UocDEsIHAyKSB7XG4gIGlmICghcDEgfHwgIXAyKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwMi54IC0gcDEueCwgMikgKyBNYXRoLnBvdyhwMi55IC0gcDEueSwgMikpO1xufVxuX19uYW1lKGRpc3RhbmNlLCBcImRpc3RhbmNlXCIpO1xuZnVuY3Rpb24gdHJhdmVyc2VFZGdlKHBvaW50cykge1xuICBsZXQgcHJldlBvaW50O1xuICBsZXQgdG90YWxEaXN0YW5jZSA9IDA7XG4gIHBvaW50cy5mb3JFYWNoKChwb2ludCkgPT4ge1xuICAgIHRvdGFsRGlzdGFuY2UgKz0gZGlzdGFuY2UocG9pbnQsIHByZXZQb2ludCk7XG4gICAgcHJldlBvaW50ID0gcG9pbnQ7XG4gIH0pO1xuICBjb25zdCByZW1haW5pbmdEaXN0YW5jZSA9IHRvdGFsRGlzdGFuY2UgLyAyO1xuICByZXR1cm4gY2FsY3VsYXRlUG9pbnQocG9pbnRzLCByZW1haW5pbmdEaXN0YW5jZSk7XG59XG5fX25hbWUodHJhdmVyc2VFZGdlLCBcInRyYXZlcnNlRWRnZVwiKTtcbmZ1bmN0aW9uIGNhbGNMYWJlbFBvc2l0aW9uKHBvaW50cykge1xuICBpZiAocG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBwb2ludHNbMF07XG4gIH1cbiAgcmV0dXJuIHRyYXZlcnNlRWRnZShwb2ludHMpO1xufVxuX19uYW1lKGNhbGNMYWJlbFBvc2l0aW9uLCBcImNhbGNMYWJlbFBvc2l0aW9uXCIpO1xudmFyIHJvdW5kTnVtYmVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobnVtLCBwcmVjaXNpb24gPSAyKSA9PiB7XG4gIGNvbnN0IGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiBmYWN0b3IpIC8gZmFjdG9yO1xufSwgXCJyb3VuZE51bWJlclwiKTtcbnZhciBjYWxjdWxhdGVQb2ludCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHBvaW50cywgZGlzdGFuY2VUb1RyYXZlcnNlKSA9PiB7XG4gIGxldCBwcmV2UG9pbnQgPSB2b2lkIDA7XG4gIGxldCByZW1haW5pbmdEaXN0YW5jZSA9IGRpc3RhbmNlVG9UcmF2ZXJzZTtcbiAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHMpIHtcbiAgICBpZiAocHJldlBvaW50KSB7XG4gICAgICBjb25zdCB2ZWN0b3JEaXN0YW5jZSA9IGRpc3RhbmNlKHBvaW50LCBwcmV2UG9pbnQpO1xuICAgICAgaWYgKHZlY3RvckRpc3RhbmNlID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwcmV2UG9pbnQ7XG4gICAgICB9XG4gICAgICBpZiAodmVjdG9yRGlzdGFuY2UgPCByZW1haW5pbmdEaXN0YW5jZSkge1xuICAgICAgICByZW1haW5pbmdEaXN0YW5jZSAtPSB2ZWN0b3JEaXN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlUmF0aW8gPSByZW1haW5pbmdEaXN0YW5jZSAvIHZlY3RvckRpc3RhbmNlO1xuICAgICAgICBpZiAoZGlzdGFuY2VSYXRpbyA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHByZXZQb2ludDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzdGFuY2VSYXRpbyA+PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIHsgeDogcG9pbnQueCwgeTogcG9pbnQueSB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXN0YW5jZVJhdGlvID4gMCAmJiBkaXN0YW5jZVJhdGlvIDwgMSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiByb3VuZE51bWJlcigoMSAtIGRpc3RhbmNlUmF0aW8pICogcHJldlBvaW50LnggKyBkaXN0YW5jZVJhdGlvICogcG9pbnQueCwgNSksXG4gICAgICAgICAgICB5OiByb3VuZE51bWJlcigoMSAtIGRpc3RhbmNlUmF0aW8pICogcHJldlBvaW50LnkgKyBkaXN0YW5jZVJhdGlvICogcG9pbnQueSwgNSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHByZXZQb2ludCA9IHBvaW50O1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgc3VpdGFibGUgcG9pbnQgZm9yIHRoZSBnaXZlbiBkaXN0YW5jZVwiKTtcbn0sIFwiY2FsY3VsYXRlUG9pbnRcIik7XG52YXIgY2FsY0NhcmRpbmFsaXR5UG9zaXRpb24gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpc1JlbGF0aW9uVHlwZVByZXNlbnQsIHBvaW50cywgaW5pdGlhbFBvc2l0aW9uKSA9PiB7XG4gIGxvZy5pbmZvKGBvdXIgcG9pbnRzICR7SlNPTi5zdHJpbmdpZnkocG9pbnRzKX1gKTtcbiAgaWYgKHBvaW50c1swXSAhPT0gaW5pdGlhbFBvc2l0aW9uKSB7XG4gICAgcG9pbnRzID0gcG9pbnRzLnJldmVyc2UoKTtcbiAgfVxuICBjb25zdCBkaXN0YW5jZVRvQ2FyZGluYWxpdHlQb2ludCA9IDI1O1xuICBjb25zdCBjZW50ZXIgPSBjYWxjdWxhdGVQb2ludChwb2ludHMsIGRpc3RhbmNlVG9DYXJkaW5hbGl0eVBvaW50KTtcbiAgY29uc3QgZCA9IGlzUmVsYXRpb25UeXBlUHJlc2VudCA/IDEwIDogNTtcbiAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKHBvaW50c1swXS55IC0gY2VudGVyLnksIHBvaW50c1swXS54IC0gY2VudGVyLngpO1xuICBjb25zdCBjYXJkaW5hbGl0eVBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gIGNhcmRpbmFsaXR5UG9zaXRpb24ueCA9IE1hdGguc2luKGFuZ2xlKSAqIGQgKyAocG9pbnRzWzBdLnggKyBjZW50ZXIueCkgLyAyO1xuICBjYXJkaW5hbGl0eVBvc2l0aW9uLnkgPSAtTWF0aC5jb3MoYW5nbGUpICogZCArIChwb2ludHNbMF0ueSArIGNlbnRlci55KSAvIDI7XG4gIHJldHVybiBjYXJkaW5hbGl0eVBvc2l0aW9uO1xufSwgXCJjYWxjQ2FyZGluYWxpdHlQb3NpdGlvblwiKTtcbmZ1bmN0aW9uIGNhbGNUZXJtaW5hbExhYmVsUG9zaXRpb24odGVybWluYWxNYXJrZXJTaXplLCBwb3NpdGlvbiwgX3BvaW50cykge1xuICBjb25zdCBwb2ludHMgPSBzdHJ1Y3R1cmVkQ2xvbmUoX3BvaW50cyk7XG4gIGxvZy5pbmZvKFwib3VyIHBvaW50c1wiLCBwb2ludHMpO1xuICBpZiAocG9zaXRpb24gIT09IFwic3RhcnRfbGVmdFwiICYmIHBvc2l0aW9uICE9PSBcInN0YXJ0X3JpZ2h0XCIpIHtcbiAgICBwb2ludHMucmV2ZXJzZSgpO1xuICB9XG4gIGNvbnN0IGRpc3RhbmNlVG9DYXJkaW5hbGl0eVBvaW50ID0gMjUgKyB0ZXJtaW5hbE1hcmtlclNpemU7XG4gIGNvbnN0IGNlbnRlciA9IGNhbGN1bGF0ZVBvaW50KHBvaW50cywgZGlzdGFuY2VUb0NhcmRpbmFsaXR5UG9pbnQpO1xuICBjb25zdCBkID0gMTAgKyB0ZXJtaW5hbE1hcmtlclNpemUgKiAwLjU7XG4gIGNvbnN0IGFuZ2xlID0gTWF0aC5hdGFuMihwb2ludHNbMF0ueSAtIGNlbnRlci55LCBwb2ludHNbMF0ueCAtIGNlbnRlci54KTtcbiAgY29uc3QgY2FyZGluYWxpdHlQb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9O1xuICBpZiAocG9zaXRpb24gPT09IFwic3RhcnRfbGVmdFwiKSB7XG4gICAgY2FyZGluYWxpdHlQb3NpdGlvbi54ID0gTWF0aC5zaW4oYW5nbGUgKyBNYXRoLlBJKSAqIGQgKyAocG9pbnRzWzBdLnggKyBjZW50ZXIueCkgLyAyO1xuICAgIGNhcmRpbmFsaXR5UG9zaXRpb24ueSA9IC1NYXRoLmNvcyhhbmdsZSArIE1hdGguUEkpICogZCArIChwb2ludHNbMF0ueSArIGNlbnRlci55KSAvIDI7XG4gIH0gZWxzZSBpZiAocG9zaXRpb24gPT09IFwiZW5kX3JpZ2h0XCIpIHtcbiAgICBjYXJkaW5hbGl0eVBvc2l0aW9uLnggPSBNYXRoLnNpbihhbmdsZSAtIE1hdGguUEkpICogZCArIChwb2ludHNbMF0ueCArIGNlbnRlci54KSAvIDIgLSA1O1xuICAgIGNhcmRpbmFsaXR5UG9zaXRpb24ueSA9IC1NYXRoLmNvcyhhbmdsZSAtIE1hdGguUEkpICogZCArIChwb2ludHNbMF0ueSArIGNlbnRlci55KSAvIDIgLSA1O1xuICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSBcImVuZF9sZWZ0XCIpIHtcbiAgICBjYXJkaW5hbGl0eVBvc2l0aW9uLnggPSBNYXRoLnNpbihhbmdsZSkgKiBkICsgKHBvaW50c1swXS54ICsgY2VudGVyLngpIC8gMiAtIDU7XG4gICAgY2FyZGluYWxpdHlQb3NpdGlvbi55ID0gLU1hdGguY29zKGFuZ2xlKSAqIGQgKyAocG9pbnRzWzBdLnkgKyBjZW50ZXIueSkgLyAyIC0gNTtcbiAgfSBlbHNlIHtcbiAgICBjYXJkaW5hbGl0eVBvc2l0aW9uLnggPSBNYXRoLnNpbihhbmdsZSkgKiBkICsgKHBvaW50c1swXS54ICsgY2VudGVyLngpIC8gMjtcbiAgICBjYXJkaW5hbGl0eVBvc2l0aW9uLnkgPSAtTWF0aC5jb3MoYW5nbGUpICogZCArIChwb2ludHNbMF0ueSArIGNlbnRlci55KSAvIDI7XG4gIH1cbiAgcmV0dXJuIGNhcmRpbmFsaXR5UG9zaXRpb247XG59XG5fX25hbWUoY2FsY1Rlcm1pbmFsTGFiZWxQb3NpdGlvbiwgXCJjYWxjVGVybWluYWxMYWJlbFBvc2l0aW9uXCIpO1xuZnVuY3Rpb24gZ2V0U3R5bGVzRnJvbUFycmF5KGFycikge1xuICBsZXQgc3R5bGUgPSBcIlwiO1xuICBsZXQgbGFiZWxTdHlsZSA9IFwiXCI7XG4gIGZvciAoY29uc3QgZWxlbWVudCBvZiBhcnIpIHtcbiAgICBpZiAoZWxlbWVudCAhPT0gdm9pZCAwKSB7XG4gICAgICBpZiAoZWxlbWVudC5zdGFydHNXaXRoKFwiY29sb3I6XCIpIHx8IGVsZW1lbnQuc3RhcnRzV2l0aChcInRleHQtYWxpZ246XCIpKSB7XG4gICAgICAgIGxhYmVsU3R5bGUgPSBsYWJlbFN0eWxlICsgZWxlbWVudCArIFwiO1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGUgPSBzdHlsZSArIGVsZW1lbnQgKyBcIjtcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgc3R5bGUsIGxhYmVsU3R5bGUgfTtcbn1cbl9fbmFtZShnZXRTdHlsZXNGcm9tQXJyYXksIFwiZ2V0U3R5bGVzRnJvbUFycmF5XCIpO1xudmFyIGNudCA9IDA7XG52YXIgZ2VuZXJhdGVJZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICBjbnQrKztcbiAgcmV0dXJuIFwiaWQtXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTIpICsgXCItXCIgKyBjbnQ7XG59LCBcImdlbmVyYXRlSWRcIik7XG5mdW5jdGlvbiBtYWtlUmFuZG9tSGV4KGxlbmd0aCkge1xuICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgY29uc3QgY2hhcmFjdGVycyA9IFwiMDEyMzQ1Njc4OWFiY2RlZlwiO1xuICBjb25zdCBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5fX25hbWUobWFrZVJhbmRvbUhleCwgXCJtYWtlUmFuZG9tSGV4XCIpO1xudmFyIHJhbmRvbSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIG1ha2VSYW5kb21IZXgob3B0aW9ucy5sZW5ndGgpO1xufSwgXCJyYW5kb21cIik7XG52YXIgZ2V0VGV4dE9iaiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIGZpbGw6IHZvaWQgMCxcbiAgICBhbmNob3I6IFwic3RhcnRcIixcbiAgICBzdHlsZTogXCIjNjY2XCIsXG4gICAgd2lkdGg6IDEwMCxcbiAgICBoZWlnaHQ6IDEwMCxcbiAgICB0ZXh0TWFyZ2luOiAwLFxuICAgIHJ4OiAwLFxuICAgIHJ5OiAwLFxuICAgIHZhbGlnbjogdm9pZCAwLFxuICAgIHRleHQ6IFwiXCJcbiAgfTtcbn0sIFwiZ2V0VGV4dE9ialwiKTtcbnZhciBkcmF3U2ltcGxlVGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oZWxlbSwgdGV4dERhdGEpIHtcbiAgY29uc3QgblRleHQgPSB0ZXh0RGF0YS50ZXh0LnJlcGxhY2UoY29tbW9uX2RlZmF1bHQubGluZUJyZWFrUmVnZXgsIFwiIFwiKTtcbiAgY29uc3QgWywgX2ZvbnRTaXplUHhdID0gcGFyc2VGb250U2l6ZSh0ZXh0RGF0YS5mb250U2l6ZSk7XG4gIGNvbnN0IHRleHRFbGVtID0gZWxlbS5hcHBlbmQoXCJ0ZXh0XCIpO1xuICB0ZXh0RWxlbS5hdHRyKFwieFwiLCB0ZXh0RGF0YS54KTtcbiAgdGV4dEVsZW0uYXR0cihcInlcIiwgdGV4dERhdGEueSk7XG4gIHRleHRFbGVtLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgdGV4dERhdGEuYW5jaG9yKTtcbiAgdGV4dEVsZW0uc3R5bGUoXCJmb250LWZhbWlseVwiLCB0ZXh0RGF0YS5mb250RmFtaWx5KTtcbiAgdGV4dEVsZW0uc3R5bGUoXCJmb250LXNpemVcIiwgX2ZvbnRTaXplUHgpO1xuICB0ZXh0RWxlbS5zdHlsZShcImZvbnQtd2VpZ2h0XCIsIHRleHREYXRhLmZvbnRXZWlnaHQpO1xuICB0ZXh0RWxlbS5hdHRyKFwiZmlsbFwiLCB0ZXh0RGF0YS5maWxsKTtcbiAgaWYgKHRleHREYXRhLmNsYXNzICE9PSB2b2lkIDApIHtcbiAgICB0ZXh0RWxlbS5hdHRyKFwiY2xhc3NcIiwgdGV4dERhdGEuY2xhc3MpO1xuICB9XG4gIGNvbnN0IHNwYW4gPSB0ZXh0RWxlbS5hcHBlbmQoXCJ0c3BhblwiKTtcbiAgc3Bhbi5hdHRyKFwieFwiLCB0ZXh0RGF0YS54ICsgdGV4dERhdGEudGV4dE1hcmdpbiAqIDIpO1xuICBzcGFuLmF0dHIoXCJmaWxsXCIsIHRleHREYXRhLmZpbGwpO1xuICBzcGFuLnRleHQoblRleHQpO1xuICByZXR1cm4gdGV4dEVsZW07XG59LCBcImRyYXdTaW1wbGVUZXh0XCIpO1xudmFyIHdyYXBMYWJlbCA9IG1lbW9pemUoXG4gIChsYWJlbCwgbWF4V2lkdGgsIGNvbmZpZykgPT4ge1xuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gICAgY29uZmlnID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHsgZm9udFNpemU6IDEyLCBmb250V2VpZ2h0OiA0MDAsIGZvbnRGYW1pbHk6IFwiQXJpYWxcIiwgam9pbldpdGg6IFwiPGJyLz5cIiB9LFxuICAgICAgY29uZmlnXG4gICAgKTtcbiAgICBpZiAoY29tbW9uX2RlZmF1bHQubGluZUJyZWFrUmVnZXgudGVzdChsYWJlbCkpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gICAgY29uc3Qgd29yZHMgPSBsYWJlbC5zcGxpdChcIiBcIikuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGNvbnN0IGNvbXBsZXRlZExpbmVzID0gW107XG4gICAgbGV0IG5leHRMaW5lID0gXCJcIjtcbiAgICB3b3Jkcy5mb3JFYWNoKCh3b3JkLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3Qgd29yZExlbmd0aCA9IGNhbGN1bGF0ZVRleHRXaWR0aChgJHt3b3JkfSBgLCBjb25maWcpO1xuICAgICAgY29uc3QgbmV4dExpbmVMZW5ndGggPSBjYWxjdWxhdGVUZXh0V2lkdGgobmV4dExpbmUsIGNvbmZpZyk7XG4gICAgICBpZiAod29yZExlbmd0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgIGNvbnN0IHsgaHlwaGVuYXRlZFN0cmluZ3MsIHJlbWFpbmluZ1dvcmQgfSA9IGJyZWFrU3RyaW5nKHdvcmQsIG1heFdpZHRoLCBcIi1cIiwgY29uZmlnKTtcbiAgICAgICAgY29tcGxldGVkTGluZXMucHVzaChuZXh0TGluZSwgLi4uaHlwaGVuYXRlZFN0cmluZ3MpO1xuICAgICAgICBuZXh0TGluZSA9IHJlbWFpbmluZ1dvcmQ7XG4gICAgICB9IGVsc2UgaWYgKG5leHRMaW5lTGVuZ3RoICsgd29yZExlbmd0aCA+PSBtYXhXaWR0aCkge1xuICAgICAgICBjb21wbGV0ZWRMaW5lcy5wdXNoKG5leHRMaW5lKTtcbiAgICAgICAgbmV4dExpbmUgPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dExpbmUgPSBbbmV4dExpbmUsIHdvcmRdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGN1cnJlbnRXb3JkID0gaW5kZXggKyAxO1xuICAgICAgY29uc3QgaXNMYXN0V29yZCA9IGN1cnJlbnRXb3JkID09PSB3b3Jkcy5sZW5ndGg7XG4gICAgICBpZiAoaXNMYXN0V29yZCkge1xuICAgICAgICBjb21wbGV0ZWRMaW5lcy5wdXNoKG5leHRMaW5lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29tcGxldGVkTGluZXMuZmlsdGVyKChsaW5lKSA9PiBsaW5lICE9PSBcIlwiKS5qb2luKGNvbmZpZy5qb2luV2l0aCk7XG4gIH0sXG4gIChsYWJlbCwgbWF4V2lkdGgsIGNvbmZpZykgPT4gYCR7bGFiZWx9JHttYXhXaWR0aH0ke2NvbmZpZy5mb250U2l6ZX0ke2NvbmZpZy5mb250V2VpZ2h0fSR7Y29uZmlnLmZvbnRGYW1pbHl9JHtjb25maWcuam9pbldpdGh9YFxuKTtcbnZhciBicmVha1N0cmluZyA9IG1lbW9pemUoXG4gICh3b3JkLCBtYXhXaWR0aCwgaHlwaGVuQ2hhcmFjdGVyID0gXCItXCIsIGNvbmZpZykgPT4ge1xuICAgIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7IGZvbnRTaXplOiAxMiwgZm9udFdlaWdodDogNDAwLCBmb250RmFtaWx5OiBcIkFyaWFsXCIsIG1hcmdpbjogMCB9LFxuICAgICAgY29uZmlnXG4gICAgKTtcbiAgICBjb25zdCBjaGFyYWN0ZXJzID0gWy4uLndvcmRdO1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgbGV0IGN1cnJlbnRMaW5lID0gXCJcIjtcbiAgICBjaGFyYWN0ZXJzLmZvckVhY2goKGNoYXJhY3RlciwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRMaW5lID0gYCR7Y3VycmVudExpbmV9JHtjaGFyYWN0ZXJ9YDtcbiAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IGNhbGN1bGF0ZVRleHRXaWR0aChuZXh0TGluZSwgY29uZmlnKTtcbiAgICAgIGlmIChsaW5lV2lkdGggPj0gbWF4V2lkdGgpIHtcbiAgICAgICAgY29uc3QgY3VycmVudENoYXJhY3RlciA9IGluZGV4ICsgMTtcbiAgICAgICAgY29uc3QgaXNMYXN0TGluZSA9IGNoYXJhY3RlcnMubGVuZ3RoID09PSBjdXJyZW50Q2hhcmFjdGVyO1xuICAgICAgICBjb25zdCBoeXBoZW5hdGVkTmV4dExpbmUgPSBgJHtuZXh0TGluZX0ke2h5cGhlbkNoYXJhY3Rlcn1gO1xuICAgICAgICBsaW5lcy5wdXNoKGlzTGFzdExpbmUgPyBuZXh0TGluZSA6IGh5cGhlbmF0ZWROZXh0TGluZSk7XG4gICAgICAgIGN1cnJlbnRMaW5lID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRMaW5lID0gbmV4dExpbmU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgaHlwaGVuYXRlZFN0cmluZ3M6IGxpbmVzLCByZW1haW5pbmdXb3JkOiBjdXJyZW50TGluZSB9O1xuICB9LFxuICAod29yZCwgbWF4V2lkdGgsIGh5cGhlbkNoYXJhY3RlciA9IFwiLVwiLCBjb25maWcpID0+IGAke3dvcmR9JHttYXhXaWR0aH0ke2h5cGhlbkNoYXJhY3Rlcn0ke2NvbmZpZy5mb250U2l6ZX0ke2NvbmZpZy5mb250V2VpZ2h0fSR7Y29uZmlnLmZvbnRGYW1pbHl9YFxuKTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZVRleHRIZWlnaHQodGV4dCwgY29uZmlnKSB7XG4gIHJldHVybiBjYWxjdWxhdGVUZXh0RGltZW5zaW9ucyh0ZXh0LCBjb25maWcpLmhlaWdodDtcbn1cbl9fbmFtZShjYWxjdWxhdGVUZXh0SGVpZ2h0LCBcImNhbGN1bGF0ZVRleHRIZWlnaHRcIik7XG5mdW5jdGlvbiBjYWxjdWxhdGVUZXh0V2lkdGgodGV4dCwgY29uZmlnKSB7XG4gIHJldHVybiBjYWxjdWxhdGVUZXh0RGltZW5zaW9ucyh0ZXh0LCBjb25maWcpLndpZHRoO1xufVxuX19uYW1lKGNhbGN1bGF0ZVRleHRXaWR0aCwgXCJjYWxjdWxhdGVUZXh0V2lkdGhcIik7XG52YXIgY2FsY3VsYXRlVGV4dERpbWVuc2lvbnMgPSBtZW1vaXplKFxuICAodGV4dCwgY29uZmlnKSA9PiB7XG4gICAgY29uc3QgeyBmb250U2l6ZSA9IDEyLCBmb250RmFtaWx5ID0gXCJBcmlhbFwiLCBmb250V2VpZ2h0ID0gNDAwIH0gPSBjb25maWc7XG4gICAgaWYgKCF0ZXh0KSB7XG4gICAgICByZXR1cm4geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgfVxuICAgIGNvbnN0IFssIF9mb250U2l6ZVB4XSA9IHBhcnNlRm9udFNpemUoZm9udFNpemUpO1xuICAgIGNvbnN0IGZvbnRGYW1pbGllcyA9IFtcInNhbnMtc2VyaWZcIiwgZm9udEZhbWlseV07XG4gICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KGNvbW1vbl9kZWZhdWx0LmxpbmVCcmVha1JlZ2V4KTtcbiAgICBjb25zdCBkaW1zID0gW107XG4gICAgY29uc3QgYm9keSA9IHNlbGVjdChcImJvZHlcIik7XG4gICAgaWYgKCFib2R5LnJlbW92ZSkge1xuICAgICAgcmV0dXJuIHsgd2lkdGg6IDAsIGhlaWdodDogMCwgbGluZUhlaWdodDogMCB9O1xuICAgIH1cbiAgICBjb25zdCBnID0gYm9keS5hcHBlbmQoXCJzdmdcIik7XG4gICAgZm9yIChjb25zdCBmb250RmFtaWx5MiBvZiBmb250RmFtaWxpZXMpIHtcbiAgICAgIGxldCBjSGVpZ2h0ID0gMDtcbiAgICAgIGNvbnN0IGRpbSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCwgbGluZUhlaWdodDogMCB9O1xuICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAgIGNvbnN0IHRleHRPYmogPSBnZXRUZXh0T2JqKCk7XG4gICAgICAgIHRleHRPYmoudGV4dCA9IGxpbmUgfHwgWkVST19XSURUSF9TUEFDRTtcbiAgICAgICAgY29uc3QgdGV4dEVsZW0gPSBkcmF3U2ltcGxlVGV4dChnLCB0ZXh0T2JqKS5zdHlsZShcImZvbnQtc2l6ZVwiLCBfZm9udFNpemVQeCkuc3R5bGUoXCJmb250LXdlaWdodFwiLCBmb250V2VpZ2h0KS5zdHlsZShcImZvbnQtZmFtaWx5XCIsIGZvbnRGYW1pbHkyKTtcbiAgICAgICAgY29uc3QgYkJveCA9ICh0ZXh0RWxlbS5fZ3JvdXBzIHx8IHRleHRFbGVtKVswXVswXS5nZXRCQm94KCk7XG4gICAgICAgIGlmIChiQm94LndpZHRoID09PSAwICYmIGJCb3guaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic3ZnIGVsZW1lbnQgbm90IGluIHJlbmRlciB0cmVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGRpbS53aWR0aCA9IE1hdGgucm91bmQoTWF0aC5tYXgoZGltLndpZHRoLCBiQm94LndpZHRoKSk7XG4gICAgICAgIGNIZWlnaHQgPSBNYXRoLnJvdW5kKGJCb3guaGVpZ2h0KTtcbiAgICAgICAgZGltLmhlaWdodCArPSBjSGVpZ2h0O1xuICAgICAgICBkaW0ubGluZUhlaWdodCA9IE1hdGgucm91bmQoTWF0aC5tYXgoZGltLmxpbmVIZWlnaHQsIGNIZWlnaHQpKTtcbiAgICAgIH1cbiAgICAgIGRpbXMucHVzaChkaW0pO1xuICAgIH1cbiAgICBnLnJlbW92ZSgpO1xuICAgIGNvbnN0IGluZGV4ID0gaXNOYU4oZGltc1sxXS5oZWlnaHQpIHx8IGlzTmFOKGRpbXNbMV0ud2lkdGgpIHx8IGlzTmFOKGRpbXNbMV0ubGluZUhlaWdodCkgfHwgZGltc1swXS5oZWlnaHQgPiBkaW1zWzFdLmhlaWdodCAmJiBkaW1zWzBdLndpZHRoID4gZGltc1sxXS53aWR0aCAmJiBkaW1zWzBdLmxpbmVIZWlnaHQgPiBkaW1zWzFdLmxpbmVIZWlnaHQgPyAwIDogMTtcbiAgICByZXR1cm4gZGltc1tpbmRleF07XG4gIH0sXG4gICh0ZXh0LCBjb25maWcpID0+IGAke3RleHR9JHtjb25maWcuZm9udFNpemV9JHtjb25maWcuZm9udFdlaWdodH0ke2NvbmZpZy5mb250RmFtaWx5fWBcbik7XG52YXIgSW5pdElER2VuZXJhdG9yID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihkZXRlcm1pbmlzdGljID0gZmFsc2UsIHNlZWQpIHtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgICB0aGlzLmNvdW50ID0gc2VlZCA/IHNlZWQubGVuZ3RoIDogMDtcbiAgICB0aGlzLm5leHQgPSBkZXRlcm1pbmlzdGljID8gKCkgPT4gdGhpcy5jb3VudCsrIDogKCkgPT4gRGF0ZS5ub3coKTtcbiAgfVxuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIkluaXRJREdlbmVyYXRvclwiKTtcbiAgfVxufTtcbnZhciBkZWNvZGVyO1xudmFyIGVudGl0eURlY29kZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oaHRtbCkge1xuICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBodG1sID0gZXNjYXBlKGh0bWwpLnJlcGxhY2UoLyUyNi9nLCBcIiZcIikucmVwbGFjZSgvJTIzL2csIFwiI1wiKS5yZXBsYWNlKC8lM0IvZywgXCI7XCIpO1xuICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG4gIHJldHVybiB1bmVzY2FwZShkZWNvZGVyLnRleHRDb250ZW50KTtcbn0sIFwiZW50aXR5RGVjb2RlXCIpO1xuZnVuY3Rpb24gaXNEZXRhaWxlZEVycm9yKGVycm9yKSB7XG4gIHJldHVybiBcInN0clwiIGluIGVycm9yO1xufVxuX19uYW1lKGlzRGV0YWlsZWRFcnJvciwgXCJpc0RldGFpbGVkRXJyb3JcIik7XG52YXIgaW5zZXJ0VGl0bGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChwYXJlbnQsIGNzc0NsYXNzLCB0aXRsZVRvcE1hcmdpbiwgdGl0bGUpID0+IHtcbiAgaWYgKCF0aXRsZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBib3VuZHMgPSBwYXJlbnQubm9kZSgpPy5nZXRCQm94KCk7XG4gIGlmICghYm91bmRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHBhcmVudC5hcHBlbmQoXCJ0ZXh0XCIpLnRleHQodGl0bGUpLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKS5hdHRyKFwieFwiLCBib3VuZHMueCArIGJvdW5kcy53aWR0aCAvIDIpLmF0dHIoXCJ5XCIsIC10aXRsZVRvcE1hcmdpbikuYXR0cihcImNsYXNzXCIsIGNzc0NsYXNzKTtcbn0sIFwiaW5zZXJ0VGl0bGVcIik7XG52YXIgcGFyc2VGb250U2l6ZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGZvbnRTaXplKSA9PiB7XG4gIGlmICh0eXBlb2YgZm9udFNpemUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gW2ZvbnRTaXplLCBmb250U2l6ZSArIFwicHhcIl07XG4gIH1cbiAgY29uc3QgZm9udFNpemVOdW1iZXIgPSBwYXJzZUludChmb250U2l6ZSA/PyBcIlwiLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4oZm9udFNpemVOdW1iZXIpKSB7XG4gICAgcmV0dXJuIFt2b2lkIDAsIHZvaWQgMF07XG4gIH0gZWxzZSBpZiAoZm9udFNpemUgPT09IFN0cmluZyhmb250U2l6ZU51bWJlcikpIHtcbiAgICByZXR1cm4gW2ZvbnRTaXplTnVtYmVyLCBmb250U2l6ZSArIFwicHhcIl07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtmb250U2l6ZU51bWJlciwgZm9udFNpemVdO1xuICB9XG59LCBcInBhcnNlRm9udFNpemVcIik7XG5mdW5jdGlvbiBjbGVhbkFuZE1lcmdlKGRlZmF1bHREYXRhLCBkYXRhKSB7XG4gIHJldHVybiBtZXJnZSh7fSwgZGVmYXVsdERhdGEsIGRhdGEpO1xufVxuX19uYW1lKGNsZWFuQW5kTWVyZ2UsIFwiY2xlYW5BbmRNZXJnZVwiKTtcbnZhciB1dGlsc19kZWZhdWx0ID0ge1xuICBhc3NpZ25XaXRoRGVwdGg6IGFzc2lnbldpdGhEZXB0aF9kZWZhdWx0LFxuICB3cmFwTGFiZWwsXG4gIGNhbGN1bGF0ZVRleHRIZWlnaHQsXG4gIGNhbGN1bGF0ZVRleHRXaWR0aCxcbiAgY2FsY3VsYXRlVGV4dERpbWVuc2lvbnMsXG4gIGNsZWFuQW5kTWVyZ2UsXG4gIGRldGVjdEluaXQsXG4gIGRldGVjdERpcmVjdGl2ZSxcbiAgaXNTdWJzdHJpbmdJbkFycmF5LFxuICBpbnRlcnBvbGF0ZVRvQ3VydmUsXG4gIGNhbGNMYWJlbFBvc2l0aW9uLFxuICBjYWxjQ2FyZGluYWxpdHlQb3NpdGlvbixcbiAgY2FsY1Rlcm1pbmFsTGFiZWxQb3NpdGlvbixcbiAgZm9ybWF0VXJsLFxuICBnZXRTdHlsZXNGcm9tQXJyYXksXG4gIGdlbmVyYXRlSWQsXG4gIHJhbmRvbSxcbiAgcnVuRnVuYyxcbiAgZW50aXR5RGVjb2RlLFxuICBpbnNlcnRUaXRsZSxcbiAgcGFyc2VGb250U2l6ZSxcbiAgSW5pdElER2VuZXJhdG9yXG59O1xudmFyIGVuY29kZUVudGl0aWVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbih0ZXh0KSB7XG4gIGxldCB0eHQgPSB0ZXh0O1xuICB0eHQgPSB0eHQucmVwbGFjZSgvc3R5bGUuKjpcXFMqIy4qOy9nLCBmdW5jdGlvbihzKSB7XG4gICAgcmV0dXJuIHMuc3Vic3RyaW5nKDAsIHMubGVuZ3RoIC0gMSk7XG4gIH0pO1xuICB0eHQgPSB0eHQucmVwbGFjZSgvY2xhc3NEZWYuKjpcXFMqIy4qOy9nLCBmdW5jdGlvbihzKSB7XG4gICAgcmV0dXJuIHMuc3Vic3RyaW5nKDAsIHMubGVuZ3RoIC0gMSk7XG4gIH0pO1xuICB0eHQgPSB0eHQucmVwbGFjZSgvI1xcdys7L2csIGZ1bmN0aW9uKHMpIHtcbiAgICBjb25zdCBpbm5lclR4dCA9IHMuc3Vic3RyaW5nKDEsIHMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgaXNJbnQgPSAvXlxcKz9cXGQrJC8udGVzdChpbm5lclR4dCk7XG4gICAgaWYgKGlzSW50KSB7XG4gICAgICByZXR1cm4gXCJcXHVGQjAyXFx4QjBcXHhCMFwiICsgaW5uZXJUeHQgKyBcIlxceEI2XFx4REZcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXFx1RkIwMlxceEIwXCIgKyBpbm5lclR4dCArIFwiXFx4QjZcXHhERlwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0eHQ7XG59LCBcImVuY29kZUVudGl0aWVzXCIpO1xudmFyIGRlY29kZUVudGl0aWVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbih0ZXh0KSB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoL++sgsKwwrAvZywgXCImI1wiKS5yZXBsYWNlKC/vrILCsC9nLCBcIiZcIikucmVwbGFjZSgvwrbDny9nLCBcIjtcIik7XG59LCBcImRlY29kZUVudGl0aWVzXCIpO1xudmFyIGdldEVkZ2VJZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGZyb20sIHRvLCB7XG4gIGNvdW50ZXIgPSAwLFxuICBwcmVmaXgsXG4gIHN1ZmZpeFxufSwgaWQpID0+IHtcbiAgaWYgKGlkKSB7XG4gICAgcmV0dXJuIGlkO1xuICB9XG4gIHJldHVybiBgJHtwcmVmaXggPyBgJHtwcmVmaXh9X2AgOiBcIlwifSR7ZnJvbX1fJHt0b31fJHtjb3VudGVyfSR7c3VmZml4ID8gYF8ke3N1ZmZpeH1gIDogXCJcIn1gO1xufSwgXCJnZXRFZGdlSWRcIik7XG5mdW5jdGlvbiBoYW5kbGVVbmRlZmluZWRBdHRyKGF0dHJWYWx1ZSkge1xuICByZXR1cm4gYXR0clZhbHVlID8/IG51bGw7XG59XG5fX25hbWUoaGFuZGxlVW5kZWZpbmVkQXR0ciwgXCJoYW5kbGVVbmRlZmluZWRBdHRyXCIpO1xuXG5leHBvcnQge1xuICBaRVJPX1dJRFRIX1NQQUNFLFxuICByZW1vdmVEaXJlY3RpdmVzLFxuICBpbnRlcnBvbGF0ZVRvQ3VydmUsXG4gIGdldFN0eWxlc0Zyb21BcnJheSxcbiAgZ2VuZXJhdGVJZCxcbiAgcmFuZG9tLFxuICB3cmFwTGFiZWwsXG4gIGNhbGN1bGF0ZVRleHRIZWlnaHQsXG4gIGNhbGN1bGF0ZVRleHRXaWR0aCxcbiAgaXNEZXRhaWxlZEVycm9yLFxuICBwYXJzZUZvbnRTaXplLFxuICBjbGVhbkFuZE1lcmdlLFxuICB1dGlsc19kZWZhdWx0LFxuICBlbmNvZGVFbnRpdGllcyxcbiAgZGVjb2RlRW50aXRpZXMsXG4gIGdldEVkZ2VJZCxcbiAgaGFuZGxlVW5kZWZpbmVkQXR0clxufTtcbiIsImltcG9ydCB7XG4gIGluc2VydEVkZ2UsXG4gIGluc2VydEVkZ2VMYWJlbCxcbiAgbWFya2Vyc19kZWZhdWx0LFxuICBwb3NpdGlvbkVkZ2VMYWJlbFxufSBmcm9tIFwiLi9jaHVuay1JSU1VRFNJNC5tanNcIjtcbmltcG9ydCB7XG4gIGluc2VydENsdXN0ZXIsXG4gIGluc2VydE5vZGUsXG4gIGxhYmVsSGVscGVyXG59IGZyb20gXCIuL2NodW5rLUhSVTZERENILm1qc1wiO1xuaW1wb3J0IHtcbiAgaW50ZXJwb2xhdGVUb0N1cnZlXG59IGZyb20gXCIuL2NodW5rLU80Tkk2VU5VLm1qc1wiO1xuaW1wb3J0IHtcbiAgX19uYW1lLFxuICBjb21tb25fZGVmYXVsdCxcbiAgZ2V0Q29uZmlnLFxuICBsb2dcbn0gZnJvbSBcIi4vY2h1bmstWVRKTlQ3RFUubWpzXCI7XG5cbi8vIHNyYy9pbnRlcm5hbHMudHNcbnZhciBpbnRlcm5hbEhlbHBlcnMgPSB7XG4gIGNvbW1vbjogY29tbW9uX2RlZmF1bHQsXG4gIGdldENvbmZpZyxcbiAgaW5zZXJ0Q2x1c3RlcixcbiAgaW5zZXJ0RWRnZSxcbiAgaW5zZXJ0RWRnZUxhYmVsLFxuICBpbnNlcnRNYXJrZXJzOiBtYXJrZXJzX2RlZmF1bHQsXG4gIGluc2VydE5vZGUsXG4gIGludGVycG9sYXRlVG9DdXJ2ZSxcbiAgbGFiZWxIZWxwZXIsXG4gIGxvZyxcbiAgcG9zaXRpb25FZGdlTGFiZWxcbn07XG5cbi8vIHNyYy9yZW5kZXJpbmctdXRpbC9yZW5kZXIudHNcbnZhciBsYXlvdXRBbGdvcml0aG1zID0ge307XG52YXIgcmVnaXN0ZXJMYXlvdXRMb2FkZXJzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgobG9hZGVycykgPT4ge1xuICBmb3IgKGNvbnN0IGxvYWRlciBvZiBsb2FkZXJzKSB7XG4gICAgbGF5b3V0QWxnb3JpdGhtc1tsb2FkZXIubmFtZV0gPSBsb2FkZXI7XG4gIH1cbn0sIFwicmVnaXN0ZXJMYXlvdXRMb2FkZXJzXCIpO1xudmFyIHJlZ2lzdGVyRGVmYXVsdExheW91dExvYWRlcnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgcmVnaXN0ZXJMYXlvdXRMb2FkZXJzKFtcbiAgICB7XG4gICAgICBuYW1lOiBcImRhZ3JlXCIsXG4gICAgICBsb2FkZXI6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4gYXdhaXQgaW1wb3J0KFwiLi9kYWdyZS1PS0RSWkVCVy5tanNcIiksIFwibG9hZGVyXCIpXG4gICAgfVxuICBdKTtcbn0sIFwicmVnaXN0ZXJEZWZhdWx0TGF5b3V0TG9hZGVyc1wiKTtcbnJlZ2lzdGVyRGVmYXVsdExheW91dExvYWRlcnMoKTtcbnZhciByZW5kZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIChkYXRhNExheW91dCwgc3ZnKSA9PiB7XG4gIGlmICghKGRhdGE0TGF5b3V0LmxheW91dEFsZ29yaXRobSBpbiBsYXlvdXRBbGdvcml0aG1zKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsYXlvdXQgYWxnb3JpdGhtOiAke2RhdGE0TGF5b3V0LmxheW91dEFsZ29yaXRobX1gKTtcbiAgfVxuICBjb25zdCBsYXlvdXREZWZpbml0aW9uID0gbGF5b3V0QWxnb3JpdGhtc1tkYXRhNExheW91dC5sYXlvdXRBbGdvcml0aG1dO1xuICBjb25zdCBsYXlvdXRSZW5kZXJlciA9IGF3YWl0IGxheW91dERlZmluaXRpb24ubG9hZGVyKCk7XG4gIHJldHVybiBsYXlvdXRSZW5kZXJlci5yZW5kZXIoZGF0YTRMYXlvdXQsIHN2ZywgaW50ZXJuYWxIZWxwZXJzLCB7XG4gICAgYWxnb3JpdGhtOiBsYXlvdXREZWZpbml0aW9uLmFsZ29yaXRobVxuICB9KTtcbn0sIFwicmVuZGVyXCIpO1xudmFyIGdldFJlZ2lzdGVyZWRMYXlvdXRBbGdvcml0aG0gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChhbGdvcml0aG0gPSBcIlwiLCB7IGZhbGxiYWNrID0gXCJkYWdyZVwiIH0gPSB7fSkgPT4ge1xuICBpZiAoYWxnb3JpdGhtIGluIGxheW91dEFsZ29yaXRobXMpIHtcbiAgICByZXR1cm4gYWxnb3JpdGhtO1xuICB9XG4gIGlmIChmYWxsYmFjayBpbiBsYXlvdXRBbGdvcml0aG1zKSB7XG4gICAgbG9nLndhcm4oYExheW91dCBhbGdvcml0aG0gJHthbGdvcml0aG19IGlzIG5vdCByZWdpc3RlcmVkLiBVc2luZyAke2ZhbGxiYWNrfSBhcyBmYWxsYmFjay5gKTtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBCb3RoIGxheW91dCBhbGdvcml0aG1zICR7YWxnb3JpdGhtfSBhbmQgJHtmYWxsYmFja30gYXJlIG5vdCByZWdpc3RlcmVkLmApO1xufSwgXCJnZXRSZWdpc3RlcmVkTGF5b3V0QWxnb3JpdGhtXCIpO1xuXG5leHBvcnQge1xuICByZWdpc3RlckxheW91dExvYWRlcnMsXG4gIHJlbmRlcixcbiAgZ2V0UmVnaXN0ZXJlZExheW91dEFsZ29yaXRobVxufTtcbiIsImltcG9ydCB7XG4gIF9fbmFtZVxufSBmcm9tIFwiLi9jaHVuay1ZVEpOVDdEVS5tanNcIjtcblxuLy8gc3JjL3V0aWxzL2xpbmVXaXRoT2Zmc2V0LnRzXG52YXIgbWFya2VyT2Zmc2V0cyA9IHtcbiAgYWdncmVnYXRpb246IDE4LFxuICBleHRlbnNpb246IDE4LFxuICBjb21wb3NpdGlvbjogMTgsXG4gIGRlcGVuZGVuY3k6IDYsXG4gIGxvbGxpcG9wOiAxMy41LFxuICBhcnJvd19wb2ludDogNFxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhQW5kQW5nbGUocG9pbnQxLCBwb2ludDIpIHtcbiAgaWYgKHBvaW50MSA9PT0gdm9pZCAwIHx8IHBvaW50MiA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHsgYW5nbGU6IDAsIGRlbHRhWDogMCwgZGVsdGFZOiAwIH07XG4gIH1cbiAgcG9pbnQxID0gcG9pbnRUcmFuc2Zvcm1lcihwb2ludDEpO1xuICBwb2ludDIgPSBwb2ludFRyYW5zZm9ybWVyKHBvaW50Mik7XG4gIGNvbnN0IFt4MSwgeTFdID0gW3BvaW50MS54LCBwb2ludDEueV07XG4gIGNvbnN0IFt4MiwgeTJdID0gW3BvaW50Mi54LCBwb2ludDIueV07XG4gIGNvbnN0IGRlbHRhWCA9IHgyIC0geDE7XG4gIGNvbnN0IGRlbHRhWSA9IHkyIC0geTE7XG4gIHJldHVybiB7IGFuZ2xlOiBNYXRoLmF0YW4oZGVsdGFZIC8gZGVsdGFYKSwgZGVsdGFYLCBkZWx0YVkgfTtcbn1cbl9fbmFtZShjYWxjdWxhdGVEZWx0YUFuZEFuZ2xlLCBcImNhbGN1bGF0ZURlbHRhQW5kQW5nbGVcIik7XG52YXIgcG9pbnRUcmFuc2Zvcm1lciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRhdGEpID0+IHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4geyB4OiBkYXRhWzBdLCB5OiBkYXRhWzFdIH07XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59LCBcInBvaW50VHJhbnNmb3JtZXJcIik7XG52YXIgZ2V0TGluZUZ1bmN0aW9uc1dpdGhPZmZzZXQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChlZGdlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgeDogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihkLCBpLCBkYXRhKSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgIGNvbnN0IERJUkVDVElPTiA9IHBvaW50VHJhbnNmb3JtZXIoZGF0YVswXSkueCA8IHBvaW50VHJhbnNmb3JtZXIoZGF0YVtkYXRhLmxlbmd0aCAtIDFdKS54ID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCI7XG4gICAgICBpZiAoaSA9PT0gMCAmJiBPYmplY3QuaGFzT3duKG1hcmtlck9mZnNldHMsIGVkZ2UuYXJyb3dUeXBlU3RhcnQpKSB7XG4gICAgICAgIGNvbnN0IHsgYW5nbGUsIGRlbHRhWCB9ID0gY2FsY3VsYXRlRGVsdGFBbmRBbmdsZShkYXRhWzBdLCBkYXRhWzFdKTtcbiAgICAgICAgb2Zmc2V0ID0gbWFya2VyT2Zmc2V0c1tlZGdlLmFycm93VHlwZVN0YXJ0XSAqIE1hdGguY29zKGFuZ2xlKSAqIChkZWx0YVggPj0gMCA/IDEgOiAtMSk7XG4gICAgICB9IGVsc2UgaWYgKGkgPT09IGRhdGEubGVuZ3RoIC0gMSAmJiBPYmplY3QuaGFzT3duKG1hcmtlck9mZnNldHMsIGVkZ2UuYXJyb3dUeXBlRW5kKSkge1xuICAgICAgICBjb25zdCB7IGFuZ2xlLCBkZWx0YVggfSA9IGNhbGN1bGF0ZURlbHRhQW5kQW5nbGUoXG4gICAgICAgICAgZGF0YVtkYXRhLmxlbmd0aCAtIDFdLFxuICAgICAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAyXVxuICAgICAgICApO1xuICAgICAgICBvZmZzZXQgPSBtYXJrZXJPZmZzZXRzW2VkZ2UuYXJyb3dUeXBlRW5kXSAqIE1hdGguY29zKGFuZ2xlKSAqIChkZWx0YVggPj0gMCA/IDEgOiAtMSk7XG4gICAgICB9XG4gICAgICBjb25zdCBkaWZmZXJlbmNlVG9FbmQgPSBNYXRoLmFicyhcbiAgICAgICAgcG9pbnRUcmFuc2Zvcm1lcihkKS54IC0gcG9pbnRUcmFuc2Zvcm1lcihkYXRhW2RhdGEubGVuZ3RoIC0gMV0pLnhcbiAgICAgICk7XG4gICAgICBjb25zdCBkaWZmZXJlbmNlSW5ZRW5kID0gTWF0aC5hYnMoXG4gICAgICAgIHBvaW50VHJhbnNmb3JtZXIoZCkueSAtIHBvaW50VHJhbnNmb3JtZXIoZGF0YVtkYXRhLmxlbmd0aCAtIDFdKS55XG4gICAgICApO1xuICAgICAgY29uc3QgZGlmZmVyZW5jZVRvU3RhcnQgPSBNYXRoLmFicyhwb2ludFRyYW5zZm9ybWVyKGQpLnggLSBwb2ludFRyYW5zZm9ybWVyKGRhdGFbMF0pLngpO1xuICAgICAgY29uc3QgZGlmZmVyZW5jZUluWVN0YXJ0ID0gTWF0aC5hYnMocG9pbnRUcmFuc2Zvcm1lcihkKS55IC0gcG9pbnRUcmFuc2Zvcm1lcihkYXRhWzBdKS55KTtcbiAgICAgIGNvbnN0IHN0YXJ0TWFya2VySGVpZ2h0ID0gbWFya2VyT2Zmc2V0c1tlZGdlLmFycm93VHlwZVN0YXJ0XTtcbiAgICAgIGNvbnN0IGVuZE1hcmtlckhlaWdodCA9IG1hcmtlck9mZnNldHNbZWRnZS5hcnJvd1R5cGVFbmRdO1xuICAgICAgY29uc3QgZXh0cmFSb29tID0gMTtcbiAgICAgIGlmIChkaWZmZXJlbmNlVG9FbmQgPCBlbmRNYXJrZXJIZWlnaHQgJiYgZGlmZmVyZW5jZVRvRW5kID4gMCAmJiBkaWZmZXJlbmNlSW5ZRW5kIDwgZW5kTWFya2VySGVpZ2h0KSB7XG4gICAgICAgIGxldCBhZGp1c3RtZW50ID0gZW5kTWFya2VySGVpZ2h0ICsgZXh0cmFSb29tIC0gZGlmZmVyZW5jZVRvRW5kO1xuICAgICAgICBhZGp1c3RtZW50ICo9IERJUkVDVElPTiA9PT0gXCJyaWdodFwiID8gLTEgOiAxO1xuICAgICAgICBvZmZzZXQgLT0gYWRqdXN0bWVudDtcbiAgICAgIH1cbiAgICAgIGlmIChkaWZmZXJlbmNlVG9TdGFydCA8IHN0YXJ0TWFya2VySGVpZ2h0ICYmIGRpZmZlcmVuY2VUb1N0YXJ0ID4gMCAmJiBkaWZmZXJlbmNlSW5ZU3RhcnQgPCBzdGFydE1hcmtlckhlaWdodCkge1xuICAgICAgICBsZXQgYWRqdXN0bWVudCA9IHN0YXJ0TWFya2VySGVpZ2h0ICsgZXh0cmFSb29tIC0gZGlmZmVyZW5jZVRvU3RhcnQ7XG4gICAgICAgIGFkanVzdG1lbnQgKj0gRElSRUNUSU9OID09PSBcInJpZ2h0XCIgPyAtMSA6IDE7XG4gICAgICAgIG9mZnNldCArPSBhZGp1c3RtZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBvaW50VHJhbnNmb3JtZXIoZCkueCArIG9mZnNldDtcbiAgICB9LCBcInhcIiksXG4gICAgeTogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihkLCBpLCBkYXRhKSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgIGNvbnN0IERJUkVDVElPTiA9IHBvaW50VHJhbnNmb3JtZXIoZGF0YVswXSkueSA8IHBvaW50VHJhbnNmb3JtZXIoZGF0YVtkYXRhLmxlbmd0aCAtIDFdKS55ID8gXCJkb3duXCIgOiBcInVwXCI7XG4gICAgICBpZiAoaSA9PT0gMCAmJiBPYmplY3QuaGFzT3duKG1hcmtlck9mZnNldHMsIGVkZ2UuYXJyb3dUeXBlU3RhcnQpKSB7XG4gICAgICAgIGNvbnN0IHsgYW5nbGUsIGRlbHRhWSB9ID0gY2FsY3VsYXRlRGVsdGFBbmRBbmdsZShkYXRhWzBdLCBkYXRhWzFdKTtcbiAgICAgICAgb2Zmc2V0ID0gbWFya2VyT2Zmc2V0c1tlZGdlLmFycm93VHlwZVN0YXJ0XSAqIE1hdGguYWJzKE1hdGguc2luKGFuZ2xlKSkgKiAoZGVsdGFZID49IDAgPyAxIDogLTEpO1xuICAgICAgfSBlbHNlIGlmIChpID09PSBkYXRhLmxlbmd0aCAtIDEgJiYgT2JqZWN0Lmhhc093bihtYXJrZXJPZmZzZXRzLCBlZGdlLmFycm93VHlwZUVuZCkpIHtcbiAgICAgICAgY29uc3QgeyBhbmdsZSwgZGVsdGFZIH0gPSBjYWxjdWxhdGVEZWx0YUFuZEFuZ2xlKFxuICAgICAgICAgIGRhdGFbZGF0YS5sZW5ndGggLSAxXSxcbiAgICAgICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMl1cbiAgICAgICAgKTtcbiAgICAgICAgb2Zmc2V0ID0gbWFya2VyT2Zmc2V0c1tlZGdlLmFycm93VHlwZUVuZF0gKiBNYXRoLmFicyhNYXRoLnNpbihhbmdsZSkpICogKGRlbHRhWSA+PSAwID8gMSA6IC0xKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRpZmZlcmVuY2VUb0VuZCA9IE1hdGguYWJzKFxuICAgICAgICBwb2ludFRyYW5zZm9ybWVyKGQpLnkgLSBwb2ludFRyYW5zZm9ybWVyKGRhdGFbZGF0YS5sZW5ndGggLSAxXSkueVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGRpZmZlcmVuY2VJblhFbmQgPSBNYXRoLmFicyhcbiAgICAgICAgcG9pbnRUcmFuc2Zvcm1lcihkKS54IC0gcG9pbnRUcmFuc2Zvcm1lcihkYXRhW2RhdGEubGVuZ3RoIC0gMV0pLnhcbiAgICAgICk7XG4gICAgICBjb25zdCBkaWZmZXJlbmNlVG9TdGFydCA9IE1hdGguYWJzKHBvaW50VHJhbnNmb3JtZXIoZCkueSAtIHBvaW50VHJhbnNmb3JtZXIoZGF0YVswXSkueSk7XG4gICAgICBjb25zdCBkaWZmZXJlbmNlSW5YU3RhcnQgPSBNYXRoLmFicyhwb2ludFRyYW5zZm9ybWVyKGQpLnggLSBwb2ludFRyYW5zZm9ybWVyKGRhdGFbMF0pLngpO1xuICAgICAgY29uc3Qgc3RhcnRNYXJrZXJIZWlnaHQgPSBtYXJrZXJPZmZzZXRzW2VkZ2UuYXJyb3dUeXBlU3RhcnRdO1xuICAgICAgY29uc3QgZW5kTWFya2VySGVpZ2h0ID0gbWFya2VyT2Zmc2V0c1tlZGdlLmFycm93VHlwZUVuZF07XG4gICAgICBjb25zdCBleHRyYVJvb20gPSAxO1xuICAgICAgaWYgKGRpZmZlcmVuY2VUb0VuZCA8IGVuZE1hcmtlckhlaWdodCAmJiBkaWZmZXJlbmNlVG9FbmQgPiAwICYmIGRpZmZlcmVuY2VJblhFbmQgPCBlbmRNYXJrZXJIZWlnaHQpIHtcbiAgICAgICAgbGV0IGFkanVzdG1lbnQgPSBlbmRNYXJrZXJIZWlnaHQgKyBleHRyYVJvb20gLSBkaWZmZXJlbmNlVG9FbmQ7XG4gICAgICAgIGFkanVzdG1lbnQgKj0gRElSRUNUSU9OID09PSBcInVwXCIgPyAtMSA6IDE7XG4gICAgICAgIG9mZnNldCAtPSBhZGp1c3RtZW50O1xuICAgICAgfVxuICAgICAgaWYgKGRpZmZlcmVuY2VUb1N0YXJ0IDwgc3RhcnRNYXJrZXJIZWlnaHQgJiYgZGlmZmVyZW5jZVRvU3RhcnQgPiAwICYmIGRpZmZlcmVuY2VJblhTdGFydCA8IHN0YXJ0TWFya2VySGVpZ2h0KSB7XG4gICAgICAgIGxldCBhZGp1c3RtZW50ID0gc3RhcnRNYXJrZXJIZWlnaHQgKyBleHRyYVJvb20gLSBkaWZmZXJlbmNlVG9TdGFydDtcbiAgICAgICAgYWRqdXN0bWVudCAqPSBESVJFQ1RJT04gPT09IFwidXBcIiA/IC0xIDogMTtcbiAgICAgICAgb2Zmc2V0ICs9IGFkanVzdG1lbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9pbnRUcmFuc2Zvcm1lcihkKS55ICsgb2Zmc2V0O1xuICAgIH0sIFwieVwiKVxuICB9O1xufSwgXCJnZXRMaW5lRnVuY3Rpb25zV2l0aE9mZnNldFwiKTtcbmlmICh2b2lkIDApIHtcbiAgY29uc3QgeyBpdCwgZXhwZWN0LCBkZXNjcmliZSB9ID0gdm9pZCAwO1xuICBkZXNjcmliZShcImNhbGN1bGF0ZURlbHRhQW5kQW5nbGVcIiwgKCkgPT4ge1xuICAgIGl0KFwic2hvdWxkIGNhbGN1bGF0ZSB0aGUgYW5nbGUgYW5kIGRlbHRhcyBiZXR3ZWVuIHR3byBwb2ludHNcIiwgKCkgPT4ge1xuICAgICAgZXhwZWN0KGNhbGN1bGF0ZURlbHRhQW5kQW5nbGUoWzAsIDBdLCBbMCwgMV0pKS50b1N0cmljdEVxdWFsKHtcbiAgICAgICAgYW5nbGU6IDEuNTcwNzk2MzI2Nzk0ODk2NixcbiAgICAgICAgZGVsdGFYOiAwLFxuICAgICAgICBkZWx0YVk6IDFcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGNhbGN1bGF0ZURlbHRhQW5kQW5nbGUoWzEsIDBdLCBbMCwgLTFdKSkudG9TdHJpY3RFcXVhbCh7XG4gICAgICAgIGFuZ2xlOiAwLjc4NTM5ODE2MzM5NzQ0ODMsXG4gICAgICAgIGRlbHRhWDogLTEsXG4gICAgICAgIGRlbHRhWTogLTFcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGNhbGN1bGF0ZURlbHRhQW5kQW5nbGUoeyB4OiAxLCB5OiAwIH0sIFswLCAtMV0pKS50b1N0cmljdEVxdWFsKHtcbiAgICAgICAgYW5nbGU6IDAuNzg1Mzk4MTYzMzk3NDQ4MyxcbiAgICAgICAgZGVsdGFYOiAtMSxcbiAgICAgICAgZGVsdGFZOiAtMVxuICAgICAgfSk7XG4gICAgICBleHBlY3QoY2FsY3VsYXRlRGVsdGFBbmRBbmdsZSh7IHg6IDEsIHk6IDAgfSwgeyB4OiAxLCB5OiAwIH0pKS50b1N0cmljdEVxdWFsKHtcbiAgICAgICAgYW5nbGU6IE5hTixcbiAgICAgICAgZGVsdGFYOiAwLFxuICAgICAgICBkZWx0YVk6IDBcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KFwic2hvdWxkIGNhbGN1bGF0ZSB0aGUgYW5nbGUgYW5kIGRlbHRhcyBpZiBvbmUgcG9pbnQgaW4gdW5kZWZpbmVkXCIsICgpID0+IHtcbiAgICAgIGV4cGVjdChjYWxjdWxhdGVEZWx0YUFuZEFuZ2xlKHZvaWQgMCwgWzAsIDFdKSkudG9TdHJpY3RFcXVhbCh7XG4gICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICBkZWx0YVg6IDAsXG4gICAgICAgIGRlbHRhWTogMFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoY2FsY3VsYXRlRGVsdGFBbmRBbmdsZShbMCwgMV0sIHZvaWQgMCkpLnRvU3RyaWN0RXF1YWwoe1xuICAgICAgICBhbmdsZTogMCxcbiAgICAgICAgZGVsdGFYOiAwLFxuICAgICAgICBkZWx0YVk6IDBcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHtcbiAgZ2V0TGluZUZ1bmN0aW9uc1dpdGhPZmZzZXRcbn07XG4iLCJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fbmFtZSA9ICh0YXJnZXQsIHZhbHVlKSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIm5hbWVcIiwgeyB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xuXG4vLyBzcmMvbG9nZ2VyLnRzXG5pbXBvcnQgZGF5anMgZnJvbSBcImRheWpzXCI7XG52YXIgTEVWRUxTID0ge1xuICB0cmFjZTogMCxcbiAgZGVidWc6IDEsXG4gIGluZm86IDIsXG4gIHdhcm46IDMsXG4gIGVycm9yOiA0LFxuICBmYXRhbDogNVxufTtcbnZhciBsb2cgPSB7XG4gIHRyYWNlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKCguLi5fYXJncykgPT4ge1xuICB9LCBcInRyYWNlXCIpLFxuICBkZWJ1ZzogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoLi4uX2FyZ3MpID0+IHtcbiAgfSwgXCJkZWJ1Z1wiKSxcbiAgaW5mbzogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoLi4uX2FyZ3MpID0+IHtcbiAgfSwgXCJpbmZvXCIpLFxuICB3YXJuOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKCguLi5fYXJncykgPT4ge1xuICB9LCBcIndhcm5cIiksXG4gIGVycm9yOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKCguLi5fYXJncykgPT4ge1xuICB9LCBcImVycm9yXCIpLFxuICBmYXRhbDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoLi4uX2FyZ3MpID0+IHtcbiAgfSwgXCJmYXRhbFwiKVxufTtcbnZhciBzZXRMb2dMZXZlbCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24obGV2ZWwgPSBcImZhdGFsXCIpIHtcbiAgbGV0IG51bWVyaWNMZXZlbCA9IExFVkVMUy5mYXRhbDtcbiAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChsZXZlbC50b0xvd2VyQ2FzZSgpIGluIExFVkVMUykge1xuICAgICAgbnVtZXJpY0xldmVsID0gTEVWRUxTW2xldmVsXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiKSB7XG4gICAgbnVtZXJpY0xldmVsID0gbGV2ZWw7XG4gIH1cbiAgbG9nLnRyYWNlID0gKCkgPT4ge1xuICB9O1xuICBsb2cuZGVidWcgPSAoKSA9PiB7XG4gIH07XG4gIGxvZy5pbmZvID0gKCkgPT4ge1xuICB9O1xuICBsb2cud2FybiA9ICgpID0+IHtcbiAgfTtcbiAgbG9nLmVycm9yID0gKCkgPT4ge1xuICB9O1xuICBsb2cuZmF0YWwgPSAoKSA9PiB7XG4gIH07XG4gIGlmIChudW1lcmljTGV2ZWwgPD0gTEVWRUxTLmZhdGFsKSB7XG4gICAgbG9nLmZhdGFsID0gY29uc29sZS5lcnJvciA/IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlLCBmb3JtYXQoXCJGQVRBTFwiKSwgXCJjb2xvcjogb3JhbmdlXCIpIDogY29uc29sZS5sb2cuYmluZChjb25zb2xlLCBcIlxceDFCWzM1bVwiLCBmb3JtYXQoXCJGQVRBTFwiKSk7XG4gIH1cbiAgaWYgKG51bWVyaWNMZXZlbCA8PSBMRVZFTFMuZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IgPSBjb25zb2xlLmVycm9yID8gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsIGZvcm1hdChcIkVSUk9SXCIpLCBcImNvbG9yOiBvcmFuZ2VcIikgOiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUsIFwiXFx4MUJbMzFtXCIsIGZvcm1hdChcIkVSUk9SXCIpKTtcbiAgfVxuICBpZiAobnVtZXJpY0xldmVsIDw9IExFVkVMUy53YXJuKSB7XG4gICAgbG9nLndhcm4gPSBjb25zb2xlLndhcm4gPyBjb25zb2xlLndhcm4uYmluZChjb25zb2xlLCBmb3JtYXQoXCJXQVJOXCIpLCBcImNvbG9yOiBvcmFuZ2VcIikgOiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUsIGBcXHgxQlszM21gLCBmb3JtYXQoXCJXQVJOXCIpKTtcbiAgfVxuICBpZiAobnVtZXJpY0xldmVsIDw9IExFVkVMUy5pbmZvKSB7XG4gICAgbG9nLmluZm8gPSBjb25zb2xlLmluZm8gPyBjb25zb2xlLmluZm8uYmluZChjb25zb2xlLCBmb3JtYXQoXCJJTkZPXCIpLCBcImNvbG9yOiBsaWdodGJsdWVcIikgOiBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUsIFwiXFx4MUJbMzRtXCIsIGZvcm1hdChcIklORk9cIikpO1xuICB9XG4gIGlmIChudW1lcmljTGV2ZWwgPD0gTEVWRUxTLmRlYnVnKSB7XG4gICAgbG9nLmRlYnVnID0gY29uc29sZS5kZWJ1ZyA/IGNvbnNvbGUuZGVidWcuYmluZChjb25zb2xlLCBmb3JtYXQoXCJERUJVR1wiKSwgXCJjb2xvcjogbGlnaHRncmVlblwiKSA6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSwgXCJcXHgxQlszMm1cIiwgZm9ybWF0KFwiREVCVUdcIikpO1xuICB9XG4gIGlmIChudW1lcmljTGV2ZWwgPD0gTEVWRUxTLnRyYWNlKSB7XG4gICAgbG9nLnRyYWNlID0gY29uc29sZS5kZWJ1ZyA/IGNvbnNvbGUuZGVidWcuYmluZChjb25zb2xlLCBmb3JtYXQoXCJUUkFDRVwiKSwgXCJjb2xvcjogbGlnaHRncmVlblwiKSA6IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSwgXCJcXHgxQlszMm1cIiwgZm9ybWF0KFwiVFJBQ0VcIikpO1xuICB9XG59LCBcInNldExvZ0xldmVsXCIpO1xudmFyIGZvcm1hdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGxldmVsKSA9PiB7XG4gIGNvbnN0IHRpbWUgPSBkYXlqcygpLmZvcm1hdChcInNzLlNTU1wiKTtcbiAgcmV0dXJuIGAlYyR7dGltZX0gOiAke2xldmVsfSA6IGA7XG59LCBcImZvcm1hdFwiKTtcblxuLy8gc3JjL2RpYWdyYW0tYXBpL3JlZ2V4ZXMudHNcbnZhciBmcm9udE1hdHRlclJlZ2V4ID0gL14tezN9XFxzKltcXG5cXHJdKC4qPylbXFxuXFxyXS17M31cXHMqW1xcblxccl0rL3M7XG52YXIgZGlyZWN0aXZlUmVnZXggPSAvJXsyfXtcXHMqKD86KFxcdyspXFxzKjp8KFxcdyspKVxccyooPzooXFx3Kyl8KCg/Oig/IX0lezJ9KS58XFxyP1xcbikqKSk/XFxzKig/On0lezJ9KT8vZ2k7XG52YXIgYW55Q29tbWVudFJlZ2V4ID0gL1xccyolJS4qXFxuL2dtO1xuXG4vLyBzcmMvZXJyb3JzLnRzXG52YXIgVW5rbm93bkRpYWdyYW1FcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlVua25vd25EaWFncmFtRXJyb3JcIik7XG4gIH1cbiAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiVW5rbm93bkRpYWdyYW1FcnJvclwiO1xuICB9XG59O1xuXG4vLyBzcmMvZGlhZ3JhbS1hcGkvZGV0ZWN0VHlwZS50c1xudmFyIGRldGVjdG9ycyA9IHt9O1xudmFyIGRldGVjdFR5cGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKHRleHQsIGNvbmZpZzIpIHtcbiAgdGV4dCA9IHRleHQucmVwbGFjZShmcm9udE1hdHRlclJlZ2V4LCBcIlwiKS5yZXBsYWNlKGRpcmVjdGl2ZVJlZ2V4LCBcIlwiKS5yZXBsYWNlKGFueUNvbW1lbnRSZWdleCwgXCJcXG5cIik7XG4gIGZvciAoY29uc3QgW2tleSwgeyBkZXRlY3RvciB9XSBvZiBPYmplY3QuZW50cmllcyhkZXRlY3RvcnMpKSB7XG4gICAgY29uc3QgZGlhZ3JhbSA9IGRldGVjdG9yKHRleHQsIGNvbmZpZzIpO1xuICAgIGlmIChkaWFncmFtKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgVW5rbm93bkRpYWdyYW1FcnJvcihcbiAgICBgTm8gZGlhZ3JhbSB0eXBlIGRldGVjdGVkIG1hdGNoaW5nIGdpdmVuIGNvbmZpZ3VyYXRpb24gZm9yIHRleHQ6ICR7dGV4dH1gXG4gICk7XG59LCBcImRldGVjdFR5cGVcIik7XG52YXIgcmVnaXN0ZXJMYXp5TG9hZGVkRGlhZ3JhbXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCguLi5kaWFncmFtczIpID0+IHtcbiAgZm9yIChjb25zdCB7IGlkLCBkZXRlY3RvciwgbG9hZGVyIH0gb2YgZGlhZ3JhbXMyKSB7XG4gICAgYWRkRGV0ZWN0b3IoaWQsIGRldGVjdG9yLCBsb2FkZXIpO1xuICB9XG59LCBcInJlZ2lzdGVyTGF6eUxvYWRlZERpYWdyYW1zXCIpO1xudmFyIGFkZERldGVjdG9yID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoa2V5LCBkZXRlY3RvciwgbG9hZGVyKSA9PiB7XG4gIGlmIChkZXRlY3RvcnNba2V5XSkge1xuICAgIGxvZy53YXJuKGBEZXRlY3RvciB3aXRoIGtleSAke2tleX0gYWxyZWFkeSBleGlzdHMuIE92ZXJ3cml0aW5nLmApO1xuICB9XG4gIGRldGVjdG9yc1trZXldID0geyBkZXRlY3RvciwgbG9hZGVyIH07XG4gIGxvZy5kZWJ1ZyhgRGV0ZWN0b3Igd2l0aCBrZXkgJHtrZXl9IGFkZGVkJHtsb2FkZXIgPyBcIiB3aXRoIGxvYWRlclwiIDogXCJcIn1gKTtcbn0sIFwiYWRkRGV0ZWN0b3JcIik7XG52YXIgZ2V0RGlhZ3JhbUxvYWRlciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGtleSkgPT4ge1xuICByZXR1cm4gZGV0ZWN0b3JzW2tleV0ubG9hZGVyO1xufSwgXCJnZXREaWFncmFtTG9hZGVyXCIpO1xuXG4vLyBzcmMvYXNzaWduV2l0aERlcHRoLnRzXG52YXIgYXNzaWduV2l0aERlcHRoID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoZHN0LCBzcmMsIHsgZGVwdGggPSAyLCBjbG9iYmVyID0gZmFsc2UgfSA9IHt9KSA9PiB7XG4gIGNvbnN0IGNvbmZpZzIgPSB7IGRlcHRoLCBjbG9iYmVyIH07XG4gIGlmIChBcnJheS5pc0FycmF5KHNyYykgJiYgIUFycmF5LmlzQXJyYXkoZHN0KSkge1xuICAgIHNyYy5mb3JFYWNoKChzKSA9PiBhc3NpZ25XaXRoRGVwdGgoZHN0LCBzLCBjb25maWcyKSk7XG4gICAgcmV0dXJuIGRzdDtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHNyYykgJiYgQXJyYXkuaXNBcnJheShkc3QpKSB7XG4gICAgc3JjLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGlmICghZHN0LmluY2x1ZGVzKHMpKSB7XG4gICAgICAgIGRzdC5wdXNoKHMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkc3Q7XG4gIH1cbiAgaWYgKGRzdCA9PT0gdm9pZCAwIHx8IGRlcHRoIDw9IDApIHtcbiAgICBpZiAoZHN0ICE9PSB2b2lkIDAgJiYgZHN0ICE9PSBudWxsICYmIHR5cGVvZiBkc3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHNyYyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZHN0LCBzcmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3JjO1xuICAgIH1cbiAgfVxuICBpZiAoc3JjICE9PSB2b2lkIDAgJiYgdHlwZW9mIGRzdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygc3JjID09PSBcIm9iamVjdFwiKSB7XG4gICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygc3JjW2tleV0gPT09IFwib2JqZWN0XCIgJiYgKGRzdFtrZXldID09PSB2b2lkIDAgfHwgdHlwZW9mIGRzdFtrZXldID09PSBcIm9iamVjdFwiKSkge1xuICAgICAgICBpZiAoZHN0W2tleV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgIGRzdFtrZXldID0gQXJyYXkuaXNBcnJheShzcmNba2V5XSkgPyBbXSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGRzdFtrZXldID0gYXNzaWduV2l0aERlcHRoKGRzdFtrZXldLCBzcmNba2V5XSwgeyBkZXB0aDogZGVwdGggLSAxLCBjbG9iYmVyIH0pO1xuICAgICAgfSBlbHNlIGlmIChjbG9iYmVyIHx8IHR5cGVvZiBkc3Rba2V5XSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygc3JjW2tleV0gIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZHN0O1xufSwgXCJhc3NpZ25XaXRoRGVwdGhcIik7XG52YXIgYXNzaWduV2l0aERlcHRoX2RlZmF1bHQgPSBhc3NpZ25XaXRoRGVwdGg7XG5cbi8vIHNyYy90aGVtZXMvdGhlbWUtYmFzZS5qc1xuaW1wb3J0IHsgYWRqdXN0IGFzIGFkanVzdDIsIGRhcmtlbiwgaW52ZXJ0LCBpc0RhcmssIGxpZ2h0ZW4gfSBmcm9tIFwia2hyb21hXCI7XG5cbi8vIHNyYy90aGVtZXMvZXJEaWFncmFtLW9sZEhhcmRjb2RlZFZhbHVlcy50c1xudmFyIG9sZEF0dHJpYnV0ZUJhY2tncm91bmRDb2xvck9kZCA9IFwiI2ZmZmZmZlwiO1xudmFyIG9sZEF0dHJpYnV0ZUJhY2tncm91bmRDb2xvckV2ZW4gPSBcIiNmMmYyZjJcIjtcblxuLy8gc3JjL3RoZW1lcy90aGVtZS1oZWxwZXJzLmpzXG5pbXBvcnQgeyBhZGp1c3QgfSBmcm9tIFwia2hyb21hXCI7XG52YXIgbWtCb3JkZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb2wsIGRhcmtNb2RlKSA9PiBkYXJrTW9kZSA/IGFkanVzdChjb2wsIHsgczogLTQwLCBsOiAxMCB9KSA6IGFkanVzdChjb2wsIHsgczogLTQwLCBsOiAtMTAgfSksIFwibWtCb3JkZXJcIik7XG5cbi8vIHNyYy90aGVtZXMvdGhlbWUtYmFzZS5qc1xudmFyIFRoZW1lID0gY2xhc3Mge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRoZW1lXCIpO1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IFwiI2Y0ZjRmNFwiO1xuICAgIHRoaXMucHJpbWFyeUNvbG9yID0gXCIjZmZmNGRkXCI7XG4gICAgdGhpcy5ub3RlQmtnQ29sb3IgPSBcIiNmZmY1YWRcIjtcbiAgICB0aGlzLm5vdGVUZXh0Q29sb3IgPSBcIiMzMzNcIjtcbiAgICB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUID0gMTI7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gJ1widHJlYnVjaGV0IG1zXCIsIHZlcmRhbmEsIGFyaWFsLCBzYW5zLXNlcmlmJztcbiAgICB0aGlzLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gIH1cbiAgdXBkYXRlQ29sb3JzKCkge1xuICAgIHRoaXMucHJpbWFyeVRleHRDb2xvciA9IHRoaXMucHJpbWFyeVRleHRDb2xvciB8fCAodGhpcy5kYXJrTW9kZSA/IFwiI2VlZVwiIDogXCIjMzMzXCIpO1xuICAgIHRoaXMuc2Vjb25kYXJ5Q29sb3IgPSB0aGlzLnNlY29uZGFyeUNvbG9yIHx8IGFkanVzdDIodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTEyMCB9KTtcbiAgICB0aGlzLnRlcnRpYXJ5Q29sb3IgPSB0aGlzLnRlcnRpYXJ5Q29sb3IgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxODAsIGw6IDUgfSk7XG4gICAgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3IgPSB0aGlzLnByaW1hcnlCb3JkZXJDb2xvciB8fCBta0JvcmRlcih0aGlzLnByaW1hcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5zZWNvbmRhcnlCb3JkZXJDb2xvciA9IHRoaXMuc2Vjb25kYXJ5Qm9yZGVyQ29sb3IgfHwgbWtCb3JkZXIodGhpcy5zZWNvbmRhcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy50ZXJ0aWFyeUJvcmRlckNvbG9yID0gdGhpcy50ZXJ0aWFyeUJvcmRlckNvbG9yIHx8IG1rQm9yZGVyKHRoaXMudGVydGlhcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5ub3RlQm9yZGVyQ29sb3IgPSB0aGlzLm5vdGVCb3JkZXJDb2xvciB8fCBta0JvcmRlcih0aGlzLm5vdGVCa2dDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5ub3RlQmtnQ29sb3IgPSB0aGlzLm5vdGVCa2dDb2xvciB8fCBcIiNmZmY1YWRcIjtcbiAgICB0aGlzLm5vdGVUZXh0Q29sb3IgPSB0aGlzLm5vdGVUZXh0Q29sb3IgfHwgXCIjMzMzXCI7XG4gICAgdGhpcy5zZWNvbmRhcnlUZXh0Q29sb3IgPSB0aGlzLnNlY29uZGFyeVRleHRDb2xvciB8fCBpbnZlcnQodGhpcy5zZWNvbmRhcnlDb2xvcik7XG4gICAgdGhpcy50ZXJ0aWFyeVRleHRDb2xvciA9IHRoaXMudGVydGlhcnlUZXh0Q29sb3IgfHwgaW52ZXJ0KHRoaXMudGVydGlhcnlDb2xvcik7XG4gICAgdGhpcy5saW5lQ29sb3IgPSB0aGlzLmxpbmVDb2xvciB8fCBpbnZlcnQodGhpcy5iYWNrZ3JvdW5kKTtcbiAgICB0aGlzLmFycm93aGVhZENvbG9yID0gdGhpcy5hcnJvd2hlYWRDb2xvciB8fCBpbnZlcnQodGhpcy5iYWNrZ3JvdW5kKTtcbiAgICB0aGlzLnRleHRDb2xvciA9IHRoaXMudGV4dENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLmJvcmRlcjIgPSB0aGlzLmJvcmRlcjIgfHwgdGhpcy50ZXJ0aWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMubm9kZUJrZyA9IHRoaXMubm9kZUJrZyB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLm1haW5Ca2cgPSB0aGlzLm1haW5Ca2cgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5ub2RlQm9yZGVyID0gdGhpcy5ub2RlQm9yZGVyIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMuY2x1c3RlckJrZyA9IHRoaXMuY2x1c3RlckJrZyB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5jbHVzdGVyQm9yZGVyID0gdGhpcy5jbHVzdGVyQm9yZGVyIHx8IHRoaXMudGVydGlhcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLmRlZmF1bHRMaW5rQ29sb3IgPSB0aGlzLmRlZmF1bHRMaW5rQ29sb3IgfHwgdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy50aXRsZUNvbG9yID0gdGhpcy50aXRsZUNvbG9yIHx8IHRoaXMudGVydGlhcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5lZGdlTGFiZWxCYWNrZ3JvdW5kID0gdGhpcy5lZGdlTGFiZWxCYWNrZ3JvdW5kIHx8ICh0aGlzLmRhcmtNb2RlID8gZGFya2VuKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIDMwKSA6IHRoaXMuc2Vjb25kYXJ5Q29sb3IpO1xuICAgIHRoaXMubm9kZVRleHRDb2xvciA9IHRoaXMubm9kZVRleHRDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5hY3RvckJvcmRlciA9IHRoaXMuYWN0b3JCb3JkZXIgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5hY3RvckJrZyA9IHRoaXMuYWN0b3JCa2cgfHwgdGhpcy5tYWluQmtnO1xuICAgIHRoaXMuYWN0b3JUZXh0Q29sb3IgPSB0aGlzLmFjdG9yVGV4dENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLmFjdG9yTGluZUNvbG9yID0gdGhpcy5hY3RvckxpbmVDb2xvciB8fCB0aGlzLmFjdG9yQm9yZGVyO1xuICAgIHRoaXMubGFiZWxCb3hCa2dDb2xvciA9IHRoaXMubGFiZWxCb3hCa2dDb2xvciB8fCB0aGlzLmFjdG9yQmtnO1xuICAgIHRoaXMuc2lnbmFsQ29sb3IgPSB0aGlzLnNpZ25hbENvbG9yIHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMuc2lnbmFsVGV4dENvbG9yID0gdGhpcy5zaWduYWxUZXh0Q29sb3IgfHwgdGhpcy50ZXh0Q29sb3I7XG4gICAgdGhpcy5sYWJlbEJveEJvcmRlckNvbG9yID0gdGhpcy5sYWJlbEJveEJvcmRlckNvbG9yIHx8IHRoaXMuYWN0b3JCb3JkZXI7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvciA9IHRoaXMubGFiZWxUZXh0Q29sb3IgfHwgdGhpcy5hY3RvclRleHRDb2xvcjtcbiAgICB0aGlzLmxvb3BUZXh0Q29sb3IgPSB0aGlzLmxvb3BUZXh0Q29sb3IgfHwgdGhpcy5hY3RvclRleHRDb2xvcjtcbiAgICB0aGlzLmFjdGl2YXRpb25Cb3JkZXJDb2xvciA9IHRoaXMuYWN0aXZhdGlvbkJvcmRlckNvbG9yIHx8IGRhcmtlbih0aGlzLnNlY29uZGFyeUNvbG9yLCAxMCk7XG4gICAgdGhpcy5hY3RpdmF0aW9uQmtnQ29sb3IgPSB0aGlzLmFjdGl2YXRpb25Ca2dDb2xvciB8fCB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJDb2xvciA9IHRoaXMuc2VxdWVuY2VOdW1iZXJDb2xvciB8fCBpbnZlcnQodGhpcy5saW5lQ29sb3IpO1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yID0gdGhpcy5zZWN0aW9uQmtnQ29sb3IgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuYWx0U2VjdGlvbkJrZ0NvbG9yID0gdGhpcy5hbHRTZWN0aW9uQmtnQ29sb3IgfHwgXCJ3aGl0ZVwiO1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yID0gdGhpcy5zZWN0aW9uQmtnQ29sb3IgfHwgdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB0aGlzLnNlY3Rpb25Ca2dDb2xvcjIgPSB0aGlzLnNlY3Rpb25Ca2dDb2xvcjIgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5leGNsdWRlQmtnQ29sb3IgPSB0aGlzLmV4Y2x1ZGVCa2dDb2xvciB8fCBcIiNlZWVlZWVcIjtcbiAgICB0aGlzLnRhc2tCb3JkZXJDb2xvciA9IHRoaXMudGFza0JvcmRlckNvbG9yIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMudGFza0JrZ0NvbG9yID0gdGhpcy50YXNrQmtnQ29sb3IgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5hY3RpdmVUYXNrQm9yZGVyQ29sb3IgPSB0aGlzLmFjdGl2ZVRhc2tCb3JkZXJDb2xvciB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLmFjdGl2ZVRhc2tCa2dDb2xvciA9IHRoaXMuYWN0aXZlVGFza0JrZ0NvbG9yIHx8IGxpZ2h0ZW4odGhpcy5wcmltYXJ5Q29sb3IsIDIzKTtcbiAgICB0aGlzLmdyaWRDb2xvciA9IHRoaXMuZ3JpZENvbG9yIHx8IFwibGlnaHRncmV5XCI7XG4gICAgdGhpcy5kb25lVGFza0JrZ0NvbG9yID0gdGhpcy5kb25lVGFza0JrZ0NvbG9yIHx8IFwibGlnaHRncmV5XCI7XG4gICAgdGhpcy5kb25lVGFza0JvcmRlckNvbG9yID0gdGhpcy5kb25lVGFza0JvcmRlckNvbG9yIHx8IFwiZ3JleVwiO1xuICAgIHRoaXMuY3JpdEJvcmRlckNvbG9yID0gdGhpcy5jcml0Qm9yZGVyQ29sb3IgfHwgXCIjZmY4ODg4XCI7XG4gICAgdGhpcy5jcml0QmtnQ29sb3IgPSB0aGlzLmNyaXRCa2dDb2xvciB8fCBcInJlZFwiO1xuICAgIHRoaXMudG9kYXlMaW5lQ29sb3IgPSB0aGlzLnRvZGF5TGluZUNvbG9yIHx8IFwicmVkXCI7XG4gICAgdGhpcy50YXNrVGV4dENvbG9yID0gdGhpcy50YXNrVGV4dENvbG9yIHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSB0aGlzLnRhc2tUZXh0T3V0c2lkZUNvbG9yIHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMudGFza1RleHRMaWdodENvbG9yID0gdGhpcy50YXNrVGV4dExpZ2h0Q29sb3IgfHwgdGhpcy50ZXh0Q29sb3I7XG4gICAgdGhpcy50YXNrVGV4dENvbG9yID0gdGhpcy50YXNrVGV4dENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gdGhpcy50YXNrVGV4dERhcmtDb2xvciB8fCB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnRhc2tUZXh0Q2xpY2thYmxlQ29sb3IgPSB0aGlzLnRhc2tUZXh0Q2xpY2thYmxlQ29sb3IgfHwgXCIjMDAzMTYzXCI7XG4gICAgdGhpcy5wZXJzb25Cb3JkZXIgPSB0aGlzLnBlcnNvbkJvcmRlciB8fCB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnBlcnNvbkJrZyA9IHRoaXMucGVyc29uQmtnIHx8IHRoaXMubWFpbkJrZztcbiAgICBpZiAodGhpcy5kYXJrTW9kZSkge1xuICAgICAgdGhpcy5yb3dPZGQgPSB0aGlzLnJvd09kZCB8fCBkYXJrZW4odGhpcy5tYWluQmtnLCA1KSB8fCBcIiNmZmZmZmZcIjtcbiAgICAgIHRoaXMucm93RXZlbiA9IHRoaXMucm93RXZlbiB8fCBkYXJrZW4odGhpcy5tYWluQmtnLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucm93T2RkID0gdGhpcy5yb3dPZGQgfHwgbGlnaHRlbih0aGlzLm1haW5Ca2csIDc1KSB8fCBcIiNmZmZmZmZcIjtcbiAgICAgIHRoaXMucm93RXZlbiA9IHRoaXMucm93RXZlbiB8fCBsaWdodGVuKHRoaXMubWFpbkJrZywgNSk7XG4gICAgfVxuICAgIHRoaXMudHJhbnNpdGlvbkNvbG9yID0gdGhpcy50cmFuc2l0aW9uQ29sb3IgfHwgdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy50cmFuc2l0aW9uTGFiZWxDb2xvciA9IHRoaXMudHJhbnNpdGlvbkxhYmVsQ29sb3IgfHwgdGhpcy50ZXh0Q29sb3I7XG4gICAgdGhpcy5zdGF0ZUxhYmVsQ29sb3IgPSB0aGlzLnN0YXRlTGFiZWxDb2xvciB8fCB0aGlzLnN0YXRlQmtnIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnN0YXRlQmtnID0gdGhpcy5zdGF0ZUJrZyB8fCB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5sYWJlbEJhY2tncm91bmRDb2xvciA9IHRoaXMubGFiZWxCYWNrZ3JvdW5kQ29sb3IgfHwgdGhpcy5zdGF0ZUJrZztcbiAgICB0aGlzLmNvbXBvc2l0ZUJhY2tncm91bmQgPSB0aGlzLmNvbXBvc2l0ZUJhY2tncm91bmQgfHwgdGhpcy5iYWNrZ3JvdW5kIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmFsdEJhY2tncm91bmQgPSB0aGlzLmFsdEJhY2tncm91bmQgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuY29tcG9zaXRlVGl0bGVCYWNrZ3JvdW5kID0gdGhpcy5jb21wb3NpdGVUaXRsZUJhY2tncm91bmQgfHwgdGhpcy5tYWluQmtnO1xuICAgIHRoaXMuY29tcG9zaXRlQm9yZGVyID0gdGhpcy5jb21wb3NpdGVCb3JkZXIgfHwgdGhpcy5ub2RlQm9yZGVyO1xuICAgIHRoaXMuaW5uZXJFbmRCYWNrZ3JvdW5kID0gdGhpcy5ub2RlQm9yZGVyO1xuICAgIHRoaXMuZXJyb3JCa2dDb2xvciA9IHRoaXMuZXJyb3JCa2dDb2xvciB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5lcnJvclRleHRDb2xvciA9IHRoaXMuZXJyb3JUZXh0Q29sb3IgfHwgdGhpcy50ZXJ0aWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnRyYW5zaXRpb25Db2xvciA9IHRoaXMudHJhbnNpdGlvbkNvbG9yIHx8IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMuc3BlY2lhbFN0YXRlQ29sb3IgPSB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLmNTY2FsZTAgPSB0aGlzLmNTY2FsZTAgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5jU2NhbGUxID0gdGhpcy5jU2NhbGUxIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5jU2NhbGUyID0gdGhpcy5jU2NhbGUyIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmNTY2FsZTMgPSB0aGlzLmNTY2FsZTMgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAzMCB9KTtcbiAgICB0aGlzLmNTY2FsZTQgPSB0aGlzLmNTY2FsZTQgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2MCB9KTtcbiAgICB0aGlzLmNTY2FsZTUgPSB0aGlzLmNTY2FsZTUgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA5MCB9KTtcbiAgICB0aGlzLmNTY2FsZTYgPSB0aGlzLmNTY2FsZTYgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAgfSk7XG4gICAgdGhpcy5jU2NhbGU3ID0gdGhpcy5jU2NhbGU3IHx8IGFkanVzdDIodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTUwIH0pO1xuICAgIHRoaXMuY1NjYWxlOCA9IHRoaXMuY1NjYWxlOCB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDIxMCwgbDogMTUwIH0pO1xuICAgIHRoaXMuY1NjYWxlOSA9IHRoaXMuY1NjYWxlOSB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDI3MCB9KTtcbiAgICB0aGlzLmNTY2FsZTEwID0gdGhpcy5jU2NhbGUxMCB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMwMCB9KTtcbiAgICB0aGlzLmNTY2FsZTExID0gdGhpcy5jU2NhbGUxMSB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMzMCB9KTtcbiAgICBpZiAodGhpcy5kYXJrTW9kZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgICAgdGhpc1tcImNTY2FsZVwiICsgaV0gPSBkYXJrZW4odGhpc1tcImNTY2FsZVwiICsgaV0sIDc1KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgICAgdGhpc1tcImNTY2FsZVwiICsgaV0gPSBkYXJrZW4odGhpc1tcImNTY2FsZVwiICsgaV0sIDI1KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIHRoaXNbXCJjU2NhbGVJbnZcIiArIGldID0gdGhpc1tcImNTY2FsZUludlwiICsgaV0gfHwgaW52ZXJ0KHRoaXNbXCJjU2NhbGVcIiArIGldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmRhcmtNb2RlKSB7XG4gICAgICAgIHRoaXNbXCJjU2NhbGVQZWVyXCIgKyBpXSA9IHRoaXNbXCJjU2NhbGVQZWVyXCIgKyBpXSB8fCBsaWdodGVuKHRoaXNbXCJjU2NhbGVcIiArIGldLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW1wiY1NjYWxlUGVlclwiICsgaV0gPSB0aGlzW1wiY1NjYWxlUGVlclwiICsgaV0gfHwgZGFya2VuKHRoaXNbXCJjU2NhbGVcIiArIGldLCAxMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2NhbGVMYWJlbENvbG9yID0gdGhpcy5zY2FsZUxhYmVsQ29sb3IgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgdGhpc1tcImNTY2FsZUxhYmVsXCIgKyBpXSA9IHRoaXNbXCJjU2NhbGVMYWJlbFwiICsgaV0gfHwgdGhpcy5zY2FsZUxhYmVsQ29sb3I7XG4gICAgfVxuICAgIGNvbnN0IG11bHRpcGxpZXIgPSB0aGlzLmRhcmtNb2RlID8gLTQgOiAtMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgdGhpc1tcInN1cmZhY2VcIiArIGldID0gdGhpc1tcInN1cmZhY2VcIiArIGldIHx8IGFkanVzdDIodGhpcy5tYWluQmtnLCB7IGg6IDE4MCwgczogLTE1LCBsOiBtdWx0aXBsaWVyICogKDUgKyBpICogMykgfSk7XG4gICAgICB0aGlzW1wic3VyZmFjZVBlZXJcIiArIGldID0gdGhpc1tcInN1cmZhY2VQZWVyXCIgKyBpXSB8fCBhZGp1c3QyKHRoaXMubWFpbkJrZywgeyBoOiAxODAsIHM6IC0xNSwgbDogbXVsdGlwbGllciAqICg4ICsgaSAqIDMpIH0pO1xuICAgIH1cbiAgICB0aGlzLmNsYXNzVGV4dCA9IHRoaXMuY2xhc3NUZXh0IHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMuZmlsbFR5cGUwID0gdGhpcy5maWxsVHlwZTAgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTEgPSB0aGlzLmZpbGxUeXBlMSB8fCB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuZmlsbFR5cGUyID0gdGhpcy5maWxsVHlwZTIgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlMyA9IHRoaXMuZmlsbFR5cGUzIHx8IGFkanVzdDIodGhpcy5zZWNvbmRhcnlDb2xvciwgeyBoOiA2NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlNCA9IHRoaXMuZmlsbFR5cGU0IHx8IGFkanVzdDIodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU1ID0gdGhpcy5maWxsVHlwZTUgfHwgYWRqdXN0Mih0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IC02NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlNiA9IHRoaXMuZmlsbFR5cGU2IHx8IGFkanVzdDIodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTI4IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU3ID0gdGhpcy5maWxsVHlwZTcgfHwgYWRqdXN0Mih0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IDEyOCB9KTtcbiAgICB0aGlzLnBpZTEgPSB0aGlzLnBpZTEgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5waWUyID0gdGhpcy5waWUyIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5waWUzID0gdGhpcy5waWUzIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLnBpZTQgPSB0aGlzLnBpZTQgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBsOiAtMTAgfSk7XG4gICAgdGhpcy5waWU1ID0gdGhpcy5waWU1IHx8IGFkanVzdDIodGhpcy5zZWNvbmRhcnlDb2xvciwgeyBsOiAtMTAgfSk7XG4gICAgdGhpcy5waWU2ID0gdGhpcy5waWU2IHx8IGFkanVzdDIodGhpcy50ZXJ0aWFyeUNvbG9yLCB7IGw6IC0xMCB9KTtcbiAgICB0aGlzLnBpZTcgPSB0aGlzLnBpZTcgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2MCwgbDogLTEwIH0pO1xuICAgIHRoaXMucGllOCA9IHRoaXMucGllOCB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC02MCwgbDogLTEwIH0pO1xuICAgIHRoaXMucGllOSA9IHRoaXMucGllOSB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDEyMCwgbDogMCB9KTtcbiAgICB0aGlzLnBpZTEwID0gdGhpcy5waWUxMCB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDYwLCBsOiAtMjAgfSk7XG4gICAgdGhpcy5waWUxMSA9IHRoaXMucGllMTEgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtNjAsIGw6IC0yMCB9KTtcbiAgICB0aGlzLnBpZTEyID0gdGhpcy5waWUxMiB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDEyMCwgbDogLTEwIH0pO1xuICAgIHRoaXMucGllVGl0bGVUZXh0U2l6ZSA9IHRoaXMucGllVGl0bGVUZXh0U2l6ZSB8fCBcIjI1cHhcIjtcbiAgICB0aGlzLnBpZVRpdGxlVGV4dENvbG9yID0gdGhpcy5waWVUaXRsZVRleHRDb2xvciB8fCB0aGlzLnRhc2tUZXh0RGFya0NvbG9yO1xuICAgIHRoaXMucGllU2VjdGlvblRleHRTaXplID0gdGhpcy5waWVTZWN0aW9uVGV4dFNpemUgfHwgXCIxN3B4XCI7XG4gICAgdGhpcy5waWVTZWN0aW9uVGV4dENvbG9yID0gdGhpcy5waWVTZWN0aW9uVGV4dENvbG9yIHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMucGllTGVnZW5kVGV4dFNpemUgPSB0aGlzLnBpZUxlZ2VuZFRleHRTaXplIHx8IFwiMTdweFwiO1xuICAgIHRoaXMucGllTGVnZW5kVGV4dENvbG9yID0gdGhpcy5waWVMZWdlbmRUZXh0Q29sb3IgfHwgdGhpcy50YXNrVGV4dERhcmtDb2xvcjtcbiAgICB0aGlzLnBpZVN0cm9rZUNvbG9yID0gdGhpcy5waWVTdHJva2VDb2xvciB8fCBcImJsYWNrXCI7XG4gICAgdGhpcy5waWVTdHJva2VXaWR0aCA9IHRoaXMucGllU3Ryb2tlV2lkdGggfHwgXCIycHhcIjtcbiAgICB0aGlzLnBpZU91dGVyU3Ryb2tlV2lkdGggPSB0aGlzLnBpZU91dGVyU3Ryb2tlV2lkdGggfHwgXCIycHhcIjtcbiAgICB0aGlzLnBpZU91dGVyU3Ryb2tlQ29sb3IgPSB0aGlzLnBpZU91dGVyU3Ryb2tlQ29sb3IgfHwgXCJibGFja1wiO1xuICAgIHRoaXMucGllT3BhY2l0eSA9IHRoaXMucGllT3BhY2l0eSB8fCBcIjAuN1wiO1xuICAgIHRoaXMucmFkYXIgPSB7XG4gICAgICBheGlzQ29sb3I6IHRoaXMucmFkYXI/LmF4aXNDb2xvciB8fCB0aGlzLmxpbmVDb2xvcixcbiAgICAgIGF4aXNTdHJva2VXaWR0aDogdGhpcy5yYWRhcj8uYXhpc1N0cm9rZVdpZHRoIHx8IDIsXG4gICAgICBheGlzTGFiZWxGb250U2l6ZTogdGhpcy5yYWRhcj8uYXhpc0xhYmVsRm9udFNpemUgfHwgMTIsXG4gICAgICBjdXJ2ZU9wYWNpdHk6IHRoaXMucmFkYXI/LmN1cnZlT3BhY2l0eSB8fCAwLjUsXG4gICAgICBjdXJ2ZVN0cm9rZVdpZHRoOiB0aGlzLnJhZGFyPy5jdXJ2ZVN0cm9rZVdpZHRoIHx8IDIsXG4gICAgICBncmF0aWN1bGVDb2xvcjogdGhpcy5yYWRhcj8uZ3JhdGljdWxlQ29sb3IgfHwgXCIjREVERURFXCIsXG4gICAgICBncmF0aWN1bGVTdHJva2VXaWR0aDogdGhpcy5yYWRhcj8uZ3JhdGljdWxlU3Ryb2tlV2lkdGggfHwgMSxcbiAgICAgIGdyYXRpY3VsZU9wYWNpdHk6IHRoaXMucmFkYXI/LmdyYXRpY3VsZU9wYWNpdHkgfHwgMC4zLFxuICAgICAgbGVnZW5kQm94U2l6ZTogdGhpcy5yYWRhcj8ubGVnZW5kQm94U2l6ZSB8fCAxMixcbiAgICAgIGxlZ2VuZEZvbnRTaXplOiB0aGlzLnJhZGFyPy5sZWdlbmRGb250U2l6ZSB8fCAxMlxuICAgIH07XG4gICAgdGhpcy5hcmNoRWRnZUNvbG9yID0gdGhpcy5hcmNoRWRnZUNvbG9yIHx8IFwiIzc3N1wiO1xuICAgIHRoaXMuYXJjaEVkZ2VBcnJvd0NvbG9yID0gdGhpcy5hcmNoRWRnZUFycm93Q29sb3IgfHwgXCIjNzc3XCI7XG4gICAgdGhpcy5hcmNoRWRnZVdpZHRoID0gdGhpcy5hcmNoRWRnZVdpZHRoIHx8IFwiM1wiO1xuICAgIHRoaXMuYXJjaEdyb3VwQm9yZGVyQ29sb3IgPSB0aGlzLmFyY2hHcm91cEJvcmRlckNvbG9yIHx8IFwiIzAwMFwiO1xuICAgIHRoaXMuYXJjaEdyb3VwQm9yZGVyV2lkdGggPSB0aGlzLmFyY2hHcm91cEJvcmRlcldpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5xdWFkcmFudDFGaWxsID0gdGhpcy5xdWFkcmFudDFGaWxsIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMucXVhZHJhbnQyRmlsbCA9IHRoaXMucXVhZHJhbnQyRmlsbCB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IHI6IDUsIGc6IDUsIGI6IDUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDNGaWxsID0gdGhpcy5xdWFkcmFudDNGaWxsIHx8IGFkanVzdDIodGhpcy5wcmltYXJ5Q29sb3IsIHsgcjogMTAsIGc6IDEwLCBiOiAxMCB9KTtcbiAgICB0aGlzLnF1YWRyYW50NEZpbGwgPSB0aGlzLnF1YWRyYW50NEZpbGwgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyByOiAxNSwgZzogMTUsIGI6IDE1IH0pO1xuICAgIHRoaXMucXVhZHJhbnQxVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50MVRleHRGaWxsIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50MlRleHRGaWxsID0gdGhpcy5xdWFkcmFudDJUZXh0RmlsbCB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeVRleHRDb2xvciwgeyByOiAtNSwgZzogLTUsIGI6IC01IH0pO1xuICAgIHRoaXMucXVhZHJhbnQzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50M1RleHRGaWxsIHx8IGFkanVzdDIodGhpcy5wcmltYXJ5VGV4dENvbG9yLCB7IHI6IC0xMCwgZzogLTEwLCBiOiAtMTAgfSk7XG4gICAgdGhpcy5xdWFkcmFudDRUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQ0VGV4dEZpbGwgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlUZXh0Q29sb3IsIHsgcjogLTE1LCBnOiAtMTUsIGI6IC0xNSB9KTtcbiAgICB0aGlzLnF1YWRyYW50UG9pbnRGaWxsID0gdGhpcy5xdWFkcmFudFBvaW50RmlsbCB8fCBpc0RhcmsodGhpcy5xdWFkcmFudDFGaWxsKSA/IGxpZ2h0ZW4odGhpcy5xdWFkcmFudDFGaWxsKSA6IGRhcmtlbih0aGlzLnF1YWRyYW50MUZpbGwpO1xuICAgIHRoaXMucXVhZHJhbnRQb2ludFRleHRGaWxsID0gdGhpcy5xdWFkcmFudFBvaW50VGV4dEZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucXVhZHJhbnRYQXhpc1RleHRGaWxsID0gdGhpcy5xdWFkcmFudFhBeGlzVGV4dEZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucXVhZHJhbnRZQXhpc1RleHRGaWxsID0gdGhpcy5xdWFkcmFudFlBeGlzVGV4dEZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucXVhZHJhbnRJbnRlcm5hbEJvcmRlclN0cm9rZUZpbGwgPSB0aGlzLnF1YWRyYW50SW50ZXJuYWxCb3JkZXJTdHJva2VGaWxsIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMucXVhZHJhbnRFeHRlcm5hbEJvcmRlclN0cm9rZUZpbGwgPSB0aGlzLnF1YWRyYW50RXh0ZXJuYWxCb3JkZXJTdHJva2VGaWxsIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMucXVhZHJhbnRUaXRsZUZpbGwgPSB0aGlzLnF1YWRyYW50VGl0bGVGaWxsIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnh5Q2hhcnQgPSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMueHlDaGFydD8uYmFja2dyb3VuZENvbG9yIHx8IHRoaXMuYmFja2dyb3VuZCxcbiAgICAgIHRpdGxlQ29sb3I6IHRoaXMueHlDaGFydD8udGl0bGVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB4QXhpc1RpdGxlQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNUaXRsZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzTGFiZWxDb2xvcjogdGhpcy54eUNoYXJ0Py54QXhpc0xhYmVsQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNUaWNrQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNUaWNrQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNMaW5lQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNMaW5lQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeUF4aXNUaXRsZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzVGl0bGVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc0xhYmVsQ29sb3I6IHRoaXMueHlDaGFydD8ueUF4aXNMYWJlbENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzVGlja0NvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzVGlja0NvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzTGluZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzTGluZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHBsb3RDb2xvclBhbGV0dGU6IHRoaXMueHlDaGFydD8ucGxvdENvbG9yUGFsZXR0ZSB8fCBcIiNGRkY0REQsI0ZGRDhCMSwjRkZBMDdBLCNFQ0VGRjEsI0Q2REJERiwjQzNFMEE4LCNGRkI2QTQsI0ZGRDc0RCwjNzM4RkE3LCNGRkZGRjBcIlxuICAgIH07XG4gICAgdGhpcy5yZXF1aXJlbWVudEJhY2tncm91bmQgPSB0aGlzLnJlcXVpcmVtZW50QmFja2dyb3VuZCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyQ29sb3IgPSB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyQ29sb3IgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5yZXF1aXJlbWVudEJvcmRlclNpemUgPSB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyU2l6ZSB8fCBcIjFcIjtcbiAgICB0aGlzLnJlcXVpcmVtZW50VGV4dENvbG9yID0gdGhpcy5yZXF1aXJlbWVudFRleHRDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5yZWxhdGlvbkNvbG9yID0gdGhpcy5yZWxhdGlvbkNvbG9yIHx8IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMucmVsYXRpb25MYWJlbEJhY2tncm91bmQgPSB0aGlzLnJlbGF0aW9uTGFiZWxCYWNrZ3JvdW5kIHx8ICh0aGlzLmRhcmtNb2RlID8gZGFya2VuKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIDMwKSA6IHRoaXMuc2Vjb25kYXJ5Q29sb3IpO1xuICAgIHRoaXMucmVsYXRpb25MYWJlbENvbG9yID0gdGhpcy5yZWxhdGlvbkxhYmVsQ29sb3IgfHwgdGhpcy5hY3RvclRleHRDb2xvcjtcbiAgICB0aGlzLmdpdDAgPSB0aGlzLmdpdDAgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5naXQxID0gdGhpcy5naXQxIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5naXQyID0gdGhpcy5naXQyIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmdpdDMgPSB0aGlzLmdpdDMgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtMzAgfSk7XG4gICAgdGhpcy5naXQ0ID0gdGhpcy5naXQ0IHx8IGFkanVzdDIodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTYwIH0pO1xuICAgIHRoaXMuZ2l0NSA9IHRoaXMuZ2l0NSB8fCBhZGp1c3QyKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC05MCB9KTtcbiAgICB0aGlzLmdpdDYgPSB0aGlzLmdpdDYgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2MCB9KTtcbiAgICB0aGlzLmdpdDcgPSB0aGlzLmdpdDcgfHwgYWRqdXN0Mih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAgfSk7XG4gICAgaWYgKHRoaXMuZGFya01vZGUpIHtcbiAgICAgIHRoaXMuZ2l0MCA9IGxpZ2h0ZW4odGhpcy5naXQwLCAyNSk7XG4gICAgICB0aGlzLmdpdDEgPSBsaWdodGVuKHRoaXMuZ2l0MSwgMjUpO1xuICAgICAgdGhpcy5naXQyID0gbGlnaHRlbih0aGlzLmdpdDIsIDI1KTtcbiAgICAgIHRoaXMuZ2l0MyA9IGxpZ2h0ZW4odGhpcy5naXQzLCAyNSk7XG4gICAgICB0aGlzLmdpdDQgPSBsaWdodGVuKHRoaXMuZ2l0NCwgMjUpO1xuICAgICAgdGhpcy5naXQ1ID0gbGlnaHRlbih0aGlzLmdpdDUsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NiA9IGxpZ2h0ZW4odGhpcy5naXQ2LCAyNSk7XG4gICAgICB0aGlzLmdpdDcgPSBsaWdodGVuKHRoaXMuZ2l0NywgMjUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdpdDAgPSBkYXJrZW4odGhpcy5naXQwLCAyNSk7XG4gICAgICB0aGlzLmdpdDEgPSBkYXJrZW4odGhpcy5naXQxLCAyNSk7XG4gICAgICB0aGlzLmdpdDIgPSBkYXJrZW4odGhpcy5naXQyLCAyNSk7XG4gICAgICB0aGlzLmdpdDMgPSBkYXJrZW4odGhpcy5naXQzLCAyNSk7XG4gICAgICB0aGlzLmdpdDQgPSBkYXJrZW4odGhpcy5naXQ0LCAyNSk7XG4gICAgICB0aGlzLmdpdDUgPSBkYXJrZW4odGhpcy5naXQ1LCAyNSk7XG4gICAgICB0aGlzLmdpdDYgPSBkYXJrZW4odGhpcy5naXQ2LCAyNSk7XG4gICAgICB0aGlzLmdpdDcgPSBkYXJrZW4odGhpcy5naXQ3LCAyNSk7XG4gICAgfVxuICAgIHRoaXMuZ2l0SW52MCA9IHRoaXMuZ2l0SW52MCB8fCBpbnZlcnQodGhpcy5naXQwKTtcbiAgICB0aGlzLmdpdEludjEgPSB0aGlzLmdpdEludjEgfHwgaW52ZXJ0KHRoaXMuZ2l0MSk7XG4gICAgdGhpcy5naXRJbnYyID0gdGhpcy5naXRJbnYyIHx8IGludmVydCh0aGlzLmdpdDIpO1xuICAgIHRoaXMuZ2l0SW52MyA9IHRoaXMuZ2l0SW52MyB8fCBpbnZlcnQodGhpcy5naXQzKTtcbiAgICB0aGlzLmdpdEludjQgPSB0aGlzLmdpdEludjQgfHwgaW52ZXJ0KHRoaXMuZ2l0NCk7XG4gICAgdGhpcy5naXRJbnY1ID0gdGhpcy5naXRJbnY1IHx8IGludmVydCh0aGlzLmdpdDUpO1xuICAgIHRoaXMuZ2l0SW52NiA9IHRoaXMuZ2l0SW52NiB8fCBpbnZlcnQodGhpcy5naXQ2KTtcbiAgICB0aGlzLmdpdEludjcgPSB0aGlzLmdpdEludjcgfHwgaW52ZXJ0KHRoaXMuZ2l0Nyk7XG4gICAgdGhpcy5icmFuY2hMYWJlbENvbG9yID0gdGhpcy5icmFuY2hMYWJlbENvbG9yIHx8ICh0aGlzLmRhcmtNb2RlID8gXCJibGFja1wiIDogdGhpcy5sYWJlbFRleHRDb2xvcik7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDAgPSB0aGlzLmdpdEJyYW5jaExhYmVsMCB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDEgPSB0aGlzLmdpdEJyYW5jaExhYmVsMSB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDIgPSB0aGlzLmdpdEJyYW5jaExhYmVsMiB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDMgPSB0aGlzLmdpdEJyYW5jaExhYmVsMyB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDQgPSB0aGlzLmdpdEJyYW5jaExhYmVsNCB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDUgPSB0aGlzLmdpdEJyYW5jaExhYmVsNSB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDYgPSB0aGlzLmdpdEJyYW5jaExhYmVsNiB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDcgPSB0aGlzLmdpdEJyYW5jaExhYmVsNyB8fCB0aGlzLmJyYW5jaExhYmVsQ29sb3I7XG4gICAgdGhpcy50YWdMYWJlbENvbG9yID0gdGhpcy50YWdMYWJlbENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsQmFja2dyb3VuZCA9IHRoaXMudGFnTGFiZWxCYWNrZ3JvdW5kIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMudGFnTGFiZWxCb3JkZXIgPSB0aGlzLnRhZ0JvcmRlciB8fCB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsRm9udFNpemUgPSB0aGlzLnRhZ0xhYmVsRm9udFNpemUgfHwgXCIxMHB4XCI7XG4gICAgdGhpcy5jb21taXRMYWJlbENvbG9yID0gdGhpcy5jb21taXRMYWJlbENvbG9yIHx8IHRoaXMuc2Vjb25kYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuY29tbWl0TGFiZWxCYWNrZ3JvdW5kID0gdGhpcy5jb21taXRMYWJlbEJhY2tncm91bmQgfHwgdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB0aGlzLmNvbW1pdExhYmVsRm9udFNpemUgPSB0aGlzLmNvbW1pdExhYmVsRm9udFNpemUgfHwgXCIxMHB4XCI7XG4gICAgdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JPZGQgPSB0aGlzLmF0dHJpYnV0ZUJhY2tncm91bmRDb2xvck9kZCB8fCBvbGRBdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JPZGQ7XG4gICAgdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JFdmVuID0gdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JFdmVuIHx8IG9sZEF0dHJpYnV0ZUJhY2tncm91bmRDb2xvckV2ZW47XG4gIH1cbiAgY2FsY3VsYXRlKG92ZXJyaWRlcykge1xuICAgIGlmICh0eXBlb2Ygb3ZlcnJpZGVzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbG9ycygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3ZlcnJpZGVzKTtcbiAgICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICAgIHRoaXNba10gPSBvdmVycmlkZXNba107XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVDb2xvcnMoKTtcbiAgICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICAgIHRoaXNba10gPSBvdmVycmlkZXNba107XG4gICAgfSk7XG4gIH1cbn07XG52YXIgZ2V0VGhlbWVWYXJpYWJsZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh1c2VyT3ZlcnJpZGVzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gbmV3IFRoZW1lKCk7XG4gIHRoZW1lLmNhbGN1bGF0ZSh1c2VyT3ZlcnJpZGVzKTtcbiAgcmV0dXJuIHRoZW1lO1xufSwgXCJnZXRUaGVtZVZhcmlhYmxlc1wiKTtcblxuLy8gc3JjL3RoZW1lcy90aGVtZS1kYXJrLmpzXG5pbXBvcnQgeyBhZGp1c3QgYXMgYWRqdXN0MywgZGFya2VuIGFzIGRhcmtlbjIsIGludmVydCBhcyBpbnZlcnQyLCBpc0RhcmsgYXMgaXNEYXJrMiwgbGlnaHRlbiBhcyBsaWdodGVuMiwgcmdiYSB9IGZyb20gXCJraHJvbWFcIjtcbnZhciBUaGVtZTIgPSBjbGFzcyB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiVGhlbWVcIik7XG4gIH1cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gXCIjMzMzXCI7XG4gICAgdGhpcy5wcmltYXJ5Q29sb3IgPSBcIiMxZjIwMjBcIjtcbiAgICB0aGlzLnNlY29uZGFyeUNvbG9yID0gbGlnaHRlbjIodGhpcy5wcmltYXJ5Q29sb3IsIDE2KTtcbiAgICB0aGlzLnRlcnRpYXJ5Q29sb3IgPSBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC0xNjAgfSk7XG4gICAgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3IgPSBpbnZlcnQyKHRoaXMuYmFja2dyb3VuZCk7XG4gICAgdGhpcy5zZWNvbmRhcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHRoaXMuZGFya01vZGUpO1xuICAgIHRoaXMudGVydGlhcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMudGVydGlhcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5wcmltYXJ5VGV4dENvbG9yID0gaW52ZXJ0Mih0aGlzLnByaW1hcnlDb2xvcik7XG4gICAgdGhpcy5zZWNvbmRhcnlUZXh0Q29sb3IgPSBpbnZlcnQyKHRoaXMuc2Vjb25kYXJ5Q29sb3IpO1xuICAgIHRoaXMudGVydGlhcnlUZXh0Q29sb3IgPSBpbnZlcnQyKHRoaXMudGVydGlhcnlDb2xvcik7XG4gICAgdGhpcy5saW5lQ29sb3IgPSBpbnZlcnQyKHRoaXMuYmFja2dyb3VuZCk7XG4gICAgdGhpcy50ZXh0Q29sb3IgPSBpbnZlcnQyKHRoaXMuYmFja2dyb3VuZCk7XG4gICAgdGhpcy5tYWluQmtnID0gXCIjMWYyMDIwXCI7XG4gICAgdGhpcy5zZWNvbmRCa2cgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLm1haW5Db250cmFzdENvbG9yID0gXCJsaWdodGdyZXlcIjtcbiAgICB0aGlzLmRhcmtUZXh0Q29sb3IgPSBsaWdodGVuMihpbnZlcnQyKFwiIzMyM0Q0N1wiKSwgMTApO1xuICAgIHRoaXMubGluZUNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ib3JkZXIxID0gXCIjY2NjXCI7XG4gICAgdGhpcy5ib3JkZXIyID0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcbiAgICB0aGlzLmFycm93aGVhZENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gJ1widHJlYnVjaGV0IG1zXCIsIHZlcmRhbmEsIGFyaWFsLCBzYW5zLXNlcmlmJztcbiAgICB0aGlzLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gICAgdGhpcy5sYWJlbEJhY2tncm91bmQgPSBcIiMxODE4MThcIjtcbiAgICB0aGlzLnRleHRDb2xvciA9IFwiI2NjY1wiO1xuICAgIHRoaXMuVEhFTUVfQ09MT1JfTElNSVQgPSAxMjtcbiAgICB0aGlzLm5vZGVCa2cgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLm5vZGVCb3JkZXIgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmNsdXN0ZXJCa2cgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmNsdXN0ZXJCb3JkZXIgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmRlZmF1bHRMaW5rQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRpdGxlQ29sb3IgPSBcIiNGOUZGRkVcIjtcbiAgICB0aGlzLmVkZ2VMYWJlbEJhY2tncm91bmQgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdG9yQm9yZGVyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hY3RvckJrZyA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0b3JUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdG9yTGluZUNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5zaWduYWxDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuc2lnbmFsVGV4dENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5sYWJlbEJveEJrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5sYWJlbEJveEJvcmRlckNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubG9vcFRleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubm90ZUJvcmRlckNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ub3RlQmtnQ29sb3IgPSBcIiNmZmY1YWRcIjtcbiAgICB0aGlzLm5vdGVUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdGl2YXRpb25Cb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0aXZhdGlvbkJrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5zZXF1ZW5jZU51bWJlckNvbG9yID0gXCJibGFja1wiO1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yID0gZGFya2VuMihcIiNFQUU4RDlcIiwgMzApO1xuICAgIHRoaXMuYWx0U2VjdGlvbkJrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5zZWN0aW9uQmtnQ29sb3IyID0gXCIjRUFFOEQ5XCI7XG4gICAgdGhpcy5leGNsdWRlQmtnQ29sb3IgPSBkYXJrZW4yKHRoaXMuc2VjdGlvbkJrZ0NvbG9yLCAxMCk7XG4gICAgdGhpcy50YXNrQm9yZGVyQ29sb3IgPSByZ2JhKDI1NSwgMjU1LCAyNTUsIDcwKTtcbiAgICB0aGlzLnRhc2tCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudGFza1RleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudGFza1RleHRMaWdodENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50YXNrVGV4dE91dHNpZGVDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudGFza1RleHRDbGlja2FibGVDb2xvciA9IFwiIzAwMzE2M1wiO1xuICAgIHRoaXMuYWN0aXZlVGFza0JvcmRlckNvbG9yID0gcmdiYSgyNTUsIDI1NSwgMjU1LCA1MCk7XG4gICAgdGhpcy5hY3RpdmVUYXNrQmtnQ29sb3IgPSBcIiM4MUIxREJcIjtcbiAgICB0aGlzLmdyaWRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuZG9uZVRhc2tCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuZG9uZVRhc2tCb3JkZXJDb2xvciA9IFwiZ3JleVwiO1xuICAgIHRoaXMuY3JpdEJvcmRlckNvbG9yID0gXCIjRTgzNzM3XCI7XG4gICAgdGhpcy5jcml0QmtnQ29sb3IgPSBcIiNFODM3MzdcIjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50b2RheUxpbmVDb2xvciA9IFwiI0RCNTc1N1wiO1xuICAgIHRoaXMucGVyc29uQm9yZGVyID0gdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5wZXJzb25Ca2cgPSB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5hcmNoRWRnZUNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hcmNoRWRnZUFycm93Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFyY2hFZGdlV2lkdGggPSBcIjNcIjtcbiAgICB0aGlzLmFyY2hHcm91cEJvcmRlckNvbG9yID0gdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5hcmNoR3JvdXBCb3JkZXJXaWR0aCA9IFwiMnB4XCI7XG4gICAgdGhpcy5yb3dPZGQgPSB0aGlzLnJvd09kZCB8fCBsaWdodGVuMih0aGlzLm1haW5Ca2csIDUpIHx8IFwiI2ZmZmZmZlwiO1xuICAgIHRoaXMucm93RXZlbiA9IHRoaXMucm93RXZlbiB8fCBkYXJrZW4yKHRoaXMubWFpbkJrZywgMTApO1xuICAgIHRoaXMubGFiZWxDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuZXJyb3JCa2dDb2xvciA9IFwiI2E0NDE0MVwiO1xuICAgIHRoaXMuZXJyb3JUZXh0Q29sb3IgPSBcIiNkZGRcIjtcbiAgfVxuICB1cGRhdGVDb2xvcnMoKSB7XG4gICAgdGhpcy5zZWNvbmRCa2cgPSBsaWdodGVuMih0aGlzLm1haW5Ca2csIDE2KTtcbiAgICB0aGlzLmxpbmVDb2xvciA9IHRoaXMubWFpbkNvbnRyYXN0Q29sb3I7XG4gICAgdGhpcy5hcnJvd2hlYWRDb2xvciA9IHRoaXMubWFpbkNvbnRyYXN0Q29sb3I7XG4gICAgdGhpcy5ub2RlQmtnID0gdGhpcy5tYWluQmtnO1xuICAgIHRoaXMubm9kZUJvcmRlciA9IHRoaXMuYm9yZGVyMTtcbiAgICB0aGlzLmNsdXN0ZXJCa2cgPSB0aGlzLnNlY29uZEJrZztcbiAgICB0aGlzLmNsdXN0ZXJCb3JkZXIgPSB0aGlzLmJvcmRlcjI7XG4gICAgdGhpcy5kZWZhdWx0TGlua0NvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5lZGdlTGFiZWxCYWNrZ3JvdW5kID0gbGlnaHRlbjIodGhpcy5sYWJlbEJhY2tncm91bmQsIDI1KTtcbiAgICB0aGlzLmFjdG9yQm9yZGVyID0gdGhpcy5ib3JkZXIxO1xuICAgIHRoaXMuYWN0b3JCa2cgPSB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5hY3RvclRleHRDb2xvciA9IHRoaXMubWFpbkNvbnRyYXN0Q29sb3I7XG4gICAgdGhpcy5hY3RvckxpbmVDb2xvciA9IHRoaXMuYWN0b3JCb3JkZXI7XG4gICAgdGhpcy5zaWduYWxDb2xvciA9IHRoaXMubWFpbkNvbnRyYXN0Q29sb3I7XG4gICAgdGhpcy5zaWduYWxUZXh0Q29sb3IgPSB0aGlzLm1haW5Db250cmFzdENvbG9yO1xuICAgIHRoaXMubGFiZWxCb3hCa2dDb2xvciA9IHRoaXMuYWN0b3JCa2c7XG4gICAgdGhpcy5sYWJlbEJveEJvcmRlckNvbG9yID0gdGhpcy5hY3RvckJvcmRlcjtcbiAgICB0aGlzLmxhYmVsVGV4dENvbG9yID0gdGhpcy5tYWluQ29udHJhc3RDb2xvcjtcbiAgICB0aGlzLmxvb3BUZXh0Q29sb3IgPSB0aGlzLm1haW5Db250cmFzdENvbG9yO1xuICAgIHRoaXMubm90ZUJvcmRlckNvbG9yID0gdGhpcy5zZWNvbmRhcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLm5vdGVCa2dDb2xvciA9IHRoaXMuc2Vjb25kQmtnO1xuICAgIHRoaXMubm90ZVRleHRDb2xvciA9IHRoaXMuc2Vjb25kYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuYWN0aXZhdGlvbkJvcmRlckNvbG9yID0gdGhpcy5ib3JkZXIxO1xuICAgIHRoaXMuYWN0aXZhdGlvbkJrZ0NvbG9yID0gdGhpcy5zZWNvbmRCa2c7XG4gICAgdGhpcy5hbHRTZWN0aW9uQmtnQ29sb3IgPSB0aGlzLmJhY2tncm91bmQ7XG4gICAgdGhpcy50YXNrQmtnQ29sb3IgPSBsaWdodGVuMih0aGlzLm1haW5Ca2csIDIzKTtcbiAgICB0aGlzLnRhc2tUZXh0Q29sb3IgPSB0aGlzLmRhcmtUZXh0Q29sb3I7XG4gICAgdGhpcy50YXNrVGV4dExpZ2h0Q29sb3IgPSB0aGlzLm1haW5Db250cmFzdENvbG9yO1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSB0aGlzLnRhc2tUZXh0TGlnaHRDb2xvcjtcbiAgICB0aGlzLmdyaWRDb2xvciA9IHRoaXMubWFpbkNvbnRyYXN0Q29sb3I7XG4gICAgdGhpcy5kb25lVGFza0JrZ0NvbG9yID0gdGhpcy5tYWluQ29udHJhc3RDb2xvcjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gdGhpcy5kYXJrVGV4dENvbG9yO1xuICAgIHRoaXMuYXJjaEVkZ2VDb2xvciA9IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMuYXJjaEVkZ2VBcnJvd0NvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy50cmFuc2l0aW9uQ29sb3IgPSB0aGlzLnRyYW5zaXRpb25Db2xvciB8fCB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLnRyYW5zaXRpb25MYWJlbENvbG9yID0gdGhpcy50cmFuc2l0aW9uTGFiZWxDb2xvciB8fCB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnN0YXRlTGFiZWxDb2xvciA9IHRoaXMuc3RhdGVMYWJlbENvbG9yIHx8IHRoaXMuc3RhdGVCa2cgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuc3RhdGVCa2cgPSB0aGlzLnN0YXRlQmtnIHx8IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmxhYmVsQmFja2dyb3VuZENvbG9yID0gdGhpcy5sYWJlbEJhY2tncm91bmRDb2xvciB8fCB0aGlzLnN0YXRlQmtnO1xuICAgIHRoaXMuY29tcG9zaXRlQmFja2dyb3VuZCA9IHRoaXMuY29tcG9zaXRlQmFja2dyb3VuZCB8fCB0aGlzLmJhY2tncm91bmQgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuYWx0QmFja2dyb3VuZCA9IHRoaXMuYWx0QmFja2dyb3VuZCB8fCBcIiM1NTVcIjtcbiAgICB0aGlzLmNvbXBvc2l0ZVRpdGxlQmFja2dyb3VuZCA9IHRoaXMuY29tcG9zaXRlVGl0bGVCYWNrZ3JvdW5kIHx8IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmNvbXBvc2l0ZUJvcmRlciA9IHRoaXMuY29tcG9zaXRlQm9yZGVyIHx8IHRoaXMubm9kZUJvcmRlcjtcbiAgICB0aGlzLmlubmVyRW5kQmFja2dyb3VuZCA9IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMuc3BlY2lhbFN0YXRlQ29sb3IgPSBcIiNmNGY0ZjRcIjtcbiAgICB0aGlzLmVycm9yQmtnQ29sb3IgPSB0aGlzLmVycm9yQmtnQ29sb3IgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuZXJyb3JUZXh0Q29sb3IgPSB0aGlzLmVycm9yVGV4dENvbG9yIHx8IHRoaXMudGVydGlhcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTAgPSB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLmZpbGxUeXBlMSA9IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTIgPSBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGUzID0gYWRqdXN0Myh0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IDY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU0ID0gYWRqdXN0Myh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtNjQgfSk7XG4gICAgdGhpcy5maWxsVHlwZTUgPSBhZGp1c3QzKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHsgaDogLTY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU2ID0gYWRqdXN0Myh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjggfSk7XG4gICAgdGhpcy5maWxsVHlwZTcgPSBhZGp1c3QzKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHsgaDogMTI4IH0pO1xuICAgIHRoaXMuY1NjYWxlMSA9IHRoaXMuY1NjYWxlMSB8fCBcIiMwYjAwMDBcIjtcbiAgICB0aGlzLmNTY2FsZTIgPSB0aGlzLmNTY2FsZTIgfHwgXCIjNGQxMDM3XCI7XG4gICAgdGhpcy5jU2NhbGUzID0gdGhpcy5jU2NhbGUzIHx8IFwiIzNmNTI1OFwiO1xuICAgIHRoaXMuY1NjYWxlNCA9IHRoaXMuY1NjYWxlNCB8fCBcIiM0ZjJmMWJcIjtcbiAgICB0aGlzLmNTY2FsZTUgPSB0aGlzLmNTY2FsZTUgfHwgXCIjNmUwYTBhXCI7XG4gICAgdGhpcy5jU2NhbGU2ID0gdGhpcy5jU2NhbGU2IHx8IFwiIzNiMDA0OFwiO1xuICAgIHRoaXMuY1NjYWxlNyA9IHRoaXMuY1NjYWxlNyB8fCBcIiM5OTVhMDFcIjtcbiAgICB0aGlzLmNTY2FsZTggPSB0aGlzLmNTY2FsZTggfHwgXCIjMTU0NzA2XCI7XG4gICAgdGhpcy5jU2NhbGU5ID0gdGhpcy5jU2NhbGU5IHx8IFwiIzE2MTcyMlwiO1xuICAgIHRoaXMuY1NjYWxlMTAgPSB0aGlzLmNTY2FsZTEwIHx8IFwiIzAwMjk2ZlwiO1xuICAgIHRoaXMuY1NjYWxlMTEgPSB0aGlzLmNTY2FsZTExIHx8IFwiIzAxNjI5Y1wiO1xuICAgIHRoaXMuY1NjYWxlMTIgPSB0aGlzLmNTY2FsZTEyIHx8IFwiIzAxMDAyOVwiO1xuICAgIHRoaXMuY1NjYWxlMCA9IHRoaXMuY1NjYWxlMCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLmNTY2FsZTEgPSB0aGlzLmNTY2FsZTEgfHwgdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB0aGlzLmNTY2FsZTIgPSB0aGlzLmNTY2FsZTIgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuY1NjYWxlMyA9IHRoaXMuY1NjYWxlMyB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMwIH0pO1xuICAgIHRoaXMuY1NjYWxlNCA9IHRoaXMuY1NjYWxlNCB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDYwIH0pO1xuICAgIHRoaXMuY1NjYWxlNSA9IHRoaXMuY1NjYWxlNSB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDkwIH0pO1xuICAgIHRoaXMuY1NjYWxlNiA9IHRoaXMuY1NjYWxlNiB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDEyMCB9KTtcbiAgICB0aGlzLmNTY2FsZTcgPSB0aGlzLmNTY2FsZTcgfHwgYWRqdXN0Myh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxNTAgfSk7XG4gICAgdGhpcy5jU2NhbGU4ID0gdGhpcy5jU2NhbGU4IHx8IGFkanVzdDModGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMjEwIH0pO1xuICAgIHRoaXMuY1NjYWxlOSA9IHRoaXMuY1NjYWxlOSB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDI3MCB9KTtcbiAgICB0aGlzLmNTY2FsZTEwID0gdGhpcy5jU2NhbGUxMCB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMwMCB9KTtcbiAgICB0aGlzLmNTY2FsZTExID0gdGhpcy5jU2NhbGUxMSB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMzMCB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgdGhpc1tcImNTY2FsZUludlwiICsgaV0gPSB0aGlzW1wiY1NjYWxlSW52XCIgKyBpXSB8fCBpbnZlcnQyKHRoaXNbXCJjU2NhbGVcIiArIGldKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIHRoaXNbXCJjU2NhbGVQZWVyXCIgKyBpXSA9IHRoaXNbXCJjU2NhbGVQZWVyXCIgKyBpXSB8fCBsaWdodGVuMih0aGlzW1wiY1NjYWxlXCIgKyBpXSwgMTApO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgdGhpc1tcInN1cmZhY2VcIiArIGldID0gdGhpc1tcInN1cmZhY2VcIiArIGldIHx8IGFkanVzdDModGhpcy5tYWluQmtnLCB7IGg6IDMwLCBzOiAtMzAsIGw6IC0oLTEwICsgaSAqIDQpIH0pO1xuICAgICAgdGhpc1tcInN1cmZhY2VQZWVyXCIgKyBpXSA9IHRoaXNbXCJzdXJmYWNlUGVlclwiICsgaV0gfHwgYWRqdXN0Myh0aGlzLm1haW5Ca2csIHsgaDogMzAsIHM6IC0zMCwgbDogLSgtNyArIGkgKiA0KSB9KTtcbiAgICB9XG4gICAgdGhpcy5zY2FsZUxhYmVsQ29sb3IgPSB0aGlzLnNjYWxlTGFiZWxDb2xvciB8fCAodGhpcy5kYXJrTW9kZSA/IFwiYmxhY2tcIiA6IHRoaXMubGFiZWxUZXh0Q29sb3IpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5USEVNRV9DT0xPUl9MSU1JVDsgaSsrKSB7XG4gICAgICB0aGlzW1wiY1NjYWxlTGFiZWxcIiArIGldID0gdGhpc1tcImNTY2FsZUxhYmVsXCIgKyBpXSB8fCB0aGlzLnNjYWxlTGFiZWxDb2xvcjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIHRoaXNbXCJwaWVcIiArIGldID0gdGhpc1tcImNTY2FsZVwiICsgaV07XG4gICAgfVxuICAgIHRoaXMucGllVGl0bGVUZXh0U2l6ZSA9IHRoaXMucGllVGl0bGVUZXh0U2l6ZSB8fCBcIjI1cHhcIjtcbiAgICB0aGlzLnBpZVRpdGxlVGV4dENvbG9yID0gdGhpcy5waWVUaXRsZVRleHRDb2xvciB8fCB0aGlzLnRhc2tUZXh0RGFya0NvbG9yO1xuICAgIHRoaXMucGllU2VjdGlvblRleHRTaXplID0gdGhpcy5waWVTZWN0aW9uVGV4dFNpemUgfHwgXCIxN3B4XCI7XG4gICAgdGhpcy5waWVTZWN0aW9uVGV4dENvbG9yID0gdGhpcy5waWVTZWN0aW9uVGV4dENvbG9yIHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMucGllTGVnZW5kVGV4dFNpemUgPSB0aGlzLnBpZUxlZ2VuZFRleHRTaXplIHx8IFwiMTdweFwiO1xuICAgIHRoaXMucGllTGVnZW5kVGV4dENvbG9yID0gdGhpcy5waWVMZWdlbmRUZXh0Q29sb3IgfHwgdGhpcy50YXNrVGV4dERhcmtDb2xvcjtcbiAgICB0aGlzLnBpZVN0cm9rZUNvbG9yID0gdGhpcy5waWVTdHJva2VDb2xvciB8fCBcImJsYWNrXCI7XG4gICAgdGhpcy5waWVTdHJva2VXaWR0aCA9IHRoaXMucGllU3Ryb2tlV2lkdGggfHwgXCIycHhcIjtcbiAgICB0aGlzLnBpZU91dGVyU3Ryb2tlV2lkdGggPSB0aGlzLnBpZU91dGVyU3Ryb2tlV2lkdGggfHwgXCIycHhcIjtcbiAgICB0aGlzLnBpZU91dGVyU3Ryb2tlQ29sb3IgPSB0aGlzLnBpZU91dGVyU3Ryb2tlQ29sb3IgfHwgXCJibGFja1wiO1xuICAgIHRoaXMucGllT3BhY2l0eSA9IHRoaXMucGllT3BhY2l0eSB8fCBcIjAuN1wiO1xuICAgIHRoaXMucXVhZHJhbnQxRmlsbCA9IHRoaXMucXVhZHJhbnQxRmlsbCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50MkZpbGwgPSB0aGlzLnF1YWRyYW50MkZpbGwgfHwgYWRqdXN0Myh0aGlzLnByaW1hcnlDb2xvciwgeyByOiA1LCBnOiA1LCBiOiA1IH0pO1xuICAgIHRoaXMucXVhZHJhbnQzRmlsbCA9IHRoaXMucXVhZHJhbnQzRmlsbCB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeUNvbG9yLCB7IHI6IDEwLCBnOiAxMCwgYjogMTAgfSk7XG4gICAgdGhpcy5xdWFkcmFudDRGaWxsID0gdGhpcy5xdWFkcmFudDRGaWxsIHx8IGFkanVzdDModGhpcy5wcmltYXJ5Q29sb3IsIHsgcjogMTUsIGc6IDE1LCBiOiAxNSB9KTtcbiAgICB0aGlzLnF1YWRyYW50MVRleHRGaWxsID0gdGhpcy5xdWFkcmFudDFUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudDJUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQyVGV4dEZpbGwgfHwgYWRqdXN0Myh0aGlzLnByaW1hcnlUZXh0Q29sb3IsIHsgcjogLTUsIGc6IC01LCBiOiAtNSB9KTtcbiAgICB0aGlzLnF1YWRyYW50M1RleHRGaWxsID0gdGhpcy5xdWFkcmFudDNUZXh0RmlsbCB8fCBhZGp1c3QzKHRoaXMucHJpbWFyeVRleHRDb2xvciwgeyByOiAtMTAsIGc6IC0xMCwgYjogLTEwIH0pO1xuICAgIHRoaXMucXVhZHJhbnQ0VGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50NFRleHRGaWxsIHx8IGFkanVzdDModGhpcy5wcmltYXJ5VGV4dENvbG9yLCB7IHI6IC0xNSwgZzogLTE1LCBiOiAtMTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudFBvaW50RmlsbCA9IHRoaXMucXVhZHJhbnRQb2ludEZpbGwgfHwgaXNEYXJrMih0aGlzLnF1YWRyYW50MUZpbGwpID8gbGlnaHRlbjIodGhpcy5xdWFkcmFudDFGaWxsKSA6IGRhcmtlbjIodGhpcy5xdWFkcmFudDFGaWxsKTtcbiAgICB0aGlzLnF1YWRyYW50UG9pbnRUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnRQb2ludFRleHRGaWxsIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50WEF4aXNUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnRYQXhpc1RleHRGaWxsIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50WUF4aXNUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnRZQXhpc1RleHRGaWxsIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50SW50ZXJuYWxCb3JkZXJTdHJva2VGaWxsID0gdGhpcy5xdWFkcmFudEludGVybmFsQm9yZGVyU3Ryb2tlRmlsbCB8fCB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50RXh0ZXJuYWxCb3JkZXJTdHJva2VGaWxsID0gdGhpcy5xdWFkcmFudEV4dGVybmFsQm9yZGVyU3Ryb2tlRmlsbCB8fCB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnF1YWRyYW50VGl0bGVGaWxsID0gdGhpcy5xdWFkcmFudFRpdGxlRmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy54eUNoYXJ0ID0ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnh5Q2hhcnQ/LmJhY2tncm91bmRDb2xvciB8fCB0aGlzLmJhY2tncm91bmQsXG4gICAgICB0aXRsZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnRpdGxlQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNUaXRsZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzVGl0bGVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB4QXhpc0xhYmVsQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNMYWJlbENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzVGlja0NvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzVGlja0NvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzTGluZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzTGluZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzVGl0bGVDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc1RpdGxlQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeUF4aXNMYWJlbENvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzTGFiZWxDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc1RpY2tDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc1RpY2tDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc0xpbmVDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc0xpbmVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICBwbG90Q29sb3JQYWxldHRlOiB0aGlzLnh5Q2hhcnQ/LnBsb3RDb2xvclBhbGV0dGUgfHwgXCIjMzQ5OGRiLCMyZWNjNzEsI2U3NGMzYywjZjFjNDBmLCNiZGMzYzcsI2ZmZmZmZiwjMzQ0OTVlLCM5YjU5YjYsIzFhYmM5YywjZTY3ZTIyXCJcbiAgICB9O1xuICAgIHRoaXMucGFja2V0ID0ge1xuICAgICAgc3RhcnRCeXRlQ29sb3I6IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIGVuZEJ5dGVDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgbGFiZWxDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgdGl0bGVDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgYmxvY2tTdHJva2VDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgYmxvY2tGaWxsQ29sb3I6IHRoaXMuYmFja2dyb3VuZFxuICAgIH07XG4gICAgdGhpcy5yYWRhciA9IHtcbiAgICAgIGF4aXNDb2xvcjogdGhpcy5yYWRhcj8uYXhpc0NvbG9yIHx8IHRoaXMubGluZUNvbG9yLFxuICAgICAgYXhpc1N0cm9rZVdpZHRoOiB0aGlzLnJhZGFyPy5heGlzU3Ryb2tlV2lkdGggfHwgMixcbiAgICAgIGF4aXNMYWJlbEZvbnRTaXplOiB0aGlzLnJhZGFyPy5heGlzTGFiZWxGb250U2l6ZSB8fCAxMixcbiAgICAgIGN1cnZlT3BhY2l0eTogdGhpcy5yYWRhcj8uY3VydmVPcGFjaXR5IHx8IDAuNSxcbiAgICAgIGN1cnZlU3Ryb2tlV2lkdGg6IHRoaXMucmFkYXI/LmN1cnZlU3Ryb2tlV2lkdGggfHwgMixcbiAgICAgIGdyYXRpY3VsZUNvbG9yOiB0aGlzLnJhZGFyPy5ncmF0aWN1bGVDb2xvciB8fCBcIiNERURFREVcIixcbiAgICAgIGdyYXRpY3VsZVN0cm9rZVdpZHRoOiB0aGlzLnJhZGFyPy5ncmF0aWN1bGVTdHJva2VXaWR0aCB8fCAxLFxuICAgICAgZ3JhdGljdWxlT3BhY2l0eTogdGhpcy5yYWRhcj8uZ3JhdGljdWxlT3BhY2l0eSB8fCAwLjMsXG4gICAgICBsZWdlbmRCb3hTaXplOiB0aGlzLnJhZGFyPy5sZWdlbmRCb3hTaXplIHx8IDEyLFxuICAgICAgbGVnZW5kRm9udFNpemU6IHRoaXMucmFkYXI/LmxlZ2VuZEZvbnRTaXplIHx8IDEyXG4gICAgfTtcbiAgICB0aGlzLmNsYXNzVGV4dCA9IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnJlcXVpcmVtZW50QmFja2dyb3VuZCA9IHRoaXMucmVxdWlyZW1lbnRCYWNrZ3JvdW5kIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMucmVxdWlyZW1lbnRCb3JkZXJDb2xvciA9IHRoaXMucmVxdWlyZW1lbnRCb3JkZXJDb2xvciB8fCB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyU2l6ZSA9IHRoaXMucmVxdWlyZW1lbnRCb3JkZXJTaXplIHx8IFwiMVwiO1xuICAgIHRoaXMucmVxdWlyZW1lbnRUZXh0Q29sb3IgPSB0aGlzLnJlcXVpcmVtZW50VGV4dENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnJlbGF0aW9uQ29sb3IgPSB0aGlzLnJlbGF0aW9uQ29sb3IgfHwgdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5yZWxhdGlvbkxhYmVsQmFja2dyb3VuZCA9IHRoaXMucmVsYXRpb25MYWJlbEJhY2tncm91bmQgfHwgKHRoaXMuZGFya01vZGUgPyBkYXJrZW4yKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIDMwKSA6IHRoaXMuc2Vjb25kYXJ5Q29sb3IpO1xuICAgIHRoaXMucmVsYXRpb25MYWJlbENvbG9yID0gdGhpcy5yZWxhdGlvbkxhYmVsQ29sb3IgfHwgdGhpcy5hY3RvclRleHRDb2xvcjtcbiAgICB0aGlzLmdpdDAgPSBsaWdodGVuMih0aGlzLnNlY29uZGFyeUNvbG9yLCAyMCk7XG4gICAgdGhpcy5naXQxID0gbGlnaHRlbjIodGhpcy5waWUyIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3IsIDIwKTtcbiAgICB0aGlzLmdpdDIgPSBsaWdodGVuMih0aGlzLnBpZTMgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yLCAyMCk7XG4gICAgdGhpcy5naXQzID0gbGlnaHRlbjIodGhpcy5waWU0IHx8IGFkanVzdDModGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTMwIH0pLCAyMCk7XG4gICAgdGhpcy5naXQ0ID0gbGlnaHRlbjIodGhpcy5waWU1IHx8IGFkanVzdDModGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTYwIH0pLCAyMCk7XG4gICAgdGhpcy5naXQ1ID0gbGlnaHRlbjIodGhpcy5waWU2IHx8IGFkanVzdDModGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTkwIH0pLCAxMCk7XG4gICAgdGhpcy5naXQ2ID0gbGlnaHRlbjIodGhpcy5waWU3IHx8IGFkanVzdDModGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogNjAgfSksIDEwKTtcbiAgICB0aGlzLmdpdDcgPSBsaWdodGVuMih0aGlzLnBpZTggfHwgYWRqdXN0Myh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAgfSksIDIwKTtcbiAgICB0aGlzLmdpdEludjAgPSB0aGlzLmdpdEludjAgfHwgaW52ZXJ0Mih0aGlzLmdpdDApO1xuICAgIHRoaXMuZ2l0SW52MSA9IHRoaXMuZ2l0SW52MSB8fCBpbnZlcnQyKHRoaXMuZ2l0MSk7XG4gICAgdGhpcy5naXRJbnYyID0gdGhpcy5naXRJbnYyIHx8IGludmVydDIodGhpcy5naXQyKTtcbiAgICB0aGlzLmdpdEludjMgPSB0aGlzLmdpdEludjMgfHwgaW52ZXJ0Mih0aGlzLmdpdDMpO1xuICAgIHRoaXMuZ2l0SW52NCA9IHRoaXMuZ2l0SW52NCB8fCBpbnZlcnQyKHRoaXMuZ2l0NCk7XG4gICAgdGhpcy5naXRJbnY1ID0gdGhpcy5naXRJbnY1IHx8IGludmVydDIodGhpcy5naXQ1KTtcbiAgICB0aGlzLmdpdEludjYgPSB0aGlzLmdpdEludjYgfHwgaW52ZXJ0Mih0aGlzLmdpdDYpO1xuICAgIHRoaXMuZ2l0SW52NyA9IHRoaXMuZ2l0SW52NyB8fCBpbnZlcnQyKHRoaXMuZ2l0Nyk7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDAgPSB0aGlzLmdpdEJyYW5jaExhYmVsMCB8fCBpbnZlcnQyKHRoaXMubGFiZWxUZXh0Q29sb3IpO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwxID0gdGhpcy5naXRCcmFuY2hMYWJlbDEgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsMiA9IHRoaXMuZ2l0QnJhbmNoTGFiZWwyIHx8IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDMgPSB0aGlzLmdpdEJyYW5jaExhYmVsMyB8fCBpbnZlcnQyKHRoaXMubGFiZWxUZXh0Q29sb3IpO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw0ID0gdGhpcy5naXRCcmFuY2hMYWJlbDQgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsNSA9IHRoaXMuZ2l0QnJhbmNoTGFiZWw1IHx8IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDYgPSB0aGlzLmdpdEJyYW5jaExhYmVsNiB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw3ID0gdGhpcy5naXRCcmFuY2hMYWJlbDcgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsQ29sb3IgPSB0aGlzLnRhZ0xhYmVsQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMudGFnTGFiZWxCYWNrZ3JvdW5kID0gdGhpcy50YWdMYWJlbEJhY2tncm91bmQgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy50YWdMYWJlbEJvcmRlciA9IHRoaXMudGFnQm9yZGVyIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMudGFnTGFiZWxGb250U2l6ZSA9IHRoaXMudGFnTGFiZWxGb250U2l6ZSB8fCBcIjEwcHhcIjtcbiAgICB0aGlzLmNvbW1pdExhYmVsQ29sb3IgPSB0aGlzLmNvbW1pdExhYmVsQ29sb3IgfHwgdGhpcy5zZWNvbmRhcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5jb21taXRMYWJlbEJhY2tncm91bmQgPSB0aGlzLmNvbW1pdExhYmVsQmFja2dyb3VuZCB8fCB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuY29tbWl0TGFiZWxGb250U2l6ZSA9IHRoaXMuY29tbWl0TGFiZWxGb250U2l6ZSB8fCBcIjEwcHhcIjtcbiAgICB0aGlzLmF0dHJpYnV0ZUJhY2tncm91bmRDb2xvck9kZCA9IHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yT2RkIHx8IGxpZ2h0ZW4yKHRoaXMuYmFja2dyb3VuZCwgMTIpO1xuICAgIHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yRXZlbiA9IHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yRXZlbiB8fCBsaWdodGVuMih0aGlzLmJhY2tncm91bmQsIDIpO1xuICAgIHRoaXMubm9kZUJvcmRlciA9IHRoaXMubm9kZUJvcmRlciB8fCBcIiM5OTlcIjtcbiAgfVxuICBjYWxjdWxhdGUob3ZlcnJpZGVzKSB7XG4gICAgaWYgKHR5cGVvZiBvdmVycmlkZXMgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRoaXMudXBkYXRlQ29sb3JzKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvdmVycmlkZXMpO1xuICAgIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgdGhpc1trXSA9IG92ZXJyaWRlc1trXTtcbiAgICB9KTtcbiAgICB0aGlzLnVwZGF0ZUNvbG9ycygpO1xuICAgIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgdGhpc1trXSA9IG92ZXJyaWRlc1trXTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBnZXRUaGVtZVZhcmlhYmxlczIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh1c2VyT3ZlcnJpZGVzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gbmV3IFRoZW1lMigpO1xuICB0aGVtZS5jYWxjdWxhdGUodXNlck92ZXJyaWRlcyk7XG4gIHJldHVybiB0aGVtZTtcbn0sIFwiZ2V0VGhlbWVWYXJpYWJsZXNcIik7XG5cbi8vIHNyYy90aGVtZXMvdGhlbWUtZGVmYXVsdC5qc1xuaW1wb3J0IHsgaW52ZXJ0IGFzIGludmVydDMsIGxpZ2h0ZW4gYXMgbGlnaHRlbjMsIHJnYmEgYXMgcmdiYTIsIGFkanVzdCBhcyBhZGp1c3Q0LCBkYXJrZW4gYXMgZGFya2VuMywgaXNEYXJrIGFzIGlzRGFyazMgfSBmcm9tIFwia2hyb21hXCI7XG52YXIgVGhlbWUzID0gY2xhc3Mge1xuICBzdGF0aWMge1xuICAgIF9fbmFtZSh0aGlzLCBcIlRoZW1lXCIpO1xuICB9XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IFwiI2Y0ZjRmNFwiO1xuICAgIHRoaXMucHJpbWFyeUNvbG9yID0gXCIjRUNFQ0ZGXCI7XG4gICAgdGhpcy5zZWNvbmRhcnlDb2xvciA9IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTIwIH0pO1xuICAgIHRoaXMuc2Vjb25kYXJ5Q29sb3IgPSBcIiNmZmZmZGVcIjtcbiAgICB0aGlzLnRlcnRpYXJ5Q29sb3IgPSBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC0xNjAgfSk7XG4gICAgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3IgPSBta0JvcmRlcih0aGlzLnByaW1hcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5zZWNvbmRhcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHRoaXMuZGFya01vZGUpO1xuICAgIHRoaXMudGVydGlhcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMudGVydGlhcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5wcmltYXJ5VGV4dENvbG9yID0gaW52ZXJ0Myh0aGlzLnByaW1hcnlDb2xvcik7XG4gICAgdGhpcy5zZWNvbmRhcnlUZXh0Q29sb3IgPSBpbnZlcnQzKHRoaXMuc2Vjb25kYXJ5Q29sb3IpO1xuICAgIHRoaXMudGVydGlhcnlUZXh0Q29sb3IgPSBpbnZlcnQzKHRoaXMudGVydGlhcnlDb2xvcik7XG4gICAgdGhpcy5saW5lQ29sb3IgPSBpbnZlcnQzKHRoaXMuYmFja2dyb3VuZCk7XG4gICAgdGhpcy50ZXh0Q29sb3IgPSBpbnZlcnQzKHRoaXMuYmFja2dyb3VuZCk7XG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMubWFpbkJrZyA9IFwiI0VDRUNGRlwiO1xuICAgIHRoaXMuc2Vjb25kQmtnID0gXCIjZmZmZmRlXCI7XG4gICAgdGhpcy5saW5lQ29sb3IgPSBcIiMzMzMzMzNcIjtcbiAgICB0aGlzLmJvcmRlcjEgPSBcIiM5MzcwREJcIjtcbiAgICB0aGlzLmJvcmRlcjIgPSBcIiNhYWFhMzNcIjtcbiAgICB0aGlzLmFycm93aGVhZENvbG9yID0gXCIjMzMzMzMzXCI7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gJ1widHJlYnVjaGV0IG1zXCIsIHZlcmRhbmEsIGFyaWFsLCBzYW5zLXNlcmlmJztcbiAgICB0aGlzLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gICAgdGhpcy5sYWJlbEJhY2tncm91bmQgPSBcInJnYmEoMjMyLDIzMiwyMzIsIDAuOClcIjtcbiAgICB0aGlzLnRleHRDb2xvciA9IFwiIzMzM1wiO1xuICAgIHRoaXMuVEhFTUVfQ09MT1JfTElNSVQgPSAxMjtcbiAgICB0aGlzLm5vZGVCa2cgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLm5vZGVCb3JkZXIgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmNsdXN0ZXJCa2cgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmNsdXN0ZXJCb3JkZXIgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmRlZmF1bHRMaW5rQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRpdGxlQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmVkZ2VMYWJlbEJhY2tncm91bmQgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdG9yQm9yZGVyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hY3RvckJrZyA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0b3JUZXh0Q29sb3IgPSBcImJsYWNrXCI7XG4gICAgdGhpcy5hY3RvckxpbmVDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuc2lnbmFsQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnNpZ25hbFRleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxCb3hCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxCb3hCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmxvb3BUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLm5vdGVCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubm90ZUJrZ0NvbG9yID0gXCIjZmZmNWFkXCI7XG4gICAgdGhpcy5ub3RlVGV4dENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hY3RpdmF0aW9uQm9yZGVyQ29sb3IgPSBcIiM2NjZcIjtcbiAgICB0aGlzLmFjdGl2YXRpb25Ca2dDb2xvciA9IFwiI2Y0ZjRmNFwiO1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJDb2xvciA9IFwid2hpdGVcIjtcbiAgICB0aGlzLnNlY3Rpb25Ca2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWx0U2VjdGlvbkJrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5zZWN0aW9uQmtnQ29sb3IyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5leGNsdWRlQmtnQ29sb3IgPSBcIiNlZWVlZWVcIjtcbiAgICB0aGlzLnRhc2tCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudGFza0JrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50YXNrVGV4dExpZ2h0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tUZXh0Q29sb3IgPSB0aGlzLnRhc2tUZXh0TGlnaHRDb2xvcjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50YXNrVGV4dE91dHNpZGVDb2xvciA9IHRoaXMudGFza1RleHREYXJrQ29sb3I7XG4gICAgdGhpcy50YXNrVGV4dENsaWNrYWJsZUNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hY3RpdmVUYXNrQm9yZGVyQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdGl2ZVRhc2tCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuZ3JpZENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5kb25lVGFza0JrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5kb25lVGFza0JvcmRlckNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5jcml0Qm9yZGVyQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmNyaXRCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudG9kYXlMaW5lQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnNlY3Rpb25Ca2dDb2xvciA9IHJnYmEyKDEwMiwgMTAyLCAyNTUsIDAuNDkpO1xuICAgIHRoaXMuYWx0U2VjdGlvbkJrZ0NvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yMiA9IFwiI2ZmZjQwMFwiO1xuICAgIHRoaXMudGFza0JvcmRlckNvbG9yID0gXCIjNTM0ZmJjXCI7XG4gICAgdGhpcy50YXNrQmtnQ29sb3IgPSBcIiM4YTkwZGRcIjtcbiAgICB0aGlzLnRhc2tUZXh0TGlnaHRDb2xvciA9IFwid2hpdGVcIjtcbiAgICB0aGlzLnRhc2tUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gXCJibGFja1wiO1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tUZXh0Q2xpY2thYmxlQ29sb3IgPSBcIiMwMDMxNjNcIjtcbiAgICB0aGlzLmFjdGl2ZVRhc2tCb3JkZXJDb2xvciA9IFwiIzUzNGZiY1wiO1xuICAgIHRoaXMuYWN0aXZlVGFza0JrZ0NvbG9yID0gXCIjYmZjN2ZmXCI7XG4gICAgdGhpcy5ncmlkQ29sb3IgPSBcImxpZ2h0Z3JleVwiO1xuICAgIHRoaXMuZG9uZVRhc2tCa2dDb2xvciA9IFwibGlnaHRncmV5XCI7XG4gICAgdGhpcy5kb25lVGFza0JvcmRlckNvbG9yID0gXCJncmV5XCI7XG4gICAgdGhpcy5jcml0Qm9yZGVyQ29sb3IgPSBcIiNmZjg4ODhcIjtcbiAgICB0aGlzLmNyaXRCa2dDb2xvciA9IFwicmVkXCI7XG4gICAgdGhpcy50b2RheUxpbmVDb2xvciA9IFwicmVkXCI7XG4gICAgdGhpcy5wZXJzb25Cb3JkZXIgPSB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnBlcnNvbkJrZyA9IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmFyY2hFZGdlQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFyY2hFZGdlQXJyb3dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYXJjaEVkZ2VXaWR0aCA9IFwiM1wiO1xuICAgIHRoaXMuYXJjaEdyb3VwQm9yZGVyQ29sb3IgPSB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLmFyY2hHcm91cEJvcmRlcldpZHRoID0gXCIycHhcIjtcbiAgICB0aGlzLnJvd09kZCA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMucm93RXZlbiA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxDb2xvciA9IFwiYmxhY2tcIjtcbiAgICB0aGlzLmVycm9yQmtnQ29sb3IgPSBcIiM1NTIyMjJcIjtcbiAgICB0aGlzLmVycm9yVGV4dENvbG9yID0gXCIjNTUyMjIyXCI7XG4gICAgdGhpcy51cGRhdGVDb2xvcnMoKTtcbiAgfVxuICB1cGRhdGVDb2xvcnMoKSB7XG4gICAgdGhpcy5jU2NhbGUwID0gdGhpcy5jU2NhbGUwIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMuY1NjYWxlMSA9IHRoaXMuY1NjYWxlMSB8fCB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuY1NjYWxlMiA9IHRoaXMuY1NjYWxlMiB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5jU2NhbGUzID0gdGhpcy5jU2NhbGUzIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMzAgfSk7XG4gICAgdGhpcy5jU2NhbGU0ID0gdGhpcy5jU2NhbGU0IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogNjAgfSk7XG4gICAgdGhpcy5jU2NhbGU1ID0gdGhpcy5jU2NhbGU1IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogOTAgfSk7XG4gICAgdGhpcy5jU2NhbGU2ID0gdGhpcy5jU2NhbGU2IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTIwIH0pO1xuICAgIHRoaXMuY1NjYWxlNyA9IHRoaXMuY1NjYWxlNyB8fCBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDE1MCB9KTtcbiAgICB0aGlzLmNTY2FsZTggPSB0aGlzLmNTY2FsZTggfHwgYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAyMTAgfSk7XG4gICAgdGhpcy5jU2NhbGU5ID0gdGhpcy5jU2NhbGU5IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMjcwIH0pO1xuICAgIHRoaXMuY1NjYWxlMTAgPSB0aGlzLmNTY2FsZTEwIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMzAwIH0pO1xuICAgIHRoaXMuY1NjYWxlMTEgPSB0aGlzLmNTY2FsZTExIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMzMwIH0pO1xuICAgIHRoaXNbXCJjU2NhbGVQZWVyMVwiXSA9IHRoaXNbXCJjU2NhbGVQZWVyMVwiXSB8fCBkYXJrZW4zKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIDQ1KTtcbiAgICB0aGlzW1wiY1NjYWxlUGVlcjJcIl0gPSB0aGlzW1wiY1NjYWxlUGVlcjJcIl0gfHwgZGFya2VuMyh0aGlzLnRlcnRpYXJ5Q29sb3IsIDQwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgdGhpc1tcImNTY2FsZVwiICsgaV0gPSBkYXJrZW4zKHRoaXNbXCJjU2NhbGVcIiArIGldLCAxMCk7XG4gICAgICB0aGlzW1wiY1NjYWxlUGVlclwiICsgaV0gPSB0aGlzW1wiY1NjYWxlUGVlclwiICsgaV0gfHwgZGFya2VuMyh0aGlzW1wiY1NjYWxlXCIgKyBpXSwgMjUpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgdGhpc1tcImNTY2FsZUludlwiICsgaV0gPSB0aGlzW1wiY1NjYWxlSW52XCIgKyBpXSB8fCBhZGp1c3Q0KHRoaXNbXCJjU2NhbGVcIiArIGldLCB7IGg6IDE4MCB9KTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIHRoaXNbXCJzdXJmYWNlXCIgKyBpXSA9IHRoaXNbXCJzdXJmYWNlXCIgKyBpXSB8fCBhZGp1c3Q0KHRoaXMubWFpbkJrZywgeyBoOiAzMCwgbDogLSg1ICsgaSAqIDUpIH0pO1xuICAgICAgdGhpc1tcInN1cmZhY2VQZWVyXCIgKyBpXSA9IHRoaXNbXCJzdXJmYWNlUGVlclwiICsgaV0gfHwgYWRqdXN0NCh0aGlzLm1haW5Ca2csIHsgaDogMzAsIGw6IC0oNyArIGkgKiA1KSB9KTtcbiAgICB9XG4gICAgdGhpcy5zY2FsZUxhYmVsQ29sb3IgPSB0aGlzLnNjYWxlTGFiZWxDb2xvciAhPT0gXCJjYWxjdWxhdGVkXCIgJiYgdGhpcy5zY2FsZUxhYmVsQ29sb3IgPyB0aGlzLnNjYWxlTGFiZWxDb2xvciA6IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgaWYgKHRoaXMubGFiZWxUZXh0Q29sb3IgIT09IFwiY2FsY3VsYXRlZFwiKSB7XG4gICAgICB0aGlzLmNTY2FsZUxhYmVsMCA9IHRoaXMuY1NjYWxlTGFiZWwwIHx8IGludmVydDModGhpcy5sYWJlbFRleHRDb2xvcik7XG4gICAgICB0aGlzLmNTY2FsZUxhYmVsMyA9IHRoaXMuY1NjYWxlTGFiZWwzIHx8IGludmVydDModGhpcy5sYWJlbFRleHRDb2xvcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgICB0aGlzW1wiY1NjYWxlTGFiZWxcIiArIGldID0gdGhpc1tcImNTY2FsZUxhYmVsXCIgKyBpXSB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm5vZGVCa2cgPSB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5ub2RlQm9yZGVyID0gdGhpcy5ib3JkZXIxO1xuICAgIHRoaXMuY2x1c3RlckJrZyA9IHRoaXMuc2Vjb25kQmtnO1xuICAgIHRoaXMuY2x1c3RlckJvcmRlciA9IHRoaXMuYm9yZGVyMjtcbiAgICB0aGlzLmRlZmF1bHRMaW5rQ29sb3IgPSB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLnRpdGxlQ29sb3IgPSB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLmVkZ2VMYWJlbEJhY2tncm91bmQgPSB0aGlzLmxhYmVsQmFja2dyb3VuZDtcbiAgICB0aGlzLmFjdG9yQm9yZGVyID0gbGlnaHRlbjModGhpcy5ib3JkZXIxLCAyMyk7XG4gICAgdGhpcy5hY3RvckJrZyA9IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmxhYmVsQm94QmtnQ29sb3IgPSB0aGlzLmFjdG9yQmtnO1xuICAgIHRoaXMuc2lnbmFsQ29sb3IgPSB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnNpZ25hbFRleHRDb2xvciA9IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMubGFiZWxCb3hCb3JkZXJDb2xvciA9IHRoaXMuYWN0b3JCb3JkZXI7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvciA9IHRoaXMuYWN0b3JUZXh0Q29sb3I7XG4gICAgdGhpcy5sb29wVGV4dENvbG9yID0gdGhpcy5hY3RvclRleHRDb2xvcjtcbiAgICB0aGlzLm5vdGVCb3JkZXJDb2xvciA9IHRoaXMuYm9yZGVyMjtcbiAgICB0aGlzLm5vdGVUZXh0Q29sb3IgPSB0aGlzLmFjdG9yVGV4dENvbG9yO1xuICAgIHRoaXMuYWN0b3JMaW5lQ29sb3IgPSB0aGlzLmFjdG9yQm9yZGVyO1xuICAgIHRoaXMudGFza1RleHRDb2xvciA9IHRoaXMudGFza1RleHRMaWdodENvbG9yO1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSB0aGlzLnRhc2tUZXh0RGFya0NvbG9yO1xuICAgIHRoaXMuYXJjaEVkZ2VDb2xvciA9IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMuYXJjaEVkZ2VBcnJvd0NvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5yb3dPZGQgPSB0aGlzLnJvd09kZCB8fCBsaWdodGVuMyh0aGlzLnByaW1hcnlDb2xvciwgNzUpIHx8IFwiI2ZmZmZmZlwiO1xuICAgIHRoaXMucm93RXZlbiA9IHRoaXMucm93RXZlbiB8fCBsaWdodGVuMyh0aGlzLnByaW1hcnlDb2xvciwgMSk7XG4gICAgdGhpcy50cmFuc2l0aW9uQ29sb3IgPSB0aGlzLnRyYW5zaXRpb25Db2xvciB8fCB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLnRyYW5zaXRpb25MYWJlbENvbG9yID0gdGhpcy50cmFuc2l0aW9uTGFiZWxDb2xvciB8fCB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnN0YXRlTGFiZWxDb2xvciA9IHRoaXMuc3RhdGVMYWJlbENvbG9yIHx8IHRoaXMuc3RhdGVCa2cgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuc3RhdGVCa2cgPSB0aGlzLnN0YXRlQmtnIHx8IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmxhYmVsQmFja2dyb3VuZENvbG9yID0gdGhpcy5sYWJlbEJhY2tncm91bmRDb2xvciB8fCB0aGlzLnN0YXRlQmtnO1xuICAgIHRoaXMuY29tcG9zaXRlQmFja2dyb3VuZCA9IHRoaXMuY29tcG9zaXRlQmFja2dyb3VuZCB8fCB0aGlzLmJhY2tncm91bmQgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuYWx0QmFja2dyb3VuZCA9IHRoaXMuYWx0QmFja2dyb3VuZCB8fCBcIiNmMGYwZjBcIjtcbiAgICB0aGlzLmNvbXBvc2l0ZVRpdGxlQmFja2dyb3VuZCA9IHRoaXMuY29tcG9zaXRlVGl0bGVCYWNrZ3JvdW5kIHx8IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmNvbXBvc2l0ZUJvcmRlciA9IHRoaXMuY29tcG9zaXRlQm9yZGVyIHx8IHRoaXMubm9kZUJvcmRlcjtcbiAgICB0aGlzLmlubmVyRW5kQmFja2dyb3VuZCA9IHRoaXMubm9kZUJvcmRlcjtcbiAgICB0aGlzLnNwZWNpYWxTdGF0ZUNvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5lcnJvckJrZ0NvbG9yID0gdGhpcy5lcnJvckJrZ0NvbG9yIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmVycm9yVGV4dENvbG9yID0gdGhpcy5lcnJvclRleHRDb2xvciB8fCB0aGlzLnRlcnRpYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMudHJhbnNpdGlvbkNvbG9yID0gdGhpcy50cmFuc2l0aW9uQ29sb3IgfHwgdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5jbGFzc1RleHQgPSB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTAgPSB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLmZpbGxUeXBlMSA9IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTIgPSBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGUzID0gYWRqdXN0NCh0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IDY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU0ID0gYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtNjQgfSk7XG4gICAgdGhpcy5maWxsVHlwZTUgPSBhZGp1c3Q0KHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHsgaDogLTY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU2ID0gYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjggfSk7XG4gICAgdGhpcy5maWxsVHlwZTcgPSBhZGp1c3Q0KHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHsgaDogMTI4IH0pO1xuICAgIHRoaXMucGllMSA9IHRoaXMucGllMSB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLnBpZTIgPSB0aGlzLnBpZTIgfHwgdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB0aGlzLnBpZTMgPSB0aGlzLnBpZTMgfHwgYWRqdXN0NCh0aGlzLnRlcnRpYXJ5Q29sb3IsIHsgbDogLTQwIH0pO1xuICAgIHRoaXMucGllNCA9IHRoaXMucGllNCB8fCBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IGw6IC0xMCB9KTtcbiAgICB0aGlzLnBpZTUgPSB0aGlzLnBpZTUgfHwgYWRqdXN0NCh0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGw6IC0zMCB9KTtcbiAgICB0aGlzLnBpZTYgPSB0aGlzLnBpZTYgfHwgYWRqdXN0NCh0aGlzLnRlcnRpYXJ5Q29sb3IsIHsgbDogLTIwIH0pO1xuICAgIHRoaXMucGllNyA9IHRoaXMucGllNyB8fCBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDYwLCBsOiAtMjAgfSk7XG4gICAgdGhpcy5waWU4ID0gdGhpcy5waWU4IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTYwLCBsOiAtNDAgfSk7XG4gICAgdGhpcy5waWU5ID0gdGhpcy5waWU5IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTIwLCBsOiAtNDAgfSk7XG4gICAgdGhpcy5waWUxMCA9IHRoaXMucGllMTAgfHwgYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2MCwgbDogLTQwIH0pO1xuICAgIHRoaXMucGllMTEgPSB0aGlzLnBpZTExIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTkwLCBsOiAtNDAgfSk7XG4gICAgdGhpcy5waWUxMiA9IHRoaXMucGllMTIgfHwgYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAsIGw6IC0zMCB9KTtcbiAgICB0aGlzLnBpZVRpdGxlVGV4dFNpemUgPSB0aGlzLnBpZVRpdGxlVGV4dFNpemUgfHwgXCIyNXB4XCI7XG4gICAgdGhpcy5waWVUaXRsZVRleHRDb2xvciA9IHRoaXMucGllVGl0bGVUZXh0Q29sb3IgfHwgdGhpcy50YXNrVGV4dERhcmtDb2xvcjtcbiAgICB0aGlzLnBpZVNlY3Rpb25UZXh0U2l6ZSA9IHRoaXMucGllU2VjdGlvblRleHRTaXplIHx8IFwiMTdweFwiO1xuICAgIHRoaXMucGllU2VjdGlvblRleHRDb2xvciA9IHRoaXMucGllU2VjdGlvblRleHRDb2xvciB8fCB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnBpZUxlZ2VuZFRleHRTaXplID0gdGhpcy5waWVMZWdlbmRUZXh0U2l6ZSB8fCBcIjE3cHhcIjtcbiAgICB0aGlzLnBpZUxlZ2VuZFRleHRDb2xvciA9IHRoaXMucGllTGVnZW5kVGV4dENvbG9yIHx8IHRoaXMudGFza1RleHREYXJrQ29sb3I7XG4gICAgdGhpcy5waWVTdHJva2VDb2xvciA9IHRoaXMucGllU3Ryb2tlQ29sb3IgfHwgXCJibGFja1wiO1xuICAgIHRoaXMucGllU3Ryb2tlV2lkdGggPSB0aGlzLnBpZVN0cm9rZVdpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5waWVPdXRlclN0cm9rZVdpZHRoID0gdGhpcy5waWVPdXRlclN0cm9rZVdpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5waWVPdXRlclN0cm9rZUNvbG9yID0gdGhpcy5waWVPdXRlclN0cm9rZUNvbG9yIHx8IFwiYmxhY2tcIjtcbiAgICB0aGlzLnBpZU9wYWNpdHkgPSB0aGlzLnBpZU9wYWNpdHkgfHwgXCIwLjdcIjtcbiAgICB0aGlzLnF1YWRyYW50MUZpbGwgPSB0aGlzLnF1YWRyYW50MUZpbGwgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudDJGaWxsID0gdGhpcy5xdWFkcmFudDJGaWxsIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgcjogNSwgZzogNSwgYjogNSB9KTtcbiAgICB0aGlzLnF1YWRyYW50M0ZpbGwgPSB0aGlzLnF1YWRyYW50M0ZpbGwgfHwgYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyByOiAxMCwgZzogMTAsIGI6IDEwIH0pO1xuICAgIHRoaXMucXVhZHJhbnQ0RmlsbCA9IHRoaXMucXVhZHJhbnQ0RmlsbCB8fCBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IHI6IDE1LCBnOiAxNSwgYjogMTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDFUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQxVGV4dEZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucXVhZHJhbnQyVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50MlRleHRGaWxsIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5VGV4dENvbG9yLCB7IHI6IC01LCBnOiAtNSwgYjogLTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDNUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQzVGV4dEZpbGwgfHwgYWRqdXN0NCh0aGlzLnByaW1hcnlUZXh0Q29sb3IsIHsgcjogLTEwLCBnOiAtMTAsIGI6IC0xMCB9KTtcbiAgICB0aGlzLnF1YWRyYW50NFRleHRGaWxsID0gdGhpcy5xdWFkcmFudDRUZXh0RmlsbCB8fCBhZGp1c3Q0KHRoaXMucHJpbWFyeVRleHRDb2xvciwgeyByOiAtMTUsIGc6IC0xNSwgYjogLTE1IH0pO1xuICAgIHRoaXMucXVhZHJhbnRQb2ludEZpbGwgPSB0aGlzLnF1YWRyYW50UG9pbnRGaWxsIHx8IGlzRGFyazModGhpcy5xdWFkcmFudDFGaWxsKSA/IGxpZ2h0ZW4zKHRoaXMucXVhZHJhbnQxRmlsbCkgOiBkYXJrZW4zKHRoaXMucXVhZHJhbnQxRmlsbCk7XG4gICAgdGhpcy5xdWFkcmFudFBvaW50VGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50UG9pbnRUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFhBeGlzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50WEF4aXNUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFlBeGlzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50WUF4aXNUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudEludGVybmFsQm9yZGVyU3Ryb2tlRmlsbCA9IHRoaXMucXVhZHJhbnRJbnRlcm5hbEJvcmRlclN0cm9rZUZpbGwgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5xdWFkcmFudEV4dGVybmFsQm9yZGVyU3Ryb2tlRmlsbCA9IHRoaXMucXVhZHJhbnRFeHRlcm5hbEJvcmRlclN0cm9rZUZpbGwgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFRpdGxlRmlsbCA9IHRoaXMucXVhZHJhbnRUaXRsZUZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucmFkYXIgPSB7XG4gICAgICBheGlzQ29sb3I6IHRoaXMucmFkYXI/LmF4aXNDb2xvciB8fCB0aGlzLmxpbmVDb2xvcixcbiAgICAgIGF4aXNTdHJva2VXaWR0aDogdGhpcy5yYWRhcj8uYXhpc1N0cm9rZVdpZHRoIHx8IDIsXG4gICAgICBheGlzTGFiZWxGb250U2l6ZTogdGhpcy5yYWRhcj8uYXhpc0xhYmVsRm9udFNpemUgfHwgMTIsXG4gICAgICBjdXJ2ZU9wYWNpdHk6IHRoaXMucmFkYXI/LmN1cnZlT3BhY2l0eSB8fCAwLjUsXG4gICAgICBjdXJ2ZVN0cm9rZVdpZHRoOiB0aGlzLnJhZGFyPy5jdXJ2ZVN0cm9rZVdpZHRoIHx8IDIsXG4gICAgICBncmF0aWN1bGVDb2xvcjogdGhpcy5yYWRhcj8uZ3JhdGljdWxlQ29sb3IgfHwgXCIjREVERURFXCIsXG4gICAgICBncmF0aWN1bGVTdHJva2VXaWR0aDogdGhpcy5yYWRhcj8uZ3JhdGljdWxlU3Ryb2tlV2lkdGggfHwgMSxcbiAgICAgIGdyYXRpY3VsZU9wYWNpdHk6IHRoaXMucmFkYXI/LmdyYXRpY3VsZU9wYWNpdHkgfHwgMC4zLFxuICAgICAgbGVnZW5kQm94U2l6ZTogdGhpcy5yYWRhcj8ubGVnZW5kQm94U2l6ZSB8fCAxMixcbiAgICAgIGxlZ2VuZEZvbnRTaXplOiB0aGlzLnJhZGFyPy5sZWdlbmRGb250U2l6ZSB8fCAxMlxuICAgIH07XG4gICAgdGhpcy54eUNoYXJ0ID0ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLnh5Q2hhcnQ/LmJhY2tncm91bmRDb2xvciB8fCB0aGlzLmJhY2tncm91bmQsXG4gICAgICB0aXRsZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnRpdGxlQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNUaXRsZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzVGl0bGVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB4QXhpc0xhYmVsQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNMYWJlbENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzVGlja0NvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzVGlja0NvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzTGluZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzTGluZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzVGl0bGVDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc1RpdGxlQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeUF4aXNMYWJlbENvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzTGFiZWxDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc1RpY2tDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc1RpY2tDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc0xpbmVDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc0xpbmVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICBwbG90Q29sb3JQYWxldHRlOiB0aGlzLnh5Q2hhcnQ/LnBsb3RDb2xvclBhbGV0dGUgfHwgXCIjRUNFQ0ZGLCM4NDkzQTYsI0ZGQzNBMCwjRENEREUxLCNCOEU5OTQsI0QxQTM2RiwjQzNDREU2LCNGRkI2QzEsIzQ5NjA3OCwjRjhGM0UzXCJcbiAgICB9O1xuICAgIHRoaXMucmVxdWlyZW1lbnRCYWNrZ3JvdW5kID0gdGhpcy5yZXF1aXJlbWVudEJhY2tncm91bmQgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5yZXF1aXJlbWVudEJvcmRlckNvbG9yID0gdGhpcy5yZXF1aXJlbWVudEJvcmRlckNvbG9yIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMucmVxdWlyZW1lbnRCb3JkZXJTaXplID0gdGhpcy5yZXF1aXJlbWVudEJvcmRlclNpemUgfHwgXCIxXCI7XG4gICAgdGhpcy5yZXF1aXJlbWVudFRleHRDb2xvciA9IHRoaXMucmVxdWlyZW1lbnRUZXh0Q29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucmVsYXRpb25Db2xvciA9IHRoaXMucmVsYXRpb25Db2xvciB8fCB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLnJlbGF0aW9uTGFiZWxCYWNrZ3JvdW5kID0gdGhpcy5yZWxhdGlvbkxhYmVsQmFja2dyb3VuZCB8fCB0aGlzLmxhYmVsQmFja2dyb3VuZDtcbiAgICB0aGlzLnJlbGF0aW9uTGFiZWxDb2xvciA9IHRoaXMucmVsYXRpb25MYWJlbENvbG9yIHx8IHRoaXMuYWN0b3JUZXh0Q29sb3I7XG4gICAgdGhpcy5naXQwID0gdGhpcy5naXQwIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMuZ2l0MSA9IHRoaXMuZ2l0MSB8fCB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuZ2l0MiA9IHRoaXMuZ2l0MiB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5naXQzID0gdGhpcy5naXQzIHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTMwIH0pO1xuICAgIHRoaXMuZ2l0NCA9IHRoaXMuZ2l0NCB8fCBhZGp1c3Q0KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC02MCB9KTtcbiAgICB0aGlzLmdpdDUgPSB0aGlzLmdpdDUgfHwgYWRqdXN0NCh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtOTAgfSk7XG4gICAgdGhpcy5naXQ2ID0gdGhpcy5naXQ2IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogNjAgfSk7XG4gICAgdGhpcy5naXQ3ID0gdGhpcy5naXQ3IHx8IGFkanVzdDQodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTIwIH0pO1xuICAgIGlmICh0aGlzLmRhcmtNb2RlKSB7XG4gICAgICB0aGlzLmdpdDAgPSBsaWdodGVuMyh0aGlzLmdpdDAsIDI1KTtcbiAgICAgIHRoaXMuZ2l0MSA9IGxpZ2h0ZW4zKHRoaXMuZ2l0MSwgMjUpO1xuICAgICAgdGhpcy5naXQyID0gbGlnaHRlbjModGhpcy5naXQyLCAyNSk7XG4gICAgICB0aGlzLmdpdDMgPSBsaWdodGVuMyh0aGlzLmdpdDMsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NCA9IGxpZ2h0ZW4zKHRoaXMuZ2l0NCwgMjUpO1xuICAgICAgdGhpcy5naXQ1ID0gbGlnaHRlbjModGhpcy5naXQ1LCAyNSk7XG4gICAgICB0aGlzLmdpdDYgPSBsaWdodGVuMyh0aGlzLmdpdDYsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NyA9IGxpZ2h0ZW4zKHRoaXMuZ2l0NywgMjUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdpdDAgPSBkYXJrZW4zKHRoaXMuZ2l0MCwgMjUpO1xuICAgICAgdGhpcy5naXQxID0gZGFya2VuMyh0aGlzLmdpdDEsIDI1KTtcbiAgICAgIHRoaXMuZ2l0MiA9IGRhcmtlbjModGhpcy5naXQyLCAyNSk7XG4gICAgICB0aGlzLmdpdDMgPSBkYXJrZW4zKHRoaXMuZ2l0MywgMjUpO1xuICAgICAgdGhpcy5naXQ0ID0gZGFya2VuMyh0aGlzLmdpdDQsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NSA9IGRhcmtlbjModGhpcy5naXQ1LCAyNSk7XG4gICAgICB0aGlzLmdpdDYgPSBkYXJrZW4zKHRoaXMuZ2l0NiwgMjUpO1xuICAgICAgdGhpcy5naXQ3ID0gZGFya2VuMyh0aGlzLmdpdDcsIDI1KTtcbiAgICB9XG4gICAgdGhpcy5naXRJbnYwID0gdGhpcy5naXRJbnYwIHx8IGRhcmtlbjMoaW52ZXJ0Myh0aGlzLmdpdDApLCAyNSk7XG4gICAgdGhpcy5naXRJbnYxID0gdGhpcy5naXRJbnYxIHx8IGludmVydDModGhpcy5naXQxKTtcbiAgICB0aGlzLmdpdEludjIgPSB0aGlzLmdpdEludjIgfHwgaW52ZXJ0Myh0aGlzLmdpdDIpO1xuICAgIHRoaXMuZ2l0SW52MyA9IHRoaXMuZ2l0SW52MyB8fCBpbnZlcnQzKHRoaXMuZ2l0Myk7XG4gICAgdGhpcy5naXRJbnY0ID0gdGhpcy5naXRJbnY0IHx8IGludmVydDModGhpcy5naXQ0KTtcbiAgICB0aGlzLmdpdEludjUgPSB0aGlzLmdpdEludjUgfHwgaW52ZXJ0Myh0aGlzLmdpdDUpO1xuICAgIHRoaXMuZ2l0SW52NiA9IHRoaXMuZ2l0SW52NiB8fCBpbnZlcnQzKHRoaXMuZ2l0Nik7XG4gICAgdGhpcy5naXRJbnY3ID0gdGhpcy5naXRJbnY3IHx8IGludmVydDModGhpcy5naXQ3KTtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsMCA9IHRoaXMuZ2l0QnJhbmNoTGFiZWwwIHx8IGludmVydDModGhpcy5sYWJlbFRleHRDb2xvcik7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDEgPSB0aGlzLmdpdEJyYW5jaExhYmVsMSB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwyID0gdGhpcy5naXRCcmFuY2hMYWJlbDIgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsMyA9IHRoaXMuZ2l0QnJhbmNoTGFiZWwzIHx8IGludmVydDModGhpcy5sYWJlbFRleHRDb2xvcik7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDQgPSB0aGlzLmdpdEJyYW5jaExhYmVsNCB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw1ID0gdGhpcy5naXRCcmFuY2hMYWJlbDUgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsNiA9IHRoaXMuZ2l0QnJhbmNoTGFiZWw2IHx8IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDcgPSB0aGlzLmdpdEJyYW5jaExhYmVsNyB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMudGFnTGFiZWxDb2xvciA9IHRoaXMudGFnTGFiZWxDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy50YWdMYWJlbEJhY2tncm91bmQgPSB0aGlzLnRhZ0xhYmVsQmFja2dyb3VuZCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsQm9yZGVyID0gdGhpcy50YWdCb3JkZXIgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy50YWdMYWJlbEZvbnRTaXplID0gdGhpcy50YWdMYWJlbEZvbnRTaXplIHx8IFwiMTBweFwiO1xuICAgIHRoaXMuY29tbWl0TGFiZWxDb2xvciA9IHRoaXMuY29tbWl0TGFiZWxDb2xvciB8fCB0aGlzLnNlY29uZGFyeVRleHRDb2xvcjtcbiAgICB0aGlzLmNvbW1pdExhYmVsQmFja2dyb3VuZCA9IHRoaXMuY29tbWl0TGFiZWxCYWNrZ3JvdW5kIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5jb21taXRMYWJlbEZvbnRTaXplID0gdGhpcy5jb21taXRMYWJlbEZvbnRTaXplIHx8IFwiMTBweFwiO1xuICAgIHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yT2RkID0gdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JPZGQgfHwgb2xkQXR0cmlidXRlQmFja2dyb3VuZENvbG9yT2RkO1xuICAgIHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yRXZlbiA9IHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yRXZlbiB8fCBvbGRBdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JFdmVuO1xuICB9XG4gIGNhbGN1bGF0ZShvdmVycmlkZXMpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICBpZiAodGhpc1trXSA9PT0gXCJjYWxjdWxhdGVkXCIpIHtcbiAgICAgICAgdGhpc1trXSA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIG92ZXJyaWRlcyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhpcy51cGRhdGVDb2xvcnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG92ZXJyaWRlcyk7XG4gICAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICB0aGlzW2tdID0gb3ZlcnJpZGVzW2tdO1xuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlQ29sb3JzKCk7XG4gICAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICB0aGlzW2tdID0gb3ZlcnJpZGVzW2tdO1xuICAgIH0pO1xuICB9XG59O1xudmFyIGdldFRoZW1lVmFyaWFibGVzMyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHVzZXJPdmVycmlkZXMpID0+IHtcbiAgY29uc3QgdGhlbWUgPSBuZXcgVGhlbWUzKCk7XG4gIHRoZW1lLmNhbGN1bGF0ZSh1c2VyT3ZlcnJpZGVzKTtcbiAgcmV0dXJuIHRoZW1lO1xufSwgXCJnZXRUaGVtZVZhcmlhYmxlc1wiKTtcblxuLy8gc3JjL3RoZW1lcy90aGVtZS1mb3Jlc3QuanNcbmltcG9ydCB7IGFkanVzdCBhcyBhZGp1c3Q1LCBkYXJrZW4gYXMgZGFya2VuNCwgaW52ZXJ0IGFzIGludmVydDQsIGlzRGFyayBhcyBpc0Rhcms0LCBsaWdodGVuIGFzIGxpZ2h0ZW40IH0gZnJvbSBcImtocm9tYVwiO1xudmFyIFRoZW1lNCA9IGNsYXNzIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJUaGVtZVwiKTtcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJhY2tncm91bmQgPSBcIiNmNGY0ZjRcIjtcbiAgICB0aGlzLnByaW1hcnlDb2xvciA9IFwiI2NkZTQ5OFwiO1xuICAgIHRoaXMuc2Vjb25kYXJ5Q29sb3IgPSBcIiNjZGZmYjJcIjtcbiAgICB0aGlzLmJhY2tncm91bmQgPSBcIndoaXRlXCI7XG4gICAgdGhpcy5tYWluQmtnID0gXCIjY2RlNDk4XCI7XG4gICAgdGhpcy5zZWNvbmRCa2cgPSBcIiNjZGZmYjJcIjtcbiAgICB0aGlzLmxpbmVDb2xvciA9IFwiZ3JlZW5cIjtcbiAgICB0aGlzLmJvcmRlcjEgPSBcIiMxMzU0MGNcIjtcbiAgICB0aGlzLmJvcmRlcjIgPSBcIiM2ZWFhNDlcIjtcbiAgICB0aGlzLmFycm93aGVhZENvbG9yID0gXCJncmVlblwiO1xuICAgIHRoaXMuZm9udEZhbWlseSA9ICdcInRyZWJ1Y2hldCBtc1wiLCB2ZXJkYW5hLCBhcmlhbCwgc2Fucy1zZXJpZic7XG4gICAgdGhpcy5mb250U2l6ZSA9IFwiMTZweFwiO1xuICAgIHRoaXMudGVydGlhcnlDb2xvciA9IGxpZ2h0ZW40KFwiI2NkZTQ5OFwiLCAxMCk7XG4gICAgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3IgPSBta0JvcmRlcih0aGlzLnByaW1hcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5zZWNvbmRhcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMuc2Vjb25kYXJ5Q29sb3IsIHRoaXMuZGFya01vZGUpO1xuICAgIHRoaXMudGVydGlhcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMudGVydGlhcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy5wcmltYXJ5VGV4dENvbG9yID0gaW52ZXJ0NCh0aGlzLnByaW1hcnlDb2xvcik7XG4gICAgdGhpcy5zZWNvbmRhcnlUZXh0Q29sb3IgPSBpbnZlcnQ0KHRoaXMuc2Vjb25kYXJ5Q29sb3IpO1xuICAgIHRoaXMudGVydGlhcnlUZXh0Q29sb3IgPSBpbnZlcnQ0KHRoaXMucHJpbWFyeUNvbG9yKTtcbiAgICB0aGlzLmxpbmVDb2xvciA9IGludmVydDQodGhpcy5iYWNrZ3JvdW5kKTtcbiAgICB0aGlzLnRleHRDb2xvciA9IGludmVydDQodGhpcy5iYWNrZ3JvdW5kKTtcbiAgICB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUID0gMTI7XG4gICAgdGhpcy5ub2RlQmtnID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ub2RlQm9yZGVyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5jbHVzdGVyQmtnID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5jbHVzdGVyQm9yZGVyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5kZWZhdWx0TGlua0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50aXRsZUNvbG9yID0gXCIjMzMzXCI7XG4gICAgdGhpcy5lZGdlTGFiZWxCYWNrZ3JvdW5kID0gXCIjZThlOGU4XCI7XG4gICAgdGhpcy5hY3RvckJvcmRlciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0b3JCa2cgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdG9yVGV4dENvbG9yID0gXCJibGFja1wiO1xuICAgIHRoaXMuYWN0b3JMaW5lQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnNpZ25hbENvbG9yID0gXCIjMzMzXCI7XG4gICAgdGhpcy5zaWduYWxUZXh0Q29sb3IgPSBcIiMzMzNcIjtcbiAgICB0aGlzLmxhYmVsQm94QmtnQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmxhYmVsQm94Qm9yZGVyQ29sb3IgPSBcIiMzMjY5MzJcIjtcbiAgICB0aGlzLmxhYmVsVGV4dENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5sb29wVGV4dENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ub3RlQm9yZGVyQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLm5vdGVCa2dDb2xvciA9IFwiI2ZmZjVhZFwiO1xuICAgIHRoaXMubm90ZVRleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0aXZhdGlvbkJvcmRlckNvbG9yID0gXCIjNjY2XCI7XG4gICAgdGhpcy5hY3RpdmF0aW9uQmtnQ29sb3IgPSBcIiNmNGY0ZjRcIjtcbiAgICB0aGlzLnNlcXVlbmNlTnVtYmVyQ29sb3IgPSBcIndoaXRlXCI7XG4gICAgdGhpcy5zZWN0aW9uQmtnQ29sb3IgPSBcIiM2ZWFhNDlcIjtcbiAgICB0aGlzLmFsdFNlY3Rpb25Ca2dDb2xvciA9IFwid2hpdGVcIjtcbiAgICB0aGlzLnNlY3Rpb25Ca2dDb2xvcjIgPSBcIiM2ZWFhNDlcIjtcbiAgICB0aGlzLmV4Y2x1ZGVCa2dDb2xvciA9IFwiI2VlZWVlZVwiO1xuICAgIHRoaXMudGFza0JvcmRlckNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50YXNrQmtnQ29sb3IgPSBcIiM0ODdlM2FcIjtcbiAgICB0aGlzLnRhc2tUZXh0TGlnaHRDb2xvciA9IFwid2hpdGVcIjtcbiAgICB0aGlzLnRhc2tUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gXCJibGFja1wiO1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tUZXh0Q2xpY2thYmxlQ29sb3IgPSBcIiMwMDMxNjNcIjtcbiAgICB0aGlzLmFjdGl2ZVRhc2tCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0aXZlVGFza0JrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ncmlkQ29sb3IgPSBcImxpZ2h0Z3JleVwiO1xuICAgIHRoaXMuZG9uZVRhc2tCa2dDb2xvciA9IFwibGlnaHRncmV5XCI7XG4gICAgdGhpcy5kb25lVGFza0JvcmRlckNvbG9yID0gXCJncmV5XCI7XG4gICAgdGhpcy5jcml0Qm9yZGVyQ29sb3IgPSBcIiNmZjg4ODhcIjtcbiAgICB0aGlzLmNyaXRCa2dDb2xvciA9IFwicmVkXCI7XG4gICAgdGhpcy50b2RheUxpbmVDb2xvciA9IFwicmVkXCI7XG4gICAgdGhpcy5wZXJzb25Cb3JkZXIgPSB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnBlcnNvbkJrZyA9IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLmFyY2hFZGdlQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFyY2hFZGdlQXJyb3dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYXJjaEVkZ2VXaWR0aCA9IFwiM1wiO1xuICAgIHRoaXMuYXJjaEdyb3VwQm9yZGVyQ29sb3IgPSB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLmFyY2hHcm91cEJvcmRlcldpZHRoID0gXCIycHhcIjtcbiAgICB0aGlzLmxhYmVsQ29sb3IgPSBcImJsYWNrXCI7XG4gICAgdGhpcy5lcnJvckJrZ0NvbG9yID0gXCIjNTUyMjIyXCI7XG4gICAgdGhpcy5lcnJvclRleHRDb2xvciA9IFwiIzU1MjIyMlwiO1xuICB9XG4gIHVwZGF0ZUNvbG9ycygpIHtcbiAgICB0aGlzLmFjdG9yQm9yZGVyID0gZGFya2VuNCh0aGlzLm1haW5Ca2csIDIwKTtcbiAgICB0aGlzLmFjdG9yQmtnID0gdGhpcy5tYWluQmtnO1xuICAgIHRoaXMubGFiZWxCb3hCa2dDb2xvciA9IHRoaXMuYWN0b3JCa2c7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvciA9IHRoaXMuYWN0b3JUZXh0Q29sb3I7XG4gICAgdGhpcy5sb29wVGV4dENvbG9yID0gdGhpcy5hY3RvclRleHRDb2xvcjtcbiAgICB0aGlzLm5vdGVCb3JkZXJDb2xvciA9IHRoaXMuYm9yZGVyMjtcbiAgICB0aGlzLm5vdGVUZXh0Q29sb3IgPSB0aGlzLmFjdG9yVGV4dENvbG9yO1xuICAgIHRoaXMuYWN0b3JMaW5lQ29sb3IgPSB0aGlzLmFjdG9yQm9yZGVyO1xuICAgIHRoaXMuY1NjYWxlMCA9IHRoaXMuY1NjYWxlMCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLmNTY2FsZTEgPSB0aGlzLmNTY2FsZTEgfHwgdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB0aGlzLmNTY2FsZTIgPSB0aGlzLmNTY2FsZTIgfHwgdGhpcy50ZXJ0aWFyeUNvbG9yO1xuICAgIHRoaXMuY1NjYWxlMyA9IHRoaXMuY1NjYWxlMyB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMwIH0pO1xuICAgIHRoaXMuY1NjYWxlNCA9IHRoaXMuY1NjYWxlNCB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDYwIH0pO1xuICAgIHRoaXMuY1NjYWxlNSA9IHRoaXMuY1NjYWxlNSB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDkwIH0pO1xuICAgIHRoaXMuY1NjYWxlNiA9IHRoaXMuY1NjYWxlNiB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDEyMCB9KTtcbiAgICB0aGlzLmNTY2FsZTcgPSB0aGlzLmNTY2FsZTcgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxNTAgfSk7XG4gICAgdGhpcy5jU2NhbGU4ID0gdGhpcy5jU2NhbGU4IHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMjEwIH0pO1xuICAgIHRoaXMuY1NjYWxlOSA9IHRoaXMuY1NjYWxlOSB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDI3MCB9KTtcbiAgICB0aGlzLmNTY2FsZTEwID0gdGhpcy5jU2NhbGUxMCB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMwMCB9KTtcbiAgICB0aGlzLmNTY2FsZTExID0gdGhpcy5jU2NhbGUxMSB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IDMzMCB9KTtcbiAgICB0aGlzW1wiY1NjYWxlUGVlcjFcIl0gPSB0aGlzW1wiY1NjYWxlUGVlcjFcIl0gfHwgZGFya2VuNCh0aGlzLnNlY29uZGFyeUNvbG9yLCA0NSk7XG4gICAgdGhpc1tcImNTY2FsZVBlZXIyXCJdID0gdGhpc1tcImNTY2FsZVBlZXIyXCJdIHx8IGRhcmtlbjQodGhpcy50ZXJ0aWFyeUNvbG9yLCA0MCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIHRoaXNbXCJjU2NhbGVcIiArIGldID0gZGFya2VuNCh0aGlzW1wiY1NjYWxlXCIgKyBpXSwgMTApO1xuICAgICAgdGhpc1tcImNTY2FsZVBlZXJcIiArIGldID0gdGhpc1tcImNTY2FsZVBlZXJcIiArIGldIHx8IGRhcmtlbjQodGhpc1tcImNTY2FsZVwiICsgaV0sIDI1KTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIHRoaXNbXCJjU2NhbGVJbnZcIiArIGldID0gdGhpc1tcImNTY2FsZUludlwiICsgaV0gfHwgYWRqdXN0NSh0aGlzW1wiY1NjYWxlXCIgKyBpXSwgeyBoOiAxODAgfSk7XG4gICAgfVxuICAgIHRoaXMuc2NhbGVMYWJlbENvbG9yID0gdGhpcy5zY2FsZUxhYmVsQ29sb3IgIT09IFwiY2FsY3VsYXRlZFwiICYmIHRoaXMuc2NhbGVMYWJlbENvbG9yID8gdGhpcy5zY2FsZUxhYmVsQ29sb3IgOiB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5USEVNRV9DT0xPUl9MSU1JVDsgaSsrKSB7XG4gICAgICB0aGlzW1wiY1NjYWxlTGFiZWxcIiArIGldID0gdGhpc1tcImNTY2FsZUxhYmVsXCIgKyBpXSB8fCB0aGlzLnNjYWxlTGFiZWxDb2xvcjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgIHRoaXNbXCJzdXJmYWNlXCIgKyBpXSA9IHRoaXNbXCJzdXJmYWNlXCIgKyBpXSB8fCBhZGp1c3Q1KHRoaXMubWFpbkJrZywgeyBoOiAzMCwgczogLTMwLCBsOiAtKDUgKyBpICogNSkgfSk7XG4gICAgICB0aGlzW1wic3VyZmFjZVBlZXJcIiArIGldID0gdGhpc1tcInN1cmZhY2VQZWVyXCIgKyBpXSB8fCBhZGp1c3Q1KHRoaXMubWFpbkJrZywgeyBoOiAzMCwgczogLTMwLCBsOiAtKDggKyBpICogNSkgfSk7XG4gICAgfVxuICAgIHRoaXMubm9kZUJrZyA9IHRoaXMubWFpbkJrZztcbiAgICB0aGlzLm5vZGVCb3JkZXIgPSB0aGlzLmJvcmRlcjE7XG4gICAgdGhpcy5jbHVzdGVyQmtnID0gdGhpcy5zZWNvbmRCa2c7XG4gICAgdGhpcy5jbHVzdGVyQm9yZGVyID0gdGhpcy5ib3JkZXIyO1xuICAgIHRoaXMuZGVmYXVsdExpbmtDb2xvciA9IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMudGFza0JvcmRlckNvbG9yID0gdGhpcy5ib3JkZXIxO1xuICAgIHRoaXMudGFza1RleHRDb2xvciA9IHRoaXMudGFza1RleHRMaWdodENvbG9yO1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSB0aGlzLnRhc2tUZXh0RGFya0NvbG9yO1xuICAgIHRoaXMuYWN0aXZlVGFza0JvcmRlckNvbG9yID0gdGhpcy50YXNrQm9yZGVyQ29sb3I7XG4gICAgdGhpcy5hY3RpdmVUYXNrQmtnQ29sb3IgPSB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5hcmNoRWRnZUNvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5hcmNoRWRnZUFycm93Q29sb3IgPSB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLnJvd09kZCA9IHRoaXMucm93T2RkIHx8IGxpZ2h0ZW40KHRoaXMubWFpbkJrZywgNzUpIHx8IFwiI2ZmZmZmZlwiO1xuICAgIHRoaXMucm93RXZlbiA9IHRoaXMucm93RXZlbiB8fCBsaWdodGVuNCh0aGlzLm1haW5Ca2csIDIwKTtcbiAgICB0aGlzLnRyYW5zaXRpb25Db2xvciA9IHRoaXMudHJhbnNpdGlvbkNvbG9yIHx8IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMudHJhbnNpdGlvbkxhYmVsQ29sb3IgPSB0aGlzLnRyYW5zaXRpb25MYWJlbENvbG9yIHx8IHRoaXMudGV4dENvbG9yO1xuICAgIHRoaXMuc3RhdGVMYWJlbENvbG9yID0gdGhpcy5zdGF0ZUxhYmVsQ29sb3IgfHwgdGhpcy5zdGF0ZUJrZyB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5zdGF0ZUJrZyA9IHRoaXMuc3RhdGVCa2cgfHwgdGhpcy5tYWluQmtnO1xuICAgIHRoaXMubGFiZWxCYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLmxhYmVsQmFja2dyb3VuZENvbG9yIHx8IHRoaXMuc3RhdGVCa2c7XG4gICAgdGhpcy5jb21wb3NpdGVCYWNrZ3JvdW5kID0gdGhpcy5jb21wb3NpdGVCYWNrZ3JvdW5kIHx8IHRoaXMuYmFja2dyb3VuZCB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5hbHRCYWNrZ3JvdW5kID0gdGhpcy5hbHRCYWNrZ3JvdW5kIHx8IFwiI2YwZjBmMFwiO1xuICAgIHRoaXMuY29tcG9zaXRlVGl0bGVCYWNrZ3JvdW5kID0gdGhpcy5jb21wb3NpdGVUaXRsZUJhY2tncm91bmQgfHwgdGhpcy5tYWluQmtnO1xuICAgIHRoaXMuY29tcG9zaXRlQm9yZGVyID0gdGhpcy5jb21wb3NpdGVCb3JkZXIgfHwgdGhpcy5ub2RlQm9yZGVyO1xuICAgIHRoaXMuaW5uZXJFbmRCYWNrZ3JvdW5kID0gdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5zcGVjaWFsU3RhdGVDb2xvciA9IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMuZXJyb3JCa2dDb2xvciA9IHRoaXMuZXJyb3JCa2dDb2xvciB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5lcnJvclRleHRDb2xvciA9IHRoaXMuZXJyb3JUZXh0Q29sb3IgfHwgdGhpcy50ZXJ0aWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnRyYW5zaXRpb25Db2xvciA9IHRoaXMudHJhbnNpdGlvbkNvbG9yIHx8IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMuY2xhc3NUZXh0ID0gdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuZmlsbFR5cGUwID0gdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTEgPSB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuZmlsbFR5cGUyID0gYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlMyA9IGFkanVzdDUodGhpcy5zZWNvbmRhcnlDb2xvciwgeyBoOiA2NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlNCA9IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU1ID0gYWRqdXN0NSh0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IC02NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlNiA9IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTI4IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU3ID0gYWRqdXN0NSh0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IDEyOCB9KTtcbiAgICB0aGlzLnBpZTEgPSB0aGlzLnBpZTEgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5waWUyID0gdGhpcy5waWUyIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5waWUzID0gdGhpcy5waWUzIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLnBpZTQgPSB0aGlzLnBpZTQgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBsOiAtMzAgfSk7XG4gICAgdGhpcy5waWU1ID0gdGhpcy5waWU1IHx8IGFkanVzdDUodGhpcy5zZWNvbmRhcnlDb2xvciwgeyBsOiAtMzAgfSk7XG4gICAgdGhpcy5waWU2ID0gdGhpcy5waWU2IHx8IGFkanVzdDUodGhpcy50ZXJ0aWFyeUNvbG9yLCB7IGg6IDQwLCBsOiAtNDAgfSk7XG4gICAgdGhpcy5waWU3ID0gdGhpcy5waWU3IHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogNjAsIGw6IC0xMCB9KTtcbiAgICB0aGlzLnBpZTggPSB0aGlzLnBpZTggfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtNjAsIGw6IC0xMCB9KTtcbiAgICB0aGlzLnBpZTkgPSB0aGlzLnBpZTkgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAsIGw6IDAgfSk7XG4gICAgdGhpcy5waWUxMCA9IHRoaXMucGllMTAgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2MCwgbDogLTUwIH0pO1xuICAgIHRoaXMucGllMTEgPSB0aGlzLnBpZTExIHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTYwLCBsOiAtNTAgfSk7XG4gICAgdGhpcy5waWUxMiA9IHRoaXMucGllMTIgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAsIGw6IC01MCB9KTtcbiAgICB0aGlzLnBpZVRpdGxlVGV4dFNpemUgPSB0aGlzLnBpZVRpdGxlVGV4dFNpemUgfHwgXCIyNXB4XCI7XG4gICAgdGhpcy5waWVUaXRsZVRleHRDb2xvciA9IHRoaXMucGllVGl0bGVUZXh0Q29sb3IgfHwgdGhpcy50YXNrVGV4dERhcmtDb2xvcjtcbiAgICB0aGlzLnBpZVNlY3Rpb25UZXh0U2l6ZSA9IHRoaXMucGllU2VjdGlvblRleHRTaXplIHx8IFwiMTdweFwiO1xuICAgIHRoaXMucGllU2VjdGlvblRleHRDb2xvciA9IHRoaXMucGllU2VjdGlvblRleHRDb2xvciB8fCB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnBpZUxlZ2VuZFRleHRTaXplID0gdGhpcy5waWVMZWdlbmRUZXh0U2l6ZSB8fCBcIjE3cHhcIjtcbiAgICB0aGlzLnBpZUxlZ2VuZFRleHRDb2xvciA9IHRoaXMucGllTGVnZW5kVGV4dENvbG9yIHx8IHRoaXMudGFza1RleHREYXJrQ29sb3I7XG4gICAgdGhpcy5waWVTdHJva2VDb2xvciA9IHRoaXMucGllU3Ryb2tlQ29sb3IgfHwgXCJibGFja1wiO1xuICAgIHRoaXMucGllU3Ryb2tlV2lkdGggPSB0aGlzLnBpZVN0cm9rZVdpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5waWVPdXRlclN0cm9rZVdpZHRoID0gdGhpcy5waWVPdXRlclN0cm9rZVdpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5waWVPdXRlclN0cm9rZUNvbG9yID0gdGhpcy5waWVPdXRlclN0cm9rZUNvbG9yIHx8IFwiYmxhY2tcIjtcbiAgICB0aGlzLnBpZU9wYWNpdHkgPSB0aGlzLnBpZU9wYWNpdHkgfHwgXCIwLjdcIjtcbiAgICB0aGlzLnF1YWRyYW50MUZpbGwgPSB0aGlzLnF1YWRyYW50MUZpbGwgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudDJGaWxsID0gdGhpcy5xdWFkcmFudDJGaWxsIHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgcjogNSwgZzogNSwgYjogNSB9KTtcbiAgICB0aGlzLnF1YWRyYW50M0ZpbGwgPSB0aGlzLnF1YWRyYW50M0ZpbGwgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyByOiAxMCwgZzogMTAsIGI6IDEwIH0pO1xuICAgIHRoaXMucXVhZHJhbnQ0RmlsbCA9IHRoaXMucXVhZHJhbnQ0RmlsbCB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IHI6IDE1LCBnOiAxNSwgYjogMTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDFUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQxVGV4dEZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucXVhZHJhbnQyVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50MlRleHRGaWxsIHx8IGFkanVzdDUodGhpcy5wcmltYXJ5VGV4dENvbG9yLCB7IHI6IC01LCBnOiAtNSwgYjogLTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDNUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQzVGV4dEZpbGwgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlUZXh0Q29sb3IsIHsgcjogLTEwLCBnOiAtMTAsIGI6IC0xMCB9KTtcbiAgICB0aGlzLnF1YWRyYW50NFRleHRGaWxsID0gdGhpcy5xdWFkcmFudDRUZXh0RmlsbCB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeVRleHRDb2xvciwgeyByOiAtMTUsIGc6IC0xNSwgYjogLTE1IH0pO1xuICAgIHRoaXMucXVhZHJhbnRQb2ludEZpbGwgPSB0aGlzLnF1YWRyYW50UG9pbnRGaWxsIHx8IGlzRGFyazQodGhpcy5xdWFkcmFudDFGaWxsKSA/IGxpZ2h0ZW40KHRoaXMucXVhZHJhbnQxRmlsbCkgOiBkYXJrZW40KHRoaXMucXVhZHJhbnQxRmlsbCk7XG4gICAgdGhpcy5xdWFkcmFudFBvaW50VGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50UG9pbnRUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFhBeGlzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50WEF4aXNUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFlBeGlzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50WUF4aXNUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudEludGVybmFsQm9yZGVyU3Ryb2tlRmlsbCA9IHRoaXMucXVhZHJhbnRJbnRlcm5hbEJvcmRlclN0cm9rZUZpbGwgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5xdWFkcmFudEV4dGVybmFsQm9yZGVyU3Ryb2tlRmlsbCA9IHRoaXMucXVhZHJhbnRFeHRlcm5hbEJvcmRlclN0cm9rZUZpbGwgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFRpdGxlRmlsbCA9IHRoaXMucXVhZHJhbnRUaXRsZUZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucGFja2V0ID0ge1xuICAgICAgc3RhcnRCeXRlQ29sb3I6IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIGVuZEJ5dGVDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgbGFiZWxDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgdGl0bGVDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgYmxvY2tTdHJva2VDb2xvcjogdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgYmxvY2tGaWxsQ29sb3I6IHRoaXMubWFpbkJrZ1xuICAgIH07XG4gICAgdGhpcy5yYWRhciA9IHtcbiAgICAgIGF4aXNDb2xvcjogdGhpcy5yYWRhcj8uYXhpc0NvbG9yIHx8IHRoaXMubGluZUNvbG9yLFxuICAgICAgYXhpc1N0cm9rZVdpZHRoOiB0aGlzLnJhZGFyPy5heGlzU3Ryb2tlV2lkdGggfHwgMixcbiAgICAgIGF4aXNMYWJlbEZvbnRTaXplOiB0aGlzLnJhZGFyPy5heGlzTGFiZWxGb250U2l6ZSB8fCAxMixcbiAgICAgIGN1cnZlT3BhY2l0eTogdGhpcy5yYWRhcj8uY3VydmVPcGFjaXR5IHx8IDAuNSxcbiAgICAgIGN1cnZlU3Ryb2tlV2lkdGg6IHRoaXMucmFkYXI/LmN1cnZlU3Ryb2tlV2lkdGggfHwgMixcbiAgICAgIGdyYXRpY3VsZUNvbG9yOiB0aGlzLnJhZGFyPy5ncmF0aWN1bGVDb2xvciB8fCBcIiNERURFREVcIixcbiAgICAgIGdyYXRpY3VsZVN0cm9rZVdpZHRoOiB0aGlzLnJhZGFyPy5ncmF0aWN1bGVTdHJva2VXaWR0aCB8fCAxLFxuICAgICAgZ3JhdGljdWxlT3BhY2l0eTogdGhpcy5yYWRhcj8uZ3JhdGljdWxlT3BhY2l0eSB8fCAwLjMsXG4gICAgICBsZWdlbmRCb3hTaXplOiB0aGlzLnJhZGFyPy5sZWdlbmRCb3hTaXplIHx8IDEyLFxuICAgICAgbGVnZW5kRm9udFNpemU6IHRoaXMucmFkYXI/LmxlZ2VuZEZvbnRTaXplIHx8IDEyXG4gICAgfTtcbiAgICB0aGlzLnh5Q2hhcnQgPSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMueHlDaGFydD8uYmFja2dyb3VuZENvbG9yIHx8IHRoaXMuYmFja2dyb3VuZCxcbiAgICAgIHRpdGxlQ29sb3I6IHRoaXMueHlDaGFydD8udGl0bGVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB4QXhpc1RpdGxlQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNUaXRsZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzTGFiZWxDb2xvcjogdGhpcy54eUNoYXJ0Py54QXhpc0xhYmVsQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNUaWNrQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNUaWNrQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNMaW5lQ29sb3I6IHRoaXMueHlDaGFydD8ueEF4aXNMaW5lQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeUF4aXNUaXRsZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzVGl0bGVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc0xhYmVsQ29sb3I6IHRoaXMueHlDaGFydD8ueUF4aXNMYWJlbENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzVGlja0NvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzVGlja0NvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzTGluZUNvbG9yOiB0aGlzLnh5Q2hhcnQ/LnlBeGlzTGluZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHBsb3RDb2xvclBhbGV0dGU6IHRoaXMueHlDaGFydD8ucGxvdENvbG9yUGFsZXR0ZSB8fCBcIiNDREU0OTgsI0ZGNkI2QiwjQTBEMkRCLCNEN0JERTIsI0YwRjBGMCwjRkZDM0EwLCM3RkQ4QkUsI0ZGOUE4QiwjRkFGM0UwLCNGRkYxNzZcIlxuICAgIH07XG4gICAgdGhpcy5yZXF1aXJlbWVudEJhY2tncm91bmQgPSB0aGlzLnJlcXVpcmVtZW50QmFja2dyb3VuZCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyQ29sb3IgPSB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyQ29sb3IgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5yZXF1aXJlbWVudEJvcmRlclNpemUgPSB0aGlzLnJlcXVpcmVtZW50Qm9yZGVyU2l6ZSB8fCBcIjFcIjtcbiAgICB0aGlzLnJlcXVpcmVtZW50VGV4dENvbG9yID0gdGhpcy5yZXF1aXJlbWVudFRleHRDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5yZWxhdGlvbkNvbG9yID0gdGhpcy5yZWxhdGlvbkNvbG9yIHx8IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMucmVsYXRpb25MYWJlbEJhY2tncm91bmQgPSB0aGlzLnJlbGF0aW9uTGFiZWxCYWNrZ3JvdW5kIHx8IHRoaXMuZWRnZUxhYmVsQmFja2dyb3VuZDtcbiAgICB0aGlzLnJlbGF0aW9uTGFiZWxDb2xvciA9IHRoaXMucmVsYXRpb25MYWJlbENvbG9yIHx8IHRoaXMuYWN0b3JUZXh0Q29sb3I7XG4gICAgdGhpcy5naXQwID0gdGhpcy5naXQwIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMuZ2l0MSA9IHRoaXMuZ2l0MSB8fCB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuZ2l0MiA9IHRoaXMuZ2l0MiB8fCB0aGlzLnRlcnRpYXJ5Q29sb3I7XG4gICAgdGhpcy5naXQzID0gdGhpcy5naXQzIHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTMwIH0pO1xuICAgIHRoaXMuZ2l0NCA9IHRoaXMuZ2l0NCB8fCBhZGp1c3Q1KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC02MCB9KTtcbiAgICB0aGlzLmdpdDUgPSB0aGlzLmdpdDUgfHwgYWRqdXN0NSh0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtOTAgfSk7XG4gICAgdGhpcy5naXQ2ID0gdGhpcy5naXQ2IHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogNjAgfSk7XG4gICAgdGhpcy5naXQ3ID0gdGhpcy5naXQ3IHx8IGFkanVzdDUodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTIwIH0pO1xuICAgIGlmICh0aGlzLmRhcmtNb2RlKSB7XG4gICAgICB0aGlzLmdpdDAgPSBsaWdodGVuNCh0aGlzLmdpdDAsIDI1KTtcbiAgICAgIHRoaXMuZ2l0MSA9IGxpZ2h0ZW40KHRoaXMuZ2l0MSwgMjUpO1xuICAgICAgdGhpcy5naXQyID0gbGlnaHRlbjQodGhpcy5naXQyLCAyNSk7XG4gICAgICB0aGlzLmdpdDMgPSBsaWdodGVuNCh0aGlzLmdpdDMsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NCA9IGxpZ2h0ZW40KHRoaXMuZ2l0NCwgMjUpO1xuICAgICAgdGhpcy5naXQ1ID0gbGlnaHRlbjQodGhpcy5naXQ1LCAyNSk7XG4gICAgICB0aGlzLmdpdDYgPSBsaWdodGVuNCh0aGlzLmdpdDYsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NyA9IGxpZ2h0ZW40KHRoaXMuZ2l0NywgMjUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdpdDAgPSBkYXJrZW40KHRoaXMuZ2l0MCwgMjUpO1xuICAgICAgdGhpcy5naXQxID0gZGFya2VuNCh0aGlzLmdpdDEsIDI1KTtcbiAgICAgIHRoaXMuZ2l0MiA9IGRhcmtlbjQodGhpcy5naXQyLCAyNSk7XG4gICAgICB0aGlzLmdpdDMgPSBkYXJrZW40KHRoaXMuZ2l0MywgMjUpO1xuICAgICAgdGhpcy5naXQ0ID0gZGFya2VuNCh0aGlzLmdpdDQsIDI1KTtcbiAgICAgIHRoaXMuZ2l0NSA9IGRhcmtlbjQodGhpcy5naXQ1LCAyNSk7XG4gICAgICB0aGlzLmdpdDYgPSBkYXJrZW40KHRoaXMuZ2l0NiwgMjUpO1xuICAgICAgdGhpcy5naXQ3ID0gZGFya2VuNCh0aGlzLmdpdDcsIDI1KTtcbiAgICB9XG4gICAgdGhpcy5naXRJbnYwID0gdGhpcy5naXRJbnYwIHx8IGludmVydDQodGhpcy5naXQwKTtcbiAgICB0aGlzLmdpdEludjEgPSB0aGlzLmdpdEludjEgfHwgaW52ZXJ0NCh0aGlzLmdpdDEpO1xuICAgIHRoaXMuZ2l0SW52MiA9IHRoaXMuZ2l0SW52MiB8fCBpbnZlcnQ0KHRoaXMuZ2l0Mik7XG4gICAgdGhpcy5naXRJbnYzID0gdGhpcy5naXRJbnYzIHx8IGludmVydDQodGhpcy5naXQzKTtcbiAgICB0aGlzLmdpdEludjQgPSB0aGlzLmdpdEludjQgfHwgaW52ZXJ0NCh0aGlzLmdpdDQpO1xuICAgIHRoaXMuZ2l0SW52NSA9IHRoaXMuZ2l0SW52NSB8fCBpbnZlcnQ0KHRoaXMuZ2l0NSk7XG4gICAgdGhpcy5naXRJbnY2ID0gdGhpcy5naXRJbnY2IHx8IGludmVydDQodGhpcy5naXQ2KTtcbiAgICB0aGlzLmdpdEludjcgPSB0aGlzLmdpdEludjcgfHwgaW52ZXJ0NCh0aGlzLmdpdDcpO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwwID0gdGhpcy5naXRCcmFuY2hMYWJlbDAgfHwgaW52ZXJ0NCh0aGlzLmxhYmVsVGV4dENvbG9yKTtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsMSA9IHRoaXMuZ2l0QnJhbmNoTGFiZWwxIHx8IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDIgPSB0aGlzLmdpdEJyYW5jaExhYmVsMiB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwzID0gdGhpcy5naXRCcmFuY2hMYWJlbDMgfHwgaW52ZXJ0NCh0aGlzLmxhYmVsVGV4dENvbG9yKTtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsNCA9IHRoaXMuZ2l0QnJhbmNoTGFiZWw0IHx8IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgdGhpcy5naXRCcmFuY2hMYWJlbDUgPSB0aGlzLmdpdEJyYW5jaExhYmVsNSB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw2ID0gdGhpcy5naXRCcmFuY2hMYWJlbDYgfHwgdGhpcy5sYWJlbFRleHRDb2xvcjtcbiAgICB0aGlzLmdpdEJyYW5jaExhYmVsNyA9IHRoaXMuZ2l0QnJhbmNoTGFiZWw3IHx8IHRoaXMubGFiZWxUZXh0Q29sb3I7XG4gICAgdGhpcy50YWdMYWJlbENvbG9yID0gdGhpcy50YWdMYWJlbENvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsQmFja2dyb3VuZCA9IHRoaXMudGFnTGFiZWxCYWNrZ3JvdW5kIHx8IHRoaXMucHJpbWFyeUNvbG9yO1xuICAgIHRoaXMudGFnTGFiZWxCb3JkZXIgPSB0aGlzLnRhZ0JvcmRlciB8fCB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsRm9udFNpemUgPSB0aGlzLnRhZ0xhYmVsRm9udFNpemUgfHwgXCIxMHB4XCI7XG4gICAgdGhpcy5jb21taXRMYWJlbENvbG9yID0gdGhpcy5jb21taXRMYWJlbENvbG9yIHx8IHRoaXMuc2Vjb25kYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuY29tbWl0TGFiZWxCYWNrZ3JvdW5kID0gdGhpcy5jb21taXRMYWJlbEJhY2tncm91bmQgfHwgdGhpcy5zZWNvbmRhcnlDb2xvcjtcbiAgICB0aGlzLmNvbW1pdExhYmVsRm9udFNpemUgPSB0aGlzLmNvbW1pdExhYmVsRm9udFNpemUgfHwgXCIxMHB4XCI7XG4gICAgdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JPZGQgPSB0aGlzLmF0dHJpYnV0ZUJhY2tncm91bmRDb2xvck9kZCB8fCBvbGRBdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JPZGQ7XG4gICAgdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JFdmVuID0gdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JFdmVuIHx8IG9sZEF0dHJpYnV0ZUJhY2tncm91bmRDb2xvckV2ZW47XG4gIH1cbiAgY2FsY3VsYXRlKG92ZXJyaWRlcykge1xuICAgIGlmICh0eXBlb2Ygb3ZlcnJpZGVzICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICB0aGlzLnVwZGF0ZUNvbG9ycygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3ZlcnJpZGVzKTtcbiAgICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICAgIHRoaXNba10gPSBvdmVycmlkZXNba107XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVDb2xvcnMoKTtcbiAgICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICAgIHRoaXNba10gPSBvdmVycmlkZXNba107XG4gICAgfSk7XG4gIH1cbn07XG52YXIgZ2V0VGhlbWVWYXJpYWJsZXM0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodXNlck92ZXJyaWRlcykgPT4ge1xuICBjb25zdCB0aGVtZSA9IG5ldyBUaGVtZTQoKTtcbiAgdGhlbWUuY2FsY3VsYXRlKHVzZXJPdmVycmlkZXMpO1xuICByZXR1cm4gdGhlbWU7XG59LCBcImdldFRoZW1lVmFyaWFibGVzXCIpO1xuXG4vLyBzcmMvdGhlbWVzL3RoZW1lLW5ldXRyYWwuanNcbmltcG9ydCB7IGludmVydCBhcyBpbnZlcnQ1LCBkYXJrZW4gYXMgZGFya2VuNSwgbGlnaHRlbiBhcyBsaWdodGVuNSwgYWRqdXN0IGFzIGFkanVzdDYsIGlzRGFyayBhcyBpc0Rhcms1IH0gZnJvbSBcImtocm9tYVwiO1xudmFyIFRoZW1lNSA9IGNsYXNzIHtcbiAgc3RhdGljIHtcbiAgICBfX25hbWUodGhpcywgXCJUaGVtZVwiKTtcbiAgfVxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByaW1hcnlDb2xvciA9IFwiI2VlZVwiO1xuICAgIHRoaXMuY29udHJhc3QgPSBcIiM3MDcwNzBcIjtcbiAgICB0aGlzLnNlY29uZGFyeUNvbG9yID0gbGlnaHRlbjUodGhpcy5jb250cmFzdCwgNTUpO1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IFwiI2ZmZmZmZlwiO1xuICAgIHRoaXMudGVydGlhcnlDb2xvciA9IGFkanVzdDYodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTE2MCB9KTtcbiAgICB0aGlzLnByaW1hcnlCb3JkZXJDb2xvciA9IG1rQm9yZGVyKHRoaXMucHJpbWFyeUNvbG9yLCB0aGlzLmRhcmtNb2RlKTtcbiAgICB0aGlzLnNlY29uZGFyeUJvcmRlckNvbG9yID0gbWtCb3JkZXIodGhpcy5zZWNvbmRhcnlDb2xvciwgdGhpcy5kYXJrTW9kZSk7XG4gICAgdGhpcy50ZXJ0aWFyeUJvcmRlckNvbG9yID0gbWtCb3JkZXIodGhpcy50ZXJ0aWFyeUNvbG9yLCB0aGlzLmRhcmtNb2RlKTtcbiAgICB0aGlzLnByaW1hcnlUZXh0Q29sb3IgPSBpbnZlcnQ1KHRoaXMucHJpbWFyeUNvbG9yKTtcbiAgICB0aGlzLnNlY29uZGFyeVRleHRDb2xvciA9IGludmVydDUodGhpcy5zZWNvbmRhcnlDb2xvcik7XG4gICAgdGhpcy50ZXJ0aWFyeVRleHRDb2xvciA9IGludmVydDUodGhpcy50ZXJ0aWFyeUNvbG9yKTtcbiAgICB0aGlzLmxpbmVDb2xvciA9IGludmVydDUodGhpcy5iYWNrZ3JvdW5kKTtcbiAgICB0aGlzLnRleHRDb2xvciA9IGludmVydDUodGhpcy5iYWNrZ3JvdW5kKTtcbiAgICB0aGlzLm1haW5Ca2cgPSBcIiNlZWVcIjtcbiAgICB0aGlzLnNlY29uZEJrZyA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGluZUNvbG9yID0gXCIjNjY2XCI7XG4gICAgdGhpcy5ib3JkZXIxID0gXCIjOTk5XCI7XG4gICAgdGhpcy5ib3JkZXIyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ub3RlID0gXCIjZmZhXCI7XG4gICAgdGhpcy50ZXh0ID0gXCIjMzMzXCI7XG4gICAgdGhpcy5jcml0aWNhbCA9IFwiI2Q0MlwiO1xuICAgIHRoaXMuZG9uZSA9IFwiI2JiYlwiO1xuICAgIHRoaXMuYXJyb3doZWFkQ29sb3IgPSBcIiMzMzMzMzNcIjtcbiAgICB0aGlzLmZvbnRGYW1pbHkgPSAnXCJ0cmVidWNoZXQgbXNcIiwgdmVyZGFuYSwgYXJpYWwsIHNhbnMtc2VyaWYnO1xuICAgIHRoaXMuZm9udFNpemUgPSBcIjE2cHhcIjtcbiAgICB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUID0gMTI7XG4gICAgdGhpcy5ub2RlQmtnID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ub2RlQm9yZGVyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5jbHVzdGVyQmtnID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5jbHVzdGVyQm9yZGVyID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5kZWZhdWx0TGlua0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50aXRsZUNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5lZGdlTGFiZWxCYWNrZ3JvdW5kID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMuYWN0b3JCb3JkZXIgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdG9yQmtnID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hY3RvclRleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWN0b3JMaW5lQ29sb3IgPSB0aGlzLmFjdG9yQm9yZGVyO1xuICAgIHRoaXMuc2lnbmFsQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnNpZ25hbFRleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxCb3hCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxCb3hCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubGFiZWxUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmxvb3BUZXh0Q29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLm5vdGVCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMubm90ZUJrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5ub3RlVGV4dENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hY3RpdmF0aW9uQm9yZGVyQ29sb3IgPSBcIiM2NjZcIjtcbiAgICB0aGlzLmFjdGl2YXRpb25Ca2dDb2xvciA9IFwiI2Y0ZjRmNFwiO1xuICAgIHRoaXMuc2VxdWVuY2VOdW1iZXJDb2xvciA9IFwid2hpdGVcIjtcbiAgICB0aGlzLnNlY3Rpb25Ca2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYWx0U2VjdGlvbkJrZ0NvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yMiA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuZXhjbHVkZUJrZ0NvbG9yID0gXCIjZWVlZWVlXCI7XG4gICAgdGhpcy50YXNrQm9yZGVyQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudGFza1RleHRMaWdodENvbG9yID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMudGFza1RleHRDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudGFza1RleHREYXJrQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnRhc2tUZXh0T3V0c2lkZUNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy50YXNrVGV4dENsaWNrYWJsZUNvbG9yID0gXCIjMDAzMTYzXCI7XG4gICAgdGhpcy5hY3RpdmVUYXNrQm9yZGVyQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmFjdGl2ZVRhc2tCa2dDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuZ3JpZENvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5kb25lVGFza0JrZ0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5kb25lVGFza0JvcmRlckNvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5jcml0QmtnQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLmNyaXRCb3JkZXJDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMudG9kYXlMaW5lQ29sb3IgPSBcImNhbGN1bGF0ZWRcIjtcbiAgICB0aGlzLnBlcnNvbkJvcmRlciA9IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMucGVyc29uQmtnID0gdGhpcy5tYWluQmtnO1xuICAgIHRoaXMuYXJjaEVkZ2VDb2xvciA9IFwiY2FsY3VsYXRlZFwiO1xuICAgIHRoaXMuYXJjaEVkZ2VBcnJvd0NvbG9yID0gXCJjYWxjdWxhdGVkXCI7XG4gICAgdGhpcy5hcmNoRWRnZVdpZHRoID0gXCIzXCI7XG4gICAgdGhpcy5hcmNoR3JvdXBCb3JkZXJDb2xvciA9IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMuYXJjaEdyb3VwQm9yZGVyV2lkdGggPSBcIjJweFwiO1xuICAgIHRoaXMucm93T2RkID0gdGhpcy5yb3dPZGQgfHwgbGlnaHRlbjUodGhpcy5tYWluQmtnLCA3NSkgfHwgXCIjZmZmZmZmXCI7XG4gICAgdGhpcy5yb3dFdmVuID0gdGhpcy5yb3dFdmVuIHx8IFwiI2Y0ZjRmNFwiO1xuICAgIHRoaXMubGFiZWxDb2xvciA9IFwiYmxhY2tcIjtcbiAgICB0aGlzLmVycm9yQmtnQ29sb3IgPSBcIiM1NTIyMjJcIjtcbiAgICB0aGlzLmVycm9yVGV4dENvbG9yID0gXCIjNTUyMjIyXCI7XG4gIH1cbiAgdXBkYXRlQ29sb3JzKCkge1xuICAgIHRoaXMuc2Vjb25kQmtnID0gbGlnaHRlbjUodGhpcy5jb250cmFzdCwgNTUpO1xuICAgIHRoaXMuYm9yZGVyMiA9IHRoaXMuY29udHJhc3Q7XG4gICAgdGhpcy5hY3RvckJvcmRlciA9IGxpZ2h0ZW41KHRoaXMuYm9yZGVyMSwgMjMpO1xuICAgIHRoaXMuYWN0b3JCa2cgPSB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5hY3RvclRleHRDb2xvciA9IHRoaXMudGV4dDtcbiAgICB0aGlzLmFjdG9yTGluZUNvbG9yID0gdGhpcy5hY3RvckJvcmRlcjtcbiAgICB0aGlzLnNpZ25hbENvbG9yID0gdGhpcy50ZXh0O1xuICAgIHRoaXMuc2lnbmFsVGV4dENvbG9yID0gdGhpcy50ZXh0O1xuICAgIHRoaXMubGFiZWxCb3hCa2dDb2xvciA9IHRoaXMuYWN0b3JCa2c7XG4gICAgdGhpcy5sYWJlbEJveEJvcmRlckNvbG9yID0gdGhpcy5hY3RvckJvcmRlcjtcbiAgICB0aGlzLmxhYmVsVGV4dENvbG9yID0gdGhpcy50ZXh0O1xuICAgIHRoaXMubG9vcFRleHRDb2xvciA9IHRoaXMudGV4dDtcbiAgICB0aGlzLm5vdGVCb3JkZXJDb2xvciA9IFwiIzk5OVwiO1xuICAgIHRoaXMubm90ZUJrZ0NvbG9yID0gXCIjNjY2XCI7XG4gICAgdGhpcy5ub3RlVGV4dENvbG9yID0gXCIjZmZmXCI7XG4gICAgdGhpcy5jU2NhbGUwID0gdGhpcy5jU2NhbGUwIHx8IFwiIzU1NVwiO1xuICAgIHRoaXMuY1NjYWxlMSA9IHRoaXMuY1NjYWxlMSB8fCBcIiNGNEY0RjRcIjtcbiAgICB0aGlzLmNTY2FsZTIgPSB0aGlzLmNTY2FsZTIgfHwgXCIjNTU1XCI7XG4gICAgdGhpcy5jU2NhbGUzID0gdGhpcy5jU2NhbGUzIHx8IFwiI0JCQlwiO1xuICAgIHRoaXMuY1NjYWxlNCA9IHRoaXMuY1NjYWxlNCB8fCBcIiM3NzdcIjtcbiAgICB0aGlzLmNTY2FsZTUgPSB0aGlzLmNTY2FsZTUgfHwgXCIjOTk5XCI7XG4gICAgdGhpcy5jU2NhbGU2ID0gdGhpcy5jU2NhbGU2IHx8IFwiI0RERFwiO1xuICAgIHRoaXMuY1NjYWxlNyA9IHRoaXMuY1NjYWxlNyB8fCBcIiNGRkZcIjtcbiAgICB0aGlzLmNTY2FsZTggPSB0aGlzLmNTY2FsZTggfHwgXCIjREREXCI7XG4gICAgdGhpcy5jU2NhbGU5ID0gdGhpcy5jU2NhbGU5IHx8IFwiI0JCQlwiO1xuICAgIHRoaXMuY1NjYWxlMTAgPSB0aGlzLmNTY2FsZTEwIHx8IFwiIzk5OVwiO1xuICAgIHRoaXMuY1NjYWxlMTEgPSB0aGlzLmNTY2FsZTExIHx8IFwiIzc3N1wiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5USEVNRV9DT0xPUl9MSU1JVDsgaSsrKSB7XG4gICAgICB0aGlzW1wiY1NjYWxlSW52XCIgKyBpXSA9IHRoaXNbXCJjU2NhbGVJbnZcIiArIGldIHx8IGludmVydDUodGhpc1tcImNTY2FsZVwiICsgaV0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZGFya01vZGUpIHtcbiAgICAgICAgdGhpc1tcImNTY2FsZVBlZXJcIiArIGldID0gdGhpc1tcImNTY2FsZVBlZXJcIiArIGldIHx8IGxpZ2h0ZW41KHRoaXNbXCJjU2NhbGVcIiArIGldLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW1wiY1NjYWxlUGVlclwiICsgaV0gPSB0aGlzW1wiY1NjYWxlUGVlclwiICsgaV0gfHwgZGFya2VuNSh0aGlzW1wiY1NjYWxlXCIgKyBpXSwgMTApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNjYWxlTGFiZWxDb2xvciA9IHRoaXMuc2NhbGVMYWJlbENvbG9yIHx8ICh0aGlzLmRhcmtNb2RlID8gXCJibGFja1wiIDogdGhpcy5sYWJlbFRleHRDb2xvcik7XG4gICAgdGhpcy5jU2NhbGVMYWJlbDAgPSB0aGlzLmNTY2FsZUxhYmVsMCB8fCB0aGlzLmNTY2FsZTE7XG4gICAgdGhpcy5jU2NhbGVMYWJlbDIgPSB0aGlzLmNTY2FsZUxhYmVsMiB8fCB0aGlzLmNTY2FsZTE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLlRIRU1FX0NPTE9SX0xJTUlUOyBpKyspIHtcbiAgICAgIHRoaXNbXCJjU2NhbGVMYWJlbFwiICsgaV0gPSB0aGlzW1wiY1NjYWxlTGFiZWxcIiArIGldIHx8IHRoaXMuc2NhbGVMYWJlbENvbG9yO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgdGhpc1tcInN1cmZhY2VcIiArIGldID0gdGhpc1tcInN1cmZhY2VcIiArIGldIHx8IGFkanVzdDYodGhpcy5tYWluQmtnLCB7IGw6IC0oNSArIGkgKiA1KSB9KTtcbiAgICAgIHRoaXNbXCJzdXJmYWNlUGVlclwiICsgaV0gPSB0aGlzW1wic3VyZmFjZVBlZXJcIiArIGldIHx8IGFkanVzdDYodGhpcy5tYWluQmtnLCB7IGw6IC0oOCArIGkgKiA1KSB9KTtcbiAgICB9XG4gICAgdGhpcy5ub2RlQmtnID0gdGhpcy5tYWluQmtnO1xuICAgIHRoaXMubm9kZUJvcmRlciA9IHRoaXMuYm9yZGVyMTtcbiAgICB0aGlzLmNsdXN0ZXJCa2cgPSB0aGlzLnNlY29uZEJrZztcbiAgICB0aGlzLmNsdXN0ZXJCb3JkZXIgPSB0aGlzLmJvcmRlcjI7XG4gICAgdGhpcy5kZWZhdWx0TGlua0NvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy50aXRsZUNvbG9yID0gdGhpcy50ZXh0O1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yID0gbGlnaHRlbjUodGhpcy5jb250cmFzdCwgMzApO1xuICAgIHRoaXMuc2VjdGlvbkJrZ0NvbG9yMiA9IGxpZ2h0ZW41KHRoaXMuY29udHJhc3QsIDMwKTtcbiAgICB0aGlzLnRhc2tCb3JkZXJDb2xvciA9IGRhcmtlbjUodGhpcy5jb250cmFzdCwgMTApO1xuICAgIHRoaXMudGFza0JrZ0NvbG9yID0gdGhpcy5jb250cmFzdDtcbiAgICB0aGlzLnRhc2tUZXh0Q29sb3IgPSB0aGlzLnRhc2tUZXh0TGlnaHRDb2xvcjtcbiAgICB0aGlzLnRhc2tUZXh0RGFya0NvbG9yID0gdGhpcy50ZXh0O1xuICAgIHRoaXMudGFza1RleHRPdXRzaWRlQ29sb3IgPSB0aGlzLnRhc2tUZXh0RGFya0NvbG9yO1xuICAgIHRoaXMuYWN0aXZlVGFza0JvcmRlckNvbG9yID0gdGhpcy50YXNrQm9yZGVyQ29sb3I7XG4gICAgdGhpcy5hY3RpdmVUYXNrQmtnQ29sb3IgPSB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5ncmlkQ29sb3IgPSBsaWdodGVuNSh0aGlzLmJvcmRlcjEsIDMwKTtcbiAgICB0aGlzLmRvbmVUYXNrQmtnQ29sb3IgPSB0aGlzLmRvbmU7XG4gICAgdGhpcy5kb25lVGFza0JvcmRlckNvbG9yID0gdGhpcy5saW5lQ29sb3I7XG4gICAgdGhpcy5jcml0QmtnQ29sb3IgPSB0aGlzLmNyaXRpY2FsO1xuICAgIHRoaXMuY3JpdEJvcmRlckNvbG9yID0gZGFya2VuNSh0aGlzLmNyaXRCa2dDb2xvciwgMTApO1xuICAgIHRoaXMudG9kYXlMaW5lQ29sb3IgPSB0aGlzLmNyaXRCa2dDb2xvcjtcbiAgICB0aGlzLmFyY2hFZGdlQ29sb3IgPSB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLmFyY2hFZGdlQXJyb3dDb2xvciA9IHRoaXMubGluZUNvbG9yO1xuICAgIHRoaXMudHJhbnNpdGlvbkNvbG9yID0gdGhpcy50cmFuc2l0aW9uQ29sb3IgfHwgXCIjMDAwXCI7XG4gICAgdGhpcy50cmFuc2l0aW9uTGFiZWxDb2xvciA9IHRoaXMudHJhbnNpdGlvbkxhYmVsQ29sb3IgfHwgdGhpcy50ZXh0Q29sb3I7XG4gICAgdGhpcy5zdGF0ZUxhYmVsQ29sb3IgPSB0aGlzLnN0YXRlTGFiZWxDb2xvciB8fCB0aGlzLnN0YXRlQmtnIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcjtcbiAgICB0aGlzLnN0YXRlQmtnID0gdGhpcy5zdGF0ZUJrZyB8fCB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5sYWJlbEJhY2tncm91bmRDb2xvciA9IHRoaXMubGFiZWxCYWNrZ3JvdW5kQ29sb3IgfHwgdGhpcy5zdGF0ZUJrZztcbiAgICB0aGlzLmNvbXBvc2l0ZUJhY2tncm91bmQgPSB0aGlzLmNvbXBvc2l0ZUJhY2tncm91bmQgfHwgdGhpcy5iYWNrZ3JvdW5kIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmFsdEJhY2tncm91bmQgPSB0aGlzLmFsdEJhY2tncm91bmQgfHwgXCIjZjRmNGY0XCI7XG4gICAgdGhpcy5jb21wb3NpdGVUaXRsZUJhY2tncm91bmQgPSB0aGlzLmNvbXBvc2l0ZVRpdGxlQmFja2dyb3VuZCB8fCB0aGlzLm1haW5Ca2c7XG4gICAgdGhpcy5zdGF0ZUJvcmRlciA9IHRoaXMuc3RhdGVCb3JkZXIgfHwgXCIjMDAwXCI7XG4gICAgdGhpcy5pbm5lckVuZEJhY2tncm91bmQgPSB0aGlzLnByaW1hcnlCb3JkZXJDb2xvcjtcbiAgICB0aGlzLnNwZWNpYWxTdGF0ZUNvbG9yID0gXCIjMjIyXCI7XG4gICAgdGhpcy5lcnJvckJrZ0NvbG9yID0gdGhpcy5lcnJvckJrZ0NvbG9yIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmVycm9yVGV4dENvbG9yID0gdGhpcy5lcnJvclRleHRDb2xvciB8fCB0aGlzLnRlcnRpYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuY2xhc3NUZXh0ID0gdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMuZmlsbFR5cGUwID0gdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5maWxsVHlwZTEgPSB0aGlzLnNlY29uZGFyeUNvbG9yO1xuICAgIHRoaXMuZmlsbFR5cGUyID0gYWRqdXN0Nih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlMyA9IGFkanVzdDYodGhpcy5zZWNvbmRhcnlDb2xvciwgeyBoOiA2NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlNCA9IGFkanVzdDYodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTY0IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU1ID0gYWRqdXN0Nih0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IC02NCB9KTtcbiAgICB0aGlzLmZpbGxUeXBlNiA9IGFkanVzdDYodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogMTI4IH0pO1xuICAgIHRoaXMuZmlsbFR5cGU3ID0gYWRqdXN0Nih0aGlzLnNlY29uZGFyeUNvbG9yLCB7IGg6IDEyOCB9KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuVEhFTUVfQ09MT1JfTElNSVQ7IGkrKykge1xuICAgICAgdGhpc1tcInBpZVwiICsgaV0gPSB0aGlzW1wiY1NjYWxlXCIgKyBpXTtcbiAgICB9XG4gICAgdGhpcy5waWUxMiA9IHRoaXMucGllMDtcbiAgICB0aGlzLnBpZVRpdGxlVGV4dFNpemUgPSB0aGlzLnBpZVRpdGxlVGV4dFNpemUgfHwgXCIyNXB4XCI7XG4gICAgdGhpcy5waWVUaXRsZVRleHRDb2xvciA9IHRoaXMucGllVGl0bGVUZXh0Q29sb3IgfHwgdGhpcy50YXNrVGV4dERhcmtDb2xvcjtcbiAgICB0aGlzLnBpZVNlY3Rpb25UZXh0U2l6ZSA9IHRoaXMucGllU2VjdGlvblRleHRTaXplIHx8IFwiMTdweFwiO1xuICAgIHRoaXMucGllU2VjdGlvblRleHRDb2xvciA9IHRoaXMucGllU2VjdGlvblRleHRDb2xvciB8fCB0aGlzLnRleHRDb2xvcjtcbiAgICB0aGlzLnBpZUxlZ2VuZFRleHRTaXplID0gdGhpcy5waWVMZWdlbmRUZXh0U2l6ZSB8fCBcIjE3cHhcIjtcbiAgICB0aGlzLnBpZUxlZ2VuZFRleHRDb2xvciA9IHRoaXMucGllTGVnZW5kVGV4dENvbG9yIHx8IHRoaXMudGFza1RleHREYXJrQ29sb3I7XG4gICAgdGhpcy5waWVTdHJva2VDb2xvciA9IHRoaXMucGllU3Ryb2tlQ29sb3IgfHwgXCJibGFja1wiO1xuICAgIHRoaXMucGllU3Ryb2tlV2lkdGggPSB0aGlzLnBpZVN0cm9rZVdpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5waWVPdXRlclN0cm9rZVdpZHRoID0gdGhpcy5waWVPdXRlclN0cm9rZVdpZHRoIHx8IFwiMnB4XCI7XG4gICAgdGhpcy5waWVPdXRlclN0cm9rZUNvbG9yID0gdGhpcy5waWVPdXRlclN0cm9rZUNvbG9yIHx8IFwiYmxhY2tcIjtcbiAgICB0aGlzLnBpZU9wYWNpdHkgPSB0aGlzLnBpZU9wYWNpdHkgfHwgXCIwLjdcIjtcbiAgICB0aGlzLnF1YWRyYW50MUZpbGwgPSB0aGlzLnF1YWRyYW50MUZpbGwgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudDJGaWxsID0gdGhpcy5xdWFkcmFudDJGaWxsIHx8IGFkanVzdDYodGhpcy5wcmltYXJ5Q29sb3IsIHsgcjogNSwgZzogNSwgYjogNSB9KTtcbiAgICB0aGlzLnF1YWRyYW50M0ZpbGwgPSB0aGlzLnF1YWRyYW50M0ZpbGwgfHwgYWRqdXN0Nih0aGlzLnByaW1hcnlDb2xvciwgeyByOiAxMCwgZzogMTAsIGI6IDEwIH0pO1xuICAgIHRoaXMucXVhZHJhbnQ0RmlsbCA9IHRoaXMucXVhZHJhbnQ0RmlsbCB8fCBhZGp1c3Q2KHRoaXMucHJpbWFyeUNvbG9yLCB7IHI6IDE1LCBnOiAxNSwgYjogMTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDFUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQxVGV4dEZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucXVhZHJhbnQyVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50MlRleHRGaWxsIHx8IGFkanVzdDYodGhpcy5wcmltYXJ5VGV4dENvbG9yLCB7IHI6IC01LCBnOiAtNSwgYjogLTUgfSk7XG4gICAgdGhpcy5xdWFkcmFudDNUZXh0RmlsbCA9IHRoaXMucXVhZHJhbnQzVGV4dEZpbGwgfHwgYWRqdXN0Nih0aGlzLnByaW1hcnlUZXh0Q29sb3IsIHsgcjogLTEwLCBnOiAtMTAsIGI6IC0xMCB9KTtcbiAgICB0aGlzLnF1YWRyYW50NFRleHRGaWxsID0gdGhpcy5xdWFkcmFudDRUZXh0RmlsbCB8fCBhZGp1c3Q2KHRoaXMucHJpbWFyeVRleHRDb2xvciwgeyByOiAtMTUsIGc6IC0xNSwgYjogLTE1IH0pO1xuICAgIHRoaXMucXVhZHJhbnRQb2ludEZpbGwgPSB0aGlzLnF1YWRyYW50UG9pbnRGaWxsIHx8IGlzRGFyazUodGhpcy5xdWFkcmFudDFGaWxsKSA/IGxpZ2h0ZW41KHRoaXMucXVhZHJhbnQxRmlsbCkgOiBkYXJrZW41KHRoaXMucXVhZHJhbnQxRmlsbCk7XG4gICAgdGhpcy5xdWFkcmFudFBvaW50VGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50UG9pbnRUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFhBeGlzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50WEF4aXNUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFlBeGlzVGV4dEZpbGwgPSB0aGlzLnF1YWRyYW50WUF4aXNUZXh0RmlsbCB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy5xdWFkcmFudEludGVybmFsQm9yZGVyU3Ryb2tlRmlsbCA9IHRoaXMucXVhZHJhbnRJbnRlcm5hbEJvcmRlclN0cm9rZUZpbGwgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5xdWFkcmFudEV4dGVybmFsQm9yZGVyU3Ryb2tlRmlsbCA9IHRoaXMucXVhZHJhbnRFeHRlcm5hbEJvcmRlclN0cm9rZUZpbGwgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy5xdWFkcmFudFRpdGxlRmlsbCA9IHRoaXMucXVhZHJhbnRUaXRsZUZpbGwgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMueHlDaGFydCA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy54eUNoYXJ0Py5iYWNrZ3JvdW5kQ29sb3IgfHwgdGhpcy5iYWNrZ3JvdW5kLFxuICAgICAgdGl0bGVDb2xvcjogdGhpcy54eUNoYXJ0Py50aXRsZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHhBeGlzVGl0bGVDb2xvcjogdGhpcy54eUNoYXJ0Py54QXhpc1RpdGxlQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeEF4aXNMYWJlbENvbG9yOiB0aGlzLnh5Q2hhcnQ/LnhBeGlzTGFiZWxDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB4QXhpc1RpY2tDb2xvcjogdGhpcy54eUNoYXJ0Py54QXhpc1RpY2tDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB4QXhpc0xpbmVDb2xvcjogdGhpcy54eUNoYXJ0Py54QXhpc0xpbmVDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3IsXG4gICAgICB5QXhpc1RpdGxlQ29sb3I6IHRoaXMueHlDaGFydD8ueUF4aXNUaXRsZUNvbG9yIHx8IHRoaXMucHJpbWFyeVRleHRDb2xvcixcbiAgICAgIHlBeGlzTGFiZWxDb2xvcjogdGhpcy54eUNoYXJ0Py55QXhpc0xhYmVsQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeUF4aXNUaWNrQ29sb3I6IHRoaXMueHlDaGFydD8ueUF4aXNUaWNrQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgeUF4aXNMaW5lQ29sb3I6IHRoaXMueHlDaGFydD8ueUF4aXNMaW5lQ29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yLFxuICAgICAgcGxvdENvbG9yUGFsZXR0ZTogdGhpcy54eUNoYXJ0Py5wbG90Q29sb3JQYWxldHRlIHx8IFwiI0VFRSwjNkJCOEU0LCM4QUNCODgsI0M3QUNENiwjRThEQ0MyLCNGRkIyQTgsI0ZGRjM4MCwjN0U4RDkxLCNGRkQ4QjEsI0ZBRjNFMFwiXG4gICAgfTtcbiAgICB0aGlzLnJhZGFyID0ge1xuICAgICAgYXhpc0NvbG9yOiB0aGlzLnJhZGFyPy5heGlzQ29sb3IgfHwgdGhpcy5saW5lQ29sb3IsXG4gICAgICBheGlzU3Ryb2tlV2lkdGg6IHRoaXMucmFkYXI/LmF4aXNTdHJva2VXaWR0aCB8fCAyLFxuICAgICAgYXhpc0xhYmVsRm9udFNpemU6IHRoaXMucmFkYXI/LmF4aXNMYWJlbEZvbnRTaXplIHx8IDEyLFxuICAgICAgY3VydmVPcGFjaXR5OiB0aGlzLnJhZGFyPy5jdXJ2ZU9wYWNpdHkgfHwgMC41LFxuICAgICAgY3VydmVTdHJva2VXaWR0aDogdGhpcy5yYWRhcj8uY3VydmVTdHJva2VXaWR0aCB8fCAyLFxuICAgICAgZ3JhdGljdWxlQ29sb3I6IHRoaXMucmFkYXI/LmdyYXRpY3VsZUNvbG9yIHx8IFwiI0RFREVERVwiLFxuICAgICAgZ3JhdGljdWxlU3Ryb2tlV2lkdGg6IHRoaXMucmFkYXI/LmdyYXRpY3VsZVN0cm9rZVdpZHRoIHx8IDEsXG4gICAgICBncmF0aWN1bGVPcGFjaXR5OiB0aGlzLnJhZGFyPy5ncmF0aWN1bGVPcGFjaXR5IHx8IDAuMyxcbiAgICAgIGxlZ2VuZEJveFNpemU6IHRoaXMucmFkYXI/LmxlZ2VuZEJveFNpemUgfHwgMTIsXG4gICAgICBsZWdlbmRGb250U2l6ZTogdGhpcy5yYWRhcj8ubGVnZW5kRm9udFNpemUgfHwgMTJcbiAgICB9O1xuICAgIHRoaXMucmVxdWlyZW1lbnRCYWNrZ3JvdW5kID0gdGhpcy5yZXF1aXJlbWVudEJhY2tncm91bmQgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5yZXF1aXJlbWVudEJvcmRlckNvbG9yID0gdGhpcy5yZXF1aXJlbWVudEJvcmRlckNvbG9yIHx8IHRoaXMucHJpbWFyeUJvcmRlckNvbG9yO1xuICAgIHRoaXMucmVxdWlyZW1lbnRCb3JkZXJTaXplID0gdGhpcy5yZXF1aXJlbWVudEJvcmRlclNpemUgfHwgXCIxXCI7XG4gICAgdGhpcy5yZXF1aXJlbWVudFRleHRDb2xvciA9IHRoaXMucmVxdWlyZW1lbnRUZXh0Q29sb3IgfHwgdGhpcy5wcmltYXJ5VGV4dENvbG9yO1xuICAgIHRoaXMucmVsYXRpb25Db2xvciA9IHRoaXMucmVsYXRpb25Db2xvciB8fCB0aGlzLmxpbmVDb2xvcjtcbiAgICB0aGlzLnJlbGF0aW9uTGFiZWxCYWNrZ3JvdW5kID0gdGhpcy5yZWxhdGlvbkxhYmVsQmFja2dyb3VuZCB8fCB0aGlzLmVkZ2VMYWJlbEJhY2tncm91bmQ7XG4gICAgdGhpcy5yZWxhdGlvbkxhYmVsQ29sb3IgPSB0aGlzLnJlbGF0aW9uTGFiZWxDb2xvciB8fCB0aGlzLmFjdG9yVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0MCA9IGRhcmtlbjUodGhpcy5waWUxLCAyNSkgfHwgdGhpcy5wcmltYXJ5Q29sb3I7XG4gICAgdGhpcy5naXQxID0gdGhpcy5waWUyIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5naXQyID0gdGhpcy5waWUzIHx8IHRoaXMudGVydGlhcnlDb2xvcjtcbiAgICB0aGlzLmdpdDMgPSB0aGlzLnBpZTQgfHwgYWRqdXN0Nih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAtMzAgfSk7XG4gICAgdGhpcy5naXQ0ID0gdGhpcy5waWU1IHx8IGFkanVzdDYodGhpcy5wcmltYXJ5Q29sb3IsIHsgaDogLTYwIH0pO1xuICAgIHRoaXMuZ2l0NSA9IHRoaXMucGllNiB8fCBhZGp1c3Q2KHRoaXMucHJpbWFyeUNvbG9yLCB7IGg6IC05MCB9KTtcbiAgICB0aGlzLmdpdDYgPSB0aGlzLnBpZTcgfHwgYWRqdXN0Nih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiA2MCB9KTtcbiAgICB0aGlzLmdpdDcgPSB0aGlzLnBpZTggfHwgYWRqdXN0Nih0aGlzLnByaW1hcnlDb2xvciwgeyBoOiAxMjAgfSk7XG4gICAgdGhpcy5naXRJbnYwID0gdGhpcy5naXRJbnYwIHx8IGludmVydDUodGhpcy5naXQwKTtcbiAgICB0aGlzLmdpdEludjEgPSB0aGlzLmdpdEludjEgfHwgaW52ZXJ0NSh0aGlzLmdpdDEpO1xuICAgIHRoaXMuZ2l0SW52MiA9IHRoaXMuZ2l0SW52MiB8fCBpbnZlcnQ1KHRoaXMuZ2l0Mik7XG4gICAgdGhpcy5naXRJbnYzID0gdGhpcy5naXRJbnYzIHx8IGludmVydDUodGhpcy5naXQzKTtcbiAgICB0aGlzLmdpdEludjQgPSB0aGlzLmdpdEludjQgfHwgaW52ZXJ0NSh0aGlzLmdpdDQpO1xuICAgIHRoaXMuZ2l0SW52NSA9IHRoaXMuZ2l0SW52NSB8fCBpbnZlcnQ1KHRoaXMuZ2l0NSk7XG4gICAgdGhpcy5naXRJbnY2ID0gdGhpcy5naXRJbnY2IHx8IGludmVydDUodGhpcy5naXQ2KTtcbiAgICB0aGlzLmdpdEludjcgPSB0aGlzLmdpdEludjcgfHwgaW52ZXJ0NSh0aGlzLmdpdDcpO1xuICAgIHRoaXMuYnJhbmNoTGFiZWxDb2xvciA9IHRoaXMuYnJhbmNoTGFiZWxDb2xvciB8fCB0aGlzLmxhYmVsVGV4dENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwwID0gdGhpcy5icmFuY2hMYWJlbENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwxID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwyID0gdGhpcy5icmFuY2hMYWJlbENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWwzID0gXCJ3aGl0ZVwiO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw0ID0gdGhpcy5icmFuY2hMYWJlbENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw1ID0gdGhpcy5icmFuY2hMYWJlbENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw2ID0gdGhpcy5icmFuY2hMYWJlbENvbG9yO1xuICAgIHRoaXMuZ2l0QnJhbmNoTGFiZWw3ID0gdGhpcy5icmFuY2hMYWJlbENvbG9yO1xuICAgIHRoaXMudGFnTGFiZWxDb2xvciA9IHRoaXMudGFnTGFiZWxDb2xvciB8fCB0aGlzLnByaW1hcnlUZXh0Q29sb3I7XG4gICAgdGhpcy50YWdMYWJlbEJhY2tncm91bmQgPSB0aGlzLnRhZ0xhYmVsQmFja2dyb3VuZCB8fCB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB0aGlzLnRhZ0xhYmVsQm9yZGVyID0gdGhpcy50YWdCb3JkZXIgfHwgdGhpcy5wcmltYXJ5Qm9yZGVyQ29sb3I7XG4gICAgdGhpcy50YWdMYWJlbEZvbnRTaXplID0gdGhpcy50YWdMYWJlbEZvbnRTaXplIHx8IFwiMTBweFwiO1xuICAgIHRoaXMuY29tbWl0TGFiZWxDb2xvciA9IHRoaXMuY29tbWl0TGFiZWxDb2xvciB8fCB0aGlzLnNlY29uZGFyeVRleHRDb2xvcjtcbiAgICB0aGlzLmNvbW1pdExhYmVsQmFja2dyb3VuZCA9IHRoaXMuY29tbWl0TGFiZWxCYWNrZ3JvdW5kIHx8IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgdGhpcy5jb21taXRMYWJlbEZvbnRTaXplID0gdGhpcy5jb21taXRMYWJlbEZvbnRTaXplIHx8IFwiMTBweFwiO1xuICAgIHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yT2RkID0gdGhpcy5hdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JPZGQgfHwgb2xkQXR0cmlidXRlQmFja2dyb3VuZENvbG9yT2RkO1xuICAgIHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yRXZlbiA9IHRoaXMuYXR0cmlidXRlQmFja2dyb3VuZENvbG9yRXZlbiB8fCBvbGRBdHRyaWJ1dGVCYWNrZ3JvdW5kQ29sb3JFdmVuO1xuICB9XG4gIGNhbGN1bGF0ZShvdmVycmlkZXMpIHtcbiAgICBpZiAodHlwZW9mIG92ZXJyaWRlcyAhPT0gXCJvYmplY3RcIikge1xuICAgICAgdGhpcy51cGRhdGVDb2xvcnMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG92ZXJyaWRlcyk7XG4gICAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICB0aGlzW2tdID0gb3ZlcnJpZGVzW2tdO1xuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlQ29sb3JzKCk7XG4gICAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICB0aGlzW2tdID0gb3ZlcnJpZGVzW2tdO1xuICAgIH0pO1xuICB9XG59O1xudmFyIGdldFRoZW1lVmFyaWFibGVzNSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHVzZXJPdmVycmlkZXMpID0+IHtcbiAgY29uc3QgdGhlbWUgPSBuZXcgVGhlbWU1KCk7XG4gIHRoZW1lLmNhbGN1bGF0ZSh1c2VyT3ZlcnJpZGVzKTtcbiAgcmV0dXJuIHRoZW1lO1xufSwgXCJnZXRUaGVtZVZhcmlhYmxlc1wiKTtcblxuLy8gc3JjL3RoZW1lcy9pbmRleC5qc1xudmFyIHRoZW1lc19kZWZhdWx0ID0ge1xuICBiYXNlOiB7XG4gICAgZ2V0VGhlbWVWYXJpYWJsZXNcbiAgfSxcbiAgZGFyazoge1xuICAgIGdldFRoZW1lVmFyaWFibGVzOiBnZXRUaGVtZVZhcmlhYmxlczJcbiAgfSxcbiAgZGVmYXVsdDoge1xuICAgIGdldFRoZW1lVmFyaWFibGVzOiBnZXRUaGVtZVZhcmlhYmxlczNcbiAgfSxcbiAgZm9yZXN0OiB7XG4gICAgZ2V0VGhlbWVWYXJpYWJsZXM6IGdldFRoZW1lVmFyaWFibGVzNFxuICB9LFxuICBuZXV0cmFsOiB7XG4gICAgZ2V0VGhlbWVWYXJpYWJsZXM6IGdldFRoZW1lVmFyaWFibGVzNVxuICB9XG59O1xuXG4vLyBzcmMvc2NoZW1hcy9jb25maWcuc2NoZW1hLnlhbWw/b25seS1kZWZhdWx0cz10cnVlXG52YXIgY29uZmlnX3NjaGVtYV9kZWZhdWx0ID0ge1xuICBcImZsb3djaGFydFwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwidGl0bGVUb3BNYXJnaW5cIjogMjUsXG4gICAgXCJzdWJHcmFwaFRpdGxlTWFyZ2luXCI6IHtcbiAgICAgIFwidG9wXCI6IDAsXG4gICAgICBcImJvdHRvbVwiOiAwXG4gICAgfSxcbiAgICBcImRpYWdyYW1QYWRkaW5nXCI6IDgsXG4gICAgXCJodG1sTGFiZWxzXCI6IHRydWUsXG4gICAgXCJub2RlU3BhY2luZ1wiOiA1MCxcbiAgICBcInJhbmtTcGFjaW5nXCI6IDUwLFxuICAgIFwiY3VydmVcIjogXCJiYXNpc1wiLFxuICAgIFwicGFkZGluZ1wiOiAxNSxcbiAgICBcImRlZmF1bHRSZW5kZXJlclwiOiBcImRhZ3JlLXdyYXBwZXJcIixcbiAgICBcIndyYXBwaW5nV2lkdGhcIjogMjAwXG4gIH0sXG4gIFwic2VxdWVuY2VcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcImhpZGVVbnVzZWRQYXJ0aWNpcGFudHNcIjogZmFsc2UsXG4gICAgXCJhY3RpdmF0aW9uV2lkdGhcIjogMTAsXG4gICAgXCJkaWFncmFtTWFyZ2luWFwiOiA1MCxcbiAgICBcImRpYWdyYW1NYXJnaW5ZXCI6IDEwLFxuICAgIFwiYWN0b3JNYXJnaW5cIjogNTAsXG4gICAgXCJ3aWR0aFwiOiAxNTAsXG4gICAgXCJoZWlnaHRcIjogNjUsXG4gICAgXCJib3hNYXJnaW5cIjogMTAsXG4gICAgXCJib3hUZXh0TWFyZ2luXCI6IDUsXG4gICAgXCJub3RlTWFyZ2luXCI6IDEwLFxuICAgIFwibWVzc2FnZU1hcmdpblwiOiAzNSxcbiAgICBcIm1lc3NhZ2VBbGlnblwiOiBcImNlbnRlclwiLFxuICAgIFwibWlycm9yQWN0b3JzXCI6IHRydWUsXG4gICAgXCJmb3JjZU1lbnVzXCI6IGZhbHNlLFxuICAgIFwiYm90dG9tTWFyZ2luQWRqXCI6IDEsXG4gICAgXCJyaWdodEFuZ2xlc1wiOiBmYWxzZSxcbiAgICBcInNob3dTZXF1ZW5jZU51bWJlcnNcIjogZmFsc2UsXG4gICAgXCJhY3RvckZvbnRTaXplXCI6IDE0LFxuICAgIFwiYWN0b3JGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImFjdG9yRm9udFdlaWdodFwiOiA0MDAsXG4gICAgXCJub3RlRm9udFNpemVcIjogMTQsXG4gICAgXCJub3RlRm9udEZhbWlseVwiOiAnXCJ0cmVidWNoZXQgbXNcIiwgdmVyZGFuYSwgYXJpYWwsIHNhbnMtc2VyaWYnLFxuICAgIFwibm90ZUZvbnRXZWlnaHRcIjogNDAwLFxuICAgIFwibm90ZUFsaWduXCI6IFwiY2VudGVyXCIsXG4gICAgXCJtZXNzYWdlRm9udFNpemVcIjogMTYsXG4gICAgXCJtZXNzYWdlRm9udEZhbWlseVwiOiAnXCJ0cmVidWNoZXQgbXNcIiwgdmVyZGFuYSwgYXJpYWwsIHNhbnMtc2VyaWYnLFxuICAgIFwibWVzc2FnZUZvbnRXZWlnaHRcIjogNDAwLFxuICAgIFwid3JhcFwiOiBmYWxzZSxcbiAgICBcIndyYXBQYWRkaW5nXCI6IDEwLFxuICAgIFwibGFiZWxCb3hXaWR0aFwiOiA1MCxcbiAgICBcImxhYmVsQm94SGVpZ2h0XCI6IDIwXG4gIH0sXG4gIFwiZ2FudHRcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcInRpdGxlVG9wTWFyZ2luXCI6IDI1LFxuICAgIFwiYmFySGVpZ2h0XCI6IDIwLFxuICAgIFwiYmFyR2FwXCI6IDQsXG4gICAgXCJ0b3BQYWRkaW5nXCI6IDUwLFxuICAgIFwicmlnaHRQYWRkaW5nXCI6IDc1LFxuICAgIFwibGVmdFBhZGRpbmdcIjogNzUsXG4gICAgXCJncmlkTGluZVN0YXJ0UGFkZGluZ1wiOiAzNSxcbiAgICBcImZvbnRTaXplXCI6IDExLFxuICAgIFwic2VjdGlvbkZvbnRTaXplXCI6IDExLFxuICAgIFwibnVtYmVyU2VjdGlvblN0eWxlc1wiOiA0LFxuICAgIFwiYXhpc0Zvcm1hdFwiOiBcIiVZLSVtLSVkXCIsXG4gICAgXCJ0b3BBeGlzXCI6IGZhbHNlLFxuICAgIFwiZGlzcGxheU1vZGVcIjogXCJcIixcbiAgICBcIndlZWtkYXlcIjogXCJzdW5kYXlcIlxuICB9LFxuICBcImpvdXJuZXlcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcImRpYWdyYW1NYXJnaW5YXCI6IDUwLFxuICAgIFwiZGlhZ3JhbU1hcmdpbllcIjogMTAsXG4gICAgXCJsZWZ0TWFyZ2luXCI6IDE1MCxcbiAgICBcIndpZHRoXCI6IDE1MCxcbiAgICBcImhlaWdodFwiOiA1MCxcbiAgICBcImJveE1hcmdpblwiOiAxMCxcbiAgICBcImJveFRleHRNYXJnaW5cIjogNSxcbiAgICBcIm5vdGVNYXJnaW5cIjogMTAsXG4gICAgXCJtZXNzYWdlTWFyZ2luXCI6IDM1LFxuICAgIFwibWVzc2FnZUFsaWduXCI6IFwiY2VudGVyXCIsXG4gICAgXCJib3R0b21NYXJnaW5BZGpcIjogMSxcbiAgICBcInJpZ2h0QW5nbGVzXCI6IGZhbHNlLFxuICAgIFwidGFza0ZvbnRTaXplXCI6IDE0LFxuICAgIFwidGFza0ZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwidGFza01hcmdpblwiOiA1MCxcbiAgICBcImFjdGl2YXRpb25XaWR0aFwiOiAxMCxcbiAgICBcInRleHRQbGFjZW1lbnRcIjogXCJmb1wiLFxuICAgIFwiYWN0b3JDb2xvdXJzXCI6IFtcbiAgICAgIFwiIzhGQkM4RlwiLFxuICAgICAgXCIjN0NGQzAwXCIsXG4gICAgICBcIiMwMEZGRkZcIixcbiAgICAgIFwiIzIwQjJBQVwiLFxuICAgICAgXCIjQjBFMEU2XCIsXG4gICAgICBcIiNGRkZGRTBcIlxuICAgIF0sXG4gICAgXCJzZWN0aW9uRmlsbHNcIjogW1xuICAgICAgXCIjMTkxOTcwXCIsXG4gICAgICBcIiM4QjAwOEJcIixcbiAgICAgIFwiIzRCMDA4MlwiLFxuICAgICAgXCIjMkY0RjRGXCIsXG4gICAgICBcIiM4MDAwMDBcIixcbiAgICAgIFwiIzhCNDUxM1wiLFxuICAgICAgXCIjMDAwMDhCXCJcbiAgICBdLFxuICAgIFwic2VjdGlvbkNvbG91cnNcIjogW1xuICAgICAgXCIjZmZmXCJcbiAgICBdXG4gIH0sXG4gIFwiY2xhc3NcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcInRpdGxlVG9wTWFyZ2luXCI6IDI1LFxuICAgIFwiYXJyb3dNYXJrZXJBYnNvbHV0ZVwiOiBmYWxzZSxcbiAgICBcImRpdmlkZXJNYXJnaW5cIjogMTAsXG4gICAgXCJwYWRkaW5nXCI6IDUsXG4gICAgXCJ0ZXh0SGVpZ2h0XCI6IDEwLFxuICAgIFwiZGVmYXVsdFJlbmRlcmVyXCI6IFwiZGFncmUtd3JhcHBlclwiLFxuICAgIFwiaHRtbExhYmVsc1wiOiBmYWxzZSxcbiAgICBcImhpZGVFbXB0eU1lbWJlcnNCb3hcIjogZmFsc2VcbiAgfSxcbiAgXCJzdGF0ZVwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwidGl0bGVUb3BNYXJnaW5cIjogMjUsXG4gICAgXCJkaXZpZGVyTWFyZ2luXCI6IDEwLFxuICAgIFwic2l6ZVVuaXRcIjogNSxcbiAgICBcInBhZGRpbmdcIjogOCxcbiAgICBcInRleHRIZWlnaHRcIjogMTAsXG4gICAgXCJ0aXRsZVNoaWZ0XCI6IC0xNSxcbiAgICBcIm5vdGVNYXJnaW5cIjogMTAsXG4gICAgXCJmb3JrV2lkdGhcIjogNzAsXG4gICAgXCJmb3JrSGVpZ2h0XCI6IDcsXG4gICAgXCJtaW5pUGFkZGluZ1wiOiAyLFxuICAgIFwiZm9udFNpemVGYWN0b3JcIjogNS4wMixcbiAgICBcImZvbnRTaXplXCI6IDI0LFxuICAgIFwibGFiZWxIZWlnaHRcIjogMTYsXG4gICAgXCJlZGdlTGVuZ3RoRmFjdG9yXCI6IFwiMjBcIixcbiAgICBcImNvbXBvc2l0VGl0bGVTaXplXCI6IDM1LFxuICAgIFwicmFkaXVzXCI6IDUsXG4gICAgXCJkZWZhdWx0UmVuZGVyZXJcIjogXCJkYWdyZS13cmFwcGVyXCJcbiAgfSxcbiAgXCJlclwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwidGl0bGVUb3BNYXJnaW5cIjogMjUsXG4gICAgXCJkaWFncmFtUGFkZGluZ1wiOiAyMCxcbiAgICBcImxheW91dERpcmVjdGlvblwiOiBcIlRCXCIsXG4gICAgXCJtaW5FbnRpdHlXaWR0aFwiOiAxMDAsXG4gICAgXCJtaW5FbnRpdHlIZWlnaHRcIjogNzUsXG4gICAgXCJlbnRpdHlQYWRkaW5nXCI6IDE1LFxuICAgIFwibm9kZVNwYWNpbmdcIjogMTQwLFxuICAgIFwicmFua1NwYWNpbmdcIjogODAsXG4gICAgXCJzdHJva2VcIjogXCJncmF5XCIsXG4gICAgXCJmaWxsXCI6IFwiaG9uZXlkZXdcIixcbiAgICBcImZvbnRTaXplXCI6IDEyXG4gIH0sXG4gIFwicGllXCI6IHtcbiAgICBcInVzZU1heFdpZHRoXCI6IHRydWUsXG4gICAgXCJ0ZXh0UG9zaXRpb25cIjogMC43NVxuICB9LFxuICBcInF1YWRyYW50Q2hhcnRcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcImNoYXJ0V2lkdGhcIjogNTAwLFxuICAgIFwiY2hhcnRIZWlnaHRcIjogNTAwLFxuICAgIFwidGl0bGVGb250U2l6ZVwiOiAyMCxcbiAgICBcInRpdGxlUGFkZGluZ1wiOiAxMCxcbiAgICBcInF1YWRyYW50UGFkZGluZ1wiOiA1LFxuICAgIFwieEF4aXNMYWJlbFBhZGRpbmdcIjogNSxcbiAgICBcInlBeGlzTGFiZWxQYWRkaW5nXCI6IDUsXG4gICAgXCJ4QXhpc0xhYmVsRm9udFNpemVcIjogMTYsXG4gICAgXCJ5QXhpc0xhYmVsRm9udFNpemVcIjogMTYsXG4gICAgXCJxdWFkcmFudExhYmVsRm9udFNpemVcIjogMTYsXG4gICAgXCJxdWFkcmFudFRleHRUb3BQYWRkaW5nXCI6IDUsXG4gICAgXCJwb2ludFRleHRQYWRkaW5nXCI6IDUsXG4gICAgXCJwb2ludExhYmVsRm9udFNpemVcIjogMTIsXG4gICAgXCJwb2ludFJhZGl1c1wiOiA1LFxuICAgIFwieEF4aXNQb3NpdGlvblwiOiBcInRvcFwiLFxuICAgIFwieUF4aXNQb3NpdGlvblwiOiBcImxlZnRcIixcbiAgICBcInF1YWRyYW50SW50ZXJuYWxCb3JkZXJTdHJva2VXaWR0aFwiOiAxLFxuICAgIFwicXVhZHJhbnRFeHRlcm5hbEJvcmRlclN0cm9rZVdpZHRoXCI6IDJcbiAgfSxcbiAgXCJ4eUNoYXJ0XCI6IHtcbiAgICBcInVzZU1heFdpZHRoXCI6IHRydWUsXG4gICAgXCJ3aWR0aFwiOiA3MDAsXG4gICAgXCJoZWlnaHRcIjogNTAwLFxuICAgIFwidGl0bGVGb250U2l6ZVwiOiAyMCxcbiAgICBcInRpdGxlUGFkZGluZ1wiOiAxMCxcbiAgICBcInNob3dUaXRsZVwiOiB0cnVlLFxuICAgIFwieEF4aXNcIjoge1xuICAgICAgXCIkcmVmXCI6IFwiIy8kZGVmcy9YWUNoYXJ0QXhpc0NvbmZpZ1wiLFxuICAgICAgXCJzaG93TGFiZWxcIjogdHJ1ZSxcbiAgICAgIFwibGFiZWxGb250U2l6ZVwiOiAxNCxcbiAgICAgIFwibGFiZWxQYWRkaW5nXCI6IDUsXG4gICAgICBcInNob3dUaXRsZVwiOiB0cnVlLFxuICAgICAgXCJ0aXRsZUZvbnRTaXplXCI6IDE2LFxuICAgICAgXCJ0aXRsZVBhZGRpbmdcIjogNSxcbiAgICAgIFwic2hvd1RpY2tcIjogdHJ1ZSxcbiAgICAgIFwidGlja0xlbmd0aFwiOiA1LFxuICAgICAgXCJ0aWNrV2lkdGhcIjogMixcbiAgICAgIFwic2hvd0F4aXNMaW5lXCI6IHRydWUsXG4gICAgICBcImF4aXNMaW5lV2lkdGhcIjogMlxuICAgIH0sXG4gICAgXCJ5QXhpc1wiOiB7XG4gICAgICBcIiRyZWZcIjogXCIjLyRkZWZzL1hZQ2hhcnRBeGlzQ29uZmlnXCIsXG4gICAgICBcInNob3dMYWJlbFwiOiB0cnVlLFxuICAgICAgXCJsYWJlbEZvbnRTaXplXCI6IDE0LFxuICAgICAgXCJsYWJlbFBhZGRpbmdcIjogNSxcbiAgICAgIFwic2hvd1RpdGxlXCI6IHRydWUsXG4gICAgICBcInRpdGxlRm9udFNpemVcIjogMTYsXG4gICAgICBcInRpdGxlUGFkZGluZ1wiOiA1LFxuICAgICAgXCJzaG93VGlja1wiOiB0cnVlLFxuICAgICAgXCJ0aWNrTGVuZ3RoXCI6IDUsXG4gICAgICBcInRpY2tXaWR0aFwiOiAyLFxuICAgICAgXCJzaG93QXhpc0xpbmVcIjogdHJ1ZSxcbiAgICAgIFwiYXhpc0xpbmVXaWR0aFwiOiAyXG4gICAgfSxcbiAgICBcImNoYXJ0T3JpZW50YXRpb25cIjogXCJ2ZXJ0aWNhbFwiLFxuICAgIFwicGxvdFJlc2VydmVkU3BhY2VQZXJjZW50XCI6IDUwXG4gIH0sXG4gIFwicmVxdWlyZW1lbnRcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcInJlY3RfZmlsbFwiOiBcIiNmOWY5ZjlcIixcbiAgICBcInRleHRfY29sb3JcIjogXCIjMzMzXCIsXG4gICAgXCJyZWN0X2JvcmRlcl9zaXplXCI6IFwiMC41cHhcIixcbiAgICBcInJlY3RfYm9yZGVyX2NvbG9yXCI6IFwiI2JiYlwiLFxuICAgIFwicmVjdF9taW5fd2lkdGhcIjogMjAwLFxuICAgIFwicmVjdF9taW5faGVpZ2h0XCI6IDIwMCxcbiAgICBcImZvbnRTaXplXCI6IDE0LFxuICAgIFwicmVjdF9wYWRkaW5nXCI6IDEwLFxuICAgIFwibGluZV9oZWlnaHRcIjogMjBcbiAgfSxcbiAgXCJtaW5kbWFwXCI6IHtcbiAgICBcInVzZU1heFdpZHRoXCI6IHRydWUsXG4gICAgXCJwYWRkaW5nXCI6IDEwLFxuICAgIFwibWF4Tm9kZVdpZHRoXCI6IDIwMFxuICB9LFxuICBcImthbmJhblwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwicGFkZGluZ1wiOiA4LFxuICAgIFwic2VjdGlvbldpZHRoXCI6IDIwMCxcbiAgICBcInRpY2tldEJhc2VVcmxcIjogXCJcIlxuICB9LFxuICBcInRpbWVsaW5lXCI6IHtcbiAgICBcInVzZU1heFdpZHRoXCI6IHRydWUsXG4gICAgXCJkaWFncmFtTWFyZ2luWFwiOiA1MCxcbiAgICBcImRpYWdyYW1NYXJnaW5ZXCI6IDEwLFxuICAgIFwibGVmdE1hcmdpblwiOiAxNTAsXG4gICAgXCJ3aWR0aFwiOiAxNTAsXG4gICAgXCJoZWlnaHRcIjogNTAsXG4gICAgXCJib3hNYXJnaW5cIjogMTAsXG4gICAgXCJib3hUZXh0TWFyZ2luXCI6IDUsXG4gICAgXCJub3RlTWFyZ2luXCI6IDEwLFxuICAgIFwibWVzc2FnZU1hcmdpblwiOiAzNSxcbiAgICBcIm1lc3NhZ2VBbGlnblwiOiBcImNlbnRlclwiLFxuICAgIFwiYm90dG9tTWFyZ2luQWRqXCI6IDEsXG4gICAgXCJyaWdodEFuZ2xlc1wiOiBmYWxzZSxcbiAgICBcInRhc2tGb250U2l6ZVwiOiAxNCxcbiAgICBcInRhc2tGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcInRhc2tNYXJnaW5cIjogNTAsXG4gICAgXCJhY3RpdmF0aW9uV2lkdGhcIjogMTAsXG4gICAgXCJ0ZXh0UGxhY2VtZW50XCI6IFwiZm9cIixcbiAgICBcImFjdG9yQ29sb3Vyc1wiOiBbXG4gICAgICBcIiM4RkJDOEZcIixcbiAgICAgIFwiIzdDRkMwMFwiLFxuICAgICAgXCIjMDBGRkZGXCIsXG4gICAgICBcIiMyMEIyQUFcIixcbiAgICAgIFwiI0IwRTBFNlwiLFxuICAgICAgXCIjRkZGRkUwXCJcbiAgICBdLFxuICAgIFwic2VjdGlvbkZpbGxzXCI6IFtcbiAgICAgIFwiIzE5MTk3MFwiLFxuICAgICAgXCIjOEIwMDhCXCIsXG4gICAgICBcIiM0QjAwODJcIixcbiAgICAgIFwiIzJGNEY0RlwiLFxuICAgICAgXCIjODAwMDAwXCIsXG4gICAgICBcIiM4QjQ1MTNcIixcbiAgICAgIFwiIzAwMDA4QlwiXG4gICAgXSxcbiAgICBcInNlY3Rpb25Db2xvdXJzXCI6IFtcbiAgICAgIFwiI2ZmZlwiXG4gICAgXSxcbiAgICBcImRpc2FibGVNdWx0aWNvbG9yXCI6IGZhbHNlXG4gIH0sXG4gIFwiZ2l0R3JhcGhcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcInRpdGxlVG9wTWFyZ2luXCI6IDI1LFxuICAgIFwiZGlhZ3JhbVBhZGRpbmdcIjogOCxcbiAgICBcIm5vZGVMYWJlbFwiOiB7XG4gICAgICBcIndpZHRoXCI6IDc1LFxuICAgICAgXCJoZWlnaHRcIjogMTAwLFxuICAgICAgXCJ4XCI6IC0yNSxcbiAgICAgIFwieVwiOiAwXG4gICAgfSxcbiAgICBcIm1haW5CcmFuY2hOYW1lXCI6IFwibWFpblwiLFxuICAgIFwibWFpbkJyYW5jaE9yZGVyXCI6IDAsXG4gICAgXCJzaG93Q29tbWl0TGFiZWxcIjogdHJ1ZSxcbiAgICBcInNob3dCcmFuY2hlc1wiOiB0cnVlLFxuICAgIFwicm90YXRlQ29tbWl0TGFiZWxcIjogdHJ1ZSxcbiAgICBcInBhcmFsbGVsQ29tbWl0c1wiOiBmYWxzZSxcbiAgICBcImFycm93TWFya2VyQWJzb2x1dGVcIjogZmFsc2VcbiAgfSxcbiAgXCJjNFwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwiZGlhZ3JhbU1hcmdpblhcIjogNTAsXG4gICAgXCJkaWFncmFtTWFyZ2luWVwiOiAxMCxcbiAgICBcImM0U2hhcGVNYXJnaW5cIjogNTAsXG4gICAgXCJjNFNoYXBlUGFkZGluZ1wiOiAyMCxcbiAgICBcIndpZHRoXCI6IDIxNixcbiAgICBcImhlaWdodFwiOiA2MCxcbiAgICBcImJveE1hcmdpblwiOiAxMCxcbiAgICBcImM0U2hhcGVJblJvd1wiOiA0LFxuICAgIFwibmV4dExpbmVQYWRkaW5nWFwiOiAwLFxuICAgIFwiYzRCb3VuZGFyeUluUm93XCI6IDIsXG4gICAgXCJwZXJzb25Gb250U2l6ZVwiOiAxNCxcbiAgICBcInBlcnNvbkZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwicGVyc29uRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwiZXh0ZXJuYWxfcGVyc29uRm9udFNpemVcIjogMTQsXG4gICAgXCJleHRlcm5hbF9wZXJzb25Gb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImV4dGVybmFsX3BlcnNvbkZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcInN5c3RlbUZvbnRTaXplXCI6IDE0LFxuICAgIFwic3lzdGVtRm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJzeXN0ZW1Gb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJleHRlcm5hbF9zeXN0ZW1Gb250U2l6ZVwiOiAxNCxcbiAgICBcImV4dGVybmFsX3N5c3RlbUZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwiZXh0ZXJuYWxfc3lzdGVtRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwic3lzdGVtX2RiRm9udFNpemVcIjogMTQsXG4gICAgXCJzeXN0ZW1fZGJGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcInN5c3RlbV9kYkZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcImV4dGVybmFsX3N5c3RlbV9kYkZvbnRTaXplXCI6IDE0LFxuICAgIFwiZXh0ZXJuYWxfc3lzdGVtX2RiRm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJleHRlcm5hbF9zeXN0ZW1fZGJGb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJzeXN0ZW1fcXVldWVGb250U2l6ZVwiOiAxNCxcbiAgICBcInN5c3RlbV9xdWV1ZUZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwic3lzdGVtX3F1ZXVlRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwiZXh0ZXJuYWxfc3lzdGVtX3F1ZXVlRm9udFNpemVcIjogMTQsXG4gICAgXCJleHRlcm5hbF9zeXN0ZW1fcXVldWVGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImV4dGVybmFsX3N5c3RlbV9xdWV1ZUZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcImJvdW5kYXJ5Rm9udFNpemVcIjogMTQsXG4gICAgXCJib3VuZGFyeUZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwiYm91bmRhcnlGb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJtZXNzYWdlRm9udFNpemVcIjogMTIsXG4gICAgXCJtZXNzYWdlRm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJtZXNzYWdlRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwiY29udGFpbmVyRm9udFNpemVcIjogMTQsXG4gICAgXCJjb250YWluZXJGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImNvbnRhaW5lckZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcImV4dGVybmFsX2NvbnRhaW5lckZvbnRTaXplXCI6IDE0LFxuICAgIFwiZXh0ZXJuYWxfY29udGFpbmVyRm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJleHRlcm5hbF9jb250YWluZXJGb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJjb250YWluZXJfZGJGb250U2l6ZVwiOiAxNCxcbiAgICBcImNvbnRhaW5lcl9kYkZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwiY29udGFpbmVyX2RiRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwiZXh0ZXJuYWxfY29udGFpbmVyX2RiRm9udFNpemVcIjogMTQsXG4gICAgXCJleHRlcm5hbF9jb250YWluZXJfZGJGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImV4dGVybmFsX2NvbnRhaW5lcl9kYkZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcImNvbnRhaW5lcl9xdWV1ZUZvbnRTaXplXCI6IDE0LFxuICAgIFwiY29udGFpbmVyX3F1ZXVlRm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJjb250YWluZXJfcXVldWVGb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJleHRlcm5hbF9jb250YWluZXJfcXVldWVGb250U2l6ZVwiOiAxNCxcbiAgICBcImV4dGVybmFsX2NvbnRhaW5lcl9xdWV1ZUZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwiZXh0ZXJuYWxfY29udGFpbmVyX3F1ZXVlRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwiY29tcG9uZW50Rm9udFNpemVcIjogMTQsXG4gICAgXCJjb21wb25lbnRGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImNvbXBvbmVudEZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcImV4dGVybmFsX2NvbXBvbmVudEZvbnRTaXplXCI6IDE0LFxuICAgIFwiZXh0ZXJuYWxfY29tcG9uZW50Rm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJleHRlcm5hbF9jb21wb25lbnRGb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJjb21wb25lbnRfZGJGb250U2l6ZVwiOiAxNCxcbiAgICBcImNvbXBvbmVudF9kYkZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwiY29tcG9uZW50X2RiRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwiZXh0ZXJuYWxfY29tcG9uZW50X2RiRm9udFNpemVcIjogMTQsXG4gICAgXCJleHRlcm5hbF9jb21wb25lbnRfZGJGb250RmFtaWx5XCI6ICdcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmJyxcbiAgICBcImV4dGVybmFsX2NvbXBvbmVudF9kYkZvbnRXZWlnaHRcIjogXCJub3JtYWxcIixcbiAgICBcImNvbXBvbmVudF9xdWV1ZUZvbnRTaXplXCI6IDE0LFxuICAgIFwiY29tcG9uZW50X3F1ZXVlRm9udEZhbWlseVwiOiAnXCJPcGVuIFNhbnNcIiwgc2Fucy1zZXJpZicsXG4gICAgXCJjb21wb25lbnRfcXVldWVGb250V2VpZ2h0XCI6IFwibm9ybWFsXCIsXG4gICAgXCJleHRlcm5hbF9jb21wb25lbnRfcXVldWVGb250U2l6ZVwiOiAxNCxcbiAgICBcImV4dGVybmFsX2NvbXBvbmVudF9xdWV1ZUZvbnRGYW1pbHlcIjogJ1wiT3BlbiBTYW5zXCIsIHNhbnMtc2VyaWYnLFxuICAgIFwiZXh0ZXJuYWxfY29tcG9uZW50X3F1ZXVlRm9udFdlaWdodFwiOiBcIm5vcm1hbFwiLFxuICAgIFwid3JhcFwiOiB0cnVlLFxuICAgIFwid3JhcFBhZGRpbmdcIjogMTAsXG4gICAgXCJwZXJzb25fYmdfY29sb3JcIjogXCIjMDg0MjdCXCIsXG4gICAgXCJwZXJzb25fYm9yZGVyX2NvbG9yXCI6IFwiIzA3M0I2RlwiLFxuICAgIFwiZXh0ZXJuYWxfcGVyc29uX2JnX2NvbG9yXCI6IFwiIzY4Njg2OFwiLFxuICAgIFwiZXh0ZXJuYWxfcGVyc29uX2JvcmRlcl9jb2xvclwiOiBcIiM4QThBOEFcIixcbiAgICBcInN5c3RlbV9iZ19jb2xvclwiOiBcIiMxMTY4QkRcIixcbiAgICBcInN5c3RlbV9ib3JkZXJfY29sb3JcIjogXCIjM0M3RkMwXCIsXG4gICAgXCJzeXN0ZW1fZGJfYmdfY29sb3JcIjogXCIjMTE2OEJEXCIsXG4gICAgXCJzeXN0ZW1fZGJfYm9yZGVyX2NvbG9yXCI6IFwiIzNDN0ZDMFwiLFxuICAgIFwic3lzdGVtX3F1ZXVlX2JnX2NvbG9yXCI6IFwiIzExNjhCRFwiLFxuICAgIFwic3lzdGVtX3F1ZXVlX2JvcmRlcl9jb2xvclwiOiBcIiMzQzdGQzBcIixcbiAgICBcImV4dGVybmFsX3N5c3RlbV9iZ19jb2xvclwiOiBcIiM5OTk5OTlcIixcbiAgICBcImV4dGVybmFsX3N5c3RlbV9ib3JkZXJfY29sb3JcIjogXCIjOEE4QThBXCIsXG4gICAgXCJleHRlcm5hbF9zeXN0ZW1fZGJfYmdfY29sb3JcIjogXCIjOTk5OTk5XCIsXG4gICAgXCJleHRlcm5hbF9zeXN0ZW1fZGJfYm9yZGVyX2NvbG9yXCI6IFwiIzhBOEE4QVwiLFxuICAgIFwiZXh0ZXJuYWxfc3lzdGVtX3F1ZXVlX2JnX2NvbG9yXCI6IFwiIzk5OTk5OVwiLFxuICAgIFwiZXh0ZXJuYWxfc3lzdGVtX3F1ZXVlX2JvcmRlcl9jb2xvclwiOiBcIiM4QThBOEFcIixcbiAgICBcImNvbnRhaW5lcl9iZ19jb2xvclwiOiBcIiM0MzhERDVcIixcbiAgICBcImNvbnRhaW5lcl9ib3JkZXJfY29sb3JcIjogXCIjM0M3RkMwXCIsXG4gICAgXCJjb250YWluZXJfZGJfYmdfY29sb3JcIjogXCIjNDM4REQ1XCIsXG4gICAgXCJjb250YWluZXJfZGJfYm9yZGVyX2NvbG9yXCI6IFwiIzNDN0ZDMFwiLFxuICAgIFwiY29udGFpbmVyX3F1ZXVlX2JnX2NvbG9yXCI6IFwiIzQzOERENVwiLFxuICAgIFwiY29udGFpbmVyX3F1ZXVlX2JvcmRlcl9jb2xvclwiOiBcIiMzQzdGQzBcIixcbiAgICBcImV4dGVybmFsX2NvbnRhaW5lcl9iZ19jb2xvclwiOiBcIiNCM0IzQjNcIixcbiAgICBcImV4dGVybmFsX2NvbnRhaW5lcl9ib3JkZXJfY29sb3JcIjogXCIjQTZBNkE2XCIsXG4gICAgXCJleHRlcm5hbF9jb250YWluZXJfZGJfYmdfY29sb3JcIjogXCIjQjNCM0IzXCIsXG4gICAgXCJleHRlcm5hbF9jb250YWluZXJfZGJfYm9yZGVyX2NvbG9yXCI6IFwiI0E2QTZBNlwiLFxuICAgIFwiZXh0ZXJuYWxfY29udGFpbmVyX3F1ZXVlX2JnX2NvbG9yXCI6IFwiI0IzQjNCM1wiLFxuICAgIFwiZXh0ZXJuYWxfY29udGFpbmVyX3F1ZXVlX2JvcmRlcl9jb2xvclwiOiBcIiNBNkE2QTZcIixcbiAgICBcImNvbXBvbmVudF9iZ19jb2xvclwiOiBcIiM4NUJCRjBcIixcbiAgICBcImNvbXBvbmVudF9ib3JkZXJfY29sb3JcIjogXCIjNzhBOEQ4XCIsXG4gICAgXCJjb21wb25lbnRfZGJfYmdfY29sb3JcIjogXCIjODVCQkYwXCIsXG4gICAgXCJjb21wb25lbnRfZGJfYm9yZGVyX2NvbG9yXCI6IFwiIzc4QThEOFwiLFxuICAgIFwiY29tcG9uZW50X3F1ZXVlX2JnX2NvbG9yXCI6IFwiIzg1QkJGMFwiLFxuICAgIFwiY29tcG9uZW50X3F1ZXVlX2JvcmRlcl9jb2xvclwiOiBcIiM3OEE4RDhcIixcbiAgICBcImV4dGVybmFsX2NvbXBvbmVudF9iZ19jb2xvclwiOiBcIiNDQ0NDQ0NcIixcbiAgICBcImV4dGVybmFsX2NvbXBvbmVudF9ib3JkZXJfY29sb3JcIjogXCIjQkZCRkJGXCIsXG4gICAgXCJleHRlcm5hbF9jb21wb25lbnRfZGJfYmdfY29sb3JcIjogXCIjQ0NDQ0NDXCIsXG4gICAgXCJleHRlcm5hbF9jb21wb25lbnRfZGJfYm9yZGVyX2NvbG9yXCI6IFwiI0JGQkZCRlwiLFxuICAgIFwiZXh0ZXJuYWxfY29tcG9uZW50X3F1ZXVlX2JnX2NvbG9yXCI6IFwiI0NDQ0NDQ1wiLFxuICAgIFwiZXh0ZXJuYWxfY29tcG9uZW50X3F1ZXVlX2JvcmRlcl9jb2xvclwiOiBcIiNCRkJGQkZcIlxuICB9LFxuICBcInNhbmtleVwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwid2lkdGhcIjogNjAwLFxuICAgIFwiaGVpZ2h0XCI6IDQwMCxcbiAgICBcImxpbmtDb2xvclwiOiBcImdyYWRpZW50XCIsXG4gICAgXCJub2RlQWxpZ25tZW50XCI6IFwianVzdGlmeVwiLFxuICAgIFwic2hvd1ZhbHVlc1wiOiB0cnVlLFxuICAgIFwicHJlZml4XCI6IFwiXCIsXG4gICAgXCJzdWZmaXhcIjogXCJcIlxuICB9LFxuICBcImJsb2NrXCI6IHtcbiAgICBcInVzZU1heFdpZHRoXCI6IHRydWUsXG4gICAgXCJwYWRkaW5nXCI6IDhcbiAgfSxcbiAgXCJwYWNrZXRcIjoge1xuICAgIFwidXNlTWF4V2lkdGhcIjogdHJ1ZSxcbiAgICBcInJvd0hlaWdodFwiOiAzMixcbiAgICBcImJpdFdpZHRoXCI6IDMyLFxuICAgIFwiYml0c1BlclJvd1wiOiAzMixcbiAgICBcInNob3dCaXRzXCI6IHRydWUsXG4gICAgXCJwYWRkaW5nWFwiOiA1LFxuICAgIFwicGFkZGluZ1lcIjogNVxuICB9LFxuICBcImFyY2hpdGVjdHVyZVwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwicGFkZGluZ1wiOiA0MCxcbiAgICBcImljb25TaXplXCI6IDgwLFxuICAgIFwiZm9udFNpemVcIjogMTZcbiAgfSxcbiAgXCJyYWRhclwiOiB7XG4gICAgXCJ1c2VNYXhXaWR0aFwiOiB0cnVlLFxuICAgIFwid2lkdGhcIjogNjAwLFxuICAgIFwiaGVpZ2h0XCI6IDYwMCxcbiAgICBcIm1hcmdpblRvcFwiOiA1MCxcbiAgICBcIm1hcmdpblJpZ2h0XCI6IDUwLFxuICAgIFwibWFyZ2luQm90dG9tXCI6IDUwLFxuICAgIFwibWFyZ2luTGVmdFwiOiA1MCxcbiAgICBcImF4aXNTY2FsZUZhY3RvclwiOiAxLFxuICAgIFwiYXhpc0xhYmVsRmFjdG9yXCI6IDEuMDUsXG4gICAgXCJjdXJ2ZVRlbnNpb25cIjogMC4xN1xuICB9LFxuICBcInRoZW1lXCI6IFwiZGVmYXVsdFwiLFxuICBcImxvb2tcIjogXCJjbGFzc2ljXCIsXG4gIFwiaGFuZERyYXduU2VlZFwiOiAwLFxuICBcImxheW91dFwiOiBcImRhZ3JlXCIsXG4gIFwibWF4VGV4dFNpemVcIjogNWU0LFxuICBcIm1heEVkZ2VzXCI6IDUwMCxcbiAgXCJkYXJrTW9kZVwiOiBmYWxzZSxcbiAgXCJmb250RmFtaWx5XCI6ICdcInRyZWJ1Y2hldCBtc1wiLCB2ZXJkYW5hLCBhcmlhbCwgc2Fucy1zZXJpZjsnLFxuICBcImxvZ0xldmVsXCI6IDUsXG4gIFwic2VjdXJpdHlMZXZlbFwiOiBcInN0cmljdFwiLFxuICBcInN0YXJ0T25Mb2FkXCI6IHRydWUsXG4gIFwiYXJyb3dNYXJrZXJBYnNvbHV0ZVwiOiBmYWxzZSxcbiAgXCJzZWN1cmVcIjogW1xuICAgIFwic2VjdXJlXCIsXG4gICAgXCJzZWN1cml0eUxldmVsXCIsXG4gICAgXCJzdGFydE9uTG9hZFwiLFxuICAgIFwibWF4VGV4dFNpemVcIixcbiAgICBcInN1cHByZXNzRXJyb3JSZW5kZXJpbmdcIixcbiAgICBcIm1heEVkZ2VzXCJcbiAgXSxcbiAgXCJsZWdhY3lNYXRoTUxcIjogZmFsc2UsXG4gIFwiZm9yY2VMZWdhY3lNYXRoTUxcIjogZmFsc2UsXG4gIFwiZGV0ZXJtaW5pc3RpY0lkc1wiOiBmYWxzZSxcbiAgXCJmb250U2l6ZVwiOiAxNixcbiAgXCJtYXJrZG93bkF1dG9XcmFwXCI6IHRydWUsXG4gIFwic3VwcHJlc3NFcnJvclJlbmRlcmluZ1wiOiBmYWxzZVxufTtcblxuLy8gc3JjL2RlZmF1bHRDb25maWcudHNcbnZhciBjb25maWcgPSB7XG4gIC4uLmNvbmZpZ19zY2hlbWFfZGVmYXVsdCxcbiAgLy8gU2V0LCBldmVuIHRob3VnaCB0aGV5J3JlIGB1bmRlZmluZWRgIHNvIHRoYXQgYGNvbmZpZ0tleXNgIGZpbmRzIHRoZXNlIGtleXNcbiAgLy8gVE9ETzogU2hvdWxkIHdlIHJlcGxhY2UgdGhlc2Ugd2l0aCBgbnVsbGAgc28gdGhhdCB0aGV5IGNhbiBnbyBpbiB0aGUgSlNPTiBTY2hlbWE/XG4gIGRldGVybWluaXN0aWNJRFNlZWQ6IHZvaWQgMCxcbiAgZWxrOiB7XG4gICAgLy8gbWVyZ2VFZGdlcyBpcyBuZWVkZWQgaGVyZSB0byBiZSBjb25zaWRlcmVkXG4gICAgbWVyZ2VFZGdlczogZmFsc2UsXG4gICAgbm9kZVBsYWNlbWVudFN0cmF0ZWd5OiBcIkJSQU5ERVNfS09FUEZcIlxuICB9LFxuICB0aGVtZUNTUzogdm9pZCAwLFxuICAvLyBhZGQgbm9uLUpTT04gZGVmYXVsdCBjb25maWcgdmFsdWVzXG4gIHRoZW1lVmFyaWFibGVzOiB0aGVtZXNfZGVmYXVsdC5kZWZhdWx0LmdldFRoZW1lVmFyaWFibGVzKCksXG4gIHNlcXVlbmNlOiB7XG4gICAgLi4uY29uZmlnX3NjaGVtYV9kZWZhdWx0LnNlcXVlbmNlLFxuICAgIG1lc3NhZ2VGb250OiAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZm9udEZhbWlseTogdGhpcy5tZXNzYWdlRm9udEZhbWlseSxcbiAgICAgICAgZm9udFNpemU6IHRoaXMubWVzc2FnZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLm1lc3NhZ2VGb250V2VpZ2h0XG4gICAgICB9O1xuICAgIH0sIFwibWVzc2FnZUZvbnRcIiksXG4gICAgbm90ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLm5vdGVGb250RmFtaWx5LFxuICAgICAgICBmb250U2l6ZTogdGhpcy5ub3RlRm9udFNpemUsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRoaXMubm90ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJub3RlRm9udFwiKSxcbiAgICBhY3RvckZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmFjdG9yRm9udEZhbWlseSxcbiAgICAgICAgZm9udFNpemU6IHRoaXMuYWN0b3JGb250U2l6ZSxcbiAgICAgICAgZm9udFdlaWdodDogdGhpcy5hY3RvckZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJhY3RvckZvbnRcIilcbiAgfSxcbiAgY2xhc3M6IHtcbiAgICBoaWRlRW1wdHlNZW1iZXJzQm94OiBmYWxzZVxuICB9LFxuICBnYW50dDoge1xuICAgIC4uLmNvbmZpZ19zY2hlbWFfZGVmYXVsdC5nYW50dCxcbiAgICB0aWNrSW50ZXJ2YWw6IHZvaWQgMCxcbiAgICB1c2VXaWR0aDogdm9pZCAwXG4gICAgLy8gY2FuIHByb2JhYmx5IGJlIHJlbW92ZWQgc2luY2UgYGNvbmZpZ0tleXNgIGFscmVhZHkgaW5jbHVkZXMgdGhpc1xuICB9LFxuICBjNDoge1xuICAgIC4uLmNvbmZpZ19zY2hlbWFfZGVmYXVsdC5jNCxcbiAgICB1c2VXaWR0aDogdm9pZCAwLFxuICAgIHBlcnNvbkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLnBlcnNvbkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLnBlcnNvbkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLnBlcnNvbkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJwZXJzb25Gb250XCIpLFxuICAgIGV4dGVybmFsX3BlcnNvbkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX3BlcnNvbkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX3BlcnNvbkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX3BlcnNvbkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9wZXJzb25Gb250XCIpLFxuICAgIHN5c3RlbUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLnN5c3RlbUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLnN5c3RlbUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLnN5c3RlbUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJzeXN0ZW1Gb250XCIpLFxuICAgIGV4dGVybmFsX3N5c3RlbUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX3N5c3RlbUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX3N5c3RlbUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX3N5c3RlbUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9zeXN0ZW1Gb250XCIpLFxuICAgIHN5c3RlbV9kYkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLnN5c3RlbV9kYkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLnN5c3RlbV9kYkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLnN5c3RlbV9kYkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJzeXN0ZW1fZGJGb250XCIpLFxuICAgIGV4dGVybmFsX3N5c3RlbV9kYkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX3N5c3RlbV9kYkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX3N5c3RlbV9kYkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX3N5c3RlbV9kYkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9zeXN0ZW1fZGJGb250XCIpLFxuICAgIHN5c3RlbV9xdWV1ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLnN5c3RlbV9xdWV1ZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLnN5c3RlbV9xdWV1ZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLnN5c3RlbV9xdWV1ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJzeXN0ZW1fcXVldWVGb250XCIpLFxuICAgIGV4dGVybmFsX3N5c3RlbV9xdWV1ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX3N5c3RlbV9xdWV1ZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX3N5c3RlbV9xdWV1ZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX3N5c3RlbV9xdWV1ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9zeXN0ZW1fcXVldWVGb250XCIpLFxuICAgIGNvbnRhaW5lckZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRhaW5lckZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmNvbnRhaW5lckZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmNvbnRhaW5lckZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJjb250YWluZXJGb250XCIpLFxuICAgIGV4dGVybmFsX2NvbnRhaW5lckZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lckZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lckZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lckZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9jb250YWluZXJGb250XCIpLFxuICAgIGNvbnRhaW5lcl9kYkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRhaW5lcl9kYkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmNvbnRhaW5lcl9kYkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmNvbnRhaW5lcl9kYkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJjb250YWluZXJfZGJGb250XCIpLFxuICAgIGV4dGVybmFsX2NvbnRhaW5lcl9kYkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lcl9kYkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lcl9kYkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lcl9kYkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9jb250YWluZXJfZGJGb250XCIpLFxuICAgIGNvbnRhaW5lcl9xdWV1ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRhaW5lcl9xdWV1ZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmNvbnRhaW5lcl9xdWV1ZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmNvbnRhaW5lcl9xdWV1ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJjb250YWluZXJfcXVldWVGb250XCIpLFxuICAgIGV4dGVybmFsX2NvbnRhaW5lcl9xdWV1ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lcl9xdWV1ZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lcl9xdWV1ZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX2NvbnRhaW5lcl9xdWV1ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9jb250YWluZXJfcXVldWVGb250XCIpLFxuICAgIGNvbXBvbmVudEZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbXBvbmVudEZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmNvbXBvbmVudEZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmNvbXBvbmVudEZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJjb21wb25lbnRGb250XCIpLFxuICAgIGV4dGVybmFsX2NvbXBvbmVudEZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudEZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudEZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudEZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9jb21wb25lbnRGb250XCIpLFxuICAgIGNvbXBvbmVudF9kYkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbXBvbmVudF9kYkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmNvbXBvbmVudF9kYkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmNvbXBvbmVudF9kYkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJjb21wb25lbnRfZGJGb250XCIpLFxuICAgIGV4dGVybmFsX2NvbXBvbmVudF9kYkZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudF9kYkZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudF9kYkZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudF9kYkZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9jb21wb25lbnRfZGJGb250XCIpLFxuICAgIGNvbXBvbmVudF9xdWV1ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbXBvbmVudF9xdWV1ZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmNvbXBvbmVudF9xdWV1ZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmNvbXBvbmVudF9xdWV1ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJjb21wb25lbnRfcXVldWVGb250XCIpLFxuICAgIGV4dGVybmFsX2NvbXBvbmVudF9xdWV1ZUZvbnQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudF9xdWV1ZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudF9xdWV1ZUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmV4dGVybmFsX2NvbXBvbmVudF9xdWV1ZUZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgfSwgXCJleHRlcm5hbF9jb21wb25lbnRfcXVldWVGb250XCIpLFxuICAgIGJvdW5kYXJ5Rm9udDogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IHRoaXMuYm91bmRhcnlGb250RmFtaWx5LFxuICAgICAgICBmb250U2l6ZTogdGhpcy5ib3VuZGFyeUZvbnRTaXplLFxuICAgICAgICBmb250V2VpZ2h0OiB0aGlzLmJvdW5kYXJ5Rm9udFdlaWdodFxuICAgICAgfTtcbiAgICB9LCBcImJvdW5kYXJ5Rm9udFwiKSxcbiAgICBtZXNzYWdlRm9udDogLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvbnRGYW1pbHk6IHRoaXMubWVzc2FnZUZvbnRGYW1pbHksXG4gICAgICAgIGZvbnRTaXplOiB0aGlzLm1lc3NhZ2VGb250U2l6ZSxcbiAgICAgICAgZm9udFdlaWdodDogdGhpcy5tZXNzYWdlRm9udFdlaWdodFxuICAgICAgfTtcbiAgICB9LCBcIm1lc3NhZ2VGb250XCIpXG4gIH0sXG4gIHBpZToge1xuICAgIC4uLmNvbmZpZ19zY2hlbWFfZGVmYXVsdC5waWUsXG4gICAgdXNlV2lkdGg6IDk4NFxuICB9LFxuICB4eUNoYXJ0OiB7XG4gICAgLi4uY29uZmlnX3NjaGVtYV9kZWZhdWx0Lnh5Q2hhcnQsXG4gICAgdXNlV2lkdGg6IHZvaWQgMFxuICB9LFxuICByZXF1aXJlbWVudDoge1xuICAgIC4uLmNvbmZpZ19zY2hlbWFfZGVmYXVsdC5yZXF1aXJlbWVudCxcbiAgICB1c2VXaWR0aDogdm9pZCAwXG4gIH0sXG4gIHBhY2tldDoge1xuICAgIC4uLmNvbmZpZ19zY2hlbWFfZGVmYXVsdC5wYWNrZXRcbiAgfSxcbiAgcmFkYXI6IHtcbiAgICAuLi5jb25maWdfc2NoZW1hX2RlZmF1bHQucmFkYXJcbiAgfVxufTtcbnZhciBrZXlpZnkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChvYmosIHByZWZpeCA9IFwiXCIpID0+IE9iamVjdC5rZXlzKG9iaikucmVkdWNlKChyZXMsIGVsKSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9ialtlbF0pKSB7XG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW2VsXSA9PT0gXCJvYmplY3RcIiAmJiBvYmpbZWxdICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIFsuLi5yZXMsIHByZWZpeCArIGVsLCAuLi5rZXlpZnkob2JqW2VsXSwgXCJcIildO1xuICB9XG4gIHJldHVybiBbLi4ucmVzLCBwcmVmaXggKyBlbF07XG59LCBbXSksIFwia2V5aWZ5XCIpO1xudmFyIGNvbmZpZ0tleXMgPSBuZXcgU2V0KGtleWlmeShjb25maWcsIFwiXCIpKTtcbnZhciBkZWZhdWx0Q29uZmlnX2RlZmF1bHQgPSBjb25maWc7XG5cbi8vIHNyYy91dGlscy9zYW5pdGl6ZURpcmVjdGl2ZS50c1xudmFyIHNhbml0aXplRGlyZWN0aXZlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYXJncykgPT4ge1xuICBsb2cuZGVidWcoXCJzYW5pdGl6ZURpcmVjdGl2ZSBjYWxsZWQgd2l0aFwiLCBhcmdzKTtcbiAgaWYgKHR5cGVvZiBhcmdzICE9PSBcIm9iamVjdFwiIHx8IGFyZ3MgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgIGFyZ3MuZm9yRWFjaCgoYXJnKSA9PiBzYW5pdGl6ZURpcmVjdGl2ZShhcmcpKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoYXJncykpIHtcbiAgICBsb2cuZGVidWcoXCJDaGVja2luZyBrZXlcIiwga2V5KTtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJfX1wiKSB8fCBrZXkuaW5jbHVkZXMoXCJwcm90b1wiKSB8fCBrZXkuaW5jbHVkZXMoXCJjb25zdHJcIikgfHwgIWNvbmZpZ0tleXMuaGFzKGtleSkgfHwgYXJnc1trZXldID09IG51bGwpIHtcbiAgICAgIGxvZy5kZWJ1ZyhcInNhbml0aXplIGRlbGV0aW5nIGtleTogXCIsIGtleSk7XG4gICAgICBkZWxldGUgYXJnc1trZXldO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnc1trZXldID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBsb2cuZGVidWcoXCJzYW5pdGl6aW5nIG9iamVjdFwiLCBrZXkpO1xuICAgICAgc2FuaXRpemVEaXJlY3RpdmUoYXJnc1trZXldKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBjc3NNYXRjaGVycyA9IFtcInRoZW1lQ1NTXCIsIFwiZm9udEZhbWlseVwiLCBcImFsdEZvbnRGYW1pbHlcIl07XG4gICAgZm9yIChjb25zdCBjc3NLZXkgb2YgY3NzTWF0Y2hlcnMpIHtcbiAgICAgIGlmIChrZXkuaW5jbHVkZXMoY3NzS2V5KSkge1xuICAgICAgICBsb2cuZGVidWcoXCJzYW5pdGl6aW5nIGNzcyBvcHRpb25cIiwga2V5KTtcbiAgICAgICAgYXJnc1trZXldID0gc2FuaXRpemVDc3MoYXJnc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGFyZ3MudGhlbWVWYXJpYWJsZXMpIHtcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMoYXJncy50aGVtZVZhcmlhYmxlcykpIHtcbiAgICAgIGNvbnN0IHZhbCA9IGFyZ3MudGhlbWVWYXJpYWJsZXNba107XG4gICAgICBpZiAodmFsPy5tYXRjaCAmJiAhdmFsLm1hdGNoKC9eW1xcZCBcIiMlKCksLjtBLVphLXpdKyQvKSkge1xuICAgICAgICBhcmdzLnRoZW1lVmFyaWFibGVzW2tdID0gXCJcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nLmRlYnVnKFwiQWZ0ZXIgc2FuaXRpemF0aW9uXCIsIGFyZ3MpO1xufSwgXCJzYW5pdGl6ZURpcmVjdGl2ZVwiKTtcbnZhciBzYW5pdGl6ZUNzcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHN0cikgPT4ge1xuICBsZXQgc3RhcnRDbnQgPSAwO1xuICBsZXQgZW5kQ250ID0gMDtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIHN0cikge1xuICAgIGlmIChzdGFydENudCA8IGVuZENudCkge1xuICAgICAgcmV0dXJuIFwieyAvKiBFUlJPUjogVW5iYWxhbmNlZCBDU1MgKi8gfVwiO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudCA9PT0gXCJ7XCIpIHtcbiAgICAgIHN0YXJ0Q250Kys7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSBcIn1cIikge1xuICAgICAgZW5kQ250Kys7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydENudCAhPT0gZW5kQ250KSB7XG4gICAgcmV0dXJuIFwieyAvKiBFUlJPUjogVW5iYWxhbmNlZCBDU1MgKi8gfVwiO1xuICB9XG4gIHJldHVybiBzdHI7XG59LCBcInNhbml0aXplQ3NzXCIpO1xuXG4vLyBzcmMvY29uZmlnLnRzXG52YXIgZGVmYXVsdENvbmZpZyA9IE9iamVjdC5mcmVlemUoZGVmYXVsdENvbmZpZ19kZWZhdWx0KTtcbnZhciBzaXRlQ29uZmlnID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoe30sIGRlZmF1bHRDb25maWcpO1xudmFyIGNvbmZpZ0Zyb21Jbml0aWFsaXplO1xudmFyIGRpcmVjdGl2ZXMgPSBbXTtcbnZhciBjdXJyZW50Q29uZmlnID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoe30sIGRlZmF1bHRDb25maWcpO1xudmFyIHVwZGF0ZUN1cnJlbnRDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzaXRlQ2ZnLCBfZGlyZWN0aXZlcykgPT4ge1xuICBsZXQgY2ZnID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoe30sIHNpdGVDZmcpO1xuICBsZXQgc3VtT2ZEaXJlY3RpdmVzID0ge307XG4gIGZvciAoY29uc3QgZCBvZiBfZGlyZWN0aXZlcykge1xuICAgIHNhbml0aXplKGQpO1xuICAgIHN1bU9mRGlyZWN0aXZlcyA9IGFzc2lnbldpdGhEZXB0aF9kZWZhdWx0KHN1bU9mRGlyZWN0aXZlcywgZCk7XG4gIH1cbiAgY2ZnID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoY2ZnLCBzdW1PZkRpcmVjdGl2ZXMpO1xuICBpZiAoc3VtT2ZEaXJlY3RpdmVzLnRoZW1lICYmIHN1bU9mRGlyZWN0aXZlcy50aGVtZSBpbiB0aGVtZXNfZGVmYXVsdCkge1xuICAgIGNvbnN0IHRtcENvbmZpZ0Zyb21Jbml0aWFsaXplID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoe30sIGNvbmZpZ0Zyb21Jbml0aWFsaXplKTtcbiAgICBjb25zdCB0aGVtZVZhcmlhYmxlcyA9IGFzc2lnbldpdGhEZXB0aF9kZWZhdWx0KFxuICAgICAgdG1wQ29uZmlnRnJvbUluaXRpYWxpemUudGhlbWVWYXJpYWJsZXMgfHwge30sXG4gICAgICBzdW1PZkRpcmVjdGl2ZXMudGhlbWVWYXJpYWJsZXNcbiAgICApO1xuICAgIGlmIChjZmcudGhlbWUgJiYgY2ZnLnRoZW1lIGluIHRoZW1lc19kZWZhdWx0KSB7XG4gICAgICBjZmcudGhlbWVWYXJpYWJsZXMgPSB0aGVtZXNfZGVmYXVsdFtjZmcudGhlbWVdLmdldFRoZW1lVmFyaWFibGVzKHRoZW1lVmFyaWFibGVzKTtcbiAgICB9XG4gIH1cbiAgY3VycmVudENvbmZpZyA9IGNmZztcbiAgY2hlY2tDb25maWcoY3VycmVudENvbmZpZyk7XG4gIHJldHVybiBjdXJyZW50Q29uZmlnO1xufSwgXCJ1cGRhdGVDdXJyZW50Q29uZmlnXCIpO1xudmFyIHNldFNpdGVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb25mKSA9PiB7XG4gIHNpdGVDb25maWcgPSBhc3NpZ25XaXRoRGVwdGhfZGVmYXVsdCh7fSwgZGVmYXVsdENvbmZpZyk7XG4gIHNpdGVDb25maWcgPSBhc3NpZ25XaXRoRGVwdGhfZGVmYXVsdChzaXRlQ29uZmlnLCBjb25mKTtcbiAgaWYgKGNvbmYudGhlbWUgJiYgdGhlbWVzX2RlZmF1bHRbY29uZi50aGVtZV0pIHtcbiAgICBzaXRlQ29uZmlnLnRoZW1lVmFyaWFibGVzID0gdGhlbWVzX2RlZmF1bHRbY29uZi50aGVtZV0uZ2V0VGhlbWVWYXJpYWJsZXMoY29uZi50aGVtZVZhcmlhYmxlcyk7XG4gIH1cbiAgdXBkYXRlQ3VycmVudENvbmZpZyhzaXRlQ29uZmlnLCBkaXJlY3RpdmVzKTtcbiAgcmV0dXJuIHNpdGVDb25maWc7XG59LCBcInNldFNpdGVDb25maWdcIik7XG52YXIgc2F2ZUNvbmZpZ0Zyb21Jbml0aWFsaXplID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29uZikgPT4ge1xuICBjb25maWdGcm9tSW5pdGlhbGl6ZSA9IGFzc2lnbldpdGhEZXB0aF9kZWZhdWx0KHt9LCBjb25mKTtcbn0sIFwic2F2ZUNvbmZpZ0Zyb21Jbml0aWFsaXplXCIpO1xudmFyIHVwZGF0ZVNpdGVDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb25mKSA9PiB7XG4gIHNpdGVDb25maWcgPSBhc3NpZ25XaXRoRGVwdGhfZGVmYXVsdChzaXRlQ29uZmlnLCBjb25mKTtcbiAgdXBkYXRlQ3VycmVudENvbmZpZyhzaXRlQ29uZmlnLCBkaXJlY3RpdmVzKTtcbiAgcmV0dXJuIHNpdGVDb25maWc7XG59LCBcInVwZGF0ZVNpdGVDb25maWdcIik7XG52YXIgZ2V0U2l0ZUNvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICByZXR1cm4gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoe30sIHNpdGVDb25maWcpO1xufSwgXCJnZXRTaXRlQ29uZmlnXCIpO1xudmFyIHNldENvbmZpZyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbmYpID0+IHtcbiAgY2hlY2tDb25maWcoY29uZik7XG4gIGFzc2lnbldpdGhEZXB0aF9kZWZhdWx0KGN1cnJlbnRDb25maWcsIGNvbmYpO1xuICByZXR1cm4gZ2V0Q29uZmlnKCk7XG59LCBcInNldENvbmZpZ1wiKTtcbnZhciBnZXRDb25maWcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgcmV0dXJuIGFzc2lnbldpdGhEZXB0aF9kZWZhdWx0KHt9LCBjdXJyZW50Q29uZmlnKTtcbn0sIFwiZ2V0Q29uZmlnXCIpO1xudmFyIHNhbml0aXplID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgob3B0aW9ucykgPT4ge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgW1wic2VjdXJlXCIsIC4uLnNpdGVDb25maWcuc2VjdXJlID8/IFtdXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoT2JqZWN0Lmhhc093bihvcHRpb25zLCBrZXkpKSB7XG4gICAgICBsb2cuZGVidWcoYERlbmllZCBhdHRlbXB0IHRvIG1vZGlmeSBhIHNlY3VyZSBrZXkgJHtrZXl9YCwgb3B0aW9uc1trZXldKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKGtleS5zdGFydHNXaXRoKFwiX19cIikpIHtcbiAgICAgIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zW2tleV0gPT09IFwic3RyaW5nXCIgJiYgKG9wdGlvbnNba2V5XS5pbmNsdWRlcyhcIjxcIikgfHwgb3B0aW9uc1trZXldLmluY2x1ZGVzKFwiPlwiKSB8fCBvcHRpb25zW2tleV0uaW5jbHVkZXMoXCJ1cmwoZGF0YTpcIikpKSB7XG4gICAgICBkZWxldGUgb3B0aW9uc1trZXldO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnNba2V5XSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgc2FuaXRpemUob3B0aW9uc1trZXldKTtcbiAgICB9XG4gIH0pO1xufSwgXCJzYW5pdGl6ZVwiKTtcbnZhciBhZGREaXJlY3RpdmUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChkaXJlY3RpdmUpID0+IHtcbiAgc2FuaXRpemVEaXJlY3RpdmUoZGlyZWN0aXZlKTtcbiAgaWYgKGRpcmVjdGl2ZS5mb250RmFtaWx5ICYmICFkaXJlY3RpdmUudGhlbWVWYXJpYWJsZXM/LmZvbnRGYW1pbHkpIHtcbiAgICBkaXJlY3RpdmUudGhlbWVWYXJpYWJsZXMgPSB7XG4gICAgICAuLi5kaXJlY3RpdmUudGhlbWVWYXJpYWJsZXMsXG4gICAgICBmb250RmFtaWx5OiBkaXJlY3RpdmUuZm9udEZhbWlseVxuICAgIH07XG4gIH1cbiAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gIHVwZGF0ZUN1cnJlbnRDb25maWcoc2l0ZUNvbmZpZywgZGlyZWN0aXZlcyk7XG59LCBcImFkZERpcmVjdGl2ZVwiKTtcbnZhciByZXNldCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbmZpZzIgPSBzaXRlQ29uZmlnKSA9PiB7XG4gIGRpcmVjdGl2ZXMgPSBbXTtcbiAgdXBkYXRlQ3VycmVudENvbmZpZyhjb25maWcyLCBkaXJlY3RpdmVzKTtcbn0sIFwicmVzZXRcIik7XG52YXIgQ29uZmlnV2FybmluZyA9IHtcbiAgTEFaWV9MT0FEX0RFUFJFQ0FURUQ6IFwiVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBsYXp5TG9hZGVkRGlhZ3JhbXMgYW5kIGxvYWRFeHRlcm5hbERpYWdyYW1zQXRTdGFydHVwIGFyZSBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHJlZ2lzdGVyRXh0ZXJuYWxEaWFncmFtcyBpbnN0ZWFkLlwiXG59O1xudmFyIGlzc3VlZFdhcm5pbmdzID0ge307XG52YXIgaXNzdWVXYXJuaW5nID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgod2FybmluZykgPT4ge1xuICBpZiAoaXNzdWVkV2FybmluZ3Nbd2FybmluZ10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9nLndhcm4oQ29uZmlnV2FybmluZ1t3YXJuaW5nXSk7XG4gIGlzc3VlZFdhcm5pbmdzW3dhcm5pbmddID0gdHJ1ZTtcbn0sIFwiaXNzdWVXYXJuaW5nXCIpO1xudmFyIGNoZWNrQ29uZmlnID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29uZmlnMikgPT4ge1xuICBpZiAoIWNvbmZpZzIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGNvbmZpZzIubGF6eUxvYWRlZERpYWdyYW1zIHx8IGNvbmZpZzIubG9hZEV4dGVybmFsRGlhZ3JhbXNBdFN0YXJ0dXApIHtcbiAgICBpc3N1ZVdhcm5pbmcoXCJMQVpZX0xPQURfREVQUkVDQVRFRFwiKTtcbiAgfVxufSwgXCJjaGVja0NvbmZpZ1wiKTtcblxuLy8gc3JjL2RpYWdyYW1zL2NvbW1vbi9jb21tb24udHNcbmltcG9ydCBET01QdXJpZnkgZnJvbSBcImRvbXB1cmlmeVwiO1xudmFyIGxpbmVCcmVha1JlZ2V4ID0gLzxiclxccypcXC8/Pi9naTtcbnZhciBnZXRSb3dzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocykgPT4ge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gW1wiXCJdO1xuICB9XG4gIGNvbnN0IHN0ciA9IGJyZWFrVG9QbGFjZWhvbGRlcihzKS5yZXBsYWNlKC9cXFxcbi9nLCBcIiNiciNcIik7XG4gIHJldHVybiBzdHIuc3BsaXQoXCIjYnIjXCIpO1xufSwgXCJnZXRSb3dzXCIpO1xudmFyIHNldHVwRG9tcHVyaWZ5SG9va3NJZk5vdFNldHVwID0gLyogQF9fUFVSRV9fICovICgoKSA9PiB7XG4gIGxldCBzZXR1cCA9IGZhbHNlO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmICghc2V0dXApIHtcbiAgICAgIHNldHVwRG9tcHVyaWZ5SG9va3MoKTtcbiAgICAgIHNldHVwID0gdHJ1ZTtcbiAgICB9XG4gIH07XG59KSgpO1xuZnVuY3Rpb24gc2V0dXBEb21wdXJpZnlIb29rcygpIHtcbiAgY29uc3QgVEVNUE9SQVJZX0FUVFJJQlVURSA9IFwiZGF0YS10ZW1wLWhyZWYtdGFyZ2V0XCI7XG4gIERPTVB1cmlmeS5hZGRIb29rKFwiYmVmb3JlU2FuaXRpemVBdHRyaWJ1dGVzXCIsIChub2RlKSA9PiB7XG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50ICYmIG5vZGUudGFnTmFtZSA9PT0gXCJBXCIgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoXCJ0YXJnZXRcIikpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFRFTVBPUkFSWV9BVFRSSUJVVEUsIG5vZGUuZ2V0QXR0cmlidXRlKFwidGFyZ2V0XCIpID8/IFwiXCIpO1xuICAgIH1cbiAgfSk7XG4gIERPTVB1cmlmeS5hZGRIb29rKFwiYWZ0ZXJTYW5pdGl6ZUF0dHJpYnV0ZXNcIiwgKG5vZGUpID0+IHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgbm9kZS50YWdOYW1lID09PSBcIkFcIiAmJiBub2RlLmhhc0F0dHJpYnV0ZShURU1QT1JBUllfQVRUUklCVVRFKSkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIiwgbm9kZS5nZXRBdHRyaWJ1dGUoVEVNUE9SQVJZX0FUVFJJQlVURSkgPz8gXCJcIik7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShURU1QT1JBUllfQVRUUklCVVRFKTtcbiAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShcInRhcmdldFwiKSA9PT0gXCJfYmxhbmtcIikge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcInJlbFwiLCBcIm5vb3BlbmVyXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5fX25hbWUoc2V0dXBEb21wdXJpZnlIb29rcywgXCJzZXR1cERvbXB1cmlmeUhvb2tzXCIpO1xudmFyIHJlbW92ZVNjcmlwdCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICBzZXR1cERvbXB1cmlmeUhvb2tzSWZOb3RTZXR1cCgpO1xuICBjb25zdCBzYW5pdGl6ZWRUZXh0ID0gRE9NUHVyaWZ5LnNhbml0aXplKHR4dCk7XG4gIHJldHVybiBzYW5pdGl6ZWRUZXh0O1xufSwgXCJyZW1vdmVTY3JpcHRcIik7XG52YXIgc2FuaXRpemVNb3JlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGV4dCwgY29uZmlnMikgPT4ge1xuICBpZiAoY29uZmlnMi5mbG93Y2hhcnQ/Lmh0bWxMYWJlbHMgIT09IGZhbHNlKSB7XG4gICAgY29uc3QgbGV2ZWwgPSBjb25maWcyLnNlY3VyaXR5TGV2ZWw7XG4gICAgaWYgKGxldmVsID09PSBcImFudGlzY3JpcHRcIiB8fCBsZXZlbCA9PT0gXCJzdHJpY3RcIikge1xuICAgICAgdGV4dCA9IHJlbW92ZVNjcmlwdCh0ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGxldmVsICE9PSBcImxvb3NlXCIpIHtcbiAgICAgIHRleHQgPSBicmVha1RvUGxhY2Vob2xkZXIodGV4dCk7XG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKTtcbiAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz0vZywgXCImZXF1YWxzO1wiKTtcbiAgICAgIHRleHQgPSBwbGFjZWhvbGRlclRvQnJlYWsodGV4dCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0ZXh0O1xufSwgXCJzYW5pdGl6ZU1vcmVcIik7XG52YXIgc2FuaXRpemVUZXh0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGV4dCwgY29uZmlnMikgPT4ge1xuICBpZiAoIXRleHQpIHtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICBpZiAoY29uZmlnMi5kb21wdXJpZnlDb25maWcpIHtcbiAgICB0ZXh0ID0gRE9NUHVyaWZ5LnNhbml0aXplKHNhbml0aXplTW9yZSh0ZXh0LCBjb25maWcyKSwgY29uZmlnMi5kb21wdXJpZnlDb25maWcpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dCA9IERPTVB1cmlmeS5zYW5pdGl6ZShzYW5pdGl6ZU1vcmUodGV4dCwgY29uZmlnMiksIHtcbiAgICAgIEZPUkJJRF9UQUdTOiBbXCJzdHlsZVwiXVxuICAgIH0pLnRvU3RyaW5nKCk7XG4gIH1cbiAgcmV0dXJuIHRleHQ7XG59LCBcInNhbml0aXplVGV4dFwiKTtcbnZhciBzYW5pdGl6ZVRleHRPckFycmF5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoYSwgY29uZmlnMikgPT4ge1xuICBpZiAodHlwZW9mIGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gc2FuaXRpemVUZXh0KGEsIGNvbmZpZzIpO1xuICB9XG4gIHJldHVybiBhLmZsYXQoKS5tYXAoKHgpID0+IHNhbml0aXplVGV4dCh4LCBjb25maWcyKSk7XG59LCBcInNhbml0aXplVGV4dE9yQXJyYXlcIik7XG52YXIgaGFzQnJlYWtzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGV4dCkgPT4ge1xuICByZXR1cm4gbGluZUJyZWFrUmVnZXgudGVzdCh0ZXh0KTtcbn0sIFwiaGFzQnJlYWtzXCIpO1xudmFyIHNwbGl0QnJlYWtzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGV4dCkgPT4ge1xuICByZXR1cm4gdGV4dC5zcGxpdChsaW5lQnJlYWtSZWdleCk7XG59LCBcInNwbGl0QnJlYWtzXCIpO1xudmFyIHBsYWNlaG9sZGVyVG9CcmVhayA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHMpID0+IHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvI2JyIy9nLCBcIjxici8+XCIpO1xufSwgXCJwbGFjZWhvbGRlclRvQnJlYWtcIik7XG52YXIgYnJlYWtUb1BsYWNlaG9sZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocykgPT4ge1xuICByZXR1cm4gcy5yZXBsYWNlKGxpbmVCcmVha1JlZ2V4LCBcIiNiciNcIik7XG59LCBcImJyZWFrVG9QbGFjZWhvbGRlclwiKTtcbnZhciBnZXRVcmwgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh1c2VBYnNvbHV0ZSkgPT4ge1xuICBsZXQgdXJsID0gXCJcIjtcbiAgaWYgKHVzZUFic29sdXRlKSB7XG4gICAgdXJsID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuICAgIHVybCA9IHVybC5yZXBsYWNlQWxsKC9cXCgvZywgXCJcXFxcKFwiKTtcbiAgICB1cmwgPSB1cmwucmVwbGFjZUFsbCgvXFwpL2csIFwiXFxcXClcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn0sIFwiZ2V0VXJsXCIpO1xudmFyIGV2YWx1YXRlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodmFsKSA9PiB2YWwgPT09IGZhbHNlIHx8IFtcImZhbHNlXCIsIFwibnVsbFwiLCBcIjBcIl0uaW5jbHVkZXMoU3RyaW5nKHZhbCkudHJpbSgpLnRvTG93ZXJDYXNlKCkpID8gZmFsc2UgOiB0cnVlLCBcImV2YWx1YXRlXCIpO1xudmFyIGdldE1heCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oLi4udmFsdWVzKSB7XG4gIGNvbnN0IG5ld1ZhbHVlcyA9IHZhbHVlcy5maWx0ZXIoKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICFpc05hTih2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gTWF0aC5tYXgoLi4ubmV3VmFsdWVzKTtcbn0sIFwiZ2V0TWF4XCIpO1xudmFyIGdldE1pbiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oLi4udmFsdWVzKSB7XG4gIGNvbnN0IG5ld1ZhbHVlcyA9IHZhbHVlcy5maWx0ZXIoKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuICFpc05hTih2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gTWF0aC5taW4oLi4ubmV3VmFsdWVzKTtcbn0sIFwiZ2V0TWluXCIpO1xudmFyIHBhcnNlR2VuZXJpY1R5cGVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihpbnB1dCkge1xuICBjb25zdCBpbnB1dFNldHMgPSBpbnB1dC5zcGxpdCgvKCwpLyk7XG4gIGNvbnN0IG91dHB1dCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0U2V0cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCB0aGlzU2V0ID0gaW5wdXRTZXRzW2ldO1xuICAgIGlmICh0aGlzU2V0ID09PSBcIixcIiAmJiBpID4gMCAmJiBpICsgMSA8IGlucHV0U2V0cy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzU2V0ID0gaW5wdXRTZXRzW2kgLSAxXTtcbiAgICAgIGNvbnN0IG5leHRTZXQgPSBpbnB1dFNldHNbaSArIDFdO1xuICAgICAgaWYgKHNob3VsZENvbWJpbmVTZXRzKHByZXZpb3VzU2V0LCBuZXh0U2V0KSkge1xuICAgICAgICB0aGlzU2V0ID0gcHJldmlvdXNTZXQgKyBcIixcIiArIG5leHRTZXQ7XG4gICAgICAgIGkrKztcbiAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBvdXRwdXQucHVzaChwcm9jZXNzU2V0KHRoaXNTZXQpKTtcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oXCJcIik7XG59LCBcInBhcnNlR2VuZXJpY1R5cGVzXCIpO1xudmFyIGNvdW50T2NjdXJyZW5jZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHN0cmluZywgc3Vic3RyaW5nKSA9PiB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBzdHJpbmcuc3BsaXQoc3Vic3RyaW5nKS5sZW5ndGggLSAxKTtcbn0sIFwiY291bnRPY2N1cnJlbmNlXCIpO1xudmFyIHNob3VsZENvbWJpbmVTZXRzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgocHJldmlvdXNTZXQsIG5leHRTZXQpID0+IHtcbiAgY29uc3QgcHJldkNvdW50ID0gY291bnRPY2N1cnJlbmNlKHByZXZpb3VzU2V0LCBcIn5cIik7XG4gIGNvbnN0IG5leHRDb3VudCA9IGNvdW50T2NjdXJyZW5jZShuZXh0U2V0LCBcIn5cIik7XG4gIHJldHVybiBwcmV2Q291bnQgPT09IDEgJiYgbmV4dENvdW50ID09PSAxO1xufSwgXCJzaG91bGRDb21iaW5lU2V0c1wiKTtcbnZhciBwcm9jZXNzU2V0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoaW5wdXQpID0+IHtcbiAgY29uc3QgdGlsZGVDb3VudCA9IGNvdW50T2NjdXJyZW5jZShpbnB1dCwgXCJ+XCIpO1xuICBsZXQgaGFzU3RhcnRpbmdUaWxkZSA9IGZhbHNlO1xuICBpZiAodGlsZGVDb3VudCA8PSAxKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIGlmICh0aWxkZUNvdW50ICUgMiAhPT0gMCAmJiBpbnB1dC5zdGFydHNXaXRoKFwiflwiKSkge1xuICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyaW5nKDEpO1xuICAgIGhhc1N0YXJ0aW5nVGlsZGUgPSB0cnVlO1xuICB9XG4gIGNvbnN0IGNoYXJzID0gWy4uLmlucHV0XTtcbiAgbGV0IGZpcnN0ID0gY2hhcnMuaW5kZXhPZihcIn5cIik7XG4gIGxldCBsYXN0ID0gY2hhcnMubGFzdEluZGV4T2YoXCJ+XCIpO1xuICB3aGlsZSAoZmlyc3QgIT09IC0xICYmIGxhc3QgIT09IC0xICYmIGZpcnN0ICE9PSBsYXN0KSB7XG4gICAgY2hhcnNbZmlyc3RdID0gXCI8XCI7XG4gICAgY2hhcnNbbGFzdF0gPSBcIj5cIjtcbiAgICBmaXJzdCA9IGNoYXJzLmluZGV4T2YoXCJ+XCIpO1xuICAgIGxhc3QgPSBjaGFycy5sYXN0SW5kZXhPZihcIn5cIik7XG4gIH1cbiAgaWYgKGhhc1N0YXJ0aW5nVGlsZGUpIHtcbiAgICBjaGFycy51bnNoaWZ0KFwiflwiKTtcbiAgfVxuICByZXR1cm4gY2hhcnMuam9pbihcIlwiKTtcbn0sIFwicHJvY2Vzc1NldFwiKTtcbnZhciBpc01hdGhNTFN1cHBvcnRlZCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gd2luZG93Lk1hdGhNTEVsZW1lbnQgIT09IHZvaWQgMCwgXCJpc01hdGhNTFN1cHBvcnRlZFwiKTtcbnZhciBrYXRleFJlZ2V4ID0gL1xcJFxcJCguKilcXCRcXCQvZztcbnZhciBoYXNLYXRleCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRleHQpID0+ICh0ZXh0Lm1hdGNoKGthdGV4UmVnZXgpPy5sZW5ndGggPz8gMCkgPiAwLCBcImhhc0thdGV4XCIpO1xudmFyIGNhbGN1bGF0ZU1hdGhNTERpbWVuc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICh0ZXh0LCBjb25maWcyKSA9PiB7XG4gIHRleHQgPSBhd2FpdCByZW5kZXJLYXRleCh0ZXh0LCBjb25maWcyKTtcbiAgY29uc3QgZGl2RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdkVsZW0uaW5uZXJIVE1MID0gdGV4dDtcbiAgZGl2RWxlbS5pZCA9IFwia2F0ZXgtdGVtcFwiO1xuICBkaXZFbGVtLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICBkaXZFbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICBkaXZFbGVtLnN0eWxlLnRvcCA9IFwiMFwiO1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG4gIGJvZHk/Lmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLCBkaXZFbGVtKTtcbiAgY29uc3QgZGltID0geyB3aWR0aDogZGl2RWxlbS5jbGllbnRXaWR0aCwgaGVpZ2h0OiBkaXZFbGVtLmNsaWVudEhlaWdodCB9O1xuICBkaXZFbGVtLnJlbW92ZSgpO1xuICByZXR1cm4gZGltO1xufSwgXCJjYWxjdWxhdGVNYXRoTUxEaW1lbnNpb25zXCIpO1xudmFyIHJlbmRlckthdGV4ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAodGV4dCwgY29uZmlnMikgPT4ge1xuICBpZiAoIWhhc0thdGV4KHRleHQpKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cbiAgaWYgKCEoaXNNYXRoTUxTdXBwb3J0ZWQoKSB8fCBjb25maWcyLmxlZ2FjeU1hdGhNTCB8fCBjb25maWcyLmZvcmNlTGVnYWN5TWF0aE1MKSkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2Uoa2F0ZXhSZWdleCwgXCJNYXRoTUwgaXMgdW5zdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC5cIik7XG4gIH1cbiAgY29uc3QgeyBkZWZhdWx0OiBrYXRleCB9ID0gYXdhaXQgaW1wb3J0KFwia2F0ZXhcIik7XG4gIGNvbnN0IG91dHB1dE1vZGUgPSBjb25maWcyLmZvcmNlTGVnYWN5TWF0aE1MIHx8ICFpc01hdGhNTFN1cHBvcnRlZCgpICYmIGNvbmZpZzIubGVnYWN5TWF0aE1MID8gXCJodG1sQW5kTWF0aG1sXCIgOiBcIm1hdGhtbFwiO1xuICByZXR1cm4gdGV4dC5zcGxpdChsaW5lQnJlYWtSZWdleCkubWFwKFxuICAgIChsaW5lKSA9PiBoYXNLYXRleChsaW5lKSA/IGA8ZGl2IHN0eWxlPVwiZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IHdoaXRlLXNwYWNlOiBub3dyYXA7XCI+JHtsaW5lfTwvZGl2PmAgOiBgPGRpdj4ke2xpbmV9PC9kaXY+YFxuICApLmpvaW4oXCJcIikucmVwbGFjZShcbiAgICBrYXRleFJlZ2V4LFxuICAgIChfLCBjKSA9PiBrYXRleC5yZW5kZXJUb1N0cmluZyhjLCB7XG4gICAgICB0aHJvd09uRXJyb3I6IHRydWUsXG4gICAgICBkaXNwbGF5TW9kZTogdHJ1ZSxcbiAgICAgIG91dHB1dDogb3V0cHV0TW9kZVxuICAgIH0pLnJlcGxhY2UoL1xcbi9nLCBcIiBcIikucmVwbGFjZSgvPGFubm90YXRpb24uKjxcXC9hbm5vdGF0aW9uPi9nLCBcIlwiKVxuICApO1xufSwgXCJyZW5kZXJLYXRleFwiKTtcbnZhciBjb21tb25fZGVmYXVsdCA9IHtcbiAgZ2V0Um93cyxcbiAgc2FuaXRpemVUZXh0LFxuICBzYW5pdGl6ZVRleHRPckFycmF5LFxuICBoYXNCcmVha3MsXG4gIHNwbGl0QnJlYWtzLFxuICBsaW5lQnJlYWtSZWdleCxcbiAgcmVtb3ZlU2NyaXB0LFxuICBnZXRVcmwsXG4gIGV2YWx1YXRlLFxuICBnZXRNYXgsXG4gIGdldE1pblxufTtcblxuLy8gc3JjL3NldHVwR3JhcGhWaWV3Ym94LmpzXG52YXIgZDNBdHRycyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoZnVuY3Rpb24oZDNFbGVtLCBhdHRycykge1xuICBmb3IgKGxldCBhdHRyIG9mIGF0dHJzKSB7XG4gICAgZDNFbGVtLmF0dHIoYXR0clswXSwgYXR0clsxXSk7XG4gIH1cbn0sIFwiZDNBdHRyc1wiKTtcbnZhciBjYWxjdWxhdGVTdmdTaXplQXR0cnMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKGhlaWdodCwgd2lkdGgsIHVzZU1heFdpZHRoKSB7XG4gIGxldCBhdHRycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGlmICh1c2VNYXhXaWR0aCkge1xuICAgIGF0dHJzLnNldChcIndpZHRoXCIsIFwiMTAwJVwiKTtcbiAgICBhdHRycy5zZXQoXCJzdHlsZVwiLCBgbWF4LXdpZHRoOiAke3dpZHRofXB4O2ApO1xuICB9IGVsc2Uge1xuICAgIGF0dHJzLnNldChcImhlaWdodFwiLCBoZWlnaHQpO1xuICAgIGF0dHJzLnNldChcIndpZHRoXCIsIHdpZHRoKTtcbiAgfVxuICByZXR1cm4gYXR0cnM7XG59LCBcImNhbGN1bGF0ZVN2Z1NpemVBdHRyc1wiKTtcbnZhciBjb25maWd1cmVTdmdTaXplID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihzdmdFbGVtLCBoZWlnaHQsIHdpZHRoLCB1c2VNYXhXaWR0aCkge1xuICBjb25zdCBhdHRycyA9IGNhbGN1bGF0ZVN2Z1NpemVBdHRycyhoZWlnaHQsIHdpZHRoLCB1c2VNYXhXaWR0aCk7XG4gIGQzQXR0cnMoc3ZnRWxlbSwgYXR0cnMpO1xufSwgXCJjb25maWd1cmVTdmdTaXplXCIpO1xudmFyIHNldHVwR3JhcGhWaWV3Ym94ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihncmFwaCwgc3ZnRWxlbSwgcGFkZGluZywgdXNlTWF4V2lkdGgpIHtcbiAgY29uc3Qgc3ZnQm91bmRzID0gc3ZnRWxlbS5ub2RlKCkuZ2V0QkJveCgpO1xuICBjb25zdCBzV2lkdGggPSBzdmdCb3VuZHMud2lkdGg7XG4gIGNvbnN0IHNIZWlnaHQgPSBzdmdCb3VuZHMuaGVpZ2h0O1xuICBsb2cuaW5mbyhgU1ZHIGJvdW5kczogJHtzV2lkdGh9eCR7c0hlaWdodH1gLCBzdmdCb3VuZHMpO1xuICBsZXQgd2lkdGggPSAwO1xuICBsZXQgaGVpZ2h0ID0gMDtcbiAgbG9nLmluZm8oYEdyYXBoIGJvdW5kczogJHt3aWR0aH14JHtoZWlnaHR9YCwgZ3JhcGgpO1xuICB3aWR0aCA9IHNXaWR0aCArIHBhZGRpbmcgKiAyO1xuICBoZWlnaHQgPSBzSGVpZ2h0ICsgcGFkZGluZyAqIDI7XG4gIGxvZy5pbmZvKGBDYWxjdWxhdGVkIGJvdW5kczogJHt3aWR0aH14JHtoZWlnaHR9YCk7XG4gIGNvbmZpZ3VyZVN2Z1NpemUoc3ZnRWxlbSwgaGVpZ2h0LCB3aWR0aCwgdXNlTWF4V2lkdGgpO1xuICBjb25zdCB2Qm94ID0gYCR7c3ZnQm91bmRzLnggLSBwYWRkaW5nfSAke3N2Z0JvdW5kcy55IC0gcGFkZGluZ30gJHtzdmdCb3VuZHMud2lkdGggKyAyICogcGFkZGluZ30gJHtzdmdCb3VuZHMuaGVpZ2h0ICsgMiAqIHBhZGRpbmd9YDtcbiAgc3ZnRWxlbS5hdHRyKFwidmlld0JveFwiLCB2Qm94KTtcbn0sIFwic2V0dXBHcmFwaFZpZXdib3hcIik7XG5cbi8vIHNyYy9zdHlsZXMudHNcbnZhciB0aGVtZXMgPSB7fTtcbnZhciBnZXRTdHlsZXMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eXBlLCB1c2VyU3R5bGVzLCBvcHRpb25zKSA9PiB7XG4gIGxldCBkaWFncmFtU3R5bGVzID0gXCJcIjtcbiAgaWYgKHR5cGUgaW4gdGhlbWVzICYmIHRoZW1lc1t0eXBlXSkge1xuICAgIGRpYWdyYW1TdHlsZXMgPSB0aGVtZXNbdHlwZV0ob3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgbG9nLndhcm4oYE5vIHRoZW1lIGZvdW5kIGZvciAke3R5cGV9YCk7XG4gIH1cbiAgcmV0dXJuIGAgJiB7XG4gICAgZm9udC1mYW1pbHk6ICR7b3B0aW9ucy5mb250RmFtaWx5fTtcbiAgICBmb250LXNpemU6ICR7b3B0aW9ucy5mb250U2l6ZX07XG4gICAgZmlsbDogJHtvcHRpb25zLnRleHRDb2xvcn1cbiAgfVxuICBAa2V5ZnJhbWVzIGVkZ2UtYW5pbWF0aW9uLWZyYW1lIHtcbiAgICBmcm9tIHtcbiAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgIH1cbiAgfVxuICBAa2V5ZnJhbWVzIGRhc2gge1xuICAgIHRvIHtcbiAgICAgIHN0cm9rZS1kYXNob2Zmc2V0OiAwO1xuICAgIH1cbiAgfVxuICAmIC5lZGdlLWFuaW1hdGlvbi1zbG93IHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiA5LDUgIWltcG9ydGFudDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogOTAwO1xuICAgIGFuaW1hdGlvbjogZGFzaCA1MHMgbGluZWFyIGluZmluaXRlO1xuICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbiAgfVxuICAmIC5lZGdlLWFuaW1hdGlvbi1mYXN0IHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiA5LDUgIWltcG9ydGFudDtcbiAgICBzdHJva2UtZGFzaG9mZnNldDogOTAwO1xuICAgIGFuaW1hdGlvbjogZGFzaCAyMHMgbGluZWFyIGluZmluaXRlO1xuICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbiAgfVxuICAvKiBDbGFzc2VzIGNvbW1vbiBmb3IgbXVsdGlwbGUgZGlhZ3JhbXMgKi9cblxuICAmIC5lcnJvci1pY29uIHtcbiAgICBmaWxsOiAke29wdGlvbnMuZXJyb3JCa2dDb2xvcn07XG4gIH1cbiAgJiAuZXJyb3ItdGV4dCB7XG4gICAgZmlsbDogJHtvcHRpb25zLmVycm9yVGV4dENvbG9yfTtcbiAgICBzdHJva2U6ICR7b3B0aW9ucy5lcnJvclRleHRDb2xvcn07XG4gIH1cblxuICAmIC5lZGdlLXRoaWNrbmVzcy1ub3JtYWwge1xuICAgIHN0cm9rZS13aWR0aDogMXB4O1xuICB9XG4gICYgLmVkZ2UtdGhpY2tuZXNzLXRoaWNrIHtcbiAgICBzdHJva2Utd2lkdGg6IDMuNXB4XG4gIH1cbiAgJiAuZWRnZS1wYXR0ZXJuLXNvbGlkIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAwO1xuICB9XG4gICYgLmVkZ2UtdGhpY2tuZXNzLWludmlzaWJsZSB7XG4gICAgc3Ryb2tlLXdpZHRoOiAwO1xuICAgIGZpbGw6IG5vbmU7XG4gIH1cbiAgJiAuZWRnZS1wYXR0ZXJuLWRhc2hlZHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAzO1xuICB9XG4gIC5lZGdlLXBhdHRlcm4tZG90dGVkIHtcbiAgICBzdHJva2UtZGFzaGFycmF5OiAyO1xuICB9XG5cbiAgJiAubWFya2VyIHtcbiAgICBmaWxsOiAke29wdGlvbnMubGluZUNvbG9yfTtcbiAgICBzdHJva2U6ICR7b3B0aW9ucy5saW5lQ29sb3J9O1xuICB9XG4gICYgLm1hcmtlci5jcm9zcyB7XG4gICAgc3Ryb2tlOiAke29wdGlvbnMubGluZUNvbG9yfTtcbiAgfVxuXG4gICYgc3ZnIHtcbiAgICBmb250LWZhbWlseTogJHtvcHRpb25zLmZvbnRGYW1pbHl9O1xuICAgIGZvbnQtc2l6ZTogJHtvcHRpb25zLmZvbnRTaXplfTtcbiAgfVxuICAgJiBwIHtcbiAgICBtYXJnaW46IDBcbiAgIH1cblxuICAke2RpYWdyYW1TdHlsZXN9XG5cbiAgJHt1c2VyU3R5bGVzfVxuYDtcbn0sIFwiZ2V0U3R5bGVzXCIpO1xudmFyIGFkZFN0eWxlc0ZvckRpYWdyYW0gPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eXBlLCBkaWFncmFtVGhlbWUpID0+IHtcbiAgaWYgKGRpYWdyYW1UaGVtZSAhPT0gdm9pZCAwKSB7XG4gICAgdGhlbWVzW3R5cGVdID0gZGlhZ3JhbVRoZW1lO1xuICB9XG59LCBcImFkZFN0eWxlc0ZvckRpYWdyYW1cIik7XG52YXIgc3R5bGVzX2RlZmF1bHQgPSBnZXRTdHlsZXM7XG5cbi8vIHNyYy9kaWFncmFtcy9jb21tb24vY29tbW9uRGIudHNcbnZhciBjb21tb25EYl9leHBvcnRzID0ge307XG5fX2V4cG9ydChjb21tb25EYl9leHBvcnRzLCB7XG4gIGNsZWFyOiAoKSA9PiBjbGVhcixcbiAgZ2V0QWNjRGVzY3JpcHRpb246ICgpID0+IGdldEFjY0Rlc2NyaXB0aW9uLFxuICBnZXRBY2NUaXRsZTogKCkgPT4gZ2V0QWNjVGl0bGUsXG4gIGdldERpYWdyYW1UaXRsZTogKCkgPT4gZ2V0RGlhZ3JhbVRpdGxlLFxuICBzZXRBY2NEZXNjcmlwdGlvbjogKCkgPT4gc2V0QWNjRGVzY3JpcHRpb24sXG4gIHNldEFjY1RpdGxlOiAoKSA9PiBzZXRBY2NUaXRsZSxcbiAgc2V0RGlhZ3JhbVRpdGxlOiAoKSA9PiBzZXREaWFncmFtVGl0bGVcbn0pO1xudmFyIGFjY1RpdGxlID0gXCJcIjtcbnZhciBkaWFncmFtVGl0bGUgPSBcIlwiO1xudmFyIGFjY0Rlc2NyaXB0aW9uID0gXCJcIjtcbnZhciBzYW5pdGl6ZVRleHQyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0KSA9PiBzYW5pdGl6ZVRleHQodHh0LCBnZXRDb25maWcoKSksIFwic2FuaXRpemVUZXh0XCIpO1xudmFyIGNsZWFyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGFjY1RpdGxlID0gXCJcIjtcbiAgYWNjRGVzY3JpcHRpb24gPSBcIlwiO1xuICBkaWFncmFtVGl0bGUgPSBcIlwiO1xufSwgXCJjbGVhclwiKTtcbnZhciBzZXRBY2NUaXRsZSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICBhY2NUaXRsZSA9IHNhbml0aXplVGV4dDIodHh0KS5yZXBsYWNlKC9eXFxzKy9nLCBcIlwiKTtcbn0sIFwic2V0QWNjVGl0bGVcIik7XG52YXIgZ2V0QWNjVGl0bGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IGFjY1RpdGxlLCBcImdldEFjY1RpdGxlXCIpO1xudmFyIHNldEFjY0Rlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0KSA9PiB7XG4gIGFjY0Rlc2NyaXB0aW9uID0gc2FuaXRpemVUZXh0Mih0eHQpLnJlcGxhY2UoL1xcblxccysvZywgXCJcXG5cIik7XG59LCBcInNldEFjY0Rlc2NyaXB0aW9uXCIpO1xudmFyIGdldEFjY0Rlc2NyaXB0aW9uID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiBhY2NEZXNjcmlwdGlvbiwgXCJnZXRBY2NEZXNjcmlwdGlvblwiKTtcbnZhciBzZXREaWFncmFtVGl0bGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgZGlhZ3JhbVRpdGxlID0gc2FuaXRpemVUZXh0Mih0eHQpO1xufSwgXCJzZXREaWFncmFtVGl0bGVcIik7XG52YXIgZ2V0RGlhZ3JhbVRpdGxlID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiBkaWFncmFtVGl0bGUsIFwiZ2V0RGlhZ3JhbVRpdGxlXCIpO1xuXG4vLyBzcmMvZGlhZ3JhbS1hcGkvZGlhZ3JhbUFQSS50c1xudmFyIGxvZzIgPSBsb2c7XG52YXIgc2V0TG9nTGV2ZWwyID0gc2V0TG9nTGV2ZWw7XG52YXIgZ2V0Q29uZmlnMiA9IGdldENvbmZpZztcbnZhciBzZXRDb25maWcyID0gc2V0Q29uZmlnO1xudmFyIGRlZmF1bHRDb25maWcyID0gZGVmYXVsdENvbmZpZztcbnZhciBzYW5pdGl6ZVRleHQzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodGV4dCkgPT4gc2FuaXRpemVUZXh0KHRleHQsIGdldENvbmZpZzIoKSksIFwic2FuaXRpemVUZXh0XCIpO1xudmFyIHNldHVwR3JhcGhWaWV3Ym94MiA9IHNldHVwR3JhcGhWaWV3Ym94O1xudmFyIGdldENvbW1vbkRiID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIHJldHVybiBjb21tb25EYl9leHBvcnRzO1xufSwgXCJnZXRDb21tb25EYlwiKTtcbnZhciBkaWFncmFtcyA9IHt9O1xudmFyIHJlZ2lzdGVyRGlhZ3JhbSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGlkLCBkaWFncmFtLCBkZXRlY3RvcikgPT4ge1xuICBpZiAoZGlhZ3JhbXNbaWRdKSB7XG4gICAgbG9nMi53YXJuKGBEaWFncmFtIHdpdGggaWQgJHtpZH0gYWxyZWFkeSByZWdpc3RlcmVkLiBPdmVyd3JpdGluZy5gKTtcbiAgfVxuICBkaWFncmFtc1tpZF0gPSBkaWFncmFtO1xuICBpZiAoZGV0ZWN0b3IpIHtcbiAgICBhZGREZXRlY3RvcihpZCwgZGV0ZWN0b3IpO1xuICB9XG4gIGFkZFN0eWxlc0ZvckRpYWdyYW0oaWQsIGRpYWdyYW0uc3R5bGVzKTtcbiAgZGlhZ3JhbS5pbmplY3RVdGlscz8uKFxuICAgIGxvZzIsXG4gICAgc2V0TG9nTGV2ZWwyLFxuICAgIGdldENvbmZpZzIsXG4gICAgc2FuaXRpemVUZXh0MyxcbiAgICBzZXR1cEdyYXBoVmlld2JveDIsXG4gICAgZ2V0Q29tbW9uRGIoKSxcbiAgICAoKSA9PiB7XG4gICAgfVxuICApO1xufSwgXCJyZWdpc3RlckRpYWdyYW1cIik7XG52YXIgZ2V0RGlhZ3JhbSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKG5hbWUpID0+IHtcbiAgaWYgKG5hbWUgaW4gZGlhZ3JhbXMpIHtcbiAgICByZXR1cm4gZGlhZ3JhbXNbbmFtZV07XG4gIH1cbiAgdGhyb3cgbmV3IERpYWdyYW1Ob3RGb3VuZEVycm9yKG5hbWUpO1xufSwgXCJnZXREaWFncmFtXCIpO1xudmFyIERpYWdyYW1Ob3RGb3VuZEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRGlhZ3JhbU5vdEZvdW5kRXJyb3JcIik7XG4gIH1cbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKGBEaWFncmFtICR7bmFtZX0gbm90IGZvdW5kLmApO1xuICB9XG59O1xuXG5leHBvcnQge1xuICBfX25hbWUsXG4gIF9fZXhwb3J0LFxuICBsb2csXG4gIHNldExvZ0xldmVsLFxuICBmcm9udE1hdHRlclJlZ2V4LFxuICBkaXJlY3RpdmVSZWdleCxcbiAgVW5rbm93bkRpYWdyYW1FcnJvcixcbiAgZGV0ZWN0b3JzLFxuICBkZXRlY3RUeXBlLFxuICByZWdpc3RlckxhenlMb2FkZWREaWFncmFtcyxcbiAgZ2V0RGlhZ3JhbUxvYWRlcixcbiAgYXNzaWduV2l0aERlcHRoX2RlZmF1bHQsXG4gIGdldFRoZW1lVmFyaWFibGVzMyBhcyBnZXRUaGVtZVZhcmlhYmxlcyxcbiAgdGhlbWVzX2RlZmF1bHQsXG4gIGRlZmF1bHRDb25maWdfZGVmYXVsdCxcbiAgc2FuaXRpemVEaXJlY3RpdmUsXG4gIGRlZmF1bHRDb25maWcsXG4gIHNldFNpdGVDb25maWcsXG4gIHNhdmVDb25maWdGcm9tSW5pdGlhbGl6ZSxcbiAgdXBkYXRlU2l0ZUNvbmZpZyxcbiAgZ2V0U2l0ZUNvbmZpZyxcbiAgc2V0Q29uZmlnLFxuICBnZXRDb25maWcsXG4gIGFkZERpcmVjdGl2ZSxcbiAgcmVzZXQsXG4gIGxpbmVCcmVha1JlZ2V4LFxuICBzYW5pdGl6ZVRleHQsXG4gIGV2YWx1YXRlLFxuICBwYXJzZUdlbmVyaWNUeXBlcyxcbiAgaGFzS2F0ZXgsXG4gIGNhbGN1bGF0ZU1hdGhNTERpbWVuc2lvbnMsXG4gIHJlbmRlckthdGV4LFxuICBjb21tb25fZGVmYXVsdCxcbiAgY29uZmlndXJlU3ZnU2l6ZSxcbiAgc2V0dXBHcmFwaFZpZXdib3gsXG4gIHN0eWxlc19kZWZhdWx0LFxuICBjbGVhcixcbiAgc2V0QWNjVGl0bGUsXG4gIGdldEFjY1RpdGxlLFxuICBzZXRBY2NEZXNjcmlwdGlvbixcbiAgZ2V0QWNjRGVzY3JpcHRpb24sXG4gIHNldERpYWdyYW1UaXRsZSxcbiAgZ2V0RGlhZ3JhbVRpdGxlLFxuICBjb21tb25EYl9leHBvcnRzLFxuICBnZXRDb25maWcyLFxuICBzZXRDb25maWcyLFxuICBkZWZhdWx0Q29uZmlnMixcbiAgc2FuaXRpemVUZXh0MyBhcyBzYW5pdGl6ZVRleHQyLFxuICBzZXR1cEdyYXBoVmlld2JveDIsXG4gIHJlZ2lzdGVyRGlhZ3JhbSxcbiAgZ2V0RGlhZ3JhbVxufTtcbiIsImltcG9ydCB7XG4gIEpTT05fU0NIRU1BLFxuICBsb2FkXG59IGZyb20gXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstNkpSUDdLWlgubWpzXCI7XG5pbXBvcnQge1xuICByZWdpc3RlckxheW91dExvYWRlcnNcbn0gZnJvbSBcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1UWUNCS0FKRS5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1JSU1VRFNJNC5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1WVjNNNjdJUC5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1IUlU2RERDSC5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1LNTU3TjVJWi5tanNcIjtcbmltcG9ydCB7XG4gIHJlZ2lzdGVySWNvblBhY2tzXG59IGZyb20gXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstSDJEMkpRM0kubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstQzNNUTVBTk0ubWpzXCI7XG5pbXBvcnQge1xuICBjbGVhbkFuZE1lcmdlLFxuICBkZWNvZGVFbnRpdGllcyxcbiAgZW5jb2RlRW50aXRpZXMsXG4gIGlzRGV0YWlsZWRFcnJvcixcbiAgcmVtb3ZlRGlyZWN0aXZlcyxcbiAgdXRpbHNfZGVmYXVsdFxufSBmcm9tIFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2NodW5rLU80Tkk2VU5VLm1qc1wiO1xuaW1wb3J0IHtcbiAgcGFja2FnZV9kZWZhdWx0XG59IGZyb20gXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstNU5OTkFITkkubWpzXCI7XG5pbXBvcnQge1xuICBzZWxlY3RTdmdFbGVtZW50XG59IGZyb20gXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvY2h1bmstN0I2NzdRWUQubWpzXCI7XG5pbXBvcnQge1xuICBVbmtub3duRGlhZ3JhbUVycm9yLFxuICBfX25hbWUsXG4gIGFkZERpcmVjdGl2ZSxcbiAgYXNzaWduV2l0aERlcHRoX2RlZmF1bHQsXG4gIGNvbmZpZ3VyZVN2Z1NpemUsXG4gIGRlZmF1bHRDb25maWcsXG4gIGRldGVjdFR5cGUsXG4gIGRldGVjdG9ycyxcbiAgZXZhbHVhdGUsXG4gIGZyb250TWF0dGVyUmVnZXgsXG4gIGdldENvbmZpZyxcbiAgZ2V0RGlhZ3JhbSxcbiAgZ2V0RGlhZ3JhbUxvYWRlcixcbiAgZ2V0U2l0ZUNvbmZpZyxcbiAgbG9nLFxuICByZWdpc3RlckRpYWdyYW0sXG4gIHJlZ2lzdGVyTGF6eUxvYWRlZERpYWdyYW1zLFxuICByZXNldCxcbiAgc2F2ZUNvbmZpZ0Zyb21Jbml0aWFsaXplLFxuICBzZXRDb25maWcsXG4gIHNldExvZ0xldmVsLFxuICBzZXRTaXRlQ29uZmlnLFxuICBzdHlsZXNfZGVmYXVsdCxcbiAgdGhlbWVzX2RlZmF1bHQsXG4gIHVwZGF0ZVNpdGVDb25maWdcbn0gZnJvbSBcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jaHVuay1ZVEpOVDdEVS5tanNcIjtcblxuLy8gc3JjL21lcm1haWQudHNcbmltcG9ydCB7IGRlZGVudCB9IGZyb20gXCJ0cy1kZWRlbnRcIjtcblxuLy8gc3JjL2RpYWdyYW1zL2M0L2M0RGV0ZWN0b3IudHNcbnZhciBpZCA9IFwiYzRcIjtcbnZhciBkZXRlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqQzRDb250ZXh0fEM0Q29udGFpbmVyfEM0Q29tcG9uZW50fEM0RHluYW1pY3xDNERlcGxveW1lbnQvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIgfSA9IGF3YWl0IGltcG9ydChcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jNERpYWdyYW0tVkpBSlNYSFkubWpzXCIpO1xuICByZXR1cm4geyBpZCwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbiA9IHtcbiAgaWQsXG4gIGRldGVjdG9yLFxuICBsb2FkZXJcbn07XG52YXIgYzREZXRlY3Rvcl9kZWZhdWx0ID0gcGx1Z2luO1xuXG4vLyBzcmMvZGlhZ3JhbXMvZmxvd2NoYXJ0L2Zsb3dEZXRlY3Rvci50c1xudmFyIGlkMiA9IFwiZmxvd2NoYXJ0XCI7XG52YXIgZGV0ZWN0b3IyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0LCBjb25maWcpID0+IHtcbiAgaWYgKGNvbmZpZz8uZmxvd2NoYXJ0Py5kZWZhdWx0UmVuZGVyZXIgPT09IFwiZGFncmUtd3JhcHBlclwiIHx8IGNvbmZpZz8uZmxvd2NoYXJ0Py5kZWZhdWx0UmVuZGVyZXIgPT09IFwiZWxrXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIC9eXFxzKmdyYXBoLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2Zsb3dEaWFncmFtLTRIU0ZITFZSLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkMiwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjIgPSB7XG4gIGlkOiBpZDIsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjIsXG4gIGxvYWRlcjogbG9hZGVyMlxufTtcbnZhciBmbG93RGV0ZWN0b3JfZGVmYXVsdCA9IHBsdWdpbjI7XG5cbi8vIHNyYy9kaWFncmFtcy9mbG93Y2hhcnQvZmxvd0RldGVjdG9yLXYyLnRzXG52YXIgaWQzID0gXCJmbG93Y2hhcnQtdjJcIjtcbnZhciBkZXRlY3RvcjMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQsIGNvbmZpZykgPT4ge1xuICBpZiAoY29uZmlnPy5mbG93Y2hhcnQ/LmRlZmF1bHRSZW5kZXJlciA9PT0gXCJkYWdyZS1kM1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjb25maWc/LmZsb3djaGFydD8uZGVmYXVsdFJlbmRlcmVyID09PSBcImVsa1wiKSB7XG4gICAgY29uZmlnLmxheW91dCA9IFwiZWxrXCI7XG4gIH1cbiAgaWYgKC9eXFxzKmdyYXBoLy50ZXN0KHR4dCkgJiYgY29uZmlnPy5mbG93Y2hhcnQ/LmRlZmF1bHRSZW5kZXJlciA9PT0gXCJkYWdyZS13cmFwcGVyXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gL15cXHMqZmxvd2NoYXJ0Ly50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2Zsb3dEaWFncmFtLTRIU0ZITFZSLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkMywgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjMgPSB7XG4gIGlkOiBpZDMsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjMsXG4gIGxvYWRlcjogbG9hZGVyM1xufTtcbnZhciBmbG93RGV0ZWN0b3JfdjJfZGVmYXVsdCA9IHBsdWdpbjM7XG5cbi8vIHNyYy9kaWFncmFtcy9lci9lckRldGVjdG9yLnRzXG52YXIgaWQ0ID0gXCJlclwiO1xudmFyIGRldGVjdG9yNCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqZXJEaWFncmFtLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2VyRGlhZ3JhbS1RN0JZM00zRi5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDQsIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwbHVnaW40ID0ge1xuICBpZDogaWQ0LFxuICBkZXRlY3RvcjogZGV0ZWN0b3I0LFxuICBsb2FkZXI6IGxvYWRlcjRcbn07XG52YXIgZXJEZXRlY3Rvcl9kZWZhdWx0ID0gcGx1Z2luNDtcblxuLy8gc3JjL2RpYWdyYW1zL2dpdC9naXRHcmFwaERldGVjdG9yLnRzXG52YXIgaWQ1ID0gXCJnaXRHcmFwaFwiO1xudmFyIGRldGVjdG9yNSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqZ2l0R3JhcGgvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyNSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvZ2l0R3JhcGhEaWFncmFtLTdJQllGSjZTLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkNSwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjUgPSB7XG4gIGlkOiBpZDUsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjUsXG4gIGxvYWRlcjogbG9hZGVyNVxufTtcbnZhciBnaXRHcmFwaERldGVjdG9yX2RlZmF1bHQgPSBwbHVnaW41O1xuXG4vLyBzcmMvZGlhZ3JhbXMvZ2FudHQvZ2FudHREZXRlY3Rvci50c1xudmFyIGlkNiA9IFwiZ2FudHRcIjtcbnZhciBkZXRlY3RvcjYgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKmdhbnR0Ly50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjYgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2dhbnR0RGlhZ3JhbS1BUFdGTkpYRi5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDYsIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwbHVnaW42ID0ge1xuICBpZDogaWQ2LFxuICBkZXRlY3RvcjogZGV0ZWN0b3I2LFxuICBsb2FkZXI6IGxvYWRlcjZcbn07XG52YXIgZ2FudHREZXRlY3Rvcl9kZWZhdWx0ID0gcGx1Z2luNjtcblxuLy8gc3JjL2RpYWdyYW1zL2luZm8vaW5mb0RldGVjdG9yLnRzXG52YXIgaWQ3ID0gXCJpbmZvXCI7XG52YXIgZGV0ZWN0b3I3ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0KSA9PiB7XG4gIHJldHVybiAvXlxccyppbmZvLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjcgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2luZm9EaWFncmFtLVBIMk4zQUw1Lm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkNywgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIGluZm8gPSB7XG4gIGlkOiBpZDcsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjcsXG4gIGxvYWRlcjogbG9hZGVyN1xufTtcblxuLy8gc3JjL2RpYWdyYW1zL3BpZS9waWVEZXRlY3Rvci50c1xudmFyIGlkOCA9IFwicGllXCI7XG52YXIgZGV0ZWN0b3I4ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0KSA9PiB7XG4gIHJldHVybiAvXlxccypwaWUvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyOCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvcGllRGlhZ3JhbS1JQjdET05GNi5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDgsIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwaWUgPSB7XG4gIGlkOiBpZDgsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjgsXG4gIGxvYWRlcjogbG9hZGVyOFxufTtcblxuLy8gc3JjL2RpYWdyYW1zL3F1YWRyYW50LWNoYXJ0L3F1YWRyYW50RGV0ZWN0b3IudHNcbnZhciBpZDkgPSBcInF1YWRyYW50Q2hhcnRcIjtcbnZhciBkZXRlY3RvcjkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKnF1YWRyYW50Q2hhcnQvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyOSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvcXVhZHJhbnREaWFncmFtLTdHRExQNko1Lm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkOSwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjcgPSB7XG4gIGlkOiBpZDksXG4gIGRldGVjdG9yOiBkZXRlY3RvcjksXG4gIGxvYWRlcjogbG9hZGVyOVxufTtcbnZhciBxdWFkcmFudERldGVjdG9yX2RlZmF1bHQgPSBwbHVnaW43O1xuXG4vLyBzcmMvZGlhZ3JhbXMveHljaGFydC94eWNoYXJ0RGV0ZWN0b3IudHNcbnZhciBpZDEwID0gXCJ4eWNoYXJ0XCI7XG52YXIgZGV0ZWN0b3IxMCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqeHljaGFydC1iZXRhLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjEwID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIgfSA9IGF3YWl0IGltcG9ydChcIi4vY2h1bmtzL21lcm1haWQuY29yZS94eWNoYXJ0RGlhZ3JhbS1WSkZWRjNNUC5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDEwLCBkaWFncmFtOiBkaWFncmFtMiB9O1xufSwgXCJsb2FkZXJcIik7XG52YXIgcGx1Z2luOCA9IHtcbiAgaWQ6IGlkMTAsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjEwLFxuICBsb2FkZXI6IGxvYWRlcjEwXG59O1xudmFyIHh5Y2hhcnREZXRlY3Rvcl9kZWZhdWx0ID0gcGx1Z2luODtcblxuLy8gc3JjL2RpYWdyYW1zL3JlcXVpcmVtZW50L3JlcXVpcmVtZW50RGV0ZWN0b3IudHNcbnZhciBpZDExID0gXCJyZXF1aXJlbWVudFwiO1xudmFyIGRldGVjdG9yMTEgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKnJlcXVpcmVtZW50KERpYWdyYW0pPy8udGVzdCh0eHQpO1xufSwgXCJkZXRlY3RvclwiKTtcbnZhciBsb2FkZXIxMSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvcmVxdWlyZW1lbnREaWFncmFtLUtWRjVNV01GLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkMTEsIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwbHVnaW45ID0ge1xuICBpZDogaWQxMSxcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMTEsXG4gIGxvYWRlcjogbG9hZGVyMTFcbn07XG52YXIgcmVxdWlyZW1lbnREZXRlY3Rvcl9kZWZhdWx0ID0gcGx1Z2luOTtcblxuLy8gc3JjL2RpYWdyYW1zL3NlcXVlbmNlL3NlcXVlbmNlRGV0ZWN0b3IudHNcbnZhciBpZDEyID0gXCJzZXF1ZW5jZVwiO1xudmFyIGRldGVjdG9yMTIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKnNlcXVlbmNlRGlhZ3JhbS8udGVzdCh0eHQpO1xufSwgXCJkZXRlY3RvclwiKTtcbnZhciBsb2FkZXIxMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvc2VxdWVuY2VEaWFncmFtLVg2SEhJWDZGLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkMTIsIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwbHVnaW4xMCA9IHtcbiAgaWQ6IGlkMTIsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjEyLFxuICBsb2FkZXI6IGxvYWRlcjEyXG59O1xudmFyIHNlcXVlbmNlRGV0ZWN0b3JfZGVmYXVsdCA9IHBsdWdpbjEwO1xuXG4vLyBzcmMvZGlhZ3JhbXMvY2xhc3MvY2xhc3NEZXRlY3Rvci50c1xudmFyIGlkMTMgPSBcImNsYXNzXCI7XG52YXIgZGV0ZWN0b3IxMyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCwgY29uZmlnKSA9PiB7XG4gIGlmIChjb25maWc/LmNsYXNzPy5kZWZhdWx0UmVuZGVyZXIgPT09IFwiZGFncmUtd3JhcHBlclwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAvXlxccypjbGFzc0RpYWdyYW0vLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMTMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2NsYXNzRGlhZ3JhbS1HSVZBQ05WMi5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDEzLCBkaWFncmFtOiBkaWFncmFtMiB9O1xufSwgXCJsb2FkZXJcIik7XG52YXIgcGx1Z2luMTEgPSB7XG4gIGlkOiBpZDEzLFxuICBkZXRlY3RvcjogZGV0ZWN0b3IxMyxcbiAgbG9hZGVyOiBsb2FkZXIxM1xufTtcbnZhciBjbGFzc0RldGVjdG9yX2RlZmF1bHQgPSBwbHVnaW4xMTtcblxuLy8gc3JjL2RpYWdyYW1zL2NsYXNzL2NsYXNzRGV0ZWN0b3ItVjIudHNcbnZhciBpZDE0ID0gXCJjbGFzc0RpYWdyYW1cIjtcbnZhciBkZXRlY3RvcjE0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0LCBjb25maWcpID0+IHtcbiAgaWYgKC9eXFxzKmNsYXNzRGlhZ3JhbS8udGVzdCh0eHQpICYmIGNvbmZpZz8uY2xhc3M/LmRlZmF1bHRSZW5kZXJlciA9PT0gXCJkYWdyZS13cmFwcGVyXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gL15cXHMqY2xhc3NEaWFncmFtLXYyLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjE0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIgfSA9IGF3YWl0IGltcG9ydChcIi4vY2h1bmtzL21lcm1haWQuY29yZS9jbGFzc0RpYWdyYW0tdjItQ09UTEpUVFcubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQxNCwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjEyID0ge1xuICBpZDogaWQxNCxcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMTQsXG4gIGxvYWRlcjogbG9hZGVyMTRcbn07XG52YXIgY2xhc3NEZXRlY3Rvcl9WMl9kZWZhdWx0ID0gcGx1Z2luMTI7XG5cbi8vIHNyYy9kaWFncmFtcy9zdGF0ZS9zdGF0ZURldGVjdG9yLnRzXG52YXIgaWQxNSA9IFwic3RhdGVcIjtcbnZhciBkZXRlY3RvcjE1ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0LCBjb25maWcpID0+IHtcbiAgaWYgKGNvbmZpZz8uc3RhdGU/LmRlZmF1bHRSZW5kZXJlciA9PT0gXCJkYWdyZS13cmFwcGVyXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIC9eXFxzKnN0YXRlRGlhZ3JhbS8udGVzdCh0eHQpO1xufSwgXCJkZXRlY3RvclwiKTtcbnZhciBsb2FkZXIxNSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvc3RhdGVEaWFncmFtLURHWFJLNzcyLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkMTUsIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwbHVnaW4xMyA9IHtcbiAgaWQ6IGlkMTUsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjE1LFxuICBsb2FkZXI6IGxvYWRlcjE1XG59O1xudmFyIHN0YXRlRGV0ZWN0b3JfZGVmYXVsdCA9IHBsdWdpbjEzO1xuXG4vLyBzcmMvZGlhZ3JhbXMvc3RhdGUvc3RhdGVEZXRlY3Rvci1WMi50c1xudmFyIGlkMTYgPSBcInN0YXRlRGlhZ3JhbVwiO1xudmFyIGRldGVjdG9yMTYgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQsIGNvbmZpZykgPT4ge1xuICBpZiAoL15cXHMqc3RhdGVEaWFncmFtLXYyLy50ZXN0KHR4dCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoL15cXHMqc3RhdGVEaWFncmFtLy50ZXN0KHR4dCkgJiYgY29uZmlnPy5zdGF0ZT8uZGVmYXVsdFJlbmRlcmVyID09PSBcImRhZ3JlLXdyYXBwZXJcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMTYgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL3N0YXRlRGlhZ3JhbS12Mi1ZWE8zTUsyVC5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDE2LCBkaWFncmFtOiBkaWFncmFtMiB9O1xufSwgXCJsb2FkZXJcIik7XG52YXIgcGx1Z2luMTQgPSB7XG4gIGlkOiBpZDE2LFxuICBkZXRlY3RvcjogZGV0ZWN0b3IxNixcbiAgbG9hZGVyOiBsb2FkZXIxNlxufTtcbnZhciBzdGF0ZURldGVjdG9yX1YyX2RlZmF1bHQgPSBwbHVnaW4xNDtcblxuLy8gc3JjL2RpYWdyYW1zL3VzZXItam91cm5leS9qb3VybmV5RGV0ZWN0b3IudHNcbnZhciBpZDE3ID0gXCJqb3VybmV5XCI7XG52YXIgZGV0ZWN0b3IxNyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqam91cm5leS8udGVzdCh0eHQpO1xufSwgXCJkZXRlY3RvclwiKTtcbnZhciBsb2FkZXIxNyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvam91cm5leURpYWdyYW0tVTM1TUNUM0kubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQxNywgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjE1ID0ge1xuICBpZDogaWQxNyxcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMTcsXG4gIGxvYWRlcjogbG9hZGVyMTdcbn07XG52YXIgam91cm5leURldGVjdG9yX2RlZmF1bHQgPSBwbHVnaW4xNTtcblxuLy8gc3JjL2RpYWdyYW1zL2Vycm9yL2Vycm9yUmVuZGVyZXIudHNcbnZhciBkcmF3ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoX3RleHQsIGlkMjcsIHZlcnNpb24pID0+IHtcbiAgbG9nLmRlYnVnKFwicmVuZGVyaW5nIHN2ZyBmb3Igc3ludGF4IGVycm9yXFxuXCIpO1xuICBjb25zdCBzdmcgPSBzZWxlY3RTdmdFbGVtZW50KGlkMjcpO1xuICBjb25zdCBnID0gc3ZnLmFwcGVuZChcImdcIik7XG4gIHN2Zy5hdHRyKFwidmlld0JveFwiLCBcIjAgMCAyNDEyIDUxMlwiKTtcbiAgY29uZmlndXJlU3ZnU2l6ZShzdmcsIDEwMCwgNTEyLCB0cnVlKTtcbiAgZy5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLCBcImVycm9yLWljb25cIikuYXR0cihcbiAgICBcImRcIixcbiAgICBcIm00MTEuMzEzLDEyMy4zMTNjNi4yNS02LjI1IDYuMjUtMTYuMzc1IDAtMjIuNjI1cy0xNi4zNzUtNi4yNS0yMi42MjUsMGwtMzIsMzItOS4zNzUsOS4zNzUtMjAuNjg4LTIwLjY4OGMtMTIuNDg0LTEyLjUtMzIuNzY2LTEyLjUtNDUuMjUsMGwtMTYsMTZjLTEuMjYxLDEuMjYxLTIuMzA0LDIuNjQ4LTMuMzEsNC4wNTEtMjEuNzM5LTguNTYxLTQ1LjMyNC0xMy40MjYtNzAuMDY1LTEzLjQyNi0xMDUuODY3LDAtMTkyLDg2LjEzMy0xOTIsMTkyczg2LjEzMywxOTIgMTkyLDE5MiAxOTItODYuMTMzIDE5Mi0xOTJjMC0yNC43NDEtNC44NjQtNDguMzI3LTEzLjQyNi03MC4wNjUgMS40MDItMS4wMDcgMi43OS0yLjA0OSA0LjA1MS0zLjMxbDE2LTE2YzEyLjUtMTIuNDkyIDEyLjUtMzIuNzU4IDAtNDUuMjVsLTIwLjY4OC0yMC42ODggOS4zNzUtOS4zNzUgMzIuMDAxLTMxLjk5OXptLTIxOS4zMTMsMTAwLjY4N2MtNTIuOTM4LDAtOTYsNDMuMDYzLTk2LDk2IDAsOC44MzYtNy4xNjQsMTYtMTYsMTZzLTE2LTcuMTY0LTE2LTE2YzAtNzAuNTc4IDU3LjQyMi0xMjggMTI4LTEyOCA4LjgzNiwwIDE2LDcuMTY0IDE2LDE2cy03LjE2NCwxNi0xNiwxNnpcIlxuICApO1xuICBnLmFwcGVuZChcInBhdGhcIikuYXR0cihcImNsYXNzXCIsIFwiZXJyb3ItaWNvblwiKS5hdHRyKFxuICAgIFwiZFwiLFxuICAgIFwibTQ1OS4wMiwxNDguOThjLTYuMjUtNi4yNS0xNi4zNzUtNi4yNS0yMi42MjUsMHMtNi4yNSwxNi4zNzUgMCwyMi42MjVsMTYsMTZjMy4xMjUsMy4xMjUgNy4yMTksNC42ODggMTEuMzEzLDQuNjg4IDQuMDk0LDAgOC4xODgtMS41NjMgMTEuMzEzLTQuNjg4IDYuMjUtNi4yNSA2LjI1LTE2LjM3NSAwLTIyLjYyNWwtMTYuMDAxLTE2elwiXG4gICk7XG4gIGcuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJlcnJvci1pY29uXCIpLmF0dHIoXG4gICAgXCJkXCIsXG4gICAgXCJtMzQwLjM5NSw3NS42MDVjMy4xMjUsMy4xMjUgNy4yMTksNC42ODggMTEuMzEzLDQuNjg4IDQuMDk0LDAgOC4xODgtMS41NjMgMTEuMzEzLTQuNjg4IDYuMjUtNi4yNSA2LjI1LTE2LjM3NSAwLTIyLjYyNWwtMTYtMTZjLTYuMjUtNi4yNS0xNi4zNzUtNi4yNS0yMi42MjUsMHMtNi4yNSwxNi4zNzUgMCwyMi42MjVsMTUuOTk5LDE2elwiXG4gICk7XG4gIGcuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJlcnJvci1pY29uXCIpLmF0dHIoXG4gICAgXCJkXCIsXG4gICAgXCJtNDAwLDY0YzguODQ0LDAgMTYtNy4xNjQgMTYtMTZ2LTMyYzAtOC44MzYtNy4xNTYtMTYtMTYtMTYtOC44NDQsMC0xNiw3LjE2NC0xNiwxNnYzMmMwLDguODM2IDcuMTU2LDE2IDE2LDE2elwiXG4gICk7XG4gIGcuYXBwZW5kKFwicGF0aFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJlcnJvci1pY29uXCIpLmF0dHIoXG4gICAgXCJkXCIsXG4gICAgXCJtNDk2LDk2LjU4NmgtMzJjLTguODQ0LDAtMTYsNy4xNjQtMTYsMTYgMCw4LjgzNiA3LjE1NiwxNiAxNiwxNmgzMmM4Ljg0NCwwIDE2LTcuMTY0IDE2LTE2IDAtOC44MzYtNy4xNTYtMTYtMTYtMTZ6XCJcbiAgKTtcbiAgZy5hcHBlbmQoXCJwYXRoXCIpLmF0dHIoXCJjbGFzc1wiLCBcImVycm9yLWljb25cIikuYXR0cihcbiAgICBcImRcIixcbiAgICBcIm00MzYuOTgsNzUuNjA1YzMuMTI1LDMuMTI1IDcuMjE5LDQuNjg4IDExLjMxMyw0LjY4OCA0LjA5NCwwIDguMTg4LTEuNTYzIDExLjMxMy00LjY4OGwzMi0zMmM2LjI1LTYuMjUgNi4yNS0xNi4zNzUgMC0yMi42MjVzLTE2LjM3NS02LjI1LTIyLjYyNSwwbC0zMiwzMmMtNi4yNTEsNi4yNS02LjI1MSwxNi4zNzUtMC4wMDEsMjIuNjI1elwiXG4gICk7XG4gIGcuYXBwZW5kKFwidGV4dFwiKS5hdHRyKFwiY2xhc3NcIiwgXCJlcnJvci10ZXh0XCIpLmF0dHIoXCJ4XCIsIDE0NDApLmF0dHIoXCJ5XCIsIDI1MCkuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjE1MHB4XCIpLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIikudGV4dChcIlN5bnRheCBlcnJvciBpbiB0ZXh0XCIpO1xuICBnLmFwcGVuZChcInRleHRcIikuYXR0cihcImNsYXNzXCIsIFwiZXJyb3ItdGV4dFwiKS5hdHRyKFwieFwiLCAxMjUwKS5hdHRyKFwieVwiLCA0MDApLmF0dHIoXCJmb250LXNpemVcIiwgXCIxMDBweFwiKS5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpLnRleHQoYG1lcm1haWQgdmVyc2lvbiAke3ZlcnNpb259YCk7XG59LCBcImRyYXdcIik7XG52YXIgcmVuZGVyZXIgPSB7IGRyYXcgfTtcbnZhciBlcnJvclJlbmRlcmVyX2RlZmF1bHQgPSByZW5kZXJlcjtcblxuLy8gc3JjL2RpYWdyYW1zL2Vycm9yL2Vycm9yRGlhZ3JhbS50c1xudmFyIGRpYWdyYW0gPSB7XG4gIGRiOiB7fSxcbiAgcmVuZGVyZXIsXG4gIHBhcnNlcjoge1xuICAgIHBhcnNlOiAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgICAgIHJldHVybjtcbiAgICB9LCBcInBhcnNlXCIpXG4gIH1cbn07XG52YXIgZXJyb3JEaWFncmFtX2RlZmF1bHQgPSBkaWFncmFtO1xuXG4vLyBzcmMvZGlhZ3JhbXMvZmxvd2NoYXJ0L2Vsay9kZXRlY3Rvci50c1xudmFyIGlkMTggPSBcImZsb3djaGFydC1lbGtcIjtcbnZhciBkZXRlY3RvcjE4ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0LCBjb25maWcgPSB7fSkgPT4ge1xuICBpZiAoXG4gICAgLy8gSWYgZGlhZ3JhbSBleHBsaWNpdGx5IHN0YXRlcyBmbG93Y2hhcnQtZWxrXG4gICAgL15cXHMqZmxvd2NoYXJ0LWVsay8udGVzdCh0eHQpIHx8IC8vIElmIGEgZmxvd2NoYXJ0L2dyYXBoIGRpYWdyYW0gaGFzIHRoZWlyIGRlZmF1bHQgcmVuZGVyZXIgc2V0IHRvIGVsa1xuICAgIC9eXFxzKmZsb3djaGFydHxncmFwaC8udGVzdCh0eHQpICYmIGNvbmZpZz8uZmxvd2NoYXJ0Py5kZWZhdWx0UmVuZGVyZXIgPT09IFwiZWxrXCJcbiAgKSB7XG4gICAgY29uZmlnLmxheW91dCA9IFwiZWxrXCI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSwgXCJkZXRlY3RvclwiKTtcbnZhciBsb2FkZXIxOCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRpYWdyYW06IGRpYWdyYW0yIH0gPSBhd2FpdCBpbXBvcnQoXCIuL2NodW5rcy9tZXJtYWlkLmNvcmUvZmxvd0RpYWdyYW0tNEhTRkhMVlIubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQxOCwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjE2ID0ge1xuICBpZDogaWQxOCxcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMTgsXG4gIGxvYWRlcjogbG9hZGVyMThcbn07XG52YXIgZGV0ZWN0b3JfZGVmYXVsdCA9IHBsdWdpbjE2O1xuXG4vLyBzcmMvZGlhZ3JhbXMvdGltZWxpbmUvZGV0ZWN0b3IudHNcbnZhciBpZDE5ID0gXCJ0aW1lbGluZVwiO1xudmFyIGRldGVjdG9yMTkgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKnRpbWVsaW5lLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjE5ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIgfSA9IGF3YWl0IGltcG9ydChcIi4vY2h1bmtzL21lcm1haWQuY29yZS90aW1lbGluZS1kZWZpbml0aW9uLUJESkdLVVNSLm1qc1wiKTtcbiAgcmV0dXJuIHsgaWQ6IGlkMTksIGRpYWdyYW06IGRpYWdyYW0yIH07XG59LCBcImxvYWRlclwiKTtcbnZhciBwbHVnaW4xNyA9IHtcbiAgaWQ6IGlkMTksXG4gIGRldGVjdG9yOiBkZXRlY3RvcjE5LFxuICBsb2FkZXI6IGxvYWRlcjE5XG59O1xudmFyIGRldGVjdG9yX2RlZmF1bHQyID0gcGx1Z2luMTc7XG5cbi8vIHNyYy9kaWFncmFtcy9taW5kbWFwL2RldGVjdG9yLnRzXG52YXIgaWQyMCA9IFwibWluZG1hcFwiO1xudmFyIGRldGVjdG9yMjAgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKm1pbmRtYXAvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMjAgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL21pbmRtYXAtZGVmaW5pdGlvbi1BTE81TVhCRC5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDIwLCBkaWFncmFtOiBkaWFncmFtMiB9O1xufSwgXCJsb2FkZXJcIik7XG52YXIgcGx1Z2luMTggPSB7XG4gIGlkOiBpZDIwLFxuICBkZXRlY3RvcjogZGV0ZWN0b3IyMCxcbiAgbG9hZGVyOiBsb2FkZXIyMFxufTtcbnZhciBkZXRlY3Rvcl9kZWZhdWx0MyA9IHBsdWdpbjE4O1xuXG4vLyBzcmMvZGlhZ3JhbXMva2FuYmFuL2RldGVjdG9yLnRzXG52YXIgaWQyMSA9IFwia2FuYmFuXCI7XG52YXIgZGV0ZWN0b3IyMSA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqa2FuYmFuLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjIxID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIgfSA9IGF3YWl0IGltcG9ydChcIi4vY2h1bmtzL21lcm1haWQuY29yZS9rYW5iYW4tZGVmaW5pdGlvbi1ORFM0QUtPWi5tanNcIik7XG4gIHJldHVybiB7IGlkOiBpZDIxLCBkaWFncmFtOiBkaWFncmFtMiB9O1xufSwgXCJsb2FkZXJcIik7XG52YXIgcGx1Z2luMTkgPSB7XG4gIGlkOiBpZDIxLFxuICBkZXRlY3RvcjogZGV0ZWN0b3IyMSxcbiAgbG9hZGVyOiBsb2FkZXIyMVxufTtcbnZhciBkZXRlY3Rvcl9kZWZhdWx0NCA9IHBsdWdpbjE5O1xuXG4vLyBzcmMvZGlhZ3JhbXMvc2Fua2V5L3NhbmtleURldGVjdG9yLnRzXG52YXIgaWQyMiA9IFwic2Fua2V5XCI7XG52YXIgZGV0ZWN0b3IyMiA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqc2Fua2V5LWJldGEvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMjIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL3NhbmtleURpYWdyYW0tUUxWT1ZHSkQubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQyMiwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjIwID0ge1xuICBpZDogaWQyMixcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMjIsXG4gIGxvYWRlcjogbG9hZGVyMjJcbn07XG52YXIgc2Fua2V5RGV0ZWN0b3JfZGVmYXVsdCA9IHBsdWdpbjIwO1xuXG4vLyBzcmMvZGlhZ3JhbXMvcGFja2V0L2RldGVjdG9yLnRzXG52YXIgaWQyMyA9IFwicGFja2V0XCI7XG52YXIgZGV0ZWN0b3IyMyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHR4dCkgPT4ge1xuICByZXR1cm4gL15cXHMqcGFja2V0LWJldGEvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMjMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2RpYWdyYW0tVk5CUk81MkgubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQyMywgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBhY2tldCA9IHtcbiAgaWQ6IGlkMjMsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjIzLFxuICBsb2FkZXI6IGxvYWRlcjIzXG59O1xuXG4vLyBzcmMvZGlhZ3JhbXMvcmFkYXIvZGV0ZWN0b3IudHNcbnZhciBpZDI0ID0gXCJyYWRhclwiO1xudmFyIGRldGVjdG9yMjQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0eHQpID0+IHtcbiAgcmV0dXJuIC9eXFxzKnJhZGFyLWJldGEvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMjQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2RpYWdyYW0tU1NLQVROTFYubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQyNCwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHJhZGFyID0ge1xuICBpZDogaWQyNCxcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMjQsXG4gIGxvYWRlcjogbG9hZGVyMjRcbn07XG5cbi8vIHNyYy9kaWFncmFtcy9ibG9jay9ibG9ja0RldGVjdG9yLnRzXG52YXIgaWQyNSA9IFwiYmxvY2tcIjtcbnZhciBkZXRlY3RvcjI1ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0KSA9PiB7XG4gIHJldHVybiAvXlxccypibG9jay1iZXRhLy50ZXN0KHR4dCk7XG59LCBcImRldGVjdG9yXCIpO1xudmFyIGxvYWRlcjI1ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIgfSA9IGF3YWl0IGltcG9ydChcIi4vY2h1bmtzL21lcm1haWQuY29yZS9ibG9ja0RpYWdyYW0tSk9UM0xVWUMubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQyNSwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIHBsdWdpbjIxID0ge1xuICBpZDogaWQyNSxcbiAgZGV0ZWN0b3I6IGRldGVjdG9yMjUsXG4gIGxvYWRlcjogbG9hZGVyMjVcbn07XG52YXIgYmxvY2tEZXRlY3Rvcl9kZWZhdWx0ID0gcGx1Z2luMjE7XG5cbi8vIHNyYy9kaWFncmFtcy9hcmNoaXRlY3R1cmUvYXJjaGl0ZWN0dXJlRGV0ZWN0b3IudHNcbnZhciBpZDI2ID0gXCJhcmNoaXRlY3R1cmVcIjtcbnZhciBkZXRlY3RvcjI2ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgodHh0KSA9PiB7XG4gIHJldHVybiAvXlxccyphcmNoaXRlY3R1cmUvLnRlc3QodHh0KTtcbn0sIFwiZGV0ZWN0b3JcIik7XG52YXIgbG9hZGVyMjYgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgY29uc3QgeyBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbWVybWFpZC5jb3JlL2FyY2hpdGVjdHVyZURpYWdyYW0tSUVIUkpET0UubWpzXCIpO1xuICByZXR1cm4geyBpZDogaWQyNiwgZGlhZ3JhbTogZGlhZ3JhbTIgfTtcbn0sIFwibG9hZGVyXCIpO1xudmFyIGFyY2hpdGVjdHVyZSA9IHtcbiAgaWQ6IGlkMjYsXG4gIGRldGVjdG9yOiBkZXRlY3RvcjI2LFxuICBsb2FkZXI6IGxvYWRlcjI2XG59O1xudmFyIGFyY2hpdGVjdHVyZURldGVjdG9yX2RlZmF1bHQgPSBhcmNoaXRlY3R1cmU7XG5cbi8vIHNyYy9kaWFncmFtLWFwaS9kaWFncmFtLW9yY2hlc3RyYXRpb24udHNcbnZhciBoYXNMb2FkZWREaWFncmFtcyA9IGZhbHNlO1xudmFyIGFkZERpYWdyYW1zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGlmIChoYXNMb2FkZWREaWFncmFtcykge1xuICAgIHJldHVybjtcbiAgfVxuICBoYXNMb2FkZWREaWFncmFtcyA9IHRydWU7XG4gIHJlZ2lzdGVyRGlhZ3JhbShcImVycm9yXCIsIGVycm9yRGlhZ3JhbV9kZWZhdWx0LCAodGV4dCkgPT4ge1xuICAgIHJldHVybiB0ZXh0LnRvTG93ZXJDYXNlKCkudHJpbSgpID09PSBcImVycm9yXCI7XG4gIH0pO1xuICByZWdpc3RlckRpYWdyYW0oXG4gICAgXCItLS1cIixcbiAgICAvLyAtLS0gZGlhZ3JhbSB0eXBlIG1heSBhcHBlYXIgaWYgWUFNTCBmcm9udC1tYXR0ZXIgaXMgbm90IHBhcnNlZCBjb3JyZWN0bHlcbiAgICB7XG4gICAgICBkYjoge1xuICAgICAgICBjbGVhcjogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gICAgICAgIH0sIFwiY2xlYXJcIilcbiAgICAgIH0sXG4gICAgICBzdHlsZXM6IHt9LFxuICAgICAgLy8gc2hvdWxkIG5ldmVyIGJlIHVzZWRcbiAgICAgIHJlbmRlcmVyOiB7XG4gICAgICAgIGRyYXc6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgICAgICB9LCBcImRyYXdcIilcbiAgICAgIH0sXG4gICAgICBwYXJzZXI6IHtcbiAgICAgICAgcGFyc2U6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIFwiRGlhZ3JhbXMgYmVnaW5uaW5nIHdpdGggLS0tIGFyZSBub3QgdmFsaWQuIElmIHlvdSB3ZXJlIHRyeWluZyB0byB1c2UgYSBZQU1MIGZyb250LW1hdHRlciwgcGxlYXNlIGVuc3VyZSB0aGF0IHlvdSd2ZSBjb3JyZWN0bHkgb3BlbmVkIGFuZCBjbG9zZWQgdGhlIFlBTUwgZnJvbnQtbWF0dGVyIHdpdGggdW4taW5kZW50ZWQgYC0tLWAgYmxvY2tzXCJcbiAgICAgICAgICApO1xuICAgICAgICB9LCBcInBhcnNlXCIpXG4gICAgICB9LFxuICAgICAgaW5pdDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiBudWxsLCBcImluaXRcIilcbiAgICAgIC8vIG5vIG9wXG4gICAgfSxcbiAgICAodGV4dCkgPT4ge1xuICAgICAgcmV0dXJuIHRleHQudG9Mb3dlckNhc2UoKS50cmltU3RhcnQoKS5zdGFydHNXaXRoKFwiLS0tXCIpO1xuICAgIH1cbiAgKTtcbiAgcmVnaXN0ZXJMYXp5TG9hZGVkRGlhZ3JhbXMoXG4gICAgYzREZXRlY3Rvcl9kZWZhdWx0LFxuICAgIGRldGVjdG9yX2RlZmF1bHQ0LFxuICAgIGNsYXNzRGV0ZWN0b3JfVjJfZGVmYXVsdCxcbiAgICBjbGFzc0RldGVjdG9yX2RlZmF1bHQsXG4gICAgZXJEZXRlY3Rvcl9kZWZhdWx0LFxuICAgIGdhbnR0RGV0ZWN0b3JfZGVmYXVsdCxcbiAgICBpbmZvLFxuICAgIHBpZSxcbiAgICByZXF1aXJlbWVudERldGVjdG9yX2RlZmF1bHQsXG4gICAgc2VxdWVuY2VEZXRlY3Rvcl9kZWZhdWx0LFxuICAgIGRldGVjdG9yX2RlZmF1bHQsXG4gICAgZmxvd0RldGVjdG9yX3YyX2RlZmF1bHQsXG4gICAgZmxvd0RldGVjdG9yX2RlZmF1bHQsXG4gICAgZGV0ZWN0b3JfZGVmYXVsdDMsXG4gICAgZGV0ZWN0b3JfZGVmYXVsdDIsXG4gICAgZ2l0R3JhcGhEZXRlY3Rvcl9kZWZhdWx0LFxuICAgIHN0YXRlRGV0ZWN0b3JfVjJfZGVmYXVsdCxcbiAgICBzdGF0ZURldGVjdG9yX2RlZmF1bHQsXG4gICAgam91cm5leURldGVjdG9yX2RlZmF1bHQsXG4gICAgcXVhZHJhbnREZXRlY3Rvcl9kZWZhdWx0LFxuICAgIHNhbmtleURldGVjdG9yX2RlZmF1bHQsXG4gICAgcGFja2V0LFxuICAgIHh5Y2hhcnREZXRlY3Rvcl9kZWZhdWx0LFxuICAgIGJsb2NrRGV0ZWN0b3JfZGVmYXVsdCxcbiAgICBhcmNoaXRlY3R1cmVEZXRlY3Rvcl9kZWZhdWx0LFxuICAgIHJhZGFyXG4gICk7XG59LCBcImFkZERpYWdyYW1zXCIpO1xuXG4vLyBzcmMvZGlhZ3JhbS1hcGkvbG9hZERpYWdyYW0udHNcbnZhciBsb2FkUmVnaXN0ZXJlZERpYWdyYW1zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoKSA9PiB7XG4gIGxvZy5kZWJ1ZyhgTG9hZGluZyByZWdpc3RlcmVkIGRpYWdyYW1zYCk7XG4gIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoXG4gICAgT2JqZWN0LmVudHJpZXMoZGV0ZWN0b3JzKS5tYXAoYXN5bmMgKFtrZXksIHsgZGV0ZWN0b3I6IGRldGVjdG9yMjcsIGxvYWRlcjogbG9hZGVyMjcgfV0pID0+IHtcbiAgICAgIGlmIChsb2FkZXIyNykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGdldERpYWdyYW0oa2V5KTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgZGlhZ3JhbTogZGlhZ3JhbTIsIGlkOiBpZDI3IH0gPSBhd2FpdCBsb2FkZXIyNygpO1xuICAgICAgICAgICAgcmVnaXN0ZXJEaWFncmFtKGlkMjcsIGRpYWdyYW0yLCBkZXRlY3RvcjI3KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGxvZy5lcnJvcihgRmFpbGVkIHRvIGxvYWQgZXh0ZXJuYWwgZGlhZ3JhbSB3aXRoIGtleSAke2tleX0uIFJlbW92aW5nIGZyb20gZGV0ZWN0b3JzLmApO1xuICAgICAgICAgICAgZGVsZXRlIGRldGVjdG9yc1trZXldO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICk7XG4gIGNvbnN0IGZhaWxlZCA9IHJlc3VsdHMuZmlsdGVyKChyZXN1bHQpID0+IHJlc3VsdC5zdGF0dXMgPT09IFwicmVqZWN0ZWRcIik7XG4gIGlmIChmYWlsZWQubGVuZ3RoID4gMCkge1xuICAgIGxvZy5lcnJvcihgRmFpbGVkIHRvIGxvYWQgJHtmYWlsZWQubGVuZ3RofSBleHRlcm5hbCBkaWFncmFtc2ApO1xuICAgIGZvciAoY29uc3QgcmVzIG9mIGZhaWxlZCkge1xuICAgICAgbG9nLmVycm9yKHJlcyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgJHtmYWlsZWQubGVuZ3RofSBleHRlcm5hbCBkaWFncmFtc2ApO1xuICB9XG59LCBcImxvYWRSZWdpc3RlcmVkRGlhZ3JhbXNcIik7XG5cbi8vIHNyYy9tZXJtYWlkQVBJLnRzXG5pbXBvcnQgeyBzZWxlY3QgfSBmcm9tIFwiZDNcIjtcbmltcG9ydCB7IGNvbXBpbGUsIHNlcmlhbGl6ZSwgc3RyaW5naWZ5IH0gZnJvbSBcInN0eWxpc1wiO1xuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCI7XG5pbXBvcnQgaXNFbXB0eSBmcm9tIFwibG9kYXNoLWVzL2lzRW1wdHkuanNcIjtcblxuLy8gc3JjL2FjY2Vzc2liaWxpdHkudHNcbnZhciBTVkdfUk9MRSA9IFwiZ3JhcGhpY3MtZG9jdW1lbnQgZG9jdW1lbnRcIjtcbmZ1bmN0aW9uIHNldEExMXlEaWFncmFtSW5mbyhzdmcsIGRpYWdyYW1UeXBlKSB7XG4gIHN2Zy5hdHRyKFwicm9sZVwiLCBTVkdfUk9MRSk7XG4gIGlmIChkaWFncmFtVHlwZSAhPT0gXCJcIikge1xuICAgIHN2Zy5hdHRyKFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIiwgZGlhZ3JhbVR5cGUpO1xuICB9XG59XG5fX25hbWUoc2V0QTExeURpYWdyYW1JbmZvLCBcInNldEExMXlEaWFncmFtSW5mb1wiKTtcbmZ1bmN0aW9uIGFkZFNWR2ExMXlUaXRsZURlc2NyaXB0aW9uKHN2ZywgYTExeVRpdGxlLCBhMTF5RGVzYywgYmFzZUlkKSB7XG4gIGlmIChzdmcuaW5zZXJ0ID09PSB2b2lkIDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGExMXlEZXNjKSB7XG4gICAgY29uc3QgZGVzY0lkID0gYGNoYXJ0LWRlc2MtJHtiYXNlSWR9YDtcbiAgICBzdmcuYXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIiwgZGVzY0lkKTtcbiAgICBzdmcuaW5zZXJ0KFwiZGVzY1wiLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwiaWRcIiwgZGVzY0lkKS50ZXh0KGExMXlEZXNjKTtcbiAgfVxuICBpZiAoYTExeVRpdGxlKSB7XG4gICAgY29uc3QgdGl0bGVJZCA9IGBjaGFydC10aXRsZS0ke2Jhc2VJZH1gO1xuICAgIHN2Zy5hdHRyKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIHRpdGxlSWQpO1xuICAgIHN2Zy5pbnNlcnQoXCJ0aXRsZVwiLCBcIjpmaXJzdC1jaGlsZFwiKS5hdHRyKFwiaWRcIiwgdGl0bGVJZCkudGV4dChhMTF5VGl0bGUpO1xuICB9XG59XG5fX25hbWUoYWRkU1ZHYTExeVRpdGxlRGVzY3JpcHRpb24sIFwiYWRkU1ZHYTExeVRpdGxlRGVzY3JpcHRpb25cIik7XG5cbi8vIHNyYy9EaWFncmFtLnRzXG52YXIgRGlhZ3JhbSA9IGNsYXNzIF9EaWFncmFtIHtcbiAgY29uc3RydWN0b3IodHlwZSwgdGV4dCwgZGIsIHBhcnNlciwgcmVuZGVyZXIyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuZGIgPSBkYjtcbiAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXIyO1xuICB9XG4gIHN0YXRpYyB7XG4gICAgX19uYW1lKHRoaXMsIFwiRGlhZ3JhbVwiKTtcbiAgfVxuICBzdGF0aWMgYXN5bmMgZnJvbVRleHQodGV4dCwgbWV0YWRhdGEgPSB7fSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpO1xuICAgIGNvbnN0IHR5cGUgPSBkZXRlY3RUeXBlKHRleHQsIGNvbmZpZyk7XG4gICAgdGV4dCA9IGVuY29kZUVudGl0aWVzKHRleHQpICsgXCJcXG5cIjtcbiAgICB0cnkge1xuICAgICAgZ2V0RGlhZ3JhbSh0eXBlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGNvbnN0IGxvYWRlcjI3ID0gZ2V0RGlhZ3JhbUxvYWRlcih0eXBlKTtcbiAgICAgIGlmICghbG9hZGVyMjcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVua25vd25EaWFncmFtRXJyb3IoYERpYWdyYW0gJHt0eXBlfSBub3QgZm91bmQuYCk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGlkOiBpZDI3LCBkaWFncmFtOiBkaWFncmFtMiB9ID0gYXdhaXQgbG9hZGVyMjcoKTtcbiAgICAgIHJlZ2lzdGVyRGlhZ3JhbShpZDI3LCBkaWFncmFtMik7XG4gICAgfVxuICAgIGNvbnN0IHsgZGIsIHBhcnNlciwgcmVuZGVyZXI6IHJlbmRlcmVyMiwgaW5pdDogaW5pdDIgfSA9IGdldERpYWdyYW0odHlwZSk7XG4gICAgaWYgKHBhcnNlci5wYXJzZXIpIHtcbiAgICAgIHBhcnNlci5wYXJzZXIueXkgPSBkYjtcbiAgICB9XG4gICAgZGIuY2xlYXI/LigpO1xuICAgIGluaXQyPy4oY29uZmlnKTtcbiAgICBpZiAobWV0YWRhdGEudGl0bGUpIHtcbiAgICAgIGRiLnNldERpYWdyYW1UaXRsZT8uKG1ldGFkYXRhLnRpdGxlKTtcbiAgICB9XG4gICAgYXdhaXQgcGFyc2VyLnBhcnNlKHRleHQpO1xuICAgIHJldHVybiBuZXcgX0RpYWdyYW0odHlwZSwgdGV4dCwgZGIsIHBhcnNlciwgcmVuZGVyZXIyKTtcbiAgfVxuICBhc3luYyByZW5kZXIoaWQyNywgdmVyc2lvbikge1xuICAgIGF3YWl0IHRoaXMucmVuZGVyZXIuZHJhdyh0aGlzLnRleHQsIGlkMjcsIHZlcnNpb24sIHRoaXMpO1xuICB9XG4gIGdldFBhcnNlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZXI7XG4gIH1cbiAgZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlO1xuICB9XG59O1xuXG4vLyBzcmMvaW50ZXJhY3Rpb25EYi50c1xudmFyIGludGVyYWN0aW9uRnVuY3Rpb25zID0gW107XG52YXIgYXR0YWNoRnVuY3Rpb25zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gIGludGVyYWN0aW9uRnVuY3Rpb25zLmZvckVhY2goKGYpID0+IHtcbiAgICBmKCk7XG4gIH0pO1xuICBpbnRlcmFjdGlvbkZ1bmN0aW9ucyA9IFtdO1xufSwgXCJhdHRhY2hGdW5jdGlvbnNcIik7XG5cbi8vIHNyYy9kaWFncmFtLWFwaS9jb21tZW50cy50c1xudmFyIGNsZWFudXBDb21tZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHRleHQpID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvXlxccyolJSg/IXspW15cXG5dK1xcbj8vZ20sIFwiXCIpLnRyaW1TdGFydCgpO1xufSwgXCJjbGVhbnVwQ29tbWVudHNcIik7XG5cbi8vIHNyYy9kaWFncmFtLWFwaS9mcm9udG1hdHRlci50c1xuZnVuY3Rpb24gZXh0cmFjdEZyb250TWF0dGVyKHRleHQpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IHRleHQubWF0Y2goZnJvbnRNYXR0ZXJSZWdleCk7XG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0LFxuICAgICAgbWV0YWRhdGE6IHt9XG4gICAgfTtcbiAgfVxuICBsZXQgcGFyc2VkID0gbG9hZChtYXRjaGVzWzFdLCB7XG4gICAgLy8gVG8gc3VwcG9ydCBjb25maWcsIHdlIG5lZWQgSlNPTiBzY2hlbWEuXG4gICAgLy8gaHR0cHM6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMzIzMVxuICAgIHNjaGVtYTogSlNPTl9TQ0hFTUFcbiAgfSkgPz8ge307XG4gIHBhcnNlZCA9IHR5cGVvZiBwYXJzZWQgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkocGFyc2VkKSA/IHBhcnNlZCA6IHt9O1xuICBjb25zdCBtZXRhZGF0YSA9IHt9O1xuICBpZiAocGFyc2VkLmRpc3BsYXlNb2RlKSB7XG4gICAgbWV0YWRhdGEuZGlzcGxheU1vZGUgPSBwYXJzZWQuZGlzcGxheU1vZGUudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAocGFyc2VkLnRpdGxlKSB7XG4gICAgbWV0YWRhdGEudGl0bGUgPSBwYXJzZWQudGl0bGUudG9TdHJpbmcoKTtcbiAgfVxuICBpZiAocGFyc2VkLmNvbmZpZykge1xuICAgIG1ldGFkYXRhLmNvbmZpZyA9IHBhcnNlZC5jb25maWc7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0ZXh0OiB0ZXh0LnNsaWNlKG1hdGNoZXNbMF0ubGVuZ3RoKSxcbiAgICBtZXRhZGF0YVxuICB9O1xufVxuX19uYW1lKGV4dHJhY3RGcm9udE1hdHRlciwgXCJleHRyYWN0RnJvbnRNYXR0ZXJcIik7XG5cbi8vIHNyYy9wcmVwcm9jZXNzLnRzXG52YXIgY2xlYW51cFRleHQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb2RlKSA9PiB7XG4gIHJldHVybiBjb2RlLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIikucmVwbGFjZShcbiAgICAvPChcXHcrKShbXj5dKik+L2csXG4gICAgKG1hdGNoLCB0YWcsIGF0dHJpYnV0ZXMpID0+IFwiPFwiICsgdGFnICsgYXR0cmlidXRlcy5yZXBsYWNlKC89XCIoW15cIl0qKVwiL2csIFwiPSckMSdcIikgKyBcIj5cIlxuICApO1xufSwgXCJjbGVhbnVwVGV4dFwiKTtcbnZhciBwcm9jZXNzRnJvbnRtYXR0ZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChjb2RlKSA9PiB7XG4gIGNvbnN0IHsgdGV4dCwgbWV0YWRhdGEgfSA9IGV4dHJhY3RGcm9udE1hdHRlcihjb2RlKTtcbiAgY29uc3QgeyBkaXNwbGF5TW9kZSwgdGl0bGUsIGNvbmZpZyA9IHt9IH0gPSBtZXRhZGF0YTtcbiAgaWYgKGRpc3BsYXlNb2RlKSB7XG4gICAgaWYgKCFjb25maWcuZ2FudHQpIHtcbiAgICAgIGNvbmZpZy5nYW50dCA9IHt9O1xuICAgIH1cbiAgICBjb25maWcuZ2FudHQuZGlzcGxheU1vZGUgPSBkaXNwbGF5TW9kZTtcbiAgfVxuICByZXR1cm4geyB0aXRsZSwgY29uZmlnLCB0ZXh0IH07XG59LCBcInByb2Nlc3NGcm9udG1hdHRlclwiKTtcbnZhciBwcm9jZXNzRGlyZWN0aXZlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvZGUpID0+IHtcbiAgY29uc3QgaW5pdERpcmVjdGl2ZSA9IHV0aWxzX2RlZmF1bHQuZGV0ZWN0SW5pdChjb2RlKSA/PyB7fTtcbiAgY29uc3Qgd3JhcERpcmVjdGl2ZXMgPSB1dGlsc19kZWZhdWx0LmRldGVjdERpcmVjdGl2ZShjb2RlLCBcIndyYXBcIik7XG4gIGlmIChBcnJheS5pc0FycmF5KHdyYXBEaXJlY3RpdmVzKSkge1xuICAgIGluaXREaXJlY3RpdmUud3JhcCA9IHdyYXBEaXJlY3RpdmVzLnNvbWUoKHsgdHlwZSB9KSA9PiB0eXBlID09PSBcIndyYXBcIik7XG4gIH0gZWxzZSBpZiAod3JhcERpcmVjdGl2ZXM/LnR5cGUgPT09IFwid3JhcFwiKSB7XG4gICAgaW5pdERpcmVjdGl2ZS53cmFwID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRleHQ6IHJlbW92ZURpcmVjdGl2ZXMoY29kZSksXG4gICAgZGlyZWN0aXZlOiBpbml0RGlyZWN0aXZlXG4gIH07XG59LCBcInByb2Nlc3NEaXJlY3RpdmVzXCIpO1xuZnVuY3Rpb24gcHJlcHJvY2Vzc0RpYWdyYW0oY29kZSkge1xuICBjb25zdCBjbGVhbmVkQ29kZSA9IGNsZWFudXBUZXh0KGNvZGUpO1xuICBjb25zdCBmcm9udE1hdHRlclJlc3VsdCA9IHByb2Nlc3NGcm9udG1hdHRlcihjbGVhbmVkQ29kZSk7XG4gIGNvbnN0IGRpcmVjdGl2ZVJlc3VsdCA9IHByb2Nlc3NEaXJlY3RpdmVzKGZyb250TWF0dGVyUmVzdWx0LnRleHQpO1xuICBjb25zdCBjb25maWcgPSBjbGVhbkFuZE1lcmdlKGZyb250TWF0dGVyUmVzdWx0LmNvbmZpZywgZGlyZWN0aXZlUmVzdWx0LmRpcmVjdGl2ZSk7XG4gIGNvZGUgPSBjbGVhbnVwQ29tbWVudHMoZGlyZWN0aXZlUmVzdWx0LnRleHQpO1xuICByZXR1cm4ge1xuICAgIGNvZGUsXG4gICAgdGl0bGU6IGZyb250TWF0dGVyUmVzdWx0LnRpdGxlLFxuICAgIGNvbmZpZ1xuICB9O1xufVxuX19uYW1lKHByZXByb2Nlc3NEaWFncmFtLCBcInByZXByb2Nlc3NEaWFncmFtXCIpO1xuXG4vLyBzcmMvdXRpbHMvYmFzZTY0LnRzXG5mdW5jdGlvbiB0b0Jhc2U2NChzdHIpIHtcbiAgY29uc3QgdXRmOEJ5dGVzID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gIGNvbnN0IHV0ZjhTdHIgPSBBcnJheS5mcm9tKHV0ZjhCeXRlcywgKGJ5dGUpID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KGJ5dGUpKS5qb2luKFwiXCIpO1xuICByZXR1cm4gYnRvYSh1dGY4U3RyKTtcbn1cbl9fbmFtZSh0b0Jhc2U2NCwgXCJ0b0Jhc2U2NFwiKTtcblxuLy8gc3JjL21lcm1haWRBUEkudHNcbnZhciBNQVhfVEVYVExFTkdUSCA9IDVlNDtcbnZhciBNQVhfVEVYVExFTkdUSF9FWENFRURFRF9NU0cgPSBcImdyYXBoIFRCO2FbTWF4aW11bSB0ZXh0IHNpemUgaW4gZGlhZ3JhbSBleGNlZWRlZF07c3R5bGUgYSBmaWxsOiNmYWFcIjtcbnZhciBTRUNVUklUWV9MVkxfU0FOREJPWCA9IFwic2FuZGJveFwiO1xudmFyIFNFQ1VSSVRZX0xWTF9MT09TRSA9IFwibG9vc2VcIjtcbnZhciBYTUxOU19TVkdfU1REID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xudmFyIFhNTE5TX1hMSU5LX1NURCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiO1xudmFyIFhNTE5TX1hIVE1MX1NURCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xudmFyIElGUkFNRV9XSURUSCA9IFwiMTAwJVwiO1xudmFyIElGUkFNRV9IRUlHSFQgPSBcIjEwMCVcIjtcbnZhciBJRlJBTUVfU1RZTEVTID0gXCJib3JkZXI6MDttYXJnaW46MDtcIjtcbnZhciBJRlJBTUVfQk9EWV9TVFlMRSA9IFwibWFyZ2luOjBcIjtcbnZhciBJRlJBTUVfU0FOREJPWF9PUFRTID0gXCJhbGxvdy10b3AtbmF2aWdhdGlvbi1ieS11c2VyLWFjdGl2YXRpb24gYWxsb3ctcG9wdXBzXCI7XG52YXIgSUZSQU1FX05PVF9TVVBQT1JURURfTVNHID0gJ1RoZSBcImlmcmFtZVwiIHRhZyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgYnJvd3Nlci4nO1xudmFyIERPTVBVUklGWV9UQUdTID0gW1wiZm9yZWlnbm9iamVjdFwiXTtcbnZhciBET01QVVJJRllfQVRUUiA9IFtcImRvbWluYW50LWJhc2VsaW5lXCJdO1xuZnVuY3Rpb24gcHJvY2Vzc0FuZFNldENvbmZpZ3ModGV4dCkge1xuICBjb25zdCBwcm9jZXNzZWQgPSBwcmVwcm9jZXNzRGlhZ3JhbSh0ZXh0KTtcbiAgcmVzZXQoKTtcbiAgYWRkRGlyZWN0aXZlKHByb2Nlc3NlZC5jb25maWcgPz8ge30pO1xuICByZXR1cm4gcHJvY2Vzc2VkO1xufVxuX19uYW1lKHByb2Nlc3NBbmRTZXRDb25maWdzLCBcInByb2Nlc3NBbmRTZXRDb25maWdzXCIpO1xuYXN5bmMgZnVuY3Rpb24gcGFyc2UodGV4dCwgcGFyc2VPcHRpb25zKSB7XG4gIGFkZERpYWdyYW1zKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBjb2RlLCBjb25maWcgfSA9IHByb2Nlc3NBbmRTZXRDb25maWdzKHRleHQpO1xuICAgIGNvbnN0IGRpYWdyYW0yID0gYXdhaXQgZ2V0RGlhZ3JhbUZyb21UZXh0KGNvZGUpO1xuICAgIHJldHVybiB7IGRpYWdyYW1UeXBlOiBkaWFncmFtMi50eXBlLCBjb25maWcgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAocGFyc2VPcHRpb25zPy5zdXBwcmVzc0Vycm9ycykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuX19uYW1lKHBhcnNlLCBcInBhcnNlXCIpO1xudmFyIGNzc0ltcG9ydGFudFN0eWxlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNzc0NsYXNzLCBlbGVtZW50LCBjc3NDbGFzc2VzID0gW10pID0+IHtcbiAgcmV0dXJuIGBcbi4ke2Nzc0NsYXNzfSAke2VsZW1lbnR9IHsgJHtjc3NDbGFzc2VzLmpvaW4oXCIgIWltcG9ydGFudDsgXCIpfSAhaW1wb3J0YW50OyB9YDtcbn0sIFwiY3NzSW1wb3J0YW50U3R5bGVzXCIpO1xudmFyIGNyZWF0ZUNzc1N0eWxlcyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGNvbmZpZywgY2xhc3NEZWZzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSkgPT4ge1xuICBsZXQgY3NzU3R5bGVzID0gXCJcIjtcbiAgaWYgKGNvbmZpZy50aGVtZUNTUyAhPT0gdm9pZCAwKSB7XG4gICAgY3NzU3R5bGVzICs9IGBcbiR7Y29uZmlnLnRoZW1lQ1NTfWA7XG4gIH1cbiAgaWYgKGNvbmZpZy5mb250RmFtaWx5ICE9PSB2b2lkIDApIHtcbiAgICBjc3NTdHlsZXMgKz0gYFxuOnJvb3QgeyAtLW1lcm1haWQtZm9udC1mYW1pbHk6ICR7Y29uZmlnLmZvbnRGYW1pbHl9fWA7XG4gIH1cbiAgaWYgKGNvbmZpZy5hbHRGb250RmFtaWx5ICE9PSB2b2lkIDApIHtcbiAgICBjc3NTdHlsZXMgKz0gYFxuOnJvb3QgeyAtLW1lcm1haWQtYWx0LWZvbnQtZmFtaWx5OiAke2NvbmZpZy5hbHRGb250RmFtaWx5fX1gO1xuICB9XG4gIGlmIChjbGFzc0RlZnMgaW5zdGFuY2VvZiBNYXApIHtcbiAgICBjb25zdCBodG1sTGFiZWxzID0gY29uZmlnLmh0bWxMYWJlbHMgPz8gY29uZmlnLmZsb3djaGFydD8uaHRtbExhYmVscztcbiAgICBjb25zdCBjc3NIdG1sRWxlbWVudHMgPSBbXCI+ICpcIiwgXCJzcGFuXCJdO1xuICAgIGNvbnN0IGNzc1NoYXBlRWxlbWVudHMgPSBbXCJyZWN0XCIsIFwicG9seWdvblwiLCBcImVsbGlwc2VcIiwgXCJjaXJjbGVcIiwgXCJwYXRoXCJdO1xuICAgIGNvbnN0IGNzc0VsZW1lbnRzID0gaHRtbExhYmVscyA/IGNzc0h0bWxFbGVtZW50cyA6IGNzc1NoYXBlRWxlbWVudHM7XG4gICAgY2xhc3NEZWZzLmZvckVhY2goKHN0eWxlQ2xhc3NEZWYpID0+IHtcbiAgICAgIGlmICghaXNFbXB0eShzdHlsZUNsYXNzRGVmLnN0eWxlcykpIHtcbiAgICAgICAgY3NzRWxlbWVudHMuZm9yRWFjaCgoY3NzRWxlbWVudCkgPT4ge1xuICAgICAgICAgIGNzc1N0eWxlcyArPSBjc3NJbXBvcnRhbnRTdHlsZXMoc3R5bGVDbGFzc0RlZi5pZCwgY3NzRWxlbWVudCwgc3R5bGVDbGFzc0RlZi5zdHlsZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNFbXB0eShzdHlsZUNsYXNzRGVmLnRleHRTdHlsZXMpKSB7XG4gICAgICAgIGNzc1N0eWxlcyArPSBjc3NJbXBvcnRhbnRTdHlsZXMoXG4gICAgICAgICAgc3R5bGVDbGFzc0RlZi5pZCxcbiAgICAgICAgICBcInRzcGFuXCIsXG4gICAgICAgICAgKHN0eWxlQ2xhc3NEZWY/LnRleHRTdHlsZXMgfHwgW10pLm1hcCgocykgPT4gcy5yZXBsYWNlKFwiY29sb3JcIiwgXCJmaWxsXCIpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBjc3NTdHlsZXM7XG59LCBcImNyZWF0ZUNzc1N0eWxlc1wiKTtcbnZhciBjcmVhdGVVc2VyU3R5bGVzID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoY29uZmlnLCBncmFwaFR5cGUsIGNsYXNzRGVmcywgc3ZnSWQpID0+IHtcbiAgY29uc3QgdXNlckNTU3N0eWxlcyA9IGNyZWF0ZUNzc1N0eWxlcyhjb25maWcsIGNsYXNzRGVmcyk7XG4gIGNvbnN0IGFsbFN0eWxlcyA9IHN0eWxlc19kZWZhdWx0KGdyYXBoVHlwZSwgdXNlckNTU3N0eWxlcywgY29uZmlnLnRoZW1lVmFyaWFibGVzKTtcbiAgcmV0dXJuIHNlcmlhbGl6ZShjb21waWxlKGAke3N2Z0lkfXske2FsbFN0eWxlc319YCksIHN0cmluZ2lmeSk7XG59LCBcImNyZWF0ZVVzZXJTdHlsZXNcIik7XG52YXIgY2xlYW5VcFN2Z0NvZGUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChzdmdDb2RlID0gXCJcIiwgaW5TYW5kYm94TW9kZSwgdXNlQXJyb3dNYXJrZXJVcmxzKSA9PiB7XG4gIGxldCBjbGVhbmVkVXBTdmcgPSBzdmdDb2RlO1xuICBpZiAoIXVzZUFycm93TWFya2VyVXJscyAmJiAhaW5TYW5kYm94TW9kZSkge1xuICAgIGNsZWFuZWRVcFN2ZyA9IGNsZWFuZWRVcFN2Zy5yZXBsYWNlKFxuICAgICAgL21hcmtlci1lbmQ9XCJ1cmxcXChbXFxkKy4vOj0/QS1aYS16LV0qPyMvZyxcbiAgICAgICdtYXJrZXItZW5kPVwidXJsKCMnXG4gICAgKTtcbiAgfVxuICBjbGVhbmVkVXBTdmcgPSBkZWNvZGVFbnRpdGllcyhjbGVhbmVkVXBTdmcpO1xuICBjbGVhbmVkVXBTdmcgPSBjbGVhbmVkVXBTdmcucmVwbGFjZSgvPGJyPi9nLCBcIjxici8+XCIpO1xuICByZXR1cm4gY2xlYW5lZFVwU3ZnO1xufSwgXCJjbGVhblVwU3ZnQ29kZVwiKTtcbnZhciBwdXRJbnRvSUZyYW1lID0gLyogQF9fUFVSRV9fICovIF9fbmFtZSgoc3ZnQ29kZSA9IFwiXCIsIHN2Z0VsZW1lbnQpID0+IHtcbiAgY29uc3QgaGVpZ2h0ID0gc3ZnRWxlbWVudD8udmlld0JveD8uYmFzZVZhbD8uaGVpZ2h0ID8gc3ZnRWxlbWVudC52aWV3Qm94LmJhc2VWYWwuaGVpZ2h0ICsgXCJweFwiIDogSUZSQU1FX0hFSUdIVDtcbiAgY29uc3QgYmFzZTY0ZW5jb2RlZFNyYyA9IHRvQmFzZTY0KGA8Ym9keSBzdHlsZT1cIiR7SUZSQU1FX0JPRFlfU1RZTEV9XCI+JHtzdmdDb2RlfTwvYm9keT5gKTtcbiAgcmV0dXJuIGA8aWZyYW1lIHN0eWxlPVwid2lkdGg6JHtJRlJBTUVfV0lEVEh9O2hlaWdodDoke2hlaWdodH07JHtJRlJBTUVfU1RZTEVTfVwiIHNyYz1cImRhdGE6dGV4dC9odG1sO2NoYXJzZXQ9VVRGLTg7YmFzZTY0LCR7YmFzZTY0ZW5jb2RlZFNyY31cIiBzYW5kYm94PVwiJHtJRlJBTUVfU0FOREJPWF9PUFRTfVwiPlxuICAke0lGUkFNRV9OT1RfU1VQUE9SVEVEX01TR31cbjwvaWZyYW1lPmA7XG59LCBcInB1dEludG9JRnJhbWVcIik7XG52YXIgYXBwZW5kRGl2U3ZnRyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKHBhcmVudFJvb3QsIGlkMjcsIGVuY2xvc2luZ0RpdklkLCBkaXZTdHlsZSwgc3ZnWGxpbmspID0+IHtcbiAgY29uc3QgZW5jbG9zaW5nRGl2ID0gcGFyZW50Um9vdC5hcHBlbmQoXCJkaXZcIik7XG4gIGVuY2xvc2luZ0Rpdi5hdHRyKFwiaWRcIiwgZW5jbG9zaW5nRGl2SWQpO1xuICBpZiAoZGl2U3R5bGUpIHtcbiAgICBlbmNsb3NpbmdEaXYuYXR0cihcInN0eWxlXCIsIGRpdlN0eWxlKTtcbiAgfVxuICBjb25zdCBzdmdOb2RlID0gZW5jbG9zaW5nRGl2LmFwcGVuZChcInN2Z1wiKS5hdHRyKFwiaWRcIiwgaWQyNykuYXR0cihcIndpZHRoXCIsIFwiMTAwJVwiKS5hdHRyKFwieG1sbnNcIiwgWE1MTlNfU1ZHX1NURCk7XG4gIGlmIChzdmdYbGluaykge1xuICAgIHN2Z05vZGUuYXR0cihcInhtbG5zOnhsaW5rXCIsIHN2Z1hsaW5rKTtcbiAgfVxuICBzdmdOb2RlLmFwcGVuZChcImdcIik7XG4gIHJldHVybiBwYXJlbnRSb290O1xufSwgXCJhcHBlbmREaXZTdmdHXCIpO1xuZnVuY3Rpb24gc2FuZGJveGVkSWZyYW1lKHBhcmVudE5vZGUsIGlGcmFtZUlkKSB7XG4gIHJldHVybiBwYXJlbnROb2RlLmFwcGVuZChcImlmcmFtZVwiKS5hdHRyKFwiaWRcIiwgaUZyYW1lSWQpLmF0dHIoXCJzdHlsZVwiLCBcIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7XCIpLmF0dHIoXCJzYW5kYm94XCIsIFwiXCIpO1xufVxuX19uYW1lKHNhbmRib3hlZElmcmFtZSwgXCJzYW5kYm94ZWRJZnJhbWVcIik7XG52YXIgcmVtb3ZlRXhpc3RpbmdFbGVtZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGRvYywgaWQyNywgZGl2SWQsIGlGcmFtZUlkKSA9PiB7XG4gIGRvYy5nZXRFbGVtZW50QnlJZChpZDI3KT8ucmVtb3ZlKCk7XG4gIGRvYy5nZXRFbGVtZW50QnlJZChkaXZJZCk/LnJlbW92ZSgpO1xuICBkb2MuZ2V0RWxlbWVudEJ5SWQoaUZyYW1lSWQpPy5yZW1vdmUoKTtcbn0sIFwicmVtb3ZlRXhpc3RpbmdFbGVtZW50c1wiKTtcbnZhciByZW5kZXIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jIGZ1bmN0aW9uKGlkMjcsIHRleHQsIHN2Z0NvbnRhaW5pbmdFbGVtZW50KSB7XG4gIGFkZERpYWdyYW1zKCk7XG4gIGNvbnN0IHByb2Nlc3NlZCA9IHByb2Nlc3NBbmRTZXRDb25maWdzKHRleHQpO1xuICB0ZXh0ID0gcHJvY2Vzc2VkLmNvZGU7XG4gIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpO1xuICBsb2cuZGVidWcoY29uZmlnKTtcbiAgaWYgKHRleHQubGVuZ3RoID4gKGNvbmZpZz8ubWF4VGV4dFNpemUgPz8gTUFYX1RFWFRMRU5HVEgpKSB7XG4gICAgdGV4dCA9IE1BWF9URVhUTEVOR1RIX0VYQ0VFREVEX01TRztcbiAgfVxuICBjb25zdCBpZFNlbGVjdG9yID0gXCIjXCIgKyBpZDI3O1xuICBjb25zdCBpRnJhbWVJRCA9IFwiaVwiICsgaWQyNztcbiAgY29uc3QgaUZyYW1lSURfc2VsZWN0b3IgPSBcIiNcIiArIGlGcmFtZUlEO1xuICBjb25zdCBlbmNsb3NpbmdEaXZJRCA9IFwiZFwiICsgaWQyNztcbiAgY29uc3QgZW5jbG9zaW5nRGl2SURfc2VsZWN0b3IgPSBcIiNcIiArIGVuY2xvc2luZ0RpdklEO1xuICBjb25zdCByZW1vdmVUZW1wRWxlbWVudHMgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCgpID0+IHtcbiAgICBjb25zdCB0bXBFbGVtZW50U2VsZWN0b3IgPSBpc1NhbmRib3hlZCA/IGlGcmFtZUlEX3NlbGVjdG9yIDogZW5jbG9zaW5nRGl2SURfc2VsZWN0b3I7XG4gICAgY29uc3Qgbm9kZSA9IHNlbGVjdCh0bXBFbGVtZW50U2VsZWN0b3IpLm5vZGUoKTtcbiAgICBpZiAobm9kZSAmJiBcInJlbW92ZVwiIGluIG5vZGUpIHtcbiAgICAgIG5vZGUucmVtb3ZlKCk7XG4gICAgfVxuICB9LCBcInJlbW92ZVRlbXBFbGVtZW50c1wiKTtcbiAgbGV0IHJvb3QgPSBzZWxlY3QoXCJib2R5XCIpO1xuICBjb25zdCBpc1NhbmRib3hlZCA9IGNvbmZpZy5zZWN1cml0eUxldmVsID09PSBTRUNVUklUWV9MVkxfU0FOREJPWDtcbiAgY29uc3QgaXNMb29zZVNlY3VyaXR5TGV2ZWwgPSBjb25maWcuc2VjdXJpdHlMZXZlbCA9PT0gU0VDVVJJVFlfTFZMX0xPT1NFO1xuICBjb25zdCBmb250RmFtaWx5ID0gY29uZmlnLmZvbnRGYW1pbHk7XG4gIGlmIChzdmdDb250YWluaW5nRWxlbWVudCAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHN2Z0NvbnRhaW5pbmdFbGVtZW50KSB7XG4gICAgICBzdmdDb250YWluaW5nRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAoaXNTYW5kYm94ZWQpIHtcbiAgICAgIGNvbnN0IGlmcmFtZSA9IHNhbmRib3hlZElmcmFtZShzZWxlY3Qoc3ZnQ29udGFpbmluZ0VsZW1lbnQpLCBpRnJhbWVJRCk7XG4gICAgICByb290ID0gc2VsZWN0KGlmcmFtZS5ub2RlcygpWzBdLmNvbnRlbnREb2N1bWVudC5ib2R5KTtcbiAgICAgIHJvb3Qubm9kZSgpLnN0eWxlLm1hcmdpbiA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QgPSBzZWxlY3Qoc3ZnQ29udGFpbmluZ0VsZW1lbnQpO1xuICAgIH1cbiAgICBhcHBlbmREaXZTdmdHKHJvb3QsIGlkMjcsIGVuY2xvc2luZ0RpdklELCBgZm9udC1mYW1pbHk6ICR7Zm9udEZhbWlseX1gLCBYTUxOU19YTElOS19TVEQpO1xuICB9IGVsc2Uge1xuICAgIHJlbW92ZUV4aXN0aW5nRWxlbWVudHMoZG9jdW1lbnQsIGlkMjcsIGVuY2xvc2luZ0RpdklELCBpRnJhbWVJRCk7XG4gICAgaWYgKGlzU2FuZGJveGVkKSB7XG4gICAgICBjb25zdCBpZnJhbWUgPSBzYW5kYm94ZWRJZnJhbWUoc2VsZWN0KFwiYm9keVwiKSwgaUZyYW1lSUQpO1xuICAgICAgcm9vdCA9IHNlbGVjdChpZnJhbWUubm9kZXMoKVswXS5jb250ZW50RG9jdW1lbnQuYm9keSk7XG4gICAgICByb290Lm5vZGUoKS5zdHlsZS5tYXJnaW4gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290ID0gc2VsZWN0KFwiYm9keVwiKTtcbiAgICB9XG4gICAgYXBwZW5kRGl2U3ZnRyhyb290LCBpZDI3LCBlbmNsb3NpbmdEaXZJRCk7XG4gIH1cbiAgbGV0IGRpYWc7XG4gIGxldCBwYXJzZUVuY291bnRlcmVkRXhjZXB0aW9uO1xuICB0cnkge1xuICAgIGRpYWcgPSBhd2FpdCBEaWFncmFtLmZyb21UZXh0KHRleHQsIHsgdGl0bGU6IHByb2Nlc3NlZC50aXRsZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoY29uZmlnLnN1cHByZXNzRXJyb3JSZW5kZXJpbmcpIHtcbiAgICAgIHJlbW92ZVRlbXBFbGVtZW50cygpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGRpYWcgPSBhd2FpdCBEaWFncmFtLmZyb21UZXh0KFwiZXJyb3JcIik7XG4gICAgcGFyc2VFbmNvdW50ZXJlZEV4Y2VwdGlvbiA9IGVycm9yO1xuICB9XG4gIGNvbnN0IGVsZW1lbnQgPSByb290LnNlbGVjdChlbmNsb3NpbmdEaXZJRF9zZWxlY3Rvcikubm9kZSgpO1xuICBjb25zdCBkaWFncmFtVHlwZSA9IGRpYWcudHlwZTtcbiAgY29uc3Qgc3ZnID0gZWxlbWVudC5maXJzdENoaWxkO1xuICBjb25zdCBmaXJzdENoaWxkID0gc3ZnLmZpcnN0Q2hpbGQ7XG4gIGNvbnN0IGRpYWdyYW1DbGFzc0RlZnMgPSBkaWFnLnJlbmRlcmVyLmdldENsYXNzZXM/Lih0ZXh0LCBkaWFnKTtcbiAgY29uc3QgcnVsZXMgPSBjcmVhdGVVc2VyU3R5bGVzKGNvbmZpZywgZGlhZ3JhbVR5cGUsIGRpYWdyYW1DbGFzc0RlZnMsIGlkU2VsZWN0b3IpO1xuICBjb25zdCBzdHlsZTEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIHN0eWxlMS5pbm5lckhUTUwgPSBydWxlcztcbiAgc3ZnLmluc2VydEJlZm9yZShzdHlsZTEsIGZpcnN0Q2hpbGQpO1xuICB0cnkge1xuICAgIGF3YWl0IGRpYWcucmVuZGVyZXIuZHJhdyh0ZXh0LCBpZDI3LCBwYWNrYWdlX2RlZmF1bHQudmVyc2lvbiwgZGlhZyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoY29uZmlnLnN1cHByZXNzRXJyb3JSZW5kZXJpbmcpIHtcbiAgICAgIHJlbW92ZVRlbXBFbGVtZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvclJlbmRlcmVyX2RlZmF1bHQuZHJhdyh0ZXh0LCBpZDI3LCBwYWNrYWdlX2RlZmF1bHQudmVyc2lvbik7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbiAgY29uc3Qgc3ZnTm9kZSA9IHJvb3Quc2VsZWN0KGAke2VuY2xvc2luZ0RpdklEX3NlbGVjdG9yfSBzdmdgKTtcbiAgY29uc3QgYTExeVRpdGxlID0gZGlhZy5kYi5nZXRBY2NUaXRsZT8uKCk7XG4gIGNvbnN0IGExMXlEZXNjciA9IGRpYWcuZGIuZ2V0QWNjRGVzY3JpcHRpb24/LigpO1xuICBhZGRBMTF5SW5mbyhkaWFncmFtVHlwZSwgc3ZnTm9kZSwgYTExeVRpdGxlLCBhMTF5RGVzY3IpO1xuICByb290LnNlbGVjdChgW2lkPVwiJHtpZDI3fVwiXWApLnNlbGVjdEFsbChcImZvcmVpZ25vYmplY3QgPiAqXCIpLmF0dHIoXCJ4bWxuc1wiLCBYTUxOU19YSFRNTF9TVEQpO1xuICBsZXQgc3ZnQ29kZSA9IHJvb3Quc2VsZWN0KGVuY2xvc2luZ0RpdklEX3NlbGVjdG9yKS5ub2RlKCkuaW5uZXJIVE1MO1xuICBsb2cuZGVidWcoXCJjb25maWcuYXJyb3dNYXJrZXJBYnNvbHV0ZVwiLCBjb25maWcuYXJyb3dNYXJrZXJBYnNvbHV0ZSk7XG4gIHN2Z0NvZGUgPSBjbGVhblVwU3ZnQ29kZShzdmdDb2RlLCBpc1NhbmRib3hlZCwgZXZhbHVhdGUoY29uZmlnLmFycm93TWFya2VyQWJzb2x1dGUpKTtcbiAgaWYgKGlzU2FuZGJveGVkKSB7XG4gICAgY29uc3Qgc3ZnRWwgPSByb290LnNlbGVjdChlbmNsb3NpbmdEaXZJRF9zZWxlY3RvciArIFwiIHN2Z1wiKS5ub2RlKCk7XG4gICAgc3ZnQ29kZSA9IHB1dEludG9JRnJhbWUoc3ZnQ29kZSwgc3ZnRWwpO1xuICB9IGVsc2UgaWYgKCFpc0xvb3NlU2VjdXJpdHlMZXZlbCkge1xuICAgIHN2Z0NvZGUgPSBET01QdXJpZnkuc2FuaXRpemUoc3ZnQ29kZSwge1xuICAgICAgQUREX1RBR1M6IERPTVBVUklGWV9UQUdTLFxuICAgICAgQUREX0FUVFI6IERPTVBVUklGWV9BVFRSLFxuICAgICAgSFRNTF9JTlRFR1JBVElPTl9QT0lOVFM6IHsgZm9yZWlnbm9iamVjdDogdHJ1ZSB9XG4gICAgfSk7XG4gIH1cbiAgYXR0YWNoRnVuY3Rpb25zKCk7XG4gIGlmIChwYXJzZUVuY291bnRlcmVkRXhjZXB0aW9uKSB7XG4gICAgdGhyb3cgcGFyc2VFbmNvdW50ZXJlZEV4Y2VwdGlvbjtcbiAgfVxuICByZW1vdmVUZW1wRWxlbWVudHMoKTtcbiAgcmV0dXJuIHtcbiAgICBkaWFncmFtVHlwZSxcbiAgICBzdmc6IHN2Z0NvZGUsXG4gICAgYmluZEZ1bmN0aW9uczogZGlhZy5kYi5iaW5kRnVuY3Rpb25zXG4gIH07XG59LCBcInJlbmRlclwiKTtcbmZ1bmN0aW9uIGluaXRpYWxpemUodXNlck9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBvcHRpb25zID0gYXNzaWduV2l0aERlcHRoX2RlZmF1bHQoe30sIHVzZXJPcHRpb25zKTtcbiAgaWYgKG9wdGlvbnM/LmZvbnRGYW1pbHkgJiYgIW9wdGlvbnMudGhlbWVWYXJpYWJsZXM/LmZvbnRGYW1pbHkpIHtcbiAgICBpZiAoIW9wdGlvbnMudGhlbWVWYXJpYWJsZXMpIHtcbiAgICAgIG9wdGlvbnMudGhlbWVWYXJpYWJsZXMgPSB7fTtcbiAgICB9XG4gICAgb3B0aW9ucy50aGVtZVZhcmlhYmxlcy5mb250RmFtaWx5ID0gb3B0aW9ucy5mb250RmFtaWx5O1xuICB9XG4gIHNhdmVDb25maWdGcm9tSW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnM/LnRoZW1lICYmIG9wdGlvbnMudGhlbWUgaW4gdGhlbWVzX2RlZmF1bHQpIHtcbiAgICBvcHRpb25zLnRoZW1lVmFyaWFibGVzID0gdGhlbWVzX2RlZmF1bHRbb3B0aW9ucy50aGVtZV0uZ2V0VGhlbWVWYXJpYWJsZXMoXG4gICAgICBvcHRpb25zLnRoZW1lVmFyaWFibGVzXG4gICAgKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucy50aGVtZVZhcmlhYmxlcyA9IHRoZW1lc19kZWZhdWx0LmRlZmF1bHQuZ2V0VGhlbWVWYXJpYWJsZXMob3B0aW9ucy50aGVtZVZhcmlhYmxlcyk7XG4gIH1cbiAgY29uc3QgY29uZmlnID0gdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgPyBzZXRTaXRlQ29uZmlnKG9wdGlvbnMpIDogZ2V0U2l0ZUNvbmZpZygpO1xuICBzZXRMb2dMZXZlbChjb25maWcubG9nTGV2ZWwpO1xuICBhZGREaWFncmFtcygpO1xufVxuX19uYW1lKGluaXRpYWxpemUsIFwiaW5pdGlhbGl6ZVwiKTtcbnZhciBnZXREaWFncmFtRnJvbVRleHQgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKCh0ZXh0LCBtZXRhZGF0YSA9IHt9KSA9PiB7XG4gIGNvbnN0IHsgY29kZSB9ID0gcHJlcHJvY2Vzc0RpYWdyYW0odGV4dCk7XG4gIHJldHVybiBEaWFncmFtLmZyb21UZXh0KGNvZGUsIG1ldGFkYXRhKTtcbn0sIFwiZ2V0RGlhZ3JhbUZyb21UZXh0XCIpO1xuZnVuY3Rpb24gYWRkQTExeUluZm8oZGlhZ3JhbVR5cGUsIHN2Z05vZGUsIGExMXlUaXRsZSwgYTExeURlc2NyKSB7XG4gIHNldEExMXlEaWFncmFtSW5mbyhzdmdOb2RlLCBkaWFncmFtVHlwZSk7XG4gIGFkZFNWR2ExMXlUaXRsZURlc2NyaXB0aW9uKHN2Z05vZGUsIGExMXlUaXRsZSwgYTExeURlc2NyLCBzdmdOb2RlLmF0dHIoXCJpZFwiKSk7XG59XG5fX25hbWUoYWRkQTExeUluZm8sIFwiYWRkQTExeUluZm9cIik7XG52YXIgbWVybWFpZEFQSSA9IE9iamVjdC5mcmVlemUoe1xuICByZW5kZXIsXG4gIHBhcnNlLFxuICBnZXREaWFncmFtRnJvbVRleHQsXG4gIGluaXRpYWxpemUsXG4gIGdldENvbmZpZyxcbiAgc2V0Q29uZmlnLFxuICBnZXRTaXRlQ29uZmlnLFxuICB1cGRhdGVTaXRlQ29uZmlnLFxuICByZXNldDogLyogQF9fUFVSRV9fICovIF9fbmFtZSgoKSA9PiB7XG4gICAgcmVzZXQoKTtcbiAgfSwgXCJyZXNldFwiKSxcbiAgZ2xvYmFsUmVzZXQ6IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4ge1xuICAgIHJlc2V0KGRlZmF1bHRDb25maWcpO1xuICB9LCBcImdsb2JhbFJlc2V0XCIpLFxuICBkZWZhdWx0Q29uZmlnXG59KTtcbnNldExvZ0xldmVsKGdldENvbmZpZygpLmxvZ0xldmVsKTtcbnJlc2V0KGdldENvbmZpZygpKTtcblxuLy8gc3JjL21lcm1haWQudHNcbnZhciBoYW5kbGVFcnJvciA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKGVycm9yLCBlcnJvcnMsIHBhcnNlRXJyb3IpID0+IHtcbiAgbG9nLndhcm4oZXJyb3IpO1xuICBpZiAoaXNEZXRhaWxlZEVycm9yKGVycm9yKSkge1xuICAgIGlmIChwYXJzZUVycm9yKSB7XG4gICAgICBwYXJzZUVycm9yKGVycm9yLnN0ciwgZXJyb3IuaGFzaCk7XG4gICAgfVxuICAgIGVycm9ycy5wdXNoKHsgLi4uZXJyb3IsIG1lc3NhZ2U6IGVycm9yLnN0ciwgZXJyb3IgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHBhcnNlRXJyb3IpIHtcbiAgICAgIHBhcnNlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICBzdHI6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGhhc2g6IGVycm9yLm5hbWUsXG4gICAgICAgIGVycm9yXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sIFwiaGFuZGxlRXJyb3JcIik7XG52YXIgcnVuID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyBmdW5jdGlvbihvcHRpb25zID0ge1xuICBxdWVyeVNlbGVjdG9yOiBcIi5tZXJtYWlkXCJcbn0pIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBydW5UaHJvd3NFcnJvcnMob3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoaXNEZXRhaWxlZEVycm9yKGUpKSB7XG4gICAgICBsb2cuZXJyb3IoZS5zdHIpO1xuICAgIH1cbiAgICBpZiAobWVybWFpZC5wYXJzZUVycm9yKSB7XG4gICAgICBtZXJtYWlkLnBhcnNlRXJyb3IoZSk7XG4gICAgfVxuICAgIGlmICghb3B0aW9ucy5zdXBwcmVzc0Vycm9ycykge1xuICAgICAgbG9nLmVycm9yKFwiVXNlIHRoZSBzdXBwcmVzc0Vycm9ycyBvcHRpb24gdG8gc3VwcHJlc3MgdGhlc2UgZXJyb3JzXCIpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbn0sIFwicnVuXCIpO1xudmFyIHJ1blRocm93c0Vycm9ycyA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoYXN5bmMgZnVuY3Rpb24oeyBwb3N0UmVuZGVyQ2FsbGJhY2ssIHF1ZXJ5U2VsZWN0b3IsIG5vZGVzIH0gPSB7XG4gIHF1ZXJ5U2VsZWN0b3I6IFwiLm1lcm1haWRcIlxufSkge1xuICBjb25zdCBjb25mID0gbWVybWFpZEFQSS5nZXRDb25maWcoKTtcbiAgbG9nLmRlYnVnKGAkeyFwb3N0UmVuZGVyQ2FsbGJhY2sgPyBcIk5vIFwiIDogXCJcIn1DYWxsYmFjayBmdW5jdGlvbiBmb3VuZGApO1xuICBsZXQgbm9kZXNUb1Byb2Nlc3M7XG4gIGlmIChub2Rlcykge1xuICAgIG5vZGVzVG9Qcm9jZXNzID0gbm9kZXM7XG4gIH0gZWxzZSBpZiAocXVlcnlTZWxlY3Rvcikge1xuICAgIG5vZGVzVG9Qcm9jZXNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChxdWVyeVNlbGVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlcyBhbmQgcXVlcnlTZWxlY3RvciBhcmUgYm90aCB1bmRlZmluZWRcIik7XG4gIH1cbiAgbG9nLmRlYnVnKGBGb3VuZCAke25vZGVzVG9Qcm9jZXNzLmxlbmd0aH0gZGlhZ3JhbXNgKTtcbiAgaWYgKGNvbmY/LnN0YXJ0T25Mb2FkICE9PSB2b2lkIDApIHtcbiAgICBsb2cuZGVidWcoXCJTdGFydCBPbiBMb2FkOiBcIiArIGNvbmY/LnN0YXJ0T25Mb2FkKTtcbiAgICBtZXJtYWlkQVBJLnVwZGF0ZVNpdGVDb25maWcoeyBzdGFydE9uTG9hZDogY29uZj8uc3RhcnRPbkxvYWQgfSk7XG4gIH1cbiAgY29uc3QgaWRHZW5lcmF0b3IgPSBuZXcgdXRpbHNfZGVmYXVsdC5Jbml0SURHZW5lcmF0b3IoY29uZi5kZXRlcm1pbmlzdGljSWRzLCBjb25mLmRldGVybWluaXN0aWNJRFNlZWQpO1xuICBsZXQgdHh0O1xuICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgZm9yIChjb25zdCBlbGVtZW50IG9mIEFycmF5LmZyb20obm9kZXNUb1Byb2Nlc3MpKSB7XG4gICAgbG9nLmluZm8oXCJSZW5kZXJpbmcgZGlhZ3JhbTogXCIgKyBlbGVtZW50LmlkKTtcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByb2Nlc3NlZFwiKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1wcm9jZXNzZWRcIiwgXCJ0cnVlXCIpO1xuICAgIGNvbnN0IGlkMjcgPSBgbWVybWFpZC0ke2lkR2VuZXJhdG9yLm5leHQoKX1gO1xuICAgIHR4dCA9IGVsZW1lbnQuaW5uZXJIVE1MO1xuICAgIHR4dCA9IGRlZGVudCh1dGlsc19kZWZhdWx0LmVudGl0eURlY29kZSh0eHQpKS50cmltKCkucmVwbGFjZSgvPGJyXFxzKlxcLz8+L2dpLCBcIjxici8+XCIpO1xuICAgIGNvbnN0IGluaXQyID0gdXRpbHNfZGVmYXVsdC5kZXRlY3RJbml0KHR4dCk7XG4gICAgaWYgKGluaXQyKSB7XG4gICAgICBsb2cuZGVidWcoXCJEZXRlY3RlZCBlYXJseSByZWluaXQ6IFwiLCBpbml0Mik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHN2ZywgYmluZEZ1bmN0aW9ucyB9ID0gYXdhaXQgcmVuZGVyMihpZDI3LCB0eHQsIGVsZW1lbnQpO1xuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBzdmc7XG4gICAgICBpZiAocG9zdFJlbmRlckNhbGxiYWNrKSB7XG4gICAgICAgIGF3YWl0IHBvc3RSZW5kZXJDYWxsYmFjayhpZDI3KTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kRnVuY3Rpb25zKSB7XG4gICAgICAgIGJpbmRGdW5jdGlvbnMoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGhhbmRsZUVycm9yKGVycm9yLCBlcnJvcnMsIG1lcm1haWQucGFyc2VFcnJvcik7XG4gICAgfVxuICB9XG4gIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IGVycm9yc1swXTtcbiAgfVxufSwgXCJydW5UaHJvd3NFcnJvcnNcIik7XG52YXIgaW5pdGlhbGl6ZTIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGZ1bmN0aW9uKGNvbmZpZykge1xuICBtZXJtYWlkQVBJLmluaXRpYWxpemUoY29uZmlnKTtcbn0sIFwiaW5pdGlhbGl6ZVwiKTtcbnZhciBpbml0ID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyBmdW5jdGlvbihjb25maWcsIG5vZGVzLCBjYWxsYmFjaykge1xuICBsb2cud2FybihcIm1lcm1haWQuaW5pdCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHJ1biBpbnN0ZWFkLlwiKTtcbiAgaWYgKGNvbmZpZykge1xuICAgIGluaXRpYWxpemUyKGNvbmZpZyk7XG4gIH1cbiAgY29uc3QgcnVuT3B0aW9ucyA9IHsgcG9zdFJlbmRlckNhbGxiYWNrOiBjYWxsYmFjaywgcXVlcnlTZWxlY3RvcjogXCIubWVybWFpZFwiIH07XG4gIGlmICh0eXBlb2Ygbm9kZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICBydW5PcHRpb25zLnF1ZXJ5U2VsZWN0b3IgPSBub2RlcztcbiAgfSBlbHNlIGlmIChub2Rlcykge1xuICAgIGlmIChub2RlcyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBydW5PcHRpb25zLm5vZGVzID0gW25vZGVzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcnVuT3B0aW9ucy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cbiAgfVxuICBhd2FpdCBydW4ocnVuT3B0aW9ucyk7XG59LCBcImluaXRcIik7XG52YXIgcmVnaXN0ZXJFeHRlcm5hbERpYWdyYW1zID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShhc3luYyAoZGlhZ3JhbXMsIHtcbiAgbGF6eUxvYWQgPSB0cnVlXG59ID0ge30pID0+IHtcbiAgYWRkRGlhZ3JhbXMoKTtcbiAgcmVnaXN0ZXJMYXp5TG9hZGVkRGlhZ3JhbXMoLi4uZGlhZ3JhbXMpO1xuICBpZiAobGF6eUxvYWQgPT09IGZhbHNlKSB7XG4gICAgYXdhaXQgbG9hZFJlZ2lzdGVyZWREaWFncmFtcygpO1xuICB9XG59LCBcInJlZ2lzdGVyRXh0ZXJuYWxEaWFncmFtc1wiKTtcbnZhciBjb250ZW50TG9hZGVkID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbigpIHtcbiAgaWYgKG1lcm1haWQuc3RhcnRPbkxvYWQpIHtcbiAgICBjb25zdCB7IHN0YXJ0T25Mb2FkIH0gPSBtZXJtYWlkQVBJLmdldENvbmZpZygpO1xuICAgIGlmIChzdGFydE9uTG9hZCkge1xuICAgICAgbWVybWFpZC5ydW4oKS5jYXRjaCgoZXJyKSA9PiBsb2cuZXJyb3IoXCJNZXJtYWlkIGZhaWxlZCB0byBpbml0aWFsaXplXCIsIGVycikpO1xuICAgIH1cbiAgfVxufSwgXCJjb250ZW50TG9hZGVkXCIpO1xuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgY29udGVudExvYWRlZCwgZmFsc2UpO1xufVxudmFyIHNldFBhcnNlRXJyb3JIYW5kbGVyID0gLyogQF9fUFVSRV9fICovIF9fbmFtZShmdW5jdGlvbihwYXJzZUVycm9ySGFuZGxlcikge1xuICBtZXJtYWlkLnBhcnNlRXJyb3IgPSBwYXJzZUVycm9ySGFuZGxlcjtcbn0sIFwic2V0UGFyc2VFcnJvckhhbmRsZXJcIik7XG52YXIgZXhlY3V0aW9uUXVldWUgPSBbXTtcbnZhciBleGVjdXRpb25RdWV1ZVJ1bm5pbmcgPSBmYWxzZTtcbnZhciBleGVjdXRlUXVldWUgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICgpID0+IHtcbiAgaWYgKGV4ZWN1dGlvblF1ZXVlUnVubmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBleGVjdXRpb25RdWV1ZVJ1bm5pbmcgPSB0cnVlO1xuICB3aGlsZSAoZXhlY3V0aW9uUXVldWUubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGYgPSBleGVjdXRpb25RdWV1ZS5zaGlmdCgpO1xuICAgIGlmIChmKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBmKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihcIkVycm9yIGV4ZWN1dGluZyBxdWV1ZVwiLCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZXhlY3V0aW9uUXVldWVSdW5uaW5nID0gZmFsc2U7XG59LCBcImV4ZWN1dGVRdWV1ZVwiKTtcbnZhciBwYXJzZTIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKGFzeW5jICh0ZXh0LCBwYXJzZU9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBwZXJmb3JtQ2FsbCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICBtZXJtYWlkQVBJLnBhcnNlKHRleHQsIHBhcnNlT3B0aW9ucykudGhlbihcbiAgICAgICAgKHIpID0+IHtcbiAgICAgICAgICByZXMocik7XG4gICAgICAgICAgcmVzb2x2ZShyKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICBsb2cuZXJyb3IoXCJFcnJvciBwYXJzaW5nXCIsIGUpO1xuICAgICAgICAgIG1lcm1haWQucGFyc2VFcnJvcj8uKGUpO1xuICAgICAgICAgIHJlaihlKTtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksIFwicGVyZm9ybUNhbGxcIik7XG4gICAgZXhlY3V0aW9uUXVldWUucHVzaChwZXJmb3JtQ2FsbCk7XG4gICAgZXhlY3V0ZVF1ZXVlKCkuY2F0Y2gocmVqZWN0KTtcbiAgfSk7XG59LCBcInBhcnNlXCIpO1xudmFyIHJlbmRlcjIgPSAvKiBAX19QVVJFX18gKi8gX19uYW1lKChpZDI3LCB0ZXh0LCBjb250YWluZXIpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBwZXJmb3JtQ2FsbCA9IC8qIEBfX1BVUkVfXyAqLyBfX25hbWUoKCkgPT4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICBtZXJtYWlkQVBJLnJlbmRlcihpZDI3LCB0ZXh0LCBjb250YWluZXIpLnRoZW4oXG4gICAgICAgIChyKSA9PiB7XG4gICAgICAgICAgcmVzKHIpO1xuICAgICAgICAgIHJlc29sdmUocik7XG4gICAgICAgIH0sXG4gICAgICAgIChlKSA9PiB7XG4gICAgICAgICAgbG9nLmVycm9yKFwiRXJyb3IgcGFyc2luZ1wiLCBlKTtcbiAgICAgICAgICBtZXJtYWlkLnBhcnNlRXJyb3I/LihlKTtcbiAgICAgICAgICByZWooZSk7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLCBcInBlcmZvcm1DYWxsXCIpO1xuICAgIGV4ZWN1dGlvblF1ZXVlLnB1c2gocGVyZm9ybUNhbGwpO1xuICAgIGV4ZWN1dGVRdWV1ZSgpLmNhdGNoKHJlamVjdCk7XG4gIH0pO1xufSwgXCJyZW5kZXJcIik7XG52YXIgbWVybWFpZCA9IHtcbiAgc3RhcnRPbkxvYWQ6IHRydWUsXG4gIG1lcm1haWRBUEksXG4gIHBhcnNlOiBwYXJzZTIsXG4gIHJlbmRlcjogcmVuZGVyMixcbiAgaW5pdCxcbiAgcnVuLFxuICByZWdpc3RlckV4dGVybmFsRGlhZ3JhbXMsXG4gIHJlZ2lzdGVyTGF5b3V0TG9hZGVycyxcbiAgaW5pdGlhbGl6ZTogaW5pdGlhbGl6ZTIsXG4gIHBhcnNlRXJyb3I6IHZvaWQgMCxcbiAgY29udGVudExvYWRlZCxcbiAgc2V0UGFyc2VFcnJvckhhbmRsZXIsXG4gIGRldGVjdFR5cGUsXG4gIHJlZ2lzdGVySWNvblBhY2tzXG59O1xudmFyIG1lcm1haWRfZGVmYXVsdCA9IG1lcm1haWQ7XG5leHBvcnQge1xuICBtZXJtYWlkX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbi8qISBDaGVjayBpZiBwcmV2aW91c2x5IHByb2Nlc3NlZCAqL1xuLyohXG4gKiBXYWl0IGZvciBkb2N1bWVudCBsb2FkZWQgYmVmb3JlIHN0YXJ0aW5nIHRoZSBleGVjdXRpb25cbiAqL1xuIiwiZnVuY3Rpb24gdCh0LGUscyl7aWYodCYmdC5sZW5ndGgpe2NvbnN0W24sb109ZSxhPU1hdGguUEkvMTgwKnMsaD1NYXRoLmNvcyhhKSxyPU1hdGguc2luKGEpO2Zvcihjb25zdCBlIG9mIHQpe2NvbnN0W3Qsc109ZTtlWzBdPSh0LW4pKmgtKHMtbykqcituLGVbMV09KHQtbikqcisocy1vKSpoK299fX1mdW5jdGlvbiBlKHQsZSl7cmV0dXJuIHRbMF09PT1lWzBdJiZ0WzFdPT09ZVsxXX1mdW5jdGlvbiBzKHMsbixvLGE9MSl7Y29uc3QgaD1vLHI9TWF0aC5tYXgobiwuMSksaT1zWzBdJiZzWzBdWzBdJiZcIm51bWJlclwiPT10eXBlb2Ygc1swXVswXT9bc106cyxjPVswLDBdO2lmKGgpZm9yKGNvbnN0IGUgb2YgaSl0KGUsYyxoKTtjb25zdCBsPWZ1bmN0aW9uKHQscyxuKXtjb25zdCBvPVtdO2Zvcihjb25zdCBzIG9mIHQpe2NvbnN0IHQ9Wy4uLnNdO2UodFswXSx0W3QubGVuZ3RoLTFdKXx8dC5wdXNoKFt0WzBdWzBdLHRbMF1bMV1dKSx0Lmxlbmd0aD4yJiZvLnB1c2godCl9Y29uc3QgYT1bXTtzPU1hdGgubWF4KHMsLjEpO2NvbnN0IGg9W107Zm9yKGNvbnN0IHQgb2Ygbylmb3IobGV0IGU9MDtlPHQubGVuZ3RoLTE7ZSsrKXtjb25zdCBzPXRbZV0sbj10W2UrMV07aWYoc1sxXSE9PW5bMV0pe2NvbnN0IHQ9TWF0aC5taW4oc1sxXSxuWzFdKTtoLnB1c2goe3ltaW46dCx5bWF4Ok1hdGgubWF4KHNbMV0sblsxXSkseDp0PT09c1sxXT9zWzBdOm5bMF0saXNsb3BlOihuWzBdLXNbMF0pLyhuWzFdLXNbMV0pfSl9fWlmKGguc29ydCgoKHQsZSk9PnQueW1pbjxlLnltaW4/LTE6dC55bWluPmUueW1pbj8xOnQueDxlLng/LTE6dC54PmUueD8xOnQueW1heD09PWUueW1heD8wOih0LnltYXgtZS55bWF4KS9NYXRoLmFicyh0LnltYXgtZS55bWF4KSkpLCFoLmxlbmd0aClyZXR1cm4gYTtsZXQgcj1bXSxpPWhbMF0ueW1pbixjPTA7Zm9yKDtyLmxlbmd0aHx8aC5sZW5ndGg7KXtpZihoLmxlbmd0aCl7bGV0IHQ9LTE7Zm9yKGxldCBlPTA7ZTxoLmxlbmd0aCYmIShoW2VdLnltaW4+aSk7ZSsrKXQ9ZTtoLnNwbGljZSgwLHQrMSkuZm9yRWFjaCgodD0+e3IucHVzaCh7czppLGVkZ2U6dH0pfSkpfWlmKHI9ci5maWx0ZXIoKHQ9PiEodC5lZGdlLnltYXg8PWkpKSksci5zb3J0KCgodCxlKT0+dC5lZGdlLng9PT1lLmVkZ2UueD8wOih0LmVkZ2UueC1lLmVkZ2UueCkvTWF0aC5hYnModC5lZGdlLngtZS5lZGdlLngpKSksKDEhPT1ufHxjJXM9PTApJiZyLmxlbmd0aD4xKWZvcihsZXQgdD0wO3Q8ci5sZW5ndGg7dCs9Mil7Y29uc3QgZT10KzE7aWYoZT49ci5sZW5ndGgpYnJlYWs7Y29uc3Qgcz1yW3RdLmVkZ2Usbj1yW2VdLmVkZ2U7YS5wdXNoKFtbTWF0aC5yb3VuZChzLngpLGldLFtNYXRoLnJvdW5kKG4ueCksaV1dKX1pKz1uLHIuZm9yRWFjaCgodD0+e3QuZWRnZS54PXQuZWRnZS54K24qdC5lZGdlLmlzbG9wZX0pKSxjKyt9cmV0dXJuIGF9KGkscixhKTtpZihoKXtmb3IoY29uc3QgZSBvZiBpKXQoZSxjLC1oKTshZnVuY3Rpb24oZSxzLG4pe2NvbnN0IG89W107ZS5mb3JFYWNoKCh0PT5vLnB1c2goLi4udCkpKSx0KG8scyxuKX0obCxjLC1oKX1yZXR1cm4gbH1mdW5jdGlvbiBuKHQsZSl7dmFyIG47Y29uc3Qgbz1lLmhhY2h1cmVBbmdsZSs5MDtsZXQgYT1lLmhhY2h1cmVHYXA7YTwwJiYoYT00KmUuc3Ryb2tlV2lkdGgpLGE9TWF0aC5yb3VuZChNYXRoLm1heChhLC4xKSk7bGV0IGg9MTtyZXR1cm4gZS5yb3VnaG5lc3M+PTEmJigobnVsbD09PShuPWUucmFuZG9taXplcil8fHZvaWQgMD09PW4/dm9pZCAwOm4ubmV4dCgpKXx8TWF0aC5yYW5kb20oKSk+LjcmJihoPWEpLHModCxhLG8saHx8MSl9Y2xhc3Mgb3tjb25zdHJ1Y3Rvcih0KXt0aGlzLmhlbHBlcj10fWZpbGxQb2x5Z29ucyh0LGUpe3JldHVybiB0aGlzLl9maWxsUG9seWdvbnModCxlKX1fZmlsbFBvbHlnb25zKHQsZSl7Y29uc3Qgcz1uKHQsZSk7cmV0dXJue3R5cGU6XCJmaWxsU2tldGNoXCIsb3BzOnRoaXMucmVuZGVyTGluZXMocyxlKX19cmVuZGVyTGluZXModCxlKXtjb25zdCBzPVtdO2Zvcihjb25zdCBuIG9mIHQpcy5wdXNoKC4uLnRoaXMuaGVscGVyLmRvdWJsZUxpbmVPcHMoblswXVswXSxuWzBdWzFdLG5bMV1bMF0sblsxXVsxXSxlKSk7cmV0dXJuIHN9fWZ1bmN0aW9uIGEodCl7Y29uc3QgZT10WzBdLHM9dFsxXTtyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGVbMF0tc1swXSwyKStNYXRoLnBvdyhlWzFdLXNbMV0sMikpfWNsYXNzIGggZXh0ZW5kcyBve2ZpbGxQb2x5Z29ucyh0LGUpe2xldCBzPWUuaGFjaHVyZUdhcDtzPDAmJihzPTQqZS5zdHJva2VXaWR0aCkscz1NYXRoLm1heChzLC4xKTtjb25zdCBvPW4odCxPYmplY3QuYXNzaWduKHt9LGUse2hhY2h1cmVHYXA6c30pKSxoPU1hdGguUEkvMTgwKmUuaGFjaHVyZUFuZ2xlLHI9W10saT0uNSpzKk1hdGguY29zKGgpLGM9LjUqcypNYXRoLnNpbihoKTtmb3IoY29uc3RbdCxlXW9mIG8pYShbdCxlXSkmJnIucHVzaChbW3RbMF0taSx0WzFdK2NdLFsuLi5lXV0sW1t0WzBdK2ksdFsxXS1jXSxbLi4uZV1dKTtyZXR1cm57dHlwZTpcImZpbGxTa2V0Y2hcIixvcHM6dGhpcy5yZW5kZXJMaW5lcyhyLGUpfX19Y2xhc3MgciBleHRlbmRzIG97ZmlsbFBvbHlnb25zKHQsZSl7Y29uc3Qgcz10aGlzLl9maWxsUG9seWdvbnModCxlKSxuPU9iamVjdC5hc3NpZ24oe30sZSx7aGFjaHVyZUFuZ2xlOmUuaGFjaHVyZUFuZ2xlKzkwfSksbz10aGlzLl9maWxsUG9seWdvbnModCxuKTtyZXR1cm4gcy5vcHM9cy5vcHMuY29uY2F0KG8ub3BzKSxzfX1jbGFzcyBpe2NvbnN0cnVjdG9yKHQpe3RoaXMuaGVscGVyPXR9ZmlsbFBvbHlnb25zKHQsZSl7Y29uc3Qgcz1uKHQsZT1PYmplY3QuYXNzaWduKHt9LGUse2hhY2h1cmVBbmdsZTowfSkpO3JldHVybiB0aGlzLmRvdHNPbkxpbmVzKHMsZSl9ZG90c09uTGluZXModCxlKXtjb25zdCBzPVtdO2xldCBuPWUuaGFjaHVyZUdhcDtuPDAmJihuPTQqZS5zdHJva2VXaWR0aCksbj1NYXRoLm1heChuLC4xKTtsZXQgbz1lLmZpbGxXZWlnaHQ7bzwwJiYobz1lLnN0cm9rZVdpZHRoLzIpO2NvbnN0IGg9bi80O2Zvcihjb25zdCByIG9mIHQpe2NvbnN0IHQ9YShyKSxpPXQvbixjPU1hdGguY2VpbChpKS0xLGw9dC1jKm4sdT0oclswXVswXStyWzFdWzBdKS8yLW4vNCxwPU1hdGgubWluKHJbMF1bMV0sclsxXVsxXSk7Zm9yKGxldCB0PTA7dDxjO3QrKyl7Y29uc3QgYT1wK2wrdCpuLHI9dS1oKzIqTWF0aC5yYW5kb20oKSpoLGk9YS1oKzIqTWF0aC5yYW5kb20oKSpoLGM9dGhpcy5oZWxwZXIuZWxsaXBzZShyLGksbyxvLGUpO3MucHVzaCguLi5jLm9wcyl9fXJldHVybnt0eXBlOlwiZmlsbFNrZXRjaFwiLG9wczpzfX19Y2xhc3MgY3tjb25zdHJ1Y3Rvcih0KXt0aGlzLmhlbHBlcj10fWZpbGxQb2x5Z29ucyh0LGUpe2NvbnN0IHM9bih0LGUpO3JldHVybnt0eXBlOlwiZmlsbFNrZXRjaFwiLG9wczp0aGlzLmRhc2hlZExpbmUocyxlKX19ZGFzaGVkTGluZSh0LGUpe2NvbnN0IHM9ZS5kYXNoT2Zmc2V0PDA/ZS5oYWNodXJlR2FwPDA/NCplLnN0cm9rZVdpZHRoOmUuaGFjaHVyZUdhcDplLmRhc2hPZmZzZXQsbj1lLmRhc2hHYXA8MD9lLmhhY2h1cmVHYXA8MD80KmUuc3Ryb2tlV2lkdGg6ZS5oYWNodXJlR2FwOmUuZGFzaEdhcCxvPVtdO3JldHVybiB0LmZvckVhY2goKHQ9Pntjb25zdCBoPWEodCkscj1NYXRoLmZsb29yKGgvKHMrbikpLGk9KGgrbi1yKihzK24pKS8yO2xldCBjPXRbMF0sbD10WzFdO2NbMF0+bFswXSYmKGM9dFsxXSxsPXRbMF0pO2NvbnN0IHU9TWF0aC5hdGFuKChsWzFdLWNbMV0pLyhsWzBdLWNbMF0pKTtmb3IobGV0IHQ9MDt0PHI7dCsrKXtjb25zdCBhPXQqKHMrbiksaD1hK3Mscj1bY1swXSthKk1hdGguY29zKHUpK2kqTWF0aC5jb3ModSksY1sxXSthKk1hdGguc2luKHUpK2kqTWF0aC5zaW4odSldLGw9W2NbMF0raCpNYXRoLmNvcyh1KStpKk1hdGguY29zKHUpLGNbMV0raCpNYXRoLnNpbih1KStpKk1hdGguc2luKHUpXTtvLnB1c2goLi4udGhpcy5oZWxwZXIuZG91YmxlTGluZU9wcyhyWzBdLHJbMV0sbFswXSxsWzFdLGUpKX19KSksb319Y2xhc3MgbHtjb25zdHJ1Y3Rvcih0KXt0aGlzLmhlbHBlcj10fWZpbGxQb2x5Z29ucyh0LGUpe2NvbnN0IHM9ZS5oYWNodXJlR2FwPDA/NCplLnN0cm9rZVdpZHRoOmUuaGFjaHVyZUdhcCxvPWUuemlnemFnT2Zmc2V0PDA/czplLnppZ3phZ09mZnNldCxhPW4odCxlPU9iamVjdC5hc3NpZ24oe30sZSx7aGFjaHVyZUdhcDpzK299KSk7cmV0dXJue3R5cGU6XCJmaWxsU2tldGNoXCIsb3BzOnRoaXMuemlnemFnTGluZXMoYSxvLGUpfX16aWd6YWdMaW5lcyh0LGUscyl7Y29uc3Qgbj1bXTtyZXR1cm4gdC5mb3JFYWNoKCh0PT57Y29uc3Qgbz1hKHQpLGg9TWF0aC5yb3VuZChvLygyKmUpKTtsZXQgcj10WzBdLGk9dFsxXTtyWzBdPmlbMF0mJihyPXRbMV0saT10WzBdKTtjb25zdCBjPU1hdGguYXRhbigoaVsxXS1yWzFdKS8oaVswXS1yWzBdKSk7Zm9yKGxldCB0PTA7dDxoO3QrKyl7Y29uc3Qgbz0yKnQqZSxhPTIqKHQrMSkqZSxoPU1hdGguc3FydCgyKk1hdGgucG93KGUsMikpLGk9W3JbMF0rbypNYXRoLmNvcyhjKSxyWzFdK28qTWF0aC5zaW4oYyldLGw9W3JbMF0rYSpNYXRoLmNvcyhjKSxyWzFdK2EqTWF0aC5zaW4oYyldLHU9W2lbMF0raCpNYXRoLmNvcyhjK01hdGguUEkvNCksaVsxXStoKk1hdGguc2luKGMrTWF0aC5QSS80KV07bi5wdXNoKC4uLnRoaXMuaGVscGVyLmRvdWJsZUxpbmVPcHMoaVswXSxpWzFdLHVbMF0sdVsxXSxzKSwuLi50aGlzLmhlbHBlci5kb3VibGVMaW5lT3BzKHVbMF0sdVsxXSxsWzBdLGxbMV0scykpfX0pKSxufX1jb25zdCB1PXt9O2NsYXNzIHB7Y29uc3RydWN0b3IodCl7dGhpcy5zZWVkPXR9bmV4dCgpe3JldHVybiB0aGlzLnNlZWQ/KDIqKjMxLTEmKHRoaXMuc2VlZD1NYXRoLmltdWwoNDgyNzEsdGhpcy5zZWVkKSkpLzIqKjMxOk1hdGgucmFuZG9tKCl9fWNvbnN0IGY9MCxkPTEsZz0yLE09e0E6NyxhOjcsQzo2LGM6NixIOjEsaDoxLEw6MixsOjIsTToyLG06MixROjQscTo0LFM6NCxzOjQsVDoyLHQ6MixWOjEsdjoxLFo6MCx6OjB9O2Z1bmN0aW9uIGsodCxlKXtyZXR1cm4gdC50eXBlPT09ZX1mdW5jdGlvbiBiKHQpe2NvbnN0IGU9W10scz1mdW5jdGlvbih0KXtjb25zdCBlPW5ldyBBcnJheTtmb3IoO1wiXCIhPT10OylpZih0Lm1hdGNoKC9eKFsgXFx0XFxyXFxuLF0rKS8pKXQ9dC5zdWJzdHIoUmVnRXhwLiQxLmxlbmd0aCk7ZWxzZSBpZih0Lm1hdGNoKC9eKFthQWNDaEhsTG1NcVFzU3RUdlZ6Wl0pLykpZVtlLmxlbmd0aF09e3R5cGU6Zix0ZXh0OlJlZ0V4cC4kMX0sdD10LnN1YnN0cihSZWdFeHAuJDEubGVuZ3RoKTtlbHNle2lmKCF0Lm1hdGNoKC9eKChbLStdP1swLTldKyhcXC5bMC05XSopP3xbLStdP1xcLlswLTldKykoW2VFXVstK10/WzAtOV0rKT8pLykpcmV0dXJuW107ZVtlLmxlbmd0aF09e3R5cGU6ZCx0ZXh0OmAke3BhcnNlRmxvYXQoUmVnRXhwLiQxKX1gfSx0PXQuc3Vic3RyKFJlZ0V4cC4kMS5sZW5ndGgpfXJldHVybiBlW2UubGVuZ3RoXT17dHlwZTpnLHRleHQ6XCJcIn0sZX0odCk7bGV0IG49XCJCT0RcIixvPTAsYT1zW29dO2Zvcig7IWsoYSxnKTspe2xldCBoPTA7Y29uc3Qgcj1bXTtpZihcIkJPRFwiPT09bil7aWYoXCJNXCIhPT1hLnRleHQmJlwibVwiIT09YS50ZXh0KXJldHVybiBiKFwiTTAsMFwiK3QpO28rKyxoPU1bYS50ZXh0XSxuPWEudGV4dH1lbHNlIGsoYSxkKT9oPU1bbl06KG8rKyxoPU1bYS50ZXh0XSxuPWEudGV4dCk7aWYoIShvK2g8cy5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihcIlBhdGggZGF0YSBlbmRlZCBzaG9ydFwiKTtmb3IobGV0IHQ9bzt0PG8raDt0Kyspe2NvbnN0IGU9c1t0XTtpZighayhlLGQpKXRocm93IG5ldyBFcnJvcihcIlBhcmFtIG5vdCBhIG51bWJlcjogXCIrbitcIixcIitlLnRleHQpO3Jbci5sZW5ndGhdPStlLnRleHR9aWYoXCJudW1iZXJcIiE9dHlwZW9mIE1bbl0pdGhyb3cgbmV3IEVycm9yKFwiQmFkIHNlZ21lbnQ6IFwiK24pO3tjb25zdCB0PXtrZXk6bixkYXRhOnJ9O2UucHVzaCh0KSxvKz1oLGE9c1tvXSxcIk1cIj09PW4mJihuPVwiTFwiKSxcIm1cIj09PW4mJihuPVwibFwiKX19cmV0dXJuIGV9ZnVuY3Rpb24geSh0KXtsZXQgZT0wLHM9MCxuPTAsbz0wO2NvbnN0IGE9W107Zm9yKGNvbnN0e2tleTpoLGRhdGE6cn1vZiB0KXN3aXRjaChoKXtjYXNlXCJNXCI6YS5wdXNoKHtrZXk6XCJNXCIsZGF0YTpbLi4ucl19KSxbZSxzXT1yLFtuLG9dPXI7YnJlYWs7Y2FzZVwibVwiOmUrPXJbMF0scys9clsxXSxhLnB1c2goe2tleTpcIk1cIixkYXRhOltlLHNdfSksbj1lLG89czticmVhaztjYXNlXCJMXCI6YS5wdXNoKHtrZXk6XCJMXCIsZGF0YTpbLi4ucl19KSxbZSxzXT1yO2JyZWFrO2Nhc2VcImxcIjplKz1yWzBdLHMrPXJbMV0sYS5wdXNoKHtrZXk6XCJMXCIsZGF0YTpbZSxzXX0pO2JyZWFrO2Nhc2VcIkNcIjphLnB1c2goe2tleTpcIkNcIixkYXRhOlsuLi5yXX0pLGU9cls0XSxzPXJbNV07YnJlYWs7Y2FzZVwiY1wiOntjb25zdCB0PXIubWFwKCgodCxuKT0+biUyP3Qrczp0K2UpKTthLnB1c2goe2tleTpcIkNcIixkYXRhOnR9KSxlPXRbNF0scz10WzVdO2JyZWFrfWNhc2VcIlFcIjphLnB1c2goe2tleTpcIlFcIixkYXRhOlsuLi5yXX0pLGU9clsyXSxzPXJbM107YnJlYWs7Y2FzZVwicVwiOntjb25zdCB0PXIubWFwKCgodCxuKT0+biUyP3Qrczp0K2UpKTthLnB1c2goe2tleTpcIlFcIixkYXRhOnR9KSxlPXRbMl0scz10WzNdO2JyZWFrfWNhc2VcIkFcIjphLnB1c2goe2tleTpcIkFcIixkYXRhOlsuLi5yXX0pLGU9cls1XSxzPXJbNl07YnJlYWs7Y2FzZVwiYVwiOmUrPXJbNV0scys9cls2XSxhLnB1c2goe2tleTpcIkFcIixkYXRhOltyWzBdLHJbMV0sclsyXSxyWzNdLHJbNF0sZSxzXX0pO2JyZWFrO2Nhc2VcIkhcIjphLnB1c2goe2tleTpcIkhcIixkYXRhOlsuLi5yXX0pLGU9clswXTticmVhaztjYXNlXCJoXCI6ZSs9clswXSxhLnB1c2goe2tleTpcIkhcIixkYXRhOltlXX0pO2JyZWFrO2Nhc2VcIlZcIjphLnB1c2goe2tleTpcIlZcIixkYXRhOlsuLi5yXX0pLHM9clswXTticmVhaztjYXNlXCJ2XCI6cys9clswXSxhLnB1c2goe2tleTpcIlZcIixkYXRhOltzXX0pO2JyZWFrO2Nhc2VcIlNcIjphLnB1c2goe2tleTpcIlNcIixkYXRhOlsuLi5yXX0pLGU9clsyXSxzPXJbM107YnJlYWs7Y2FzZVwic1wiOntjb25zdCB0PXIubWFwKCgodCxuKT0+biUyP3Qrczp0K2UpKTthLnB1c2goe2tleTpcIlNcIixkYXRhOnR9KSxlPXRbMl0scz10WzNdO2JyZWFrfWNhc2VcIlRcIjphLnB1c2goe2tleTpcIlRcIixkYXRhOlsuLi5yXX0pLGU9clswXSxzPXJbMV07YnJlYWs7Y2FzZVwidFwiOmUrPXJbMF0scys9clsxXSxhLnB1c2goe2tleTpcIlRcIixkYXRhOltlLHNdfSk7YnJlYWs7Y2FzZVwiWlwiOmNhc2VcInpcIjphLnB1c2goe2tleTpcIlpcIixkYXRhOltdfSksZT1uLHM9b31yZXR1cm4gYX1mdW5jdGlvbiBtKHQpe2NvbnN0IGU9W107bGV0IHM9XCJcIixuPTAsbz0wLGE9MCxoPTAscj0wLGk9MDtmb3IoY29uc3R7a2V5OmMsZGF0YTpsfW9mIHQpe3N3aXRjaChjKXtjYXNlXCJNXCI6ZS5wdXNoKHtrZXk6XCJNXCIsZGF0YTpbLi4ubF19KSxbbixvXT1sLFthLGhdPWw7YnJlYWs7Y2FzZVwiQ1wiOmUucHVzaCh7a2V5OlwiQ1wiLGRhdGE6Wy4uLmxdfSksbj1sWzRdLG89bFs1XSxyPWxbMl0saT1sWzNdO2JyZWFrO2Nhc2VcIkxcIjplLnB1c2goe2tleTpcIkxcIixkYXRhOlsuLi5sXX0pLFtuLG9dPWw7YnJlYWs7Y2FzZVwiSFwiOm49bFswXSxlLnB1c2goe2tleTpcIkxcIixkYXRhOltuLG9dfSk7YnJlYWs7Y2FzZVwiVlwiOm89bFswXSxlLnB1c2goe2tleTpcIkxcIixkYXRhOltuLG9dfSk7YnJlYWs7Y2FzZVwiU1wiOntsZXQgdD0wLGE9MDtcIkNcIj09PXN8fFwiU1wiPT09cz8odD1uKyhuLXIpLGE9bysoby1pKSk6KHQ9bixhPW8pLGUucHVzaCh7a2V5OlwiQ1wiLGRhdGE6W3QsYSwuLi5sXX0pLHI9bFswXSxpPWxbMV0sbj1sWzJdLG89bFszXTticmVha31jYXNlXCJUXCI6e2NvbnN0W3QsYV09bDtsZXQgaD0wLGM9MDtcIlFcIj09PXN8fFwiVFwiPT09cz8oaD1uKyhuLXIpLGM9bysoby1pKSk6KGg9bixjPW8pO2NvbnN0IHU9bisyKihoLW4pLzMscD1vKzIqKGMtbykvMyxmPXQrMiooaC10KS8zLGQ9YSsyKihjLWEpLzM7ZS5wdXNoKHtrZXk6XCJDXCIsZGF0YTpbdSxwLGYsZCx0LGFdfSkscj1oLGk9YyxuPXQsbz1hO2JyZWFrfWNhc2VcIlFcIjp7Y29uc3RbdCxzLGEsaF09bCxjPW4rMioodC1uKS8zLHU9bysyKihzLW8pLzMscD1hKzIqKHQtYSkvMyxmPWgrMioocy1oKS8zO2UucHVzaCh7a2V5OlwiQ1wiLGRhdGE6W2MsdSxwLGYsYSxoXX0pLHI9dCxpPXMsbj1hLG89aDticmVha31jYXNlXCJBXCI6e2NvbnN0IHQ9TWF0aC5hYnMobFswXSkscz1NYXRoLmFicyhsWzFdKSxhPWxbMl0saD1sWzNdLHI9bFs0XSxpPWxbNV0sYz1sWzZdO2lmKDA9PT10fHwwPT09cyllLnB1c2goe2tleTpcIkNcIixkYXRhOltuLG8saSxjLGksY119KSxuPWksbz1jO2Vsc2UgaWYobiE9PWl8fG8hPT1jKXt4KG4sbyxpLGMsdCxzLGEsaCxyKS5mb3JFYWNoKChmdW5jdGlvbih0KXtlLnB1c2goe2tleTpcIkNcIixkYXRhOnR9KX0pKSxuPWksbz1jfWJyZWFrfWNhc2VcIlpcIjplLnB1c2goe2tleTpcIlpcIixkYXRhOltdfSksbj1hLG89aH1zPWN9cmV0dXJuIGV9ZnVuY3Rpb24gdyh0LGUscyl7cmV0dXJuW3QqTWF0aC5jb3MocyktZSpNYXRoLnNpbihzKSx0Kk1hdGguc2luKHMpK2UqTWF0aC5jb3MocyldfWZ1bmN0aW9uIHgodCxlLHMsbixvLGEsaCxyLGksYyl7Y29uc3QgbD0odT1oLE1hdGguUEkqdS8xODApO3ZhciB1O2xldCBwPVtdLGY9MCxkPTAsZz0wLE09MDtpZihjKVtmLGQsZyxNXT1jO2Vsc2V7W3QsZV09dyh0LGUsLWwpLFtzLG5dPXcocyxuLC1sKTtjb25zdCBoPSh0LXMpLzIsYz0oZS1uKS8yO2xldCB1PWgqaC8obypvKStjKmMvKGEqYSk7dT4xJiYodT1NYXRoLnNxcnQodSksbyo9dSxhKj11KTtjb25zdCBwPW8qbyxrPWEqYSxiPXAqay1wKmMqYy1rKmgqaCx5PXAqYypjK2sqaCpoLG09KHI9PT1pPy0xOjEpKk1hdGguc3FydChNYXRoLmFicyhiL3kpKTtnPW0qbypjL2ErKHQrcykvMixNPW0qLWEqaC9vKyhlK24pLzIsZj1NYXRoLmFzaW4ocGFyc2VGbG9hdCgoKGUtTSkvYSkudG9GaXhlZCg5KSkpLGQ9TWF0aC5hc2luKHBhcnNlRmxvYXQoKChuLU0pL2EpLnRvRml4ZWQoOSkpKSx0PGcmJihmPU1hdGguUEktZiksczxnJiYoZD1NYXRoLlBJLWQpLGY8MCYmKGY9MipNYXRoLlBJK2YpLGQ8MCYmKGQ9MipNYXRoLlBJK2QpLGkmJmY+ZCYmKGYtPTIqTWF0aC5QSSksIWkmJmQ+ZiYmKGQtPTIqTWF0aC5QSSl9bGV0IGs9ZC1mO2lmKE1hdGguYWJzKGspPjEyMCpNYXRoLlBJLzE4MCl7Y29uc3QgdD1kLGU9cyxyPW47ZD1pJiZkPmY/ZisxMjAqTWF0aC5QSS8xODAqMTpmKzEyMCpNYXRoLlBJLzE4MCotMSxwPXgocz1nK28qTWF0aC5jb3MoZCksbj1NK2EqTWF0aC5zaW4oZCksZSxyLG8sYSxoLDAsaSxbZCx0LGcsTV0pfWs9ZC1mO2NvbnN0IGI9TWF0aC5jb3MoZikseT1NYXRoLnNpbihmKSxtPU1hdGguY29zKGQpLFA9TWF0aC5zaW4oZCksdj1NYXRoLnRhbihrLzQpLFM9NC8zKm8qdixPPTQvMyphKnYsTD1bdCxlXSxUPVt0K1MqeSxlLU8qYl0sRD1bcytTKlAsbi1PKm1dLEE9W3Msbl07aWYoVFswXT0yKkxbMF0tVFswXSxUWzFdPTIqTFsxXS1UWzFdLGMpcmV0dXJuW1QsRCxBXS5jb25jYXQocCk7e3A9W1QsRCxBXS5jb25jYXQocCk7Y29uc3QgdD1bXTtmb3IobGV0IGU9MDtlPHAubGVuZ3RoO2UrPTMpe2NvbnN0IHM9dyhwW2VdWzBdLHBbZV1bMV0sbCksbj13KHBbZSsxXVswXSxwW2UrMV1bMV0sbCksbz13KHBbZSsyXVswXSxwW2UrMl1bMV0sbCk7dC5wdXNoKFtzWzBdLHNbMV0sblswXSxuWzFdLG9bMF0sb1sxXV0pfXJldHVybiB0fX1jb25zdCBQPXtyYW5kT2Zmc2V0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIEcodCxlKX0scmFuZE9mZnNldFdpdGhSYW5nZTpmdW5jdGlvbih0LGUscyl7cmV0dXJuIEUodCxlLHMpfSxlbGxpcHNlOmZ1bmN0aW9uKHQsZSxzLG4sbyl7Y29uc3QgYT1UKHMsbixvKTtyZXR1cm4gRCh0LGUsbyxhKS5vcHNldH0sZG91YmxlTGluZU9wczpmdW5jdGlvbih0LGUscyxuLG8pe3JldHVybiAkKHQsZSxzLG4sbywhMCl9fTtmdW5jdGlvbiB2KHQsZSxzLG4sbyl7cmV0dXJue3R5cGU6XCJwYXRoXCIsb3BzOiQodCxlLHMsbixvKX19ZnVuY3Rpb24gUyh0LGUscyl7Y29uc3Qgbj0odHx8W10pLmxlbmd0aDtpZihuPjIpe2NvbnN0IG89W107Zm9yKGxldCBlPTA7ZTxuLTE7ZSsrKW8ucHVzaCguLi4kKHRbZV1bMF0sdFtlXVsxXSx0W2UrMV1bMF0sdFtlKzFdWzFdLHMpKTtyZXR1cm4gZSYmby5wdXNoKC4uLiQodFtuLTFdWzBdLHRbbi0xXVsxXSx0WzBdWzBdLHRbMF1bMV0scykpLHt0eXBlOlwicGF0aFwiLG9wczpvfX1yZXR1cm4gMj09PW4/dih0WzBdWzBdLHRbMF1bMV0sdFsxXVswXSx0WzFdWzFdLHMpOnt0eXBlOlwicGF0aFwiLG9wczpbXX19ZnVuY3Rpb24gTyh0LGUscyxuLG8pe3JldHVybiBmdW5jdGlvbih0LGUpe3JldHVybiBTKHQsITAsZSl9KFtbdCxlXSxbdCtzLGVdLFt0K3MsZStuXSxbdCxlK25dXSxvKX1mdW5jdGlvbiBMKHQsZSl7aWYodC5sZW5ndGgpe2NvbnN0IHM9XCJudW1iZXJcIj09dHlwZW9mIHRbMF1bMF0/W3RdOnQsbj1qKHNbMF0sMSooMSsuMiplLnJvdWdobmVzcyksZSksbz1lLmRpc2FibGVNdWx0aVN0cm9rZT9bXTpqKHNbMF0sMS41KigxKy4yMiplLnJvdWdobmVzcykseihlKSk7Zm9yKGxldCB0PTE7dDxzLmxlbmd0aDt0Kyspe2NvbnN0IGE9c1t0XTtpZihhLmxlbmd0aCl7Y29uc3QgdD1qKGEsMSooMSsuMiplLnJvdWdobmVzcyksZSkscz1lLmRpc2FibGVNdWx0aVN0cm9rZT9bXTpqKGEsMS41KigxKy4yMiplLnJvdWdobmVzcykseihlKSk7Zm9yKGNvbnN0IGUgb2YgdClcIm1vdmVcIiE9PWUub3AmJm4ucHVzaChlKTtmb3IoY29uc3QgdCBvZiBzKVwibW92ZVwiIT09dC5vcCYmby5wdXNoKHQpfX1yZXR1cm57dHlwZTpcInBhdGhcIixvcHM6bi5jb25jYXQobyl9fXJldHVybnt0eXBlOlwicGF0aFwiLG9wczpbXX19ZnVuY3Rpb24gVCh0LGUscyl7Y29uc3Qgbj1NYXRoLnNxcnQoMipNYXRoLlBJKk1hdGguc3FydCgoTWF0aC5wb3codC8yLDIpK01hdGgucG93KGUvMiwyKSkvMikpLG89TWF0aC5jZWlsKE1hdGgubWF4KHMuY3VydmVTdGVwQ291bnQscy5jdXJ2ZVN0ZXBDb3VudC9NYXRoLnNxcnQoMjAwKSpuKSksYT0yKk1hdGguUEkvbztsZXQgaD1NYXRoLmFicyh0LzIpLHI9TWF0aC5hYnMoZS8yKTtjb25zdCBpPTEtcy5jdXJ2ZUZpdHRpbmc7cmV0dXJuIGgrPUcoaCppLHMpLHIrPUcocippLHMpLHtpbmNyZW1lbnQ6YSxyeDpoLHJ5OnJ9fWZ1bmN0aW9uIEQodCxlLHMsbil7Y29uc3RbbyxhXT1GKG4uaW5jcmVtZW50LHQsZSxuLnJ4LG4ucnksMSxuLmluY3JlbWVudCpFKC4xLEUoLjQsMSxzKSxzKSxzKTtsZXQgaD1xKG8sbnVsbCxzKTtpZighcy5kaXNhYmxlTXVsdGlTdHJva2UmJjAhPT1zLnJvdWdobmVzcyl7Y29uc3Rbb109RihuLmluY3JlbWVudCx0LGUsbi5yeCxuLnJ5LDEuNSwwLHMpLGE9cShvLG51bGwscyk7aD1oLmNvbmNhdChhKX1yZXR1cm57ZXN0aW1hdGVkUG9pbnRzOmEsb3BzZXQ6e3R5cGU6XCJwYXRoXCIsb3BzOmh9fX1mdW5jdGlvbiBBKHQsZSxzLG4sbyxhLGgscixpKXtjb25zdCBjPXQsbD1lO2xldCB1PU1hdGguYWJzKHMvMikscD1NYXRoLmFicyhuLzIpO3UrPUcoLjAxKnUsaSkscCs9RyguMDEqcCxpKTtsZXQgZj1vLGQ9YTtmb3IoO2Y8MDspZis9MipNYXRoLlBJLGQrPTIqTWF0aC5QSTtkLWY+MipNYXRoLlBJJiYoZj0wLGQ9MipNYXRoLlBJKTtjb25zdCBnPTIqTWF0aC5QSS9pLmN1cnZlU3RlcENvdW50LE09TWF0aC5taW4oZy8yLChkLWYpLzIpLGs9VihNLGMsbCx1LHAsZixkLDEsaSk7aWYoIWkuZGlzYWJsZU11bHRpU3Ryb2tlKXtjb25zdCB0PVYoTSxjLGwsdSxwLGYsZCwxLjUsaSk7ay5wdXNoKC4uLnQpfXJldHVybiBoJiYocj9rLnB1c2goLi4uJChjLGwsYyt1Kk1hdGguY29zKGYpLGwrcCpNYXRoLnNpbihmKSxpKSwuLi4kKGMsbCxjK3UqTWF0aC5jb3MoZCksbCtwKk1hdGguc2luKGQpLGkpKTprLnB1c2goe29wOlwibGluZVRvXCIsZGF0YTpbYyxsXX0se29wOlwibGluZVRvXCIsZGF0YTpbYyt1Kk1hdGguY29zKGYpLGwrcCpNYXRoLnNpbihmKV19KSkse3R5cGU6XCJwYXRoXCIsb3BzOmt9fWZ1bmN0aW9uIF8odCxlKXtjb25zdCBzPW0oeShiKHQpKSksbj1bXTtsZXQgbz1bMCwwXSxhPVswLDBdO2Zvcihjb25zdHtrZXk6dCxkYXRhOmh9b2Ygcylzd2l0Y2godCl7Y2FzZVwiTVwiOmE9W2hbMF0saFsxXV0sbz1baFswXSxoWzFdXTticmVhaztjYXNlXCJMXCI6bi5wdXNoKC4uLiQoYVswXSxhWzFdLGhbMF0saFsxXSxlKSksYT1baFswXSxoWzFdXTticmVhaztjYXNlXCJDXCI6e2NvbnN0W3QscyxvLHIsaSxjXT1oO24ucHVzaCguLi5aKHQscyxvLHIsaSxjLGEsZSkpLGE9W2ksY107YnJlYWt9Y2FzZVwiWlwiOm4ucHVzaCguLi4kKGFbMF0sYVsxXSxvWzBdLG9bMV0sZSkpLGE9W29bMF0sb1sxXV19cmV0dXJue3R5cGU6XCJwYXRoXCIsb3BzOm59fWZ1bmN0aW9uIEkodCxlKXtjb25zdCBzPVtdO2Zvcihjb25zdCBuIG9mIHQpaWYobi5sZW5ndGgpe2NvbnN0IHQ9ZS5tYXhSYW5kb21uZXNzT2Zmc2V0fHwwLG89bi5sZW5ndGg7aWYobz4yKXtzLnB1c2goe29wOlwibW92ZVwiLGRhdGE6W25bMF1bMF0rRyh0LGUpLG5bMF1bMV0rRyh0LGUpXX0pO2ZvcihsZXQgYT0xO2E8bzthKyspcy5wdXNoKHtvcDpcImxpbmVUb1wiLGRhdGE6W25bYV1bMF0rRyh0LGUpLG5bYV1bMV0rRyh0LGUpXX0pfX1yZXR1cm57dHlwZTpcImZpbGxQYXRoXCIsb3BzOnN9fWZ1bmN0aW9uIEModCxlKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtsZXQgcz10LmZpbGxTdHlsZXx8XCJoYWNodXJlXCI7aWYoIXVbc10pc3dpdGNoKHMpe2Nhc2VcInppZ3phZ1wiOnVbc118fCh1W3NdPW5ldyBoKGUpKTticmVhaztjYXNlXCJjcm9zcy1oYXRjaFwiOnVbc118fCh1W3NdPW5ldyByKGUpKTticmVhaztjYXNlXCJkb3RzXCI6dVtzXXx8KHVbc109bmV3IGkoZSkpO2JyZWFrO2Nhc2VcImRhc2hlZFwiOnVbc118fCh1W3NdPW5ldyBjKGUpKTticmVhaztjYXNlXCJ6aWd6YWctbGluZVwiOnVbc118fCh1W3NdPW5ldyBsKGUpKTticmVhaztkZWZhdWx0OnM9XCJoYWNodXJlXCIsdVtzXXx8KHVbc109bmV3IG8oZSkpfXJldHVybiB1W3NdfShlLFApLmZpbGxQb2x5Z29ucyh0LGUpfWZ1bmN0aW9uIHoodCl7Y29uc3QgZT1PYmplY3QuYXNzaWduKHt9LHQpO3JldHVybiBlLnJhbmRvbWl6ZXI9dm9pZCAwLHQuc2VlZCYmKGUuc2VlZD10LnNlZWQrMSksZX1mdW5jdGlvbiBXKHQpe3JldHVybiB0LnJhbmRvbWl6ZXJ8fCh0LnJhbmRvbWl6ZXI9bmV3IHAodC5zZWVkfHwwKSksdC5yYW5kb21pemVyLm5leHQoKX1mdW5jdGlvbiBFKHQsZSxzLG49MSl7cmV0dXJuIHMucm91Z2huZXNzKm4qKFcocykqKGUtdCkrdCl9ZnVuY3Rpb24gRyh0LGUscz0xKXtyZXR1cm4gRSgtdCx0LGUscyl9ZnVuY3Rpb24gJCh0LGUscyxuLG8sYT0hMSl7Y29uc3QgaD1hP28uZGlzYWJsZU11bHRpU3Ryb2tlRmlsbDpvLmRpc2FibGVNdWx0aVN0cm9rZSxyPVIodCxlLHMsbixvLCEwLCExKTtpZihoKXJldHVybiByO2NvbnN0IGk9Uih0LGUscyxuLG8sITAsITApO3JldHVybiByLmNvbmNhdChpKX1mdW5jdGlvbiBSKHQsZSxzLG4sbyxhLGgpe2NvbnN0IHI9TWF0aC5wb3codC1zLDIpK01hdGgucG93KGUtbiwyKSxpPU1hdGguc3FydChyKTtsZXQgYz0xO2M9aTwyMDA/MTppPjUwMD8uNDotLjAwMTY2NjgqaSsxLjIzMzMzNDtsZXQgbD1vLm1heFJhbmRvbW5lc3NPZmZzZXR8fDA7bCpsKjEwMD5yJiYobD1pLzEwKTtjb25zdCB1PWwvMixwPS4yKy4yKlcobyk7bGV0IGY9by5ib3dpbmcqby5tYXhSYW5kb21uZXNzT2Zmc2V0KihuLWUpLzIwMCxkPW8uYm93aW5nKm8ubWF4UmFuZG9tbmVzc09mZnNldCoodC1zKS8yMDA7Zj1HKGYsbyxjKSxkPUcoZCxvLGMpO2NvbnN0IGc9W10sTT0oKT0+Ryh1LG8sYyksaz0oKT0+RyhsLG8sYyksYj1vLnByZXNlcnZlVmVydGljZXM7cmV0dXJuIGEmJihoP2cucHVzaCh7b3A6XCJtb3ZlXCIsZGF0YTpbdCsoYj8wOk0oKSksZSsoYj8wOk0oKSldfSk6Zy5wdXNoKHtvcDpcIm1vdmVcIixkYXRhOlt0KyhiPzA6RyhsLG8sYykpLGUrKGI/MDpHKGwsbyxjKSldfSkpLGg/Zy5wdXNoKHtvcDpcImJjdXJ2ZVRvXCIsZGF0YTpbZit0KyhzLXQpKnArTSgpLGQrZSsobi1lKSpwK00oKSxmK3QrMioocy10KSpwK00oKSxkK2UrMioobi1lKSpwK00oKSxzKyhiPzA6TSgpKSxuKyhiPzA6TSgpKV19KTpnLnB1c2goe29wOlwiYmN1cnZlVG9cIixkYXRhOltmK3QrKHMtdCkqcCtrKCksZCtlKyhuLWUpKnAraygpLGYrdCsyKihzLXQpKnAraygpLGQrZSsyKihuLWUpKnAraygpLHMrKGI/MDprKCkpLG4rKGI/MDprKCkpXX0pLGd9ZnVuY3Rpb24gaih0LGUscyl7aWYoIXQubGVuZ3RoKXJldHVybltdO2NvbnN0IG49W107bi5wdXNoKFt0WzBdWzBdK0coZSxzKSx0WzBdWzFdK0coZSxzKV0pLG4ucHVzaChbdFswXVswXStHKGUscyksdFswXVsxXStHKGUscyldKTtmb3IobGV0IG89MTtvPHQubGVuZ3RoO28rKyluLnB1c2goW3Rbb11bMF0rRyhlLHMpLHRbb11bMV0rRyhlLHMpXSksbz09PXQubGVuZ3RoLTEmJm4ucHVzaChbdFtvXVswXStHKGUscyksdFtvXVsxXStHKGUscyldKTtyZXR1cm4gcShuLG51bGwscyl9ZnVuY3Rpb24gcSh0LGUscyl7Y29uc3Qgbj10Lmxlbmd0aCxvPVtdO2lmKG4+Myl7Y29uc3QgYT1bXSxoPTEtcy5jdXJ2ZVRpZ2h0bmVzcztvLnB1c2goe29wOlwibW92ZVwiLGRhdGE6W3RbMV1bMF0sdFsxXVsxXV19KTtmb3IobGV0IGU9MTtlKzI8bjtlKyspe2NvbnN0IHM9dFtlXTthWzBdPVtzWzBdLHNbMV1dLGFbMV09W3NbMF0rKGgqdFtlKzFdWzBdLWgqdFtlLTFdWzBdKS82LHNbMV0rKGgqdFtlKzFdWzFdLWgqdFtlLTFdWzFdKS82XSxhWzJdPVt0W2UrMV1bMF0rKGgqdFtlXVswXS1oKnRbZSsyXVswXSkvNix0W2UrMV1bMV0rKGgqdFtlXVsxXS1oKnRbZSsyXVsxXSkvNl0sYVszXT1bdFtlKzFdWzBdLHRbZSsxXVsxXV0sby5wdXNoKHtvcDpcImJjdXJ2ZVRvXCIsZGF0YTpbYVsxXVswXSxhWzFdWzFdLGFbMl1bMF0sYVsyXVsxXSxhWzNdWzBdLGFbM11bMV1dfSl9aWYoZSYmMj09PWUubGVuZ3RoKXtjb25zdCB0PXMubWF4UmFuZG9tbmVzc09mZnNldDtvLnB1c2goe29wOlwibGluZVRvXCIsZGF0YTpbZVswXStHKHQscyksZVsxXStHKHQscyldfSl9fWVsc2UgMz09PW4/KG8ucHVzaCh7b3A6XCJtb3ZlXCIsZGF0YTpbdFsxXVswXSx0WzFdWzFdXX0pLG8ucHVzaCh7b3A6XCJiY3VydmVUb1wiLGRhdGE6W3RbMV1bMF0sdFsxXVsxXSx0WzJdWzBdLHRbMl1bMV0sdFsyXVswXSx0WzJdWzFdXX0pKToyPT09biYmby5wdXNoKC4uLlIodFswXVswXSx0WzBdWzFdLHRbMV1bMF0sdFsxXVsxXSxzLCEwLCEwKSk7cmV0dXJuIG99ZnVuY3Rpb24gRih0LGUscyxuLG8sYSxoLHIpe2NvbnN0IGk9W10sYz1bXTtpZigwPT09ci5yb3VnaG5lc3Mpe3QvPTQsYy5wdXNoKFtlK24qTWF0aC5jb3MoLXQpLHMrbypNYXRoLnNpbigtdCldKTtmb3IobGV0IGE9MDthPD0yKk1hdGguUEk7YSs9dCl7Y29uc3QgdD1bZStuKk1hdGguY29zKGEpLHMrbypNYXRoLnNpbihhKV07aS5wdXNoKHQpLGMucHVzaCh0KX1jLnB1c2goW2UrbipNYXRoLmNvcygwKSxzK28qTWF0aC5zaW4oMCldKSxjLnB1c2goW2UrbipNYXRoLmNvcyh0KSxzK28qTWF0aC5zaW4odCldKX1lbHNle2NvbnN0IGw9RyguNSxyKS1NYXRoLlBJLzI7Yy5wdXNoKFtHKGEscikrZSsuOSpuKk1hdGguY29zKGwtdCksRyhhLHIpK3MrLjkqbypNYXRoLnNpbihsLXQpXSk7Y29uc3QgdT0yKk1hdGguUEkrbC0uMDE7Zm9yKGxldCBoPWw7aDx1O2grPXQpe2NvbnN0IHQ9W0coYSxyKStlK24qTWF0aC5jb3MoaCksRyhhLHIpK3MrbypNYXRoLnNpbihoKV07aS5wdXNoKHQpLGMucHVzaCh0KX1jLnB1c2goW0coYSxyKStlK24qTWF0aC5jb3MobCsyKk1hdGguUEkrLjUqaCksRyhhLHIpK3MrbypNYXRoLnNpbihsKzIqTWF0aC5QSSsuNSpoKV0pLGMucHVzaChbRyhhLHIpK2UrLjk4Km4qTWF0aC5jb3MobCtoKSxHKGEscikrcysuOTgqbypNYXRoLnNpbihsK2gpXSksYy5wdXNoKFtHKGEscikrZSsuOSpuKk1hdGguY29zKGwrLjUqaCksRyhhLHIpK3MrLjkqbypNYXRoLnNpbihsKy41KmgpXSl9cmV0dXJuW2MsaV19ZnVuY3Rpb24gVih0LGUscyxuLG8sYSxoLHIsaSl7Y29uc3QgYz1hK0coLjEsaSksbD1bXTtsLnB1c2goW0cocixpKStlKy45Km4qTWF0aC5jb3MoYy10KSxHKHIsaSkrcysuOSpvKk1hdGguc2luKGMtdCldKTtmb3IobGV0IGE9YzthPD1oO2ErPXQpbC5wdXNoKFtHKHIsaSkrZStuKk1hdGguY29zKGEpLEcocixpKStzK28qTWF0aC5zaW4oYSldKTtyZXR1cm4gbC5wdXNoKFtlK24qTWF0aC5jb3MoaCkscytvKk1hdGguc2luKGgpXSksbC5wdXNoKFtlK24qTWF0aC5jb3MoaCkscytvKk1hdGguc2luKGgpXSkscShsLG51bGwsaSl9ZnVuY3Rpb24gWih0LGUscyxuLG8sYSxoLHIpe2NvbnN0IGk9W10sYz1bci5tYXhSYW5kb21uZXNzT2Zmc2V0fHwxLChyLm1heFJhbmRvbW5lc3NPZmZzZXR8fDEpKy4zXTtsZXQgbD1bMCwwXTtjb25zdCB1PXIuZGlzYWJsZU11bHRpU3Ryb2tlPzE6MixwPXIucHJlc2VydmVWZXJ0aWNlcztmb3IobGV0IGY9MDtmPHU7ZisrKTA9PT1mP2kucHVzaCh7b3A6XCJtb3ZlXCIsZGF0YTpbaFswXSxoWzFdXX0pOmkucHVzaCh7b3A6XCJtb3ZlXCIsZGF0YTpbaFswXSsocD8wOkcoY1swXSxyKSksaFsxXSsocD8wOkcoY1swXSxyKSldfSksbD1wP1tvLGFdOltvK0coY1tmXSxyKSxhK0coY1tmXSxyKV0saS5wdXNoKHtvcDpcImJjdXJ2ZVRvXCIsZGF0YTpbdCtHKGNbZl0sciksZStHKGNbZl0scikscytHKGNbZl0sciksbitHKGNbZl0sciksbFswXSxsWzFdXX0pO3JldHVybiBpfWZ1bmN0aW9uIFEodCl7cmV0dXJuWy4uLnRdfWZ1bmN0aW9uIEgodCxlPTApe2NvbnN0IHM9dC5sZW5ndGg7aWYoczwzKXRocm93IG5ldyBFcnJvcihcIkEgY3VydmUgbXVzdCBoYXZlIGF0IGxlYXN0IHRocmVlIHBvaW50cy5cIik7Y29uc3Qgbj1bXTtpZigzPT09cyluLnB1c2goUSh0WzBdKSxRKHRbMV0pLFEodFsyXSksUSh0WzJdKSk7ZWxzZXtjb25zdCBzPVtdO3MucHVzaCh0WzBdLHRbMF0pO2ZvcihsZXQgZT0xO2U8dC5sZW5ndGg7ZSsrKXMucHVzaCh0W2VdKSxlPT09dC5sZW5ndGgtMSYmcy5wdXNoKHRbZV0pO2NvbnN0IG89W10sYT0xLWU7bi5wdXNoKFEoc1swXSkpO2ZvcihsZXQgdD0xO3QrMjxzLmxlbmd0aDt0Kyspe2NvbnN0IGU9c1t0XTtvWzBdPVtlWzBdLGVbMV1dLG9bMV09W2VbMF0rKGEqc1t0KzFdWzBdLWEqc1t0LTFdWzBdKS82LGVbMV0rKGEqc1t0KzFdWzFdLWEqc1t0LTFdWzFdKS82XSxvWzJdPVtzW3QrMV1bMF0rKGEqc1t0XVswXS1hKnNbdCsyXVswXSkvNixzW3QrMV1bMV0rKGEqc1t0XVsxXS1hKnNbdCsyXVsxXSkvNl0sb1szXT1bc1t0KzFdWzBdLHNbdCsxXVsxXV0sbi5wdXNoKG9bMV0sb1syXSxvWzNdKX19cmV0dXJuIG59ZnVuY3Rpb24gTih0LGUpe3JldHVybiBNYXRoLnBvdyh0WzBdLWVbMF0sMikrTWF0aC5wb3codFsxXS1lWzFdLDIpfWZ1bmN0aW9uIEIodCxlLHMpe2NvbnN0IG49TihlLHMpO2lmKDA9PT1uKXJldHVybiBOKHQsZSk7bGV0IG89KCh0WzBdLWVbMF0pKihzWzBdLWVbMF0pKyh0WzFdLWVbMV0pKihzWzFdLWVbMV0pKS9uO3JldHVybiBvPU1hdGgubWF4KDAsTWF0aC5taW4oMSxvKSksTih0LEooZSxzLG8pKX1mdW5jdGlvbiBKKHQsZSxzKXtyZXR1cm5bdFswXSsoZVswXS10WzBdKSpzLHRbMV0rKGVbMV0tdFsxXSkqc119ZnVuY3Rpb24gSyh0LGUscyxuKXtjb25zdCBvPW58fFtdO2lmKGZ1bmN0aW9uKHQsZSl7Y29uc3Qgcz10W2UrMF0sbj10W2UrMV0sbz10W2UrMl0sYT10W2UrM107bGV0IGg9MypuWzBdLTIqc1swXS1hWzBdO2gqPWg7bGV0IHI9MypuWzFdLTIqc1sxXS1hWzFdO3IqPXI7bGV0IGk9MypvWzBdLTIqYVswXS1zWzBdO2kqPWk7bGV0IGM9MypvWzFdLTIqYVsxXS1zWzFdO3JldHVybiBjKj1jLGg8aSYmKGg9aSkscjxjJiYocj1jKSxoK3J9KHQsZSk8cyl7Y29uc3Qgcz10W2UrMF07aWYoby5sZW5ndGgpeyhhPW9bby5sZW5ndGgtMV0saD1zLE1hdGguc3FydChOKGEsaCkpKT4xJiZvLnB1c2gocyl9ZWxzZSBvLnB1c2gocyk7by5wdXNoKHRbZSszXSl9ZWxzZXtjb25zdCBuPS41LGE9dFtlKzBdLGg9dFtlKzFdLHI9dFtlKzJdLGk9dFtlKzNdLGM9SihhLGgsbiksbD1KKGgscixuKSx1PUoocixpLG4pLHA9SihjLGwsbiksZj1KKGwsdSxuKSxkPUoocCxmLG4pO0soW2EsYyxwLGRdLDAscyxvKSxLKFtkLGYsdSxpXSwwLHMsbyl9dmFyIGEsaDtyZXR1cm4gb31mdW5jdGlvbiBVKHQsZSl7cmV0dXJuIFgodCwwLHQubGVuZ3RoLGUpfWZ1bmN0aW9uIFgodCxlLHMsbixvKXtjb25zdCBhPW98fFtdLGg9dFtlXSxyPXRbcy0xXTtsZXQgaT0wLGM9MTtmb3IobGV0IG49ZSsxO248cy0xOysrbil7Y29uc3QgZT1CKHRbbl0saCxyKTtlPmkmJihpPWUsYz1uKX1yZXR1cm4gTWF0aC5zcXJ0KGkpPm4/KFgodCxlLGMrMSxuLGEpLFgodCxjLHMsbixhKSk6KGEubGVuZ3RofHxhLnB1c2goaCksYS5wdXNoKHIpKSxhfWZ1bmN0aW9uIFkodCxlPS4xNSxzKXtjb25zdCBuPVtdLG89KHQubGVuZ3RoLTEpLzM7Zm9yKGxldCBzPTA7czxvO3MrKyl7Syh0LDMqcyxlLG4pfXJldHVybiBzJiZzPjA/WChuLDAsbi5sZW5ndGgscyk6bn1jb25zdCB0dD1cIm5vbmVcIjtjbGFzcyBldHtjb25zdHJ1Y3Rvcih0KXt0aGlzLmRlZmF1bHRPcHRpb25zPXttYXhSYW5kb21uZXNzT2Zmc2V0OjIscm91Z2huZXNzOjEsYm93aW5nOjEsc3Ryb2tlOlwiIzAwMFwiLHN0cm9rZVdpZHRoOjEsY3VydmVUaWdodG5lc3M6MCxjdXJ2ZUZpdHRpbmc6Ljk1LGN1cnZlU3RlcENvdW50OjksZmlsbFN0eWxlOlwiaGFjaHVyZVwiLGZpbGxXZWlnaHQ6LTEsaGFjaHVyZUFuZ2xlOi00MSxoYWNodXJlR2FwOi0xLGRhc2hPZmZzZXQ6LTEsZGFzaEdhcDotMSx6aWd6YWdPZmZzZXQ6LTEsc2VlZDowLGRpc2FibGVNdWx0aVN0cm9rZTohMSxkaXNhYmxlTXVsdGlTdHJva2VGaWxsOiExLHByZXNlcnZlVmVydGljZXM6ITEsZmlsbFNoYXBlUm91Z2huZXNzR2FpbjouOH0sdGhpcy5jb25maWc9dHx8e30sdGhpcy5jb25maWcub3B0aW9ucyYmKHRoaXMuZGVmYXVsdE9wdGlvbnM9dGhpcy5fbyh0aGlzLmNvbmZpZy5vcHRpb25zKSl9c3RhdGljIG5ld1NlZWQoKXtyZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjIqKjMxKX1fbyh0KXtyZXR1cm4gdD9PYmplY3QuYXNzaWduKHt9LHRoaXMuZGVmYXVsdE9wdGlvbnMsdCk6dGhpcy5kZWZhdWx0T3B0aW9uc31fZCh0LGUscyl7cmV0dXJue3NoYXBlOnQsc2V0czplfHxbXSxvcHRpb25zOnN8fHRoaXMuZGVmYXVsdE9wdGlvbnN9fWxpbmUodCxlLHMsbixvKXtjb25zdCBhPXRoaXMuX28obyk7cmV0dXJuIHRoaXMuX2QoXCJsaW5lXCIsW3YodCxlLHMsbixhKV0sYSl9cmVjdGFuZ2xlKHQsZSxzLG4sbyl7Y29uc3QgYT10aGlzLl9vKG8pLGg9W10scj1PKHQsZSxzLG4sYSk7aWYoYS5maWxsKXtjb25zdCBvPVtbdCxlXSxbdCtzLGVdLFt0K3MsZStuXSxbdCxlK25dXTtcInNvbGlkXCI9PT1hLmZpbGxTdHlsZT9oLnB1c2goSShbb10sYSkpOmgucHVzaChDKFtvXSxhKSl9cmV0dXJuIGEuc3Ryb2tlIT09dHQmJmgucHVzaChyKSx0aGlzLl9kKFwicmVjdGFuZ2xlXCIsaCxhKX1lbGxpcHNlKHQsZSxzLG4sbyl7Y29uc3QgYT10aGlzLl9vKG8pLGg9W10scj1UKHMsbixhKSxpPUQodCxlLGEscik7aWYoYS5maWxsKWlmKFwic29saWRcIj09PWEuZmlsbFN0eWxlKXtjb25zdCBzPUQodCxlLGEscikub3BzZXQ7cy50eXBlPVwiZmlsbFBhdGhcIixoLnB1c2gocyl9ZWxzZSBoLnB1c2goQyhbaS5lc3RpbWF0ZWRQb2ludHNdLGEpKTtyZXR1cm4gYS5zdHJva2UhPT10dCYmaC5wdXNoKGkub3BzZXQpLHRoaXMuX2QoXCJlbGxpcHNlXCIsaCxhKX1jaXJjbGUodCxlLHMsbil7Y29uc3Qgbz10aGlzLmVsbGlwc2UodCxlLHMscyxuKTtyZXR1cm4gby5zaGFwZT1cImNpcmNsZVwiLG99bGluZWFyUGF0aCh0LGUpe2NvbnN0IHM9dGhpcy5fbyhlKTtyZXR1cm4gdGhpcy5fZChcImxpbmVhclBhdGhcIixbUyh0LCExLHMpXSxzKX1hcmModCxlLHMsbixvLGEsaD0hMSxyKXtjb25zdCBpPXRoaXMuX28ociksYz1bXSxsPUEodCxlLHMsbixvLGEsaCwhMCxpKTtpZihoJiZpLmZpbGwpaWYoXCJzb2xpZFwiPT09aS5maWxsU3R5bGUpe2NvbnN0IGg9T2JqZWN0LmFzc2lnbih7fSxpKTtoLmRpc2FibGVNdWx0aVN0cm9rZT0hMDtjb25zdCByPUEodCxlLHMsbixvLGEsITAsITEsaCk7ci50eXBlPVwiZmlsbFBhdGhcIixjLnB1c2gocil9ZWxzZSBjLnB1c2goZnVuY3Rpb24odCxlLHMsbixvLGEsaCl7Y29uc3Qgcj10LGk9ZTtsZXQgYz1NYXRoLmFicyhzLzIpLGw9TWF0aC5hYnMobi8yKTtjKz1HKC4wMSpjLGgpLGwrPUcoLjAxKmwsaCk7bGV0IHU9byxwPWE7Zm9yKDt1PDA7KXUrPTIqTWF0aC5QSSxwKz0yKk1hdGguUEk7cC11PjIqTWF0aC5QSSYmKHU9MCxwPTIqTWF0aC5QSSk7Y29uc3QgZj0ocC11KS9oLmN1cnZlU3RlcENvdW50LGQ9W107Zm9yKGxldCB0PXU7dDw9cDt0Kz1mKWQucHVzaChbcitjKk1hdGguY29zKHQpLGkrbCpNYXRoLnNpbih0KV0pO3JldHVybiBkLnB1c2goW3IrYypNYXRoLmNvcyhwKSxpK2wqTWF0aC5zaW4ocCldKSxkLnB1c2goW3IsaV0pLEMoW2RdLGgpfSh0LGUscyxuLG8sYSxpKSk7cmV0dXJuIGkuc3Ryb2tlIT09dHQmJmMucHVzaChsKSx0aGlzLl9kKFwiYXJjXCIsYyxpKX1jdXJ2ZSh0LGUpe2NvbnN0IHM9dGhpcy5fbyhlKSxuPVtdLG89TCh0LHMpO2lmKHMuZmlsbCYmcy5maWxsIT09dHQpaWYoXCJzb2xpZFwiPT09cy5maWxsU3R5bGUpe2NvbnN0IGU9TCh0LE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxzKSx7ZGlzYWJsZU11bHRpU3Ryb2tlOiEwLHJvdWdobmVzczpzLnJvdWdobmVzcz9zLnJvdWdobmVzcytzLmZpbGxTaGFwZVJvdWdobmVzc0dhaW46MH0pKTtuLnB1c2goe3R5cGU6XCJmaWxsUGF0aFwiLG9wczp0aGlzLl9tZXJnZWRTaGFwZShlLm9wcyl9KX1lbHNle2NvbnN0IGU9W10sbz10O2lmKG8ubGVuZ3RoKXtjb25zdCB0PVwibnVtYmVyXCI9PXR5cGVvZiBvWzBdWzBdP1tvXTpvO2Zvcihjb25zdCBuIG9mIHQpbi5sZW5ndGg8Mz9lLnB1c2goLi4ubik6Mz09PW4ubGVuZ3RoP2UucHVzaCguLi5ZKEgoW25bMF0sblswXSxuWzFdLG5bMl1dKSwxMCwoMStzLnJvdWdobmVzcykvMikpOmUucHVzaCguLi5ZKEgobiksMTAsKDErcy5yb3VnaG5lc3MpLzIpKX1lLmxlbmd0aCYmbi5wdXNoKEMoW2VdLHMpKX1yZXR1cm4gcy5zdHJva2UhPT10dCYmbi5wdXNoKG8pLHRoaXMuX2QoXCJjdXJ2ZVwiLG4scyl9cG9seWdvbih0LGUpe2NvbnN0IHM9dGhpcy5fbyhlKSxuPVtdLG89Uyh0LCEwLHMpO3JldHVybiBzLmZpbGwmJihcInNvbGlkXCI9PT1zLmZpbGxTdHlsZT9uLnB1c2goSShbdF0scykpOm4ucHVzaChDKFt0XSxzKSkpLHMuc3Ryb2tlIT09dHQmJm4ucHVzaChvKSx0aGlzLl9kKFwicG9seWdvblwiLG4scyl9cGF0aCh0LGUpe2NvbnN0IHM9dGhpcy5fbyhlKSxuPVtdO2lmKCF0KXJldHVybiB0aGlzLl9kKFwicGF0aFwiLG4scyk7dD0odHx8XCJcIikucmVwbGFjZSgvXFxuL2csXCIgXCIpLnJlcGxhY2UoLygtXFxzKS9nLFwiLVwiKS5yZXBsYWNlKFwiLyhzcykvZ1wiLFwiIFwiKTtjb25zdCBvPXMuZmlsbCYmXCJ0cmFuc3BhcmVudFwiIT09cy5maWxsJiZzLmZpbGwhPT10dCxhPXMuc3Ryb2tlIT09dHQsaD0hIShzLnNpbXBsaWZpY2F0aW9uJiZzLnNpbXBsaWZpY2F0aW9uPDEpLHI9ZnVuY3Rpb24odCxlLHMpe2NvbnN0IG49bSh5KGIodCkpKSxvPVtdO2xldCBhPVtdLGg9WzAsMF0scj1bXTtjb25zdCBpPSgpPT57ci5sZW5ndGg+PTQmJmEucHVzaCguLi5ZKHIsZSkpLHI9W119LGM9KCk9PntpKCksYS5sZW5ndGgmJihvLnB1c2goYSksYT1bXSl9O2Zvcihjb25zdHtrZXk6dCxkYXRhOmV9b2Ygbilzd2l0Y2godCl7Y2FzZVwiTVwiOmMoKSxoPVtlWzBdLGVbMV1dLGEucHVzaChoKTticmVhaztjYXNlXCJMXCI6aSgpLGEucHVzaChbZVswXSxlWzFdXSk7YnJlYWs7Y2FzZVwiQ1wiOmlmKCFyLmxlbmd0aCl7Y29uc3QgdD1hLmxlbmd0aD9hW2EubGVuZ3RoLTFdOmg7ci5wdXNoKFt0WzBdLHRbMV1dKX1yLnB1c2goW2VbMF0sZVsxXV0pLHIucHVzaChbZVsyXSxlWzNdXSksci5wdXNoKFtlWzRdLGVbNV1dKTticmVhaztjYXNlXCJaXCI6aSgpLGEucHVzaChbaFswXSxoWzFdXSl9aWYoYygpLCFzKXJldHVybiBvO2NvbnN0IGw9W107Zm9yKGNvbnN0IHQgb2Ygbyl7Y29uc3QgZT1VKHQscyk7ZS5sZW5ndGgmJmwucHVzaChlKX1yZXR1cm4gbH0odCwxLGg/NC00KihzLnNpbXBsaWZpY2F0aW9ufHwxKTooMStzLnJvdWdobmVzcykvMiksaT1fKHQscyk7aWYobylpZihcInNvbGlkXCI9PT1zLmZpbGxTdHlsZSlpZigxPT09ci5sZW5ndGgpe2NvbnN0IGU9Xyh0LE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxzKSx7ZGlzYWJsZU11bHRpU3Ryb2tlOiEwLHJvdWdobmVzczpzLnJvdWdobmVzcz9zLnJvdWdobmVzcytzLmZpbGxTaGFwZVJvdWdobmVzc0dhaW46MH0pKTtuLnB1c2goe3R5cGU6XCJmaWxsUGF0aFwiLG9wczp0aGlzLl9tZXJnZWRTaGFwZShlLm9wcyl9KX1lbHNlIG4ucHVzaChJKHIscykpO2Vsc2Ugbi5wdXNoKEMocixzKSk7cmV0dXJuIGEmJihoP3IuZm9yRWFjaCgodD0+e24ucHVzaChTKHQsITEscykpfSkpOm4ucHVzaChpKSksdGhpcy5fZChcInBhdGhcIixuLHMpfW9wc1RvUGF0aCh0LGUpe2xldCBzPVwiXCI7Zm9yKGNvbnN0IG4gb2YgdC5vcHMpe2NvbnN0IHQ9XCJudW1iZXJcIj09dHlwZW9mIGUmJmU+PTA/bi5kYXRhLm1hcCgodD0+K3QudG9GaXhlZChlKSkpOm4uZGF0YTtzd2l0Y2gobi5vcCl7Y2FzZVwibW92ZVwiOnMrPWBNJHt0WzBdfSAke3RbMV19IGA7YnJlYWs7Y2FzZVwiYmN1cnZlVG9cIjpzKz1gQyR7dFswXX0gJHt0WzFdfSwgJHt0WzJdfSAke3RbM119LCAke3RbNF19ICR7dFs1XX0gYDticmVhaztjYXNlXCJsaW5lVG9cIjpzKz1gTCR7dFswXX0gJHt0WzFdfSBgfX1yZXR1cm4gcy50cmltKCl9dG9QYXRocyh0KXtjb25zdCBlPXQuc2V0c3x8W10scz10Lm9wdGlvbnN8fHRoaXMuZGVmYXVsdE9wdGlvbnMsbj1bXTtmb3IoY29uc3QgdCBvZiBlKXtsZXQgZT1udWxsO3N3aXRjaCh0LnR5cGUpe2Nhc2VcInBhdGhcIjplPXtkOnRoaXMub3BzVG9QYXRoKHQpLHN0cm9rZTpzLnN0cm9rZSxzdHJva2VXaWR0aDpzLnN0cm9rZVdpZHRoLGZpbGw6dHR9O2JyZWFrO2Nhc2VcImZpbGxQYXRoXCI6ZT17ZDp0aGlzLm9wc1RvUGF0aCh0KSxzdHJva2U6dHQsc3Ryb2tlV2lkdGg6MCxmaWxsOnMuZmlsbHx8dHR9O2JyZWFrO2Nhc2VcImZpbGxTa2V0Y2hcIjplPXRoaXMuZmlsbFNrZXRjaCh0LHMpfWUmJm4ucHVzaChlKX1yZXR1cm4gbn1maWxsU2tldGNoKHQsZSl7bGV0IHM9ZS5maWxsV2VpZ2h0O3JldHVybiBzPDAmJihzPWUuc3Ryb2tlV2lkdGgvMikse2Q6dGhpcy5vcHNUb1BhdGgodCksc3Ryb2tlOmUuZmlsbHx8dHQsc3Ryb2tlV2lkdGg6cyxmaWxsOnR0fX1fbWVyZ2VkU2hhcGUodCl7cmV0dXJuIHQuZmlsdGVyKCgodCxlKT0+MD09PWV8fFwibW92ZVwiIT09dC5vcCkpfX1jbGFzcyBzdHtjb25zdHJ1Y3Rvcih0LGUpe3RoaXMuY2FudmFzPXQsdGhpcy5jdHg9dGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpLHRoaXMuZ2VuPW5ldyBldChlKX1kcmF3KHQpe2NvbnN0IGU9dC5zZXRzfHxbXSxzPXQub3B0aW9uc3x8dGhpcy5nZXREZWZhdWx0T3B0aW9ucygpLG49dGhpcy5jdHgsbz10Lm9wdGlvbnMuZml4ZWREZWNpbWFsUGxhY2VEaWdpdHM7Zm9yKGNvbnN0IGEgb2YgZSlzd2l0Y2goYS50eXBlKXtjYXNlXCJwYXRoXCI6bi5zYXZlKCksbi5zdHJva2VTdHlsZT1cIm5vbmVcIj09PXMuc3Ryb2tlP1widHJhbnNwYXJlbnRcIjpzLnN0cm9rZSxuLmxpbmVXaWR0aD1zLnN0cm9rZVdpZHRoLHMuc3Ryb2tlTGluZURhc2gmJm4uc2V0TGluZURhc2gocy5zdHJva2VMaW5lRGFzaCkscy5zdHJva2VMaW5lRGFzaE9mZnNldCYmKG4ubGluZURhc2hPZmZzZXQ9cy5zdHJva2VMaW5lRGFzaE9mZnNldCksdGhpcy5fZHJhd1RvQ29udGV4dChuLGEsbyksbi5yZXN0b3JlKCk7YnJlYWs7Y2FzZVwiZmlsbFBhdGhcIjp7bi5zYXZlKCksbi5maWxsU3R5bGU9cy5maWxsfHxcIlwiO2NvbnN0IGU9XCJjdXJ2ZVwiPT09dC5zaGFwZXx8XCJwb2x5Z29uXCI9PT10LnNoYXBlfHxcInBhdGhcIj09PXQuc2hhcGU/XCJldmVub2RkXCI6XCJub256ZXJvXCI7dGhpcy5fZHJhd1RvQ29udGV4dChuLGEsbyxlKSxuLnJlc3RvcmUoKTticmVha31jYXNlXCJmaWxsU2tldGNoXCI6dGhpcy5maWxsU2tldGNoKG4sYSxzKX19ZmlsbFNrZXRjaCh0LGUscyl7bGV0IG49cy5maWxsV2VpZ2h0O248MCYmKG49cy5zdHJva2VXaWR0aC8yKSx0LnNhdmUoKSxzLmZpbGxMaW5lRGFzaCYmdC5zZXRMaW5lRGFzaChzLmZpbGxMaW5lRGFzaCkscy5maWxsTGluZURhc2hPZmZzZXQmJih0LmxpbmVEYXNoT2Zmc2V0PXMuZmlsbExpbmVEYXNoT2Zmc2V0KSx0LnN0cm9rZVN0eWxlPXMuZmlsbHx8XCJcIix0LmxpbmVXaWR0aD1uLHRoaXMuX2RyYXdUb0NvbnRleHQodCxlLHMuZml4ZWREZWNpbWFsUGxhY2VEaWdpdHMpLHQucmVzdG9yZSgpfV9kcmF3VG9Db250ZXh0KHQsZSxzLG49XCJub256ZXJvXCIpe3QuYmVnaW5QYXRoKCk7Zm9yKGNvbnN0IG4gb2YgZS5vcHMpe2NvbnN0IGU9XCJudW1iZXJcIj09dHlwZW9mIHMmJnM+PTA/bi5kYXRhLm1hcCgodD0+K3QudG9GaXhlZChzKSkpOm4uZGF0YTtzd2l0Y2gobi5vcCl7Y2FzZVwibW92ZVwiOnQubW92ZVRvKGVbMF0sZVsxXSk7YnJlYWs7Y2FzZVwiYmN1cnZlVG9cIjp0LmJlemllckN1cnZlVG8oZVswXSxlWzFdLGVbMl0sZVszXSxlWzRdLGVbNV0pO2JyZWFrO2Nhc2VcImxpbmVUb1wiOnQubGluZVRvKGVbMF0sZVsxXSl9fVwiZmlsbFBhdGhcIj09PWUudHlwZT90LmZpbGwobik6dC5zdHJva2UoKX1nZXQgZ2VuZXJhdG9yKCl7cmV0dXJuIHRoaXMuZ2VufWdldERlZmF1bHRPcHRpb25zKCl7cmV0dXJuIHRoaXMuZ2VuLmRlZmF1bHRPcHRpb25zfWxpbmUodCxlLHMsbixvKXtjb25zdCBhPXRoaXMuZ2VuLmxpbmUodCxlLHMsbixvKTtyZXR1cm4gdGhpcy5kcmF3KGEpLGF9cmVjdGFuZ2xlKHQsZSxzLG4sbyl7Y29uc3QgYT10aGlzLmdlbi5yZWN0YW5nbGUodCxlLHMsbixvKTtyZXR1cm4gdGhpcy5kcmF3KGEpLGF9ZWxsaXBzZSh0LGUscyxuLG8pe2NvbnN0IGE9dGhpcy5nZW4uZWxsaXBzZSh0LGUscyxuLG8pO3JldHVybiB0aGlzLmRyYXcoYSksYX1jaXJjbGUodCxlLHMsbil7Y29uc3Qgbz10aGlzLmdlbi5jaXJjbGUodCxlLHMsbik7cmV0dXJuIHRoaXMuZHJhdyhvKSxvfWxpbmVhclBhdGgodCxlKXtjb25zdCBzPXRoaXMuZ2VuLmxpbmVhclBhdGgodCxlKTtyZXR1cm4gdGhpcy5kcmF3KHMpLHN9cG9seWdvbih0LGUpe2NvbnN0IHM9dGhpcy5nZW4ucG9seWdvbih0LGUpO3JldHVybiB0aGlzLmRyYXcocyksc31hcmModCxlLHMsbixvLGEsaD0hMSxyKXtjb25zdCBpPXRoaXMuZ2VuLmFyYyh0LGUscyxuLG8sYSxoLHIpO3JldHVybiB0aGlzLmRyYXcoaSksaX1jdXJ2ZSh0LGUpe2NvbnN0IHM9dGhpcy5nZW4uY3VydmUodCxlKTtyZXR1cm4gdGhpcy5kcmF3KHMpLHN9cGF0aCh0LGUpe2NvbnN0IHM9dGhpcy5nZW4ucGF0aCh0LGUpO3JldHVybiB0aGlzLmRyYXcocyksc319Y29uc3QgbnQ9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2NsYXNzIG90e2NvbnN0cnVjdG9yKHQsZSl7dGhpcy5zdmc9dCx0aGlzLmdlbj1uZXcgZXQoZSl9ZHJhdyh0KXtjb25zdCBlPXQuc2V0c3x8W10scz10Lm9wdGlvbnN8fHRoaXMuZ2V0RGVmYXVsdE9wdGlvbnMoKSxuPXRoaXMuc3ZnLm93bmVyRG9jdW1lbnR8fHdpbmRvdy5kb2N1bWVudCxvPW4uY3JlYXRlRWxlbWVudE5TKG50LFwiZ1wiKSxhPXQub3B0aW9ucy5maXhlZERlY2ltYWxQbGFjZURpZ2l0cztmb3IoY29uc3QgaCBvZiBlKXtsZXQgZT1udWxsO3N3aXRjaChoLnR5cGUpe2Nhc2VcInBhdGhcIjplPW4uY3JlYXRlRWxlbWVudE5TKG50LFwicGF0aFwiKSxlLnNldEF0dHJpYnV0ZShcImRcIix0aGlzLm9wc1RvUGF0aChoLGEpKSxlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLHMuc3Ryb2tlKSxlLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLHMuc3Ryb2tlV2lkdGgrXCJcIiksZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsXCJub25lXCIpLHMuc3Ryb2tlTGluZURhc2gmJmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLWRhc2hhcnJheVwiLHMuc3Ryb2tlTGluZURhc2guam9pbihcIiBcIikudHJpbSgpKSxzLnN0cm9rZUxpbmVEYXNoT2Zmc2V0JiZlLnNldEF0dHJpYnV0ZShcInN0cm9rZS1kYXNob2Zmc2V0XCIsYCR7cy5zdHJva2VMaW5lRGFzaE9mZnNldH1gKTticmVhaztjYXNlXCJmaWxsUGF0aFwiOmU9bi5jcmVhdGVFbGVtZW50TlMobnQsXCJwYXRoXCIpLGUuc2V0QXR0cmlidXRlKFwiZFwiLHRoaXMub3BzVG9QYXRoKGgsYSkpLGUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsXCJub25lXCIpLGUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsXCIwXCIpLGUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLHMuZmlsbHx8XCJcIiksXCJjdXJ2ZVwiIT09dC5zaGFwZSYmXCJwb2x5Z29uXCIhPT10LnNoYXBlfHxlLnNldEF0dHJpYnV0ZShcImZpbGwtcnVsZVwiLFwiZXZlbm9kZFwiKTticmVhaztjYXNlXCJmaWxsU2tldGNoXCI6ZT10aGlzLmZpbGxTa2V0Y2gobixoLHMpfWUmJm8uYXBwZW5kQ2hpbGQoZSl9cmV0dXJuIG99ZmlsbFNrZXRjaCh0LGUscyl7bGV0IG49cy5maWxsV2VpZ2h0O248MCYmKG49cy5zdHJva2VXaWR0aC8yKTtjb25zdCBvPXQuY3JlYXRlRWxlbWVudE5TKG50LFwicGF0aFwiKTtyZXR1cm4gby5zZXRBdHRyaWJ1dGUoXCJkXCIsdGhpcy5vcHNUb1BhdGgoZSxzLmZpeGVkRGVjaW1hbFBsYWNlRGlnaXRzKSksby5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIixzLmZpbGx8fFwiXCIpLG8uc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsbitcIlwiKSxvLnNldEF0dHJpYnV0ZShcImZpbGxcIixcIm5vbmVcIikscy5maWxsTGluZURhc2gmJm8uc2V0QXR0cmlidXRlKFwic3Ryb2tlLWRhc2hhcnJheVwiLHMuZmlsbExpbmVEYXNoLmpvaW4oXCIgXCIpLnRyaW0oKSkscy5maWxsTGluZURhc2hPZmZzZXQmJm8uc2V0QXR0cmlidXRlKFwic3Ryb2tlLWRhc2hvZmZzZXRcIixgJHtzLmZpbGxMaW5lRGFzaE9mZnNldH1gKSxvfWdldCBnZW5lcmF0b3IoKXtyZXR1cm4gdGhpcy5nZW59Z2V0RGVmYXVsdE9wdGlvbnMoKXtyZXR1cm4gdGhpcy5nZW4uZGVmYXVsdE9wdGlvbnN9b3BzVG9QYXRoKHQsZSl7cmV0dXJuIHRoaXMuZ2VuLm9wc1RvUGF0aCh0LGUpfWxpbmUodCxlLHMsbixvKXtjb25zdCBhPXRoaXMuZ2VuLmxpbmUodCxlLHMsbixvKTtyZXR1cm4gdGhpcy5kcmF3KGEpfXJlY3RhbmdsZSh0LGUscyxuLG8pe2NvbnN0IGE9dGhpcy5nZW4ucmVjdGFuZ2xlKHQsZSxzLG4sbyk7cmV0dXJuIHRoaXMuZHJhdyhhKX1lbGxpcHNlKHQsZSxzLG4sbyl7Y29uc3QgYT10aGlzLmdlbi5lbGxpcHNlKHQsZSxzLG4sbyk7cmV0dXJuIHRoaXMuZHJhdyhhKX1jaXJjbGUodCxlLHMsbil7Y29uc3Qgbz10aGlzLmdlbi5jaXJjbGUodCxlLHMsbik7cmV0dXJuIHRoaXMuZHJhdyhvKX1saW5lYXJQYXRoKHQsZSl7Y29uc3Qgcz10aGlzLmdlbi5saW5lYXJQYXRoKHQsZSk7cmV0dXJuIHRoaXMuZHJhdyhzKX1wb2x5Z29uKHQsZSl7Y29uc3Qgcz10aGlzLmdlbi5wb2x5Z29uKHQsZSk7cmV0dXJuIHRoaXMuZHJhdyhzKX1hcmModCxlLHMsbixvLGEsaD0hMSxyKXtjb25zdCBpPXRoaXMuZ2VuLmFyYyh0LGUscyxuLG8sYSxoLHIpO3JldHVybiB0aGlzLmRyYXcoaSl9Y3VydmUodCxlKXtjb25zdCBzPXRoaXMuZ2VuLmN1cnZlKHQsZSk7cmV0dXJuIHRoaXMuZHJhdyhzKX1wYXRoKHQsZSl7Y29uc3Qgcz10aGlzLmdlbi5wYXRoKHQsZSk7cmV0dXJuIHRoaXMuZHJhdyhzKX19dmFyIGF0PXtjYW52YXM6KHQsZSk9Pm5ldyBzdCh0LGUpLHN2ZzoodCxlKT0+bmV3IG90KHQsZSksZ2VuZXJhdG9yOnQ9Pm5ldyBldCh0KSxuZXdTZWVkOigpPT5ldC5uZXdTZWVkKCl9O2V4cG9ydHthdCBhcyBkZWZhdWx0fTtcbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbmV4cG9ydCB2YXIgTEFZRVIgPSAnQGxheWVyJ1xuZXhwb3J0IHZhciBTQ09QRSA9ICdAc2NvcGUnXG4iLCJpbXBvcnQge0NPTU1FTlQsIFJVTEVTRVQsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge2FicywgY2hhcmF0LCB0cmltLCBmcm9tLCBzaXplb2YsIHN0cmxlbiwgc3Vic3RyLCBhcHBlbmQsIHJlcGxhY2UsIGluZGV4b2Z9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7bm9kZSwgY2hhciwgcHJldiwgbmV4dCwgcGVlaywgdG9rZW4sIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicsIGFicyhpbmRleCA/IHBvaW50c1tpbmRleCAtIDFdIDogMCkpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50LCBkZWNsYXJhdGlvbnMpLCBkZWNsYXJhdGlvbnMpXG5cdFx0XHRcdFx0XHRpZiAoKHRva2VuKHByZXZpb3VzIHx8IDEpID09IDUgfHwgdG9rZW4ocGVlaygpIHx8IDEpID09IDUpICYmIHN0cmxlbihjaGFyYWN0ZXJzKSAmJiBzdWJzdHIoY2hhcmFjdGVycywgLTEsIHZvaWQgMCkgIT09ICcgJykgY2hhcmFjdGVycyArPSAnICdcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGNoYXJhY3RlcnMgKz0gJy8nXG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIHtcblx0XHRcdGNhc2UgMTIzICogdmFyaWFibGU6XG5cdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IHN0cmxlbihjaGFyYWN0ZXJzKSAqIGFtcGVyc2FuZFxuXHRcdFx0Ly8gfSA7IFxcMFxuXHRcdFx0Y2FzZSAxMjUgKiB2YXJpYWJsZTogY2FzZSA1OTogY2FzZSAwOlxuXHRcdFx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0XHRcdC8vIFxcMCB9XG5cdFx0XHRcdFx0Y2FzZSAwOiBjYXNlIDEyNTogc2Nhbm5pbmcgPSAwXG5cdFx0XHRcdFx0Ly8gO1xuXHRcdFx0XHRcdGNhc2UgNTkgKyBvZmZzZXQ6IGlmIChhbXBlcnNhbmQgPT0gLTEpIGNoYXJhY3RlcnMgPSByZXBsYWNlKGNoYXJhY3RlcnMsIC9cXGYvZywgJycpXG5cdFx0XHRcdFx0XHRpZiAocHJvcGVydHkgPiAwICYmIChzdHJsZW4oY2hhcmFjdGVycykgLSBsZW5ndGggfHwgKHZhcmlhYmxlID09PSAwICYmIHByZXZpb3VzID09PSA0NykpKVxuXHRcdFx0XHRcdFx0XHRhcHBlbmQocHJvcGVydHkgPiAzMiA/IGRlY2xhcmF0aW9uKGNoYXJhY3RlcnMgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMSwgZGVjbGFyYXRpb25zKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiwgZGVjbGFyYXRpb25zKSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAIDtcblx0XHRcdFx0XHRjYXNlIDU5OiBjaGFyYWN0ZXJzICs9ICc7J1xuXHRcdFx0XHRcdC8vIHsgcnVsZS9hdC1ydWxlXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdGFwcGVuZChyZWZlcmVuY2UgPSBydWxlc2V0KGNoYXJhY3RlcnMsIHJvb3QsIHBhcmVudCwgaW5kZXgsIG9mZnNldCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcHJvcHMgPSBbXSwgY2hpbGRyZW4gPSBbXSwgbGVuZ3RoLCBydWxlc2V0cyksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGF0cnVsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gYyhvbnRhaW5lcilcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgOTk6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChjaGFyYXQoY2hhcmFjdGVycywgMykgPT09IDExMCkgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGwoYXllcilcblx0XHRcdFx0XHRcdFx0XHRcdGNhc2UgMTA4OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoY2hhcmF0KGNoYXJhY3RlcnMsIDIpID09PSA5NykgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9mZnNldCA9IDBcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGQob2N1bWVudCkgbShlZGlhKSBzKHVwcG9ydHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIDEwMDogY2FzZSAxMDk6IGNhc2UgMTE1OlxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAob2Zmc2V0KSBwYXJzZSh2YWx1ZSwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHJ1bGUgJiYgYXBwZW5kKHJ1bGVzZXQodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCAwLCAwLCBydWxlcywgcG9pbnRzLCB0eXBlLCBydWxlcywgcHJvcHMgPSBbXSwgbGVuZ3RoLCBjaGlsZHJlbiksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0ZWxzZSBwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aW5kZXggPSBvZmZzZXQgPSBwcm9wZXJ0eSA9IDAsIHZhcmlhYmxlID0gYW1wZXJzYW5kID0gMSwgdHlwZSA9IGNoYXJhY3RlcnMgPSAnJywgbGVuZ3RoID0gcHNldWRvXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyA6XG5cdFx0XHRjYXNlIDU4OlxuXHRcdFx0XHRsZW5ndGggPSAxICsgc3RybGVuKGNoYXJhY3RlcnMpLCBwcm9wZXJ0eSA9IHByZXZpb3VzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZiAodmFyaWFibGUgPCAxKVxuXHRcdFx0XHRcdGlmIChjaGFyYWN0ZXIgPT0gMTIzKVxuXHRcdFx0XHRcdFx0LS12YXJpYWJsZVxuXHRcdFx0XHRcdGVsc2UgaWYgKGNoYXJhY3RlciA9PSAxMjUgJiYgdmFyaWFibGUrKyA9PSAwICYmIHByZXYoKSA9PSAxMjUpXG5cdFx0XHRcdFx0XHRjb250aW51ZVxuXG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVycyArPSBmcm9tKGNoYXJhY3RlciksIGNoYXJhY3RlciAqIHZhcmlhYmxlKSB7XG5cdFx0XHRcdFx0Ly8gJlxuXHRcdFx0XHRcdGNhc2UgMzg6XG5cdFx0XHRcdFx0XHRhbXBlcnNhbmQgPSBvZmZzZXQgPiAwID8gMSA6IChjaGFyYWN0ZXJzICs9ICdcXGYnLCAtMSlcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLFxuXHRcdFx0XHRcdGNhc2UgNDQ6XG5cdFx0XHRcdFx0XHRwb2ludHNbaW5kZXgrK10gPSAoc3RybGVuKGNoYXJhY3RlcnMpIC0gMSkgKiBhbXBlcnNhbmQsIGFtcGVyc2FuZCA9IDFcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQFxuXHRcdFx0XHRcdGNhc2UgNjQ6XG5cdFx0XHRcdFx0XHQvLyAtXG5cdFx0XHRcdFx0XHRpZiAocGVlaygpID09PSA0NSlcblx0XHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSBkZWxpbWl0KG5leHQoKSlcblxuXHRcdFx0XHRcdFx0YXRydWxlID0gcGVlaygpLCBvZmZzZXQgPSBsZW5ndGggPSBzdHJsZW4odHlwZSA9IGNoYXJhY3RlcnMgKz0gaWRlbnRpZmllcihjYXJldCgpKSksIGNoYXJhY3RlcisrXG5cdFx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRjYXNlIDQ1OlxuXHRcdFx0XHRcdFx0aWYgKHByZXZpb3VzID09PSA0NSAmJiBzdHJsZW4oY2hhcmFjdGVycykgPT0gMilcblx0XHRcdFx0XHRcdFx0dmFyaWFibGUgPSAwXG5cdFx0XHRcdH1cblx0XHR9XG5cblx0cmV0dXJuIHJ1bGVzZXRzXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHtzdHJpbmdbXX0gcnVsZXNcbiAqIEBwYXJhbSB7bnVtYmVyW119IHBvaW50c1xuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBjaGlsZHJlblxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHBhcmFtIHtvYmplY3RbXX0gc2libGluZ3NcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzZXQgKHZhbHVlLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoLCBzaWJsaW5ncykge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCwgc2libGluZ3MpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7b2JqZWN0W119IHNpYmxpbmdzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21tZW50ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBzaWJsaW5ncykge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwLCBzaWJsaW5ncylcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHBhcmFtIHtvYmplY3RbXX0gc2libGluZ3NcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY2xhcmF0aW9uICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBsZW5ndGgsIHNpYmxpbmdzKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgsIHNpYmxpbmdzKVxufVxuIiwiaW1wb3J0IHtJTVBPUlQsIExBWUVSLCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTLCBOQU1FU1BBQ0V9IGZyb20gJy4vRW51bS5qcydcbmltcG9ydCB7c3RybGVufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgTEFZRVI6IGlmIChlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkgYnJlYWtcblx0XHRjYXNlIElNUE9SVDogY2FzZSBOQU1FU1BBQ0U6IGNhc2UgREVDTEFSQVRJT046IHJldHVybiBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQucmV0dXJuIHx8IGVsZW1lbnQudmFsdWVcblx0XHRjYXNlIENPTU1FTlQ6IHJldHVybiAnJ1xuXHRcdGNhc2UgS0VZRlJBTUVTOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSArICd9J1xuXHRcdGNhc2UgUlVMRVNFVDogaWYgKCFzdHJsZW4oZWxlbWVudC52YWx1ZSA9IGVsZW1lbnQucHJvcHMuam9pbignLCcpKSkgcmV0dXJuICcnXG5cdH1cblxuXHRyZXR1cm4gc3RybGVuKGNoaWxkcmVuID0gc2VyaWFsaXplKGVsZW1lbnQuY2hpbGRyZW4sIGNhbGxiYWNrKSkgPyBlbGVtZW50LnJldHVybiA9IGVsZW1lbnQudmFsdWUgKyAneycgKyBjaGlsZHJlbiArICd9JyA6ICcnXG59XG4iLCJpbXBvcnQge2Zyb20sIHRyaW0sIGNoYXJhdCwgc3RybGVuLCBzdWJzdHIsIGFwcGVuZCwgYXNzaWdufSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbmV4cG9ydCB2YXIgbGluZSA9IDFcbmV4cG9ydCB2YXIgY29sdW1uID0gMVxuZXhwb3J0IHZhciBsZW5ndGggPSAwXG5leHBvcnQgdmFyIHBvc2l0aW9uID0gMFxuZXhwb3J0IHZhciBjaGFyYWN0ZXIgPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlcnMgPSAnJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3QgfCBudWxsfSByb290XG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHBhcmVudFxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nW10gfCBzdHJpbmd9IHByb3BzXG4gKiBAcGFyYW0ge29iamVjdFtdIHwgc3RyaW5nfSBjaGlsZHJlblxuICogQHBhcmFtIHtvYmplY3RbXX0gc2libGluZ3NcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGUgKHZhbHVlLCByb290LCBwYXJlbnQsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgbGVuZ3RoLCBzaWJsaW5ncykge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJycsIHNpYmxpbmdzOiBzaWJsaW5nc31cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3B5IChyb290LCBwcm9wcykge1xuXHRyZXR1cm4gYXNzaWduKG5vZGUoJycsIG51bGwsIG51bGwsICcnLCBudWxsLCBudWxsLCAwLCByb290LnNpYmxpbmdzKSwgcm9vdCwge2xlbmd0aDogLXJvb3QubGVuZ3RofSwgcHJvcHMpXG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZnQgKHJvb3QpIHtcblx0d2hpbGUgKHJvb3Qucm9vdClcblx0XHRyb290ID0gY29weShyb290LnJvb3QsIHtjaGlsZHJlbjogW3Jvb3RdfSlcblxuXHRhcHBlbmQocm9vdCwgcm9vdC5zaWJsaW5ncylcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFyICgpIHtcblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXYgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA+IDAgPyBjaGFyYXQoY2hhcmFjdGVycywgLS1wb3NpdGlvbikgOiAwXG5cblx0aWYgKGNvbHVtbi0tLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUtLVxuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXh0ICgpIHtcblx0Y2hhcmFjdGVyID0gcG9zaXRpb24gPCBsZW5ndGggPyBjaGFyYXQoY2hhcmFjdGVycywgcG9zaXRpb24rKykgOiAwXG5cblx0aWYgKGNvbHVtbisrLCBjaGFyYWN0ZXIgPT09IDEwKVxuXHRcdGNvbHVtbiA9IDEsIGxpbmUrK1xuXG5cdHJldHVybiBjaGFyYWN0ZXJcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZWVrICgpIHtcblx0cmV0dXJuIGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXJldCAoKSB7XG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcblx0cmV0dXJuIHN1YnN0cihjaGFyYWN0ZXJzLCBiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbiAodHlwZSkge1xuXHRzd2l0Y2ggKHR5cGUpIHtcblx0XHQvLyBcXDAgXFx0IFxcbiBcXHIgXFxzIHdoaXRlc3BhY2UgdG9rZW5cblx0XHRjYXNlIDA6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdHJldHVybiA1XG5cdFx0Ly8gISArICwgLyA+IEAgfiBpc29sYXRlIHRva2VuXG5cdFx0Y2FzZSAzMzogY2FzZSA0MzogY2FzZSA0NDogY2FzZSA0NzogY2FzZSA2MjogY2FzZSA2NDogY2FzZSAxMjY6XG5cdFx0Ly8gOyB7IH0gYnJlYWtwb2ludCB0b2tlblxuXHRcdGNhc2UgNTk6IGNhc2UgMTIzOiBjYXNlIDEyNTpcblx0XHRcdHJldHVybiA0XG5cdFx0Ly8gOiBhY2NvbXBhbmllZCB0b2tlblxuXHRcdGNhc2UgNTg6XG5cdFx0XHRyZXR1cm4gM1xuXHRcdC8vIFwiICcgKCBbIG9wZW5pbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgNDA6IGNhc2UgOTE6XG5cdFx0XHRyZXR1cm4gMlxuXHRcdC8vICkgXSBjbG9zaW5nIGRlbGltaXQgdG9rZW5cblx0XHRjYXNlIDQxOiBjYXNlIDkzOlxuXHRcdFx0cmV0dXJuIDFcblx0fVxuXG5cdHJldHVybiAwXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnlbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gbGluZSA9IGNvbHVtbiA9IDEsIGxlbmd0aCA9IHN0cmxlbihjaGFyYWN0ZXJzID0gdmFsdWUpLCBwb3NpdGlvbiA9IDAsIFtdXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IHZhbHVlXG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWFsbG9jICh2YWx1ZSkge1xuXHRyZXR1cm4gY2hhcmFjdGVycyA9ICcnLCB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ICh0eXBlKSB7XG5cdHJldHVybiB0cmltKHNsaWNlKHBvc2l0aW9uIC0gMSwgZGVsaW1pdGVyKHR5cGUgPT09IDkxID8gdHlwZSArIDIgOiB0eXBlID09PSA0MCA/IHR5cGUgKyAxIDogdHlwZSkpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbml6ZSAodmFsdWUpIHtcblx0cmV0dXJuIGRlYWxsb2ModG9rZW5pemVyKGFsbG9jKHZhbHVlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdoaXRlc3BhY2UgKHR5cGUpIHtcblx0d2hpbGUgKGNoYXJhY3RlciA9IHBlZWsoKSlcblx0XHRpZiAoY2hhcmFjdGVyIDwgMzMpXG5cdFx0XHRuZXh0KClcblx0XHRlbHNlXG5cdFx0XHRicmVha1xuXG5cdHJldHVybiB0b2tlbih0eXBlKSA+IDIgfHwgdG9rZW4oY2hhcmFjdGVyKSA+IDMgPyAnJyA6ICcgJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplciAoY2hpbGRyZW4pIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKHRva2VuKGNoYXJhY3RlcikpIHtcblx0XHRcdGNhc2UgMDogYXBwZW5kKGlkZW50aWZpZXIocG9zaXRpb24gLSAxKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRjYXNlIDI6IGFwcGVuZChkZWxpbWl0KGNoYXJhY3RlciksIGNoaWxkcmVuKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0ZGVmYXVsdDogYXBwZW5kKGZyb20oY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0fVxuXG5cdHJldHVybiBjaGlsZHJlblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGluZyAoaW5kZXgsIGNvdW50KSB7XG5cdHdoaWxlICgtLWNvdW50ICYmIG5leHQoKSlcblx0XHQvLyBub3QgMC05IEEtRiBhLWZcblx0XHRpZiAoY2hhcmFjdGVyIDwgNDggfHwgY2hhcmFjdGVyID4gMTAyIHx8IChjaGFyYWN0ZXIgPiA1NyAmJiBjaGFyYWN0ZXIgPCA2NSkgfHwgKGNoYXJhY3RlciA+IDcwICYmIGNoYXJhY3RlciA8IDk3KSlcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBjYXJldCgpICsgKGNvdW50IDwgNiAmJiBwZWVrKCkgPT0gMzIgJiYgbmV4dCgpID09IDMyKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsaW1pdGVyICh0eXBlKSB7XG5cdHdoaWxlIChuZXh0KCkpXG5cdFx0c3dpdGNoIChjaGFyYWN0ZXIpIHtcblx0XHRcdC8vIF0gKSBcIiAnXG5cdFx0XHRjYXNlIHR5cGU6XG5cdFx0XHRcdHJldHVybiBwb3NpdGlvblxuXHRcdFx0Ly8gXCIgJ1xuXHRcdFx0Y2FzZSAzNDogY2FzZSAzOTpcblx0XHRcdFx0aWYgKHR5cGUgIT09IDM0ICYmIHR5cGUgIT09IDM5KVxuXHRcdFx0XHRcdGRlbGltaXRlcihjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyAoXG5cdFx0XHRjYXNlIDQwOlxuXHRcdFx0XHRpZiAodHlwZSA9PT0gNDEpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKHR5cGUpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXFxuXHRcdFx0Y2FzZSA5Mjpcblx0XHRcdFx0bmV4dCgpXG5cdFx0XHRcdGJyZWFrXG5cdFx0fVxuXG5cdHJldHVybiBwb3NpdGlvblxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1lbnRlciAodHlwZSwgaW5kZXgpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHQvLyAvL1xuXHRcdGlmICh0eXBlICsgY2hhcmFjdGVyID09PSA0NyArIDEwKVxuXHRcdFx0YnJlYWtcblx0XHQvLyAvKlxuXHRcdGVsc2UgaWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQyICsgNDIgJiYgcGVlaygpID09PSA0Nylcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuICcvKicgKyBzbGljZShpbmRleCwgcG9zaXRpb24gLSAxKSArICcqJyArIGZyb20odHlwZSA9PT0gNDcgPyB0eXBlIDogbmV4dCgpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpZmllciAoaW5kZXgpIHtcblx0d2hpbGUgKCF0b2tlbihwZWVrKCkpKVxuXHRcdG5leHQoKVxuXG5cdHJldHVybiBzbGljZShpbmRleCwgcG9zaXRpb24pXG59XG4iLCIvKipcbiAqIEBwYXJhbSB7bnVtYmVyfVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCB2YXIgZnJvbSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH1cbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZXhwb3J0IHZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoYXNoICh2YWx1ZSwgbGVuZ3RoKSB7XG5cdHJldHVybiBjaGFyYXQodmFsdWUsIDApIF4gNDUgPyAoKCgoKCgobGVuZ3RoIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAwKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDEpKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMikpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAzKSA6IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaW0gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS50cmltKClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7UmVnRXhwfSBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmc/fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2ggKHZhbHVlLCBwYXR0ZXJuKSB7XG5cdHJldHVybiAodmFsdWUgPSBwYXR0ZXJuLmV4ZWModmFsdWUpKSA/IHZhbHVlWzBdIDogdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7KHN0cmluZ3xSZWdFeHApfSBwYXR0ZXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZW1lbnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2UgKHZhbHVlLCBwYXR0ZXJuLCByZXBsYWNlbWVudCkge1xuXHRyZXR1cm4gdmFsdWUucmVwbGFjZShwYXR0ZXJuLCByZXBsYWNlbWVudClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAqIEBwYXJhbSB7bnVtYmVyfSBwb3NpdGlvblxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCwgcG9zaXRpb24pIHtcblx0cmV0dXJuIHZhbHVlLmluZGV4T2Yoc2VhcmNoLCBwb3NpdGlvbilcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhcmF0ICh2YWx1ZSwgaW5kZXgpIHtcblx0cmV0dXJuIHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpIHwgMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdWJzdHIgKHZhbHVlLCBiZWdpbiwgZW5kKSB7XG5cdHJldHVybiB2YWx1ZS5zbGljZShiZWdpbiwgZW5kKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RybGVuICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUubGVuZ3RoXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnlbXX0gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemVvZiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55fSB2YWx1ZVxuICogQHBhcmFtIHthbnlbXX0gYXJyYXlcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZCAodmFsdWUsIGFycmF5KSB7XG5cdHJldHVybiBhcnJheS5wdXNoKHZhbHVlKSwgdmFsdWVcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBhcnJheVxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUgKGFycmF5LCBjYWxsYmFjaykge1xuXHRyZXR1cm4gYXJyYXkubWFwKGNhbGxiYWNrKS5qb2luKCcnKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFycmF5XG4gKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuICogQHJldHVybiB7c3RyaW5nW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIgKGFycmF5LCBwYXR0ZXJuKSB7XG5cdHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhbWF0Y2godmFsdWUsIHBhdHRlcm4pIH0pXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVkZW50KHRlbXBsKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhbHVlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHN0cmluZ3MgPSBBcnJheS5mcm9tKHR5cGVvZiB0ZW1wbCA9PT0gJ3N0cmluZycgPyBbdGVtcGxdIDogdGVtcGwpO1xuICAgIHN0cmluZ3Nbc3RyaW5ncy5sZW5ndGggLSAxXSA9IHN0cmluZ3Nbc3RyaW5ncy5sZW5ndGggLSAxXS5yZXBsYWNlKC9cXHI/XFxuKFtcXHQgXSopJC8sICcnKTtcbiAgICB2YXIgaW5kZW50TGVuZ3RocyA9IHN0cmluZ3MucmVkdWNlKGZ1bmN0aW9uIChhcnIsIHN0cikge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IHN0ci5tYXRjaCgvXFxuKFtcXHQgXSt8KD8hXFxzKS4pL2cpO1xuICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5jb25jYXQobWF0Y2hlcy5tYXAoZnVuY3Rpb24gKG1hdGNoKSB7IHZhciBfYSwgX2I7IHJldHVybiAoX2IgPSAoX2EgPSBtYXRjaC5tYXRjaCgvW1xcdCBdL2cpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAwOyB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCBbXSk7XG4gICAgaWYgKGluZGVudExlbmd0aHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuXzEgPSBuZXcgUmVnRXhwKFwiXFxuW1xcdCBde1wiICsgTWF0aC5taW4uYXBwbHkoTWF0aCwgaW5kZW50TGVuZ3RocykgKyBcIn1cIiwgJ2cnKTtcbiAgICAgICAgc3RyaW5ncyA9IHN0cmluZ3MubWFwKGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKHBhdHRlcm5fMSwgJ1xcbicpOyB9KTtcbiAgICB9XG4gICAgc3RyaW5nc1swXSA9IHN0cmluZ3NbMF0ucmVwbGFjZSgvXlxccj9cXG4vLCAnJyk7XG4gICAgdmFyIHN0cmluZyA9IHN0cmluZ3NbMF07XG4gICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgICAgIHZhciBlbmRlbnRhdGlvbnMgPSBzdHJpbmcubWF0Y2goLyg/Ol58XFxuKSggKikkLyk7XG4gICAgICAgIHZhciBlbmRlbnRhdGlvbiA9IGVuZGVudGF0aW9ucyA/IGVuZGVudGF0aW9uc1sxXSA6ICcnO1xuICAgICAgICB2YXIgaW5kZW50ZWRWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHtcbiAgICAgICAgICAgIGluZGVudGVkVmFsdWUgPSBTdHJpbmcodmFsdWUpXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHN0ciwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpID09PSAwID8gc3RyIDogXCJcIiArIGVuZGVudGF0aW9uICsgc3RyO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RyaW5nICs9IGluZGVudGVkVmFsdWUgKyBzdHJpbmdzW2kgKyAxXTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3RyaW5nO1xufVxuZXhwb3J0IGRlZmF1bHQgZGVkZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9