"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["node_modules_codemirror_legacy-modes_mode_oz_js"],{

/***/ "./node_modules/@codemirror/legacy-modes/mode/oz.js":
/*!**********************************************************!*\
  !*** ./node_modules/@codemirror/legacy-modes/mode/oz.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   oz: () => (/* binding */ oz)
/* harmony export */ });
function wordRegexp(words) {
  return new RegExp("^((" + words.join(")|(") + "))\\b");
}

var singleOperators = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
var doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
var tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;

var middle = ["in", "then", "else", "of", "elseof", "elsecase", "elseif", "catch",
              "finally", "with", "require", "prepare", "import", "export", "define", "do"];
var end = ["end"];

var atoms = wordRegexp(["true", "false", "nil", "unit"]);
var commonKeywords = wordRegexp(["andthen", "at", "attr", "declare", "feat", "from", "lex",
                                 "mod", "div", "mode", "orelse", "parser", "prod", "prop", "scanner", "self", "syn", "token"]);
var openingKeywords = wordRegexp(["local", "proc", "fun", "case", "class", "if", "cond", "or", "dis",
                                  "choice", "not", "thread", "try", "raise", "lock", "for", "suchthat", "meth", "functor"]);
var middleKeywords = wordRegexp(middle);
var endKeywords = wordRegexp(end);

// Tokenizers
function tokenBase(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }

  // Brackets
  if(stream.match(/[{}]/)) {
    return "bracket";
  }

  // Special [] keyword
  if (stream.match('[]')) {
    return "keyword"
  }

  // Operators
  if (stream.match(tripleOperators) || stream.match(doubleOperators)) {
    return "operator";
  }

  // Atoms
  if(stream.match(atoms)) {
    return 'atom';
  }

  // Opening keywords
  var matched = stream.match(openingKeywords);
  if (matched) {
    if (!state.doInCurrentLine)
      state.currentIndent++;
    else
      state.doInCurrentLine = false;

    // Special matching for signatures
    if(matched[0] == "proc" || matched[0] == "fun")
      state.tokenize = tokenFunProc;
    else if(matched[0] == "class")
      state.tokenize = tokenClass;
    else if(matched[0] == "meth")
      state.tokenize = tokenMeth;

    return 'keyword';
  }

  // Middle and other keywords
  if (stream.match(middleKeywords) || stream.match(commonKeywords)) {
    return "keyword"
  }

  // End keywords
  if (stream.match(endKeywords)) {
    state.currentIndent--;
    return 'keyword';
  }

  // Eat the next char for next comparisons
  var ch = stream.next();

  // Strings
  if (ch == '"' || ch == "'") {
    state.tokenize = tokenString(ch);
    return state.tokenize(stream, state);
  }

  // Numbers
  if (/[~\d]/.test(ch)) {
    if (ch == "~") {
      if(! /^[0-9]/.test(stream.peek()))
        return null;
      else if (( stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
        return "number";
    }

    if ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
      return "number";

    return null;
  }

  // Comments
  if (ch == "%") {
    stream.skipToEnd();
    return 'comment';
  }
  else if (ch == "/") {
    if (stream.eat("*")) {
      state.tokenize = tokenComment;
      return tokenComment(stream, state);
    }
  }

  // Single operators
  if(singleOperators.test(ch)) {
    return "operator";
  }

  // If nothing match, we skip the entire alphanumerical block
  stream.eatWhile(/\w/);

  return "variable";
}

function tokenClass(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
  state.tokenize = tokenBase;
  return "type"
}

function tokenMeth(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }
  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
  state.tokenize = tokenBase;
  return "def"
}

function tokenFunProc(stream, state) {
  if (stream.eatSpace()) {
    return null;
  }

  if(!state.hasPassedFirstStage && stream.eat("{")) {
    state.hasPassedFirstStage = true;
    return "bracket";
  }
  else if(state.hasPassedFirstStage) {
    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
    state.hasPassedFirstStage = false;
    state.tokenize = tokenBase;
    return "def"
  }
  else {
    state.tokenize = tokenBase;
    return null;
  }
}

function tokenComment(stream, state) {
  var maybeEnd = false, ch;
  while (ch = stream.next()) {
    if (ch == "/" && maybeEnd) {
      state.tokenize = tokenBase;
      break;
    }
    maybeEnd = (ch == "*");
  }
  return "comment";
}

function tokenString(quote) {
  return function (stream, state) {
    var escaped = false, next, end = false;
    while ((next = stream.next()) != null) {
      if (next == quote && !escaped) {
        end = true;
        break;
      }
      escaped = !escaped && next == "\\";
    }
    if (end || !escaped)
      state.tokenize = tokenBase;
    return "string";
  };
}

function buildElectricInputRegEx() {
  // Reindentation should occur on [] or on a match of any of
  // the block closing keywords, at the end of a line.
  var allClosings = middle.concat(end);
  return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
}

const oz = {
  name: "oz",

  startState: function () {
    return {
      tokenize: tokenBase,
      currentIndent: 0,
      doInCurrentLine: false,
      hasPassedFirstStage: false
    };
  },

  token: function (stream, state) {
    if (stream.sol())
      state.doInCurrentLine = 0;

    return state.tokenize(stream, state);
  },

  indent: function (state, textAfter, cx) {
    var trueText = textAfter.replace(/^\s+|\s+$/g, '');

    if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\[])/))
      return cx.unit * (state.currentIndent - 1);

    if (state.currentIndent < 0)
      return 0;

    return state.currentIndent * cx.unit
  },

  languageData: {
    indentOnInut: buildElectricInputRegEx(),
    commentTokens: {line: "%", block: {open: "/*", close: "*/"}}
  }
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NvZGVtaXJyb3JfbGVnYWN5LW1vZGVzX21vZGVfb3pfanMuZjFhMThlMzkzN2U3NDk3ZjUyOGEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BqdXB5dGVybGFiL2FwcGxpY2F0aW9uLXRvcC8uL25vZGVfbW9kdWxlcy9AY29kZW1pcnJvci9sZWdhY3ktbW9kZXMvbW9kZS9vei5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB3b3JkUmVnZXhwKHdvcmRzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXigoXCIgKyB3b3Jkcy5qb2luKFwiKXwoXCIpICsgXCIpKVxcXFxiXCIpO1xufVxuXG52YXIgc2luZ2xlT3BlcmF0b3JzID0gL1tcXF5AIVxcfDw+I35cXC5cXCpcXC1cXCtcXFxcLyw9XS87XG52YXIgZG91YmxlT3BlcmF0b3JzID0gLyg8LSl8KDo9KXwoPTwpfCg+PSl8KDw9KXwoPDopfCg+Oil8KD06KXwoXFxcXD0pfChcXFxcPTopfCghISl8KD09KXwoOjopLztcbnZhciB0cmlwbGVPcGVyYXRvcnMgPSAvKDo6Oil8KFxcLlxcLlxcLil8KD08Oil8KD49OikvO1xuXG52YXIgbWlkZGxlID0gW1wiaW5cIiwgXCJ0aGVuXCIsIFwiZWxzZVwiLCBcIm9mXCIsIFwiZWxzZW9mXCIsIFwiZWxzZWNhc2VcIiwgXCJlbHNlaWZcIiwgXCJjYXRjaFwiLFxuICAgICAgICAgICAgICBcImZpbmFsbHlcIiwgXCJ3aXRoXCIsIFwicmVxdWlyZVwiLCBcInByZXBhcmVcIiwgXCJpbXBvcnRcIiwgXCJleHBvcnRcIiwgXCJkZWZpbmVcIiwgXCJkb1wiXTtcbnZhciBlbmQgPSBbXCJlbmRcIl07XG5cbnZhciBhdG9tcyA9IHdvcmRSZWdleHAoW1widHJ1ZVwiLCBcImZhbHNlXCIsIFwibmlsXCIsIFwidW5pdFwiXSk7XG52YXIgY29tbW9uS2V5d29yZHMgPSB3b3JkUmVnZXhwKFtcImFuZHRoZW5cIiwgXCJhdFwiLCBcImF0dHJcIiwgXCJkZWNsYXJlXCIsIFwiZmVhdFwiLCBcImZyb21cIiwgXCJsZXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibW9kXCIsIFwiZGl2XCIsIFwibW9kZVwiLCBcIm9yZWxzZVwiLCBcInBhcnNlclwiLCBcInByb2RcIiwgXCJwcm9wXCIsIFwic2Nhbm5lclwiLCBcInNlbGZcIiwgXCJzeW5cIiwgXCJ0b2tlblwiXSk7XG52YXIgb3BlbmluZ0tleXdvcmRzID0gd29yZFJlZ2V4cChbXCJsb2NhbFwiLCBcInByb2NcIiwgXCJmdW5cIiwgXCJjYXNlXCIsIFwiY2xhc3NcIiwgXCJpZlwiLCBcImNvbmRcIiwgXCJvclwiLCBcImRpc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hvaWNlXCIsIFwibm90XCIsIFwidGhyZWFkXCIsIFwidHJ5XCIsIFwicmFpc2VcIiwgXCJsb2NrXCIsIFwiZm9yXCIsIFwic3VjaHRoYXRcIiwgXCJtZXRoXCIsIFwiZnVuY3RvclwiXSk7XG52YXIgbWlkZGxlS2V5d29yZHMgPSB3b3JkUmVnZXhwKG1pZGRsZSk7XG52YXIgZW5kS2V5d29yZHMgPSB3b3JkUmVnZXhwKGVuZCk7XG5cbi8vIFRva2VuaXplcnNcbmZ1bmN0aW9uIHRva2VuQmFzZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQnJhY2tldHNcbiAgaWYoc3RyZWFtLm1hdGNoKC9be31dLykpIHtcbiAgICByZXR1cm4gXCJicmFja2V0XCI7XG4gIH1cblxuICAvLyBTcGVjaWFsIFtdIGtleXdvcmRcbiAgaWYgKHN0cmVhbS5tYXRjaCgnW10nKSkge1xuICAgIHJldHVybiBcImtleXdvcmRcIlxuICB9XG5cbiAgLy8gT3BlcmF0b3JzXG4gIGlmIChzdHJlYW0ubWF0Y2godHJpcGxlT3BlcmF0b3JzKSB8fCBzdHJlYW0ubWF0Y2goZG91YmxlT3BlcmF0b3JzKSkge1xuICAgIHJldHVybiBcIm9wZXJhdG9yXCI7XG4gIH1cblxuICAvLyBBdG9tc1xuICBpZihzdHJlYW0ubWF0Y2goYXRvbXMpKSB7XG4gICAgcmV0dXJuICdhdG9tJztcbiAgfVxuXG4gIC8vIE9wZW5pbmcga2V5d29yZHNcbiAgdmFyIG1hdGNoZWQgPSBzdHJlYW0ubWF0Y2gob3BlbmluZ0tleXdvcmRzKTtcbiAgaWYgKG1hdGNoZWQpIHtcbiAgICBpZiAoIXN0YXRlLmRvSW5DdXJyZW50TGluZSlcbiAgICAgIHN0YXRlLmN1cnJlbnRJbmRlbnQrKztcbiAgICBlbHNlXG4gICAgICBzdGF0ZS5kb0luQ3VycmVudExpbmUgPSBmYWxzZTtcblxuICAgIC8vIFNwZWNpYWwgbWF0Y2hpbmcgZm9yIHNpZ25hdHVyZXNcbiAgICBpZihtYXRjaGVkWzBdID09IFwicHJvY1wiIHx8IG1hdGNoZWRbMF0gPT0gXCJmdW5cIilcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5GdW5Qcm9jO1xuICAgIGVsc2UgaWYobWF0Y2hlZFswXSA9PSBcImNsYXNzXCIpXG4gICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ2xhc3M7XG4gICAgZWxzZSBpZihtYXRjaGVkWzBdID09IFwibWV0aFwiKVxuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbk1ldGg7XG5cbiAgICByZXR1cm4gJ2tleXdvcmQnO1xuICB9XG5cbiAgLy8gTWlkZGxlIGFuZCBvdGhlciBrZXl3b3Jkc1xuICBpZiAoc3RyZWFtLm1hdGNoKG1pZGRsZUtleXdvcmRzKSB8fCBzdHJlYW0ubWF0Y2goY29tbW9uS2V5d29yZHMpKSB7XG4gICAgcmV0dXJuIFwia2V5d29yZFwiXG4gIH1cblxuICAvLyBFbmQga2V5d29yZHNcbiAgaWYgKHN0cmVhbS5tYXRjaChlbmRLZXl3b3JkcykpIHtcbiAgICBzdGF0ZS5jdXJyZW50SW5kZW50LS07XG4gICAgcmV0dXJuICdrZXl3b3JkJztcbiAgfVxuXG4gIC8vIEVhdCB0aGUgbmV4dCBjaGFyIGZvciBuZXh0IGNvbXBhcmlzb25zXG4gIHZhciBjaCA9IHN0cmVhbS5uZXh0KCk7XG5cbiAgLy8gU3RyaW5nc1xuICBpZiAoY2ggPT0gJ1wiJyB8fCBjaCA9PSBcIidcIikge1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmcoY2gpO1xuICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxuXG4gIC8vIE51bWJlcnNcbiAgaWYgKC9bflxcZF0vLnRlc3QoY2gpKSB7XG4gICAgaWYgKGNoID09IFwiflwiKSB7XG4gICAgICBpZighIC9eWzAtOV0vLnRlc3Qoc3RyZWFtLnBlZWsoKSkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgZWxzZSBpZiAoKCBzdHJlYW0ubmV4dCgpID09IFwiMFwiICYmIHN0cmVhbS5tYXRjaCgvXlt4WF1bMC05YS1mQS1GXSsvKSkgfHwgc3RyZWFtLm1hdGNoKC9eWzAtOV0qKFxcLlswLTldKyk/KFtlRV1bfitdP1swLTldKyk/LykpXG4gICAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgIH1cblxuICAgIGlmICgoY2ggPT0gXCIwXCIgJiYgc3RyZWFtLm1hdGNoKC9eW3hYXVswLTlhLWZBLUZdKy8pKSB8fCBzdHJlYW0ubWF0Y2goL15bMC05XSooXFwuWzAtOV0rKT8oW2VFXVt+K10/WzAtOV0rKT8vKSlcbiAgICAgIHJldHVybiBcIm51bWJlclwiO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBDb21tZW50c1xuICBpZiAoY2ggPT0gXCIlXCIpIHtcbiAgICBzdHJlYW0uc2tpcFRvRW5kKCk7XG4gICAgcmV0dXJuICdjb21tZW50JztcbiAgfVxuICBlbHNlIGlmIChjaCA9PSBcIi9cIikge1xuICAgIGlmIChzdHJlYW0uZWF0KFwiKlwiKSkge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkNvbW1lbnQ7XG4gICAgICByZXR1cm4gdG9rZW5Db21tZW50KHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNpbmdsZSBvcGVyYXRvcnNcbiAgaWYoc2luZ2xlT3BlcmF0b3JzLnRlc3QoY2gpKSB7XG4gICAgcmV0dXJuIFwib3BlcmF0b3JcIjtcbiAgfVxuXG4gIC8vIElmIG5vdGhpbmcgbWF0Y2gsIHdlIHNraXAgdGhlIGVudGlyZSBhbHBoYW51bWVyaWNhbCBibG9ja1xuICBzdHJlYW0uZWF0V2hpbGUoL1xcdy8pO1xuXG4gIHJldHVybiBcInZhcmlhYmxlXCI7XG59XG5cbmZ1bmN0aW9uIHRva2VuQ2xhc3Moc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdHJlYW0ubWF0Y2goLyhbQS1aXVtBLVphLXowLTlfXSopfChgLitgKS8pO1xuICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgcmV0dXJuIFwidHlwZVwiXG59XG5cbmZ1bmN0aW9uIHRva2VuTWV0aChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdHJlYW0uZWF0U3BhY2UoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHN0cmVhbS5tYXRjaCgvKFthLXpBLVpdW0EtWmEtejAtOV9dKil8KGAuK2ApLyk7XG4gIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICByZXR1cm4gXCJkZWZcIlxufVxuXG5mdW5jdGlvbiB0b2tlbkZ1blByb2Moc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmKCFzdGF0ZS5oYXNQYXNzZWRGaXJzdFN0YWdlICYmIHN0cmVhbS5lYXQoXCJ7XCIpKSB7XG4gICAgc3RhdGUuaGFzUGFzc2VkRmlyc3RTdGFnZSA9IHRydWU7XG4gICAgcmV0dXJuIFwiYnJhY2tldFwiO1xuICB9XG4gIGVsc2UgaWYoc3RhdGUuaGFzUGFzc2VkRmlyc3RTdGFnZSkge1xuICAgIHN0cmVhbS5tYXRjaCgvKFtBLVpdW0EtWmEtejAtOV9dKil8KGAuK2ApfFxcJC8pO1xuICAgIHN0YXRlLmhhc1Bhc3NlZEZpcnN0U3RhZ2UgPSBmYWxzZTtcbiAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQmFzZTtcbiAgICByZXR1cm4gXCJkZWZcIlxuICB9XG4gIGVsc2Uge1xuICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuQ29tbWVudChzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBtYXliZUVuZCA9IGZhbHNlLCBjaDtcbiAgd2hpbGUgKGNoID0gc3RyZWFtLm5leHQoKSkge1xuICAgIGlmIChjaCA9PSBcIi9cIiAmJiBtYXliZUVuZCkge1xuICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgbWF5YmVFbmQgPSAoY2ggPT0gXCIqXCIpO1xuICB9XG4gIHJldHVybiBcImNvbW1lbnRcIjtcbn1cblxuZnVuY3Rpb24gdG9rZW5TdHJpbmcocXVvdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJlYW0sIHN0YXRlKSB7XG4gICAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgbmV4dCwgZW5kID0gZmFsc2U7XG4gICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkge1xuICAgICAgaWYgKG5leHQgPT0gcXVvdGUgJiYgIWVzY2FwZWQpIHtcbiAgICAgICAgZW5kID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBlc2NhcGVkID0gIWVzY2FwZWQgJiYgbmV4dCA9PSBcIlxcXFxcIjtcbiAgICB9XG4gICAgaWYgKGVuZCB8fCAhZXNjYXBlZClcbiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlO1xuICAgIHJldHVybiBcInN0cmluZ1wiO1xuICB9O1xufVxuXG5mdW5jdGlvbiBidWlsZEVsZWN0cmljSW5wdXRSZWdFeCgpIHtcbiAgLy8gUmVpbmRlbnRhdGlvbiBzaG91bGQgb2NjdXIgb24gW10gb3Igb24gYSBtYXRjaCBvZiBhbnkgb2ZcbiAgLy8gdGhlIGJsb2NrIGNsb3Npbmcga2V5d29yZHMsIGF0IHRoZSBlbmQgb2YgYSBsaW5lLlxuICB2YXIgYWxsQ2xvc2luZ3MgPSBtaWRkbGUuY29uY2F0KGVuZCk7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiW1xcXFxbXFxcXF1dfChcIiArIGFsbENsb3NpbmdzLmpvaW4oXCJ8XCIpICsgXCIpJFwiKTtcbn1cblxuZXhwb3J0IGNvbnN0IG96ID0ge1xuICBuYW1lOiBcIm96XCIsXG5cbiAgc3RhcnRTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbml6ZTogdG9rZW5CYXNlLFxuICAgICAgY3VycmVudEluZGVudDogMCxcbiAgICAgIGRvSW5DdXJyZW50TGluZTogZmFsc2UsXG4gICAgICBoYXNQYXNzZWRGaXJzdFN0YWdlOiBmYWxzZVxuICAgIH07XG4gIH0sXG5cbiAgdG9rZW46IGZ1bmN0aW9uIChzdHJlYW0sIHN0YXRlKSB7XG4gICAgaWYgKHN0cmVhbS5zb2woKSlcbiAgICAgIHN0YXRlLmRvSW5DdXJyZW50TGluZSA9IDA7XG5cbiAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0sXG5cbiAgaW5kZW50OiBmdW5jdGlvbiAoc3RhdGUsIHRleHRBZnRlciwgY3gpIHtcbiAgICB2YXIgdHJ1ZVRleHQgPSB0ZXh0QWZ0ZXIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xuXG4gICAgaWYgKHRydWVUZXh0Lm1hdGNoKGVuZEtleXdvcmRzKSB8fCB0cnVlVGV4dC5tYXRjaChtaWRkbGVLZXl3b3JkcykgfHwgdHJ1ZVRleHQubWF0Y2goLyhcXFtdKS8pKVxuICAgICAgcmV0dXJuIGN4LnVuaXQgKiAoc3RhdGUuY3VycmVudEluZGVudCAtIDEpO1xuXG4gICAgaWYgKHN0YXRlLmN1cnJlbnRJbmRlbnQgPCAwKVxuICAgICAgcmV0dXJuIDA7XG5cbiAgICByZXR1cm4gc3RhdGUuY3VycmVudEluZGVudCAqIGN4LnVuaXRcbiAgfSxcblxuICBsYW5ndWFnZURhdGE6IHtcbiAgICBpbmRlbnRPbkludXQ6IGJ1aWxkRWxlY3RyaWNJbnB1dFJlZ0V4KCksXG4gICAgY29tbWVudFRva2Vuczoge2xpbmU6IFwiJVwiLCBibG9jazoge29wZW46IFwiLypcIiwgY2xvc2U6IFwiKi9cIn19XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=