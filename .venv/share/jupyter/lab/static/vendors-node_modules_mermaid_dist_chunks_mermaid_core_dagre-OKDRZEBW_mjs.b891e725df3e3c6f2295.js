"use strict";
(self["webpackChunk_jupyterlab_application_top"] = self["webpackChunk_jupyterlab_application_top"] || []).push([["vendors-node_modules_mermaid_dist_chunks_mermaid_core_dagre-OKDRZEBW_mjs"],{

/***/ "./node_modules/dagre-d3-es/src/graphlib/json.js":
/*!*******************************************************!*\
  !*** ./node_modules/dagre-d3-es/src/graphlib/json.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   read: () => (/* binding */ read),
/* harmony export */   write: () => (/* binding */ write)
/* harmony export */ });
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash-es */ "./node_modules/lodash-es/isUndefined.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es */ "./node_modules/lodash-es/clone.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es */ "./node_modules/lodash-es/map.js");
/* harmony import */ var lodash_es__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash-es */ "./node_modules/lodash-es/forEach.js");
/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graph.js */ "./node_modules/dagre-d3-es/src/graphlib/graph.js");





function write(g) {
  var json = {
    options: {
      directed: g.isDirected(),
      multigraph: g.isMultigraph(),
      compound: g.isCompound(),
    },
    nodes: writeNodes(g),
    edges: writeEdges(g),
  };
  if (!lodash_es__WEBPACK_IMPORTED_MODULE_1__["default"](g.graph())) {
    json.value = lodash_es__WEBPACK_IMPORTED_MODULE_2__["default"](g.graph());
  }
  return json;
}

function writeNodes(g) {
  return lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"](g.nodes(), function (v) {
    var nodeValue = g.node(v);
    var parent = g.parent(v);
    var node = { v: v };
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_1__["default"](nodeValue)) {
      node.value = nodeValue;
    }
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_1__["default"](parent)) {
      node.parent = parent;
    }
    return node;
  });
}

function writeEdges(g) {
  return lodash_es__WEBPACK_IMPORTED_MODULE_3__["default"](g.edges(), function (e) {
    var edgeValue = g.edge(e);
    var edge = { v: e.v, w: e.w };
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_1__["default"](e.name)) {
      edge.name = e.name;
    }
    if (!lodash_es__WEBPACK_IMPORTED_MODULE_1__["default"](edgeValue)) {
      edge.value = edgeValue;
    }
    return edge;
  });
}

function read(json) {
  var g = new _graph_js__WEBPACK_IMPORTED_MODULE_0__.Graph(json.options).setGraph(json.value);
  lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"](json.nodes, function (entry) {
    g.setNode(entry.v, entry.value);
    if (entry.parent) {
      g.setParent(entry.v, entry.parent);
    }
  });
  lodash_es__WEBPACK_IMPORTED_MODULE_4__["default"](json.edges, function (entry) {
    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
  });
  return g;
}


/***/ }),

/***/ "./node_modules/lodash-es/clone.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/clone.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _baseClone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_baseClone.js */ "./node_modules/lodash-es/_baseClone.js");


/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return (0,_baseClone_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value, CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clone);


/***/ }),

/***/ "./node_modules/mermaid/dist/chunks/mermaid.core/dagre-OKDRZEBW.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/mermaid/dist/chunks/mermaid.core/dagre-OKDRZEBW.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   render: () => (/* binding */ render)
/* harmony export */ });
/* harmony import */ var _chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-IIMUDSI4.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-IIMUDSI4.mjs");
/* harmony import */ var _chunk_VV3M67IP_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-VV3M67IP.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-VV3M67IP.mjs");
/* harmony import */ var _chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-HRU6DDCH.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-HRU6DDCH.mjs");
/* harmony import */ var _chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-K557N5IZ.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-K557N5IZ.mjs");
/* harmony import */ var _chunk_H2D2JQ3I_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-H2D2JQ3I.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-H2D2JQ3I.mjs");
/* harmony import */ var _chunk_C3MQ5ANM_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-C3MQ5ANM.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-C3MQ5ANM.mjs");
/* harmony import */ var _chunk_O4NI6UNU_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-O4NI6UNU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-O4NI6UNU.mjs");
/* harmony import */ var _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./chunk-YTJNT7DU.mjs */ "./node_modules/mermaid/dist/chunks/mermaid.core/chunk-YTJNT7DU.mjs");
/* harmony import */ var dagre_d3_es_src_dagre_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! dagre-d3-es/src/dagre/index.js */ "./node_modules/dagre-d3-es/src/dagre/index.js");
/* harmony import */ var dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! dagre-d3-es/src/graphlib/json.js */ "./node_modules/dagre-d3-es/src/graphlib/json.js");
/* harmony import */ var dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! dagre-d3-es/src/graphlib/index.js */ "./node_modules/dagre-d3-es/src/graphlib/index.js");









// src/rendering-util/layout-algorithms/dagre/index.js




// src/rendering-util/layout-algorithms/dagre/mermaid-graphlib.js


var clusterDb = /* @__PURE__ */ new Map();
var descendants = /* @__PURE__ */ new Map();
var parents = /* @__PURE__ */ new Map();
var clear4 = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)(() => {
  descendants.clear();
  parents.clear();
  clusterDb.clear();
}, "clear");
var isDescendant = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((id, ancestorId) => {
  const ancestorDescendants = descendants.get(ancestorId) || [];
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace("In isDescendant", ancestorId, " ", id, " = ", ancestorDescendants.includes(id));
  return ancestorDescendants.includes(id);
}, "isDescendant");
var edgeInCluster = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((edge, clusterId) => {
  const clusterDescendants = descendants.get(clusterId) || [];
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Descendants of ", clusterId, " is ", clusterDescendants);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Edge is ", edge);
  if (edge.v === clusterId || edge.w === clusterId) {
    return false;
  }
  if (!clusterDescendants) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Tilt, ", clusterId, ",not in descendants");
    return false;
  }
  return clusterDescendants.includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || clusterDescendants.includes(edge.w);
}, "edgeInCluster");
var copy = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((clusterId, graph, newGraph, rootId) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn(
    "Copying children of ",
    clusterId,
    "root",
    rootId,
    "data",
    graph.node(clusterId),
    rootId
  );
  const nodes = graph.children(clusterId) || [];
  if (clusterId !== rootId) {
    nodes.push(clusterId);
  }
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Copying (nodes) clusterId", clusterId, "nodes", nodes);
  nodes.forEach((node) => {
    if (graph.children(node).length > 0) {
      copy(node, graph, newGraph, rootId);
    } else {
      const data = graph.node(node);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("cp ", node, " to ", rootId, " with parent ", clusterId);
      newGraph.setNode(node, data);
      if (rootId !== graph.parent(node)) {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Setting parent", node, graph.parent(node));
        newGraph.setParent(node, graph.parent(node));
      }
      if (clusterId !== rootId && node !== clusterId) {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Setting parent", node, clusterId);
        newGraph.setParent(node, clusterId);
      } else {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("In copy ", clusterId, "root", rootId, "data", graph.node(clusterId), rootId);
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug(
          "Not Setting parent for node=",
          node,
          "cluster!==rootId",
          clusterId !== rootId,
          "node!==clusterId",
          node !== clusterId
        );
      }
      const edges = graph.edges(node);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Copying Edges", edges);
      edges.forEach((edge) => {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Edge", edge);
        const data2 = graph.edge(edge.v, edge.w, edge.name);
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Edge data", data2, rootId);
        try {
          if (edgeInCluster(edge, rootId)) {
            _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Copying as ", edge.v, edge.w, data2, edge.name);
            newGraph.setEdge(edge.v, edge.w, data2, edge.name);
            _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("newGraph edges ", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));
          } else {
            _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
              "Skipping copy of edge ",
              edge.v,
              "-->",
              edge.w,
              " rootId: ",
              rootId,
              " clusterId:",
              clusterId
            );
          }
        } catch (e) {
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.error(e);
        }
      });
    }
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Removing node", node);
    graph.removeNode(node);
  });
}, "copy");
var extractDescendants = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((id, graph) => {
  const children = graph.children(id);
  let res = [...children];
  for (const child of children) {
    parents.set(child, id);
    res = [...res, ...extractDescendants(child, graph)];
  }
  return res;
}, "extractDescendants");
var findCommonEdges = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((graph, id1, id2) => {
  const edges1 = graph.edges().filter((edge) => edge.v === id1 || edge.w === id1);
  const edges2 = graph.edges().filter((edge) => edge.v === id2 || edge.w === id2);
  const edges1Prim = edges1.map((edge) => {
    return { v: edge.v === id1 ? id2 : edge.v, w: edge.w === id1 ? id1 : edge.w };
  });
  const edges2Prim = edges2.map((edge) => {
    return { v: edge.v, w: edge.w };
  });
  const result = edges1Prim.filter((edgeIn1) => {
    return edges2Prim.some((edge) => edgeIn1.v === edge.v && edgeIn1.w === edge.w);
  });
  return result;
}, "findCommonEdges");
var findNonClusterChild = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((id, graph, clusterId) => {
  const children = graph.children(id);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace("Searching children of id ", id, children);
  if (children.length < 1) {
    return id;
  }
  let reserve;
  for (const child of children) {
    const _id = findNonClusterChild(child, graph, clusterId);
    const commonEdges = findCommonEdges(graph, clusterId, _id);
    if (_id) {
      if (commonEdges.length > 0) {
        reserve = _id;
      } else {
        return _id;
      }
    }
  }
  return reserve;
}, "findNonClusterChild");
var getAnchorId = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((id) => {
  if (!clusterDb.has(id)) {
    return id;
  }
  if (!clusterDb.get(id).externalConnections) {
    return id;
  }
  if (clusterDb.has(id)) {
    return clusterDb.get(id).id;
  }
  return id;
}, "getAnchorId");
var adjustClustersAndEdges = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((graph, depth) => {
  if (!graph || depth > 10) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Opting out, no graph ");
    return;
  } else {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Opting in, graph ");
  }
  graph.nodes().forEach(function(id) {
    const children = graph.children(id);
    if (children.length > 0) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn(
        "Cluster identified",
        id,
        " Replacement id in edges: ",
        findNonClusterChild(id, graph, id)
      );
      descendants.set(id, extractDescendants(id, graph));
      clusterDb.set(id, { id: findNonClusterChild(id, graph, id), clusterData: graph.node(id) });
    }
  });
  graph.nodes().forEach(function(id) {
    const children = graph.children(id);
    const edges = graph.edges();
    if (children.length > 0) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Cluster identified", id, descendants);
      edges.forEach((edge) => {
        const d1 = isDescendant(edge.v, id);
        const d2 = isDescendant(edge.w, id);
        if (d1 ^ d2) {
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Edge: ", edge, " leaves cluster ", id);
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Descendants of XXX ", id, ": ", descendants.get(id));
          clusterDb.get(id).externalConnections = true;
        }
      });
    } else {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Not a cluster ", id, descendants);
    }
  });
  for (let id of clusterDb.keys()) {
    const nonClusterChild = clusterDb.get(id).id;
    const parent = graph.parent(nonClusterChild);
    if (parent !== id && clusterDb.has(parent) && !clusterDb.get(parent).externalConnections) {
      clusterDb.get(id).id = parent;
    }
  }
  graph.edges().forEach(function(e) {
    const edge = graph.edge(e);
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(e));
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(graph.edge(e)));
    let v = e.v;
    let w = e.w;
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn(
      "Fix XXX",
      clusterDb,
      "ids:",
      e.v,
      e.w,
      "Translating: ",
      clusterDb.get(e.v),
      " --- ",
      clusterDb.get(e.w)
    );
    if (clusterDb.get(e.v) || clusterDb.get(e.w)) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Fixing and trying - removing XXX", e.v, e.w, e.name);
      v = getAnchorId(e.v);
      w = getAnchorId(e.w);
      graph.removeEdge(e.v, e.w, e.name);
      if (v !== e.v) {
        const parent = graph.parent(v);
        clusterDb.get(parent).externalConnections = true;
        edge.fromCluster = e.v;
      }
      if (w !== e.w) {
        const parent = graph.parent(w);
        clusterDb.get(parent).externalConnections = true;
        edge.toCluster = e.w;
      }
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Fix Replacing with XXX", v, w, e.name);
      graph.setEdge(v, w, edge, e.name);
    }
  });
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Adjusted Graph", dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph));
  extractor(graph, 0);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace(clusterDb);
}, "adjustClustersAndEdges");
var extractor = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((graph, depth) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("extractor - ", depth, dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph), graph.children("D"));
  if (depth > 10) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.error("Bailing out");
    return;
  }
  let nodes = graph.nodes();
  let hasChildren = false;
  for (const node of nodes) {
    const children = graph.children(node);
    hasChildren = hasChildren || children.length > 0;
  }
  if (!hasChildren) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Done, no node has children", graph.nodes());
    return;
  }
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Nodes = ", nodes, depth);
  for (const node of nodes) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug(
      "Extracting node",
      node,
      clusterDb,
      clusterDb.has(node) && !clusterDb.get(node).externalConnections,
      !graph.parent(node),
      graph.node(node),
      graph.children("D"),
      " Depth ",
      depth
    );
    if (!clusterDb.has(node)) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Not a cluster", node, depth);
    } else if (!clusterDb.get(node).externalConnections && graph.children(node) && graph.children(node).length > 0) {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn(
        "Cluster without external connections, without a parent and with children",
        node,
        depth
      );
      const graphSettings = graph.graph();
      let dir = graphSettings.rankdir === "TB" ? "LR" : "TB";
      if (clusterDb.get(node)?.clusterData?.dir) {
        dir = clusterDb.get(node).clusterData.dir;
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Fixing dir", clusterDb.get(node).clusterData.dir, dir);
      }
      const clusterGraph = new dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_10__.Graph({
        multigraph: true,
        compound: true
      }).setGraph({
        rankdir: dir,
        nodesep: 50,
        ranksep: 50,
        marginx: 8,
        marginy: 8
      }).setDefaultEdgeLabel(function() {
        return {};
      });
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Old graph before copy", dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph));
      copy(node, graph, clusterGraph, node);
      graph.setNode(node, {
        clusterNode: true,
        id: node,
        clusterData: clusterDb.get(node).clusterData,
        label: clusterDb.get(node).label,
        graph: clusterGraph
      });
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("New graph after copy node: (", node, ")", dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(clusterGraph));
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Old graph after copy", dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph));
    } else {
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn(
        "Cluster ** ",
        node,
        " **not meeting the criteria !externalConnections:",
        !clusterDb.get(node).externalConnections,
        " no parent: ",
        !graph.parent(node),
        " children ",
        graph.children(node) && graph.children(node).length > 0,
        graph.children("D"),
        depth
      );
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug(clusterDb);
    }
  }
  nodes = graph.nodes();
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("New list of nodes", nodes);
  for (const node of nodes) {
    const data = graph.node(node);
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn(" Now next level", node, data);
    if (data?.clusterNode) {
      extractor(data.graph, depth + 1);
    }
  }
}, "extractor");
var sorter = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((graph, nodes) => {
  if (nodes.length === 0) {
    return [];
  }
  let result = Object.assign([], nodes);
  nodes.forEach((node) => {
    const children = graph.children(node);
    const sorted = sorter(graph, children);
    result = [...result, ...sorted];
  });
  return result;
}, "sorter");
var sortNodesByHierarchy = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)((graph) => sorter(graph, graph.children()), "sortNodesByHierarchy");

// src/rendering-util/layout-algorithms/dagre/index.js
var recursiveRender = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)(async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Graph in recursive render:XAX", dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph), parentCluster);
  const dir = graph.graph().rankdir;
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace("Dir in recursive render - dir:", dir);
  const elem = _elem.insert("g").attr("class", "root");
  if (!graph.nodes()) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("No nodes found for", graph);
  } else {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Recursive render XXX", graph.nodes());
  }
  if (graph.edges().length > 0) {
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Recursive edges", graph.edge(graph.edges()[0]));
  }
  const clusters = elem.insert("g").attr("class", "clusters");
  const edgePaths = elem.insert("g").attr("class", "edgePaths");
  const edgeLabels = elem.insert("g").attr("class", "edgeLabels");
  const nodes = elem.insert("g").attr("class", "nodes");
  await Promise.all(
    graph.nodes().map(async function(v) {
      const node = graph.node(v);
      if (parentCluster !== void 0) {
        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace(
          "Setting data for parent cluster XXX\n Node.id = ",
          v,
          "\n data=",
          data.height,
          "\nParent cluster",
          parentCluster.height
        );
        graph.setNode(parentCluster.id, data);
        if (!graph.parent(v)) {
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace("Setting parent", v, parentCluster.id);
          graph.setParent(v, parentCluster.id, data);
        }
      }
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("(Insert) Node XXX" + v + ": " + JSON.stringify(graph.node(v)));
      if (node?.clusterNode) {
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Cluster identified XBX", v, node.width, graph.node(v));
        const { ranksep, nodesep } = graph.graph();
        node.graph.setGraph({
          ...node.graph.graph(),
          ranksep: ranksep + 25,
          nodesep
        });
        const o = await recursiveRender(
          nodes,
          node.graph,
          diagramType,
          id,
          graph.node(v),
          siteConfig
        );
        const newEl = o.elem;
        (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.updateNodeBounds)(node, newEl);
        node.diff = o.diff || 0;
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
          "New compound node after recursive render XAX",
          v,
          "width",
          // node,
          node.width,
          "height",
          node.height
          // node.x,
          // node.y
        );
        (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.setNodeElem)(newEl, node);
      } else {
        if (graph.children(v).length > 0) {
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace(
            "Cluster - the non recursive path XBX",
            v,
            node.id,
            node,
            node.width,
            "Graph:",
            graph
          );
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace(findNonClusterChild(node.id, graph));
          clusterDb.set(node.id, { id: findNonClusterChild(node.id, graph), node });
        } else {
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.trace("Node - the non recursive path XAX", v, nodes, graph.node(v), dir);
          await (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.insertNode)(nodes, graph.node(v), { config: siteConfig, dir });
        }
      }
    })
  );
  const processEdges = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)(async () => {
    const edgePromises = graph.edges().map(async function(e) {
      const edge = graph.edge(e.v, e.w, e.name);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(e));
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Edge " + e.v + " -> " + e.w + ": ", e, " ", JSON.stringify(graph.edge(e)));
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
        "Fix",
        clusterDb,
        "ids:",
        e.v,
        e.w,
        "Translating: ",
        clusterDb.get(e.v),
        clusterDb.get(e.w)
      );
      await (0,_chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.insertEdgeLabel)(edgeLabels, edge);
    });
    await Promise.all(edgePromises);
  }, "processEdges");
  await processEdges();
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Graph before layout:", JSON.stringify(dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph)));
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("############################################# XXX");
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("###                Layout                 ### XXX");
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("############################################# XXX");
  (0,dagre_d3_es_src_dagre_index_js__WEBPACK_IMPORTED_MODULE_8__.layout)(graph);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Graph after layout:", JSON.stringify(dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph)));
  let diff = 0;
  let { subGraphTitleTotalMargin } = (0,_chunk_K557N5IZ_mjs__WEBPACK_IMPORTED_MODULE_3__.getSubGraphTitleMargins)(siteConfig);
  await Promise.all(
    sortNodesByHierarchy(graph).map(async function(v) {
      const node = graph.node(v);
      _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
        "Position XBX => " + v + ": (" + node.x,
        "," + node.y,
        ") width: ",
        node.width,
        " height: ",
        node.height
      );
      if (node?.clusterNode) {
        node.y += subGraphTitleTotalMargin;
        _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
          "A tainted cluster node XBX1",
          v,
          node.id,
          node.width,
          node.height,
          node.x,
          node.y,
          graph.parent(v)
        );
        clusterDb.get(node.id).node = node;
        (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.positionNode)(node);
      } else {
        if (graph.children(v).length > 0) {
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
            "A pure cluster node XBX1",
            v,
            node.id,
            node.x,
            node.y,
            node.width,
            node.height,
            graph.parent(v)
          );
          node.height += subGraphTitleTotalMargin;
          graph.node(node.parentId);
          const halfPadding = node?.padding / 2 || 0;
          const labelHeight = node?.labelBBox?.height || 0;
          const offsetY = labelHeight - halfPadding || 0;
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("OffsetY", offsetY, "labelHeight", labelHeight, "halfPadding", halfPadding);
          await (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.insertCluster)(clusters, node);
          clusterDb.get(node.id).node = node;
        } else {
          const parent = graph.node(node.parentId);
          node.y += subGraphTitleTotalMargin / 2;
          _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(
            "A regular node XBX1 - using the padding",
            node.id,
            "parent",
            node.parentId,
            node.width,
            node.height,
            node.x,
            node.y,
            "offsetY",
            node.offsetY,
            "parent",
            parent,
            parent?.offsetY,
            node
          );
          (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.positionNode)(node);
        }
      }
    })
  );
  graph.edges().forEach(function(e) {
    const edge = graph.edge(e);
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info("Edge " + e.v + " -> " + e.w + ": " + JSON.stringify(edge), edge);
    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);
    const startNode = graph.node(e.v);
    var endNode = graph.node(e.w);
    const paths = (0,_chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.insertEdge)(edgePaths, edge, clusterDb, diagramType, startNode, endNode, id);
    (0,_chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.positionEdgeLabel)(edge, paths);
  });
  graph.nodes().forEach(function(v) {
    const n = graph.node(v);
    _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.info(v, n.type, n.diff);
    if (n.isGroup) {
      diff = n.diff;
    }
  });
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Returning from recursive render XAX", elem, diff);
  return { elem, diff };
}, "recursiveRender");
var render = /* @__PURE__ */ (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.__name)(async (data4Layout, svg) => {
  const graph = new dagre_d3_es_src_graphlib_index_js__WEBPACK_IMPORTED_MODULE_10__.Graph({
    multigraph: true,
    compound: true
  }).setGraph({
    rankdir: data4Layout.direction,
    nodesep: data4Layout.config?.nodeSpacing || data4Layout.config?.flowchart?.nodeSpacing || data4Layout.nodeSpacing,
    ranksep: data4Layout.config?.rankSpacing || data4Layout.config?.flowchart?.rankSpacing || data4Layout.rankSpacing,
    marginx: 8,
    marginy: 8
  }).setDefaultEdgeLabel(function() {
    return {};
  });
  const element = svg.select("g");
  (0,_chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.markers_default)(element, data4Layout.markers, data4Layout.type, data4Layout.diagramId);
  (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.clear2)();
  (0,_chunk_IIMUDSI4_mjs__WEBPACK_IMPORTED_MODULE_0__.clear)();
  (0,_chunk_HRU6DDCH_mjs__WEBPACK_IMPORTED_MODULE_2__.clear)();
  clear4();
  data4Layout.nodes.forEach((node) => {
    graph.setNode(node.id, { ...node });
    if (node.parentId) {
      graph.setParent(node.id, node.parentId);
    }
  });
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.debug("Edges:", data4Layout.edges);
  data4Layout.edges.forEach((edge) => {
    if (edge.start === edge.end) {
      const nodeId = edge.start;
      const specialId1 = nodeId + "---" + nodeId + "---1";
      const specialId2 = nodeId + "---" + nodeId + "---2";
      const node = graph.node(nodeId);
      graph.setNode(specialId1, {
        domId: specialId1,
        id: specialId1,
        parentId: node.parentId,
        labelStyle: "",
        label: "",
        padding: 0,
        shape: "labelRect",
        // shape: 'rect',
        style: "",
        width: 10,
        height: 10
      });
      graph.setParent(specialId1, node.parentId);
      graph.setNode(specialId2, {
        domId: specialId2,
        id: specialId2,
        parentId: node.parentId,
        labelStyle: "",
        padding: 0,
        // shape: 'rect',
        shape: "labelRect",
        label: "",
        style: "",
        width: 10,
        height: 10
      });
      graph.setParent(specialId2, node.parentId);
      const edge1 = structuredClone(edge);
      const edgeMid = structuredClone(edge);
      const edge2 = structuredClone(edge);
      edge1.label = "";
      edge1.arrowTypeEnd = "none";
      edge1.id = nodeId + "-cyclic-special-1";
      edgeMid.arrowTypeStart = "none";
      edgeMid.arrowTypeEnd = "none";
      edgeMid.id = nodeId + "-cyclic-special-mid";
      edge2.label = "";
      if (node.isGroup) {
        edge1.fromCluster = nodeId;
        edge2.toCluster = nodeId;
      }
      edge2.id = nodeId + "-cyclic-special-2";
      edge2.arrowTypeStart = "none";
      graph.setEdge(nodeId, specialId1, edge1, nodeId + "-cyclic-special-0");
      graph.setEdge(specialId1, specialId2, edgeMid, nodeId + "-cyclic-special-1");
      graph.setEdge(specialId2, nodeId, edge2, nodeId + "-cyc<lic-special-2");
    } else {
      graph.setEdge(edge.start, edge.end, { ...edge }, edge.id);
    }
  });
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Graph at first:", JSON.stringify(dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph)));
  adjustClustersAndEdges(graph);
  _chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.log.warn("Graph after XAX:", JSON.stringify(dagre_d3_es_src_graphlib_json_js__WEBPACK_IMPORTED_MODULE_9__.write(graph)));
  const siteConfig = (0,_chunk_YTJNT7DU_mjs__WEBPACK_IMPORTED_MODULE_7__.getConfig2)();
  await recursiveRender(
    element,
    graph,
    data4Layout.type,
    data4Layout.diagramId,
    void 0,
    siteConfig
  );
}, "render");



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,