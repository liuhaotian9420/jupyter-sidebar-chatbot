{"version":3,"file":"8735.6ae339bdafff48e4f22b.js?v=6ae339bdafff48e4f22b","mappings":"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","sources":["webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/api-client.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/cell-context-tracker.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/commands.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/globals.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/icons.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/index.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/markdown-config.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/popup-menu-manager.js","webpack://@jupyterlab/application-top/./node_modules/jupyter-simple-extension/lib/sidebar-widget.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiClient = void 0;\n/**\n * API client for interacting with the backend LLM service\n */\nclass ApiClient {\n    constructor(baseUrl = 'http://localhost:8000') {\n        this.baseUrl = baseUrl;\n    }\n    /**\n     * Stream a chat response from the mock LLM\n     * @param message The user message to send\n     * @param context Optional context information\n     * @param onChunk Callback for each text chunk received\n     * @param onComplete Callback when streaming is complete\n     * @param onError Callback for errors\n     */\n    async streamChat(message, context = null, onChunk, onComplete, onError) {\n        try {\n            const response = await fetch(`${this.baseUrl}/chat`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    message,\n                    context\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`API error: ${response.statusText}`);\n            }\n            if (!response.body) {\n                throw new Error('ReadableStream not supported in this browser.');\n            }\n            // Set up stream reading\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let done = false;\n            while (!done) {\n                const { value, done: readerDone } = await reader.read();\n                done = readerDone;\n                if (value) {\n                    const chunk = decoder.decode(value, { stream: !done });\n                    onChunk(chunk);\n                }\n            }\n            onComplete();\n        }\n        catch (error) {\n            onError(error instanceof Error ? error : new Error(String(error)));\n        }\n    }\n    /**\n     * Simple health check for the API\n     * @returns A promise that resolves to true if the API is healthy\n     */\n    async healthCheck() {\n        try {\n            const response = await fetch(`${this.baseUrl}/health`);\n            return response.ok;\n        }\n        catch (error) {\n            console.error('API health check failed:', error);\n            return false;\n        }\n    }\n}\nexports.ApiClient = ApiClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CellContextTracker = void 0;\n/**\n * Tracks cell context and cursor position within Jupyter notebooks\n */\nclass CellContextTracker {\n    constructor(app, notebookTracker) {\n        this.activeCellEditorNode = null;\n        this.lastCellContext = null;\n        this._isDisposed = false;\n        /**\n         * Handles editor events (keydown, mouseup)\n         */\n        this.handleEditorEvent = (event) => {\n            try {\n                // Get the current active cell from the tracker\n                const cell = this.notebookTracker.activeCell;\n                if (!cell || !cell.editor)\n                    return;\n                // Find the inner EditorView instance\n                const editor = cell.editor;\n                const view = editor.editor;\n                if (!view)\n                    return;\n                // Get and store the cursor context\n                this.lastCellContext = this.getCmContext(view);\n            }\n            catch (error) {\n                console.error(\"Error in editor event handler:\", error);\n            }\n        };\n        this.notebookTracker = notebookTracker;\n        this.setupTrackers();\n    }\n    /**\n     * Whether this object has been disposed\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Sets up all the necessary event trackers\n     */\n    setupTrackers() {\n        // Handle active cell changes\n        this.notebookTracker.activeCellChanged.connect(this.setupCellListeners, this);\n        // Handle notebook changes\n        this.notebookTracker.currentChanged.connect(this.handleNotebookChange, this);\n    }\n    /**\n     * Handles notebook changes\n     */\n    handleNotebookChange(tracker, panel) {\n        this.cleanupPreviousListeners();\n        if (panel && panel.content) {\n            const cell = panel.content.activeCell;\n            this.setupCellListeners(tracker, cell);\n        }\n    }\n    /**\n     * Sets up event listeners on the active cell\n     */\n    setupCellListeners(_tracker, cell) {\n        if (!cell)\n            return;\n        this.cleanupPreviousListeners();\n        if (cell.editor) {\n            try {\n                const cellNode = cell.node;\n                const editorNode = cellNode.querySelector('.jp-Editor') ||\n                    cellNode.querySelector('.jp-InputArea-editor');\n                if (editorNode) {\n                    this.activeCellEditorNode = editorNode;\n                    // Add event listeners for key and mouse events\n                    editorNode.addEventListener('keydown', this.handleEditorEvent);\n                    editorNode.addEventListener('mouseup', this.handleEditorEvent);\n                    // Try to capture immediate context if EditorView available\n                    const view = cell.editor.editor;\n                    if (view) {\n                        this.lastCellContext = this.getCmContext(view);\n                    }\n                }\n            }\n            catch (error) {\n                console.error(\"Error setting up cell listeners:\", error);\n            }\n        }\n    }\n    /**\n     * Cleans up event listeners from the previous active cell\n     */\n    cleanupPreviousListeners() {\n        if (this.activeCellEditorNode) {\n            this.activeCellEditorNode.removeEventListener('keydown', this.handleEditorEvent);\n            this.activeCellEditorNode.removeEventListener('mouseup', this.handleEditorEvent);\n            this.activeCellEditorNode = null;\n        }\n    }\n    /**\n     * Gets context information from CodeMirror EditorView\n     */\n    getCmContext(view) {\n        const state = view.state;\n        const offset = state.selection.main.head;\n        const fullText = state.doc.toString();\n        const line = state.doc.lineAt(offset);\n        const position = {\n            line: line.number - 1,\n            column: offset - line.from,\n            offset: offset\n        };\n        const contextRadius = 100;\n        const start = Math.max(0, offset - contextRadius);\n        const end = Math.min(fullText.length, offset + contextRadius);\n        return {\n            text: fullText,\n            position: position,\n            contextBefore: fullText.substring(start, offset),\n            contextAfter: fullText.substring(offset, end)\n        };\n    }\n    /**\n     * Gets the current cell context\n     */\n    getCurrentCellContext() {\n        return this.lastCellContext;\n    }\n    /**\n     * Disposes all resources\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.cleanupPreviousListeners();\n        this.notebookTracker.activeCellChanged.disconnect(this.setupCellListeners, this);\n        this.notebookTracker.currentChanged.disconnect(this.handleNotebookChange, this);\n    }\n}\nexports.CellContextTracker = CellContextTracker;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerCommands = registerCommands;\nconst icons_1 = require(\"./icons\");\n/**\n * Registers commands for the extension\n */\nfunction registerCommands(app, palette, launcher, sidebarWidget) {\n    // Add command to toggle the sidebar\n    app.commands.addCommand('simple-extension:toggle-sidebar', {\n        label: 'Toggle AI Assistant Sidebar',\n        icon: icons_1.extensionIcon,\n        execute: () => {\n            if (sidebarWidget.isAttached) {\n                sidebarWidget.parent = null;\n            }\n            else {\n                app.shell.add(sidebarWidget, 'left', { rank: 9999 });\n            }\n        }\n    });\n    // Add the command to the command palette\n    palette.addItem({\n        command: 'simple-extension:toggle-sidebar',\n        category: 'Extension'\n    });\n    // Add a launcher item\n    launcher.add({\n        command: 'simple-extension:toggle-sidebar',\n        category: 'Other',\n        rank: 9999\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.globals = void 0;\nexports.initGlobals = initGlobals;\n/**\n * Global references to key components in the application\n */\nexports.globals = {};\n/**\n * Initialize global references\n */\nfunction initGlobals(app, notebookTracker) {\n    exports.globals.app = app;\n    exports.globals.notebookTracker = notebookTracker;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extensionIcon = void 0;\nconst ui_components_1 = require(\"@jupyterlab/ui-components\");\n// ===============================\n// Icon Definition\n// ===============================\nconst iconSvgStr = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chat-left-text\" viewBox=\"0 0 16 16\">' +\n    '<path d=\"M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>' +\n    '<path d=\"M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>' +\n    '</svg>';\n/**\n * Icon for the AI Assistant extension\n */\nexports.extensionIcon = new ui_components_1.LabIcon({\n    name: 'simple:icon',\n    svgstr: iconSvgStr\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiClient = void 0;\nconst launcher_1 = require(\"@jupyterlab/launcher\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst notebook_1 = require(\"@jupyterlab/notebook\");\nconst docmanager_1 = require(\"@jupyterlab/docmanager\");\nconst sidebar_widget_1 = require(\"./sidebar-widget\");\nconst globals_1 = require(\"./globals\");\nconst commands_1 = require(\"./commands\");\nconst cell_context_tracker_1 = require(\"./cell-context-tracker\");\n// import { ApiClient } from './api-client';\n// Import the main CSS file\nrequire(\"../style/index.css\");\n// Export ApiClient for use by other components\nvar api_client_1 = require(\"./api-client\");\nObject.defineProperty(exports, \"ApiClient\", { enumerable: true, get: function () { return api_client_1.ApiClient; } });\n/**\n * Initialization data for the jupyter-simple-extension extension.\n */\nconst plugin = {\n    id: 'jupyter-simple-extension:plugin',\n    autoStart: true,\n    requires: [launcher_1.ILauncher, apputils_1.ICommandPalette, notebook_1.INotebookTracker, docmanager_1.IDocumentManager],\n    activate: (jupyterApp, launcher, palette, tracker, docManager) => {\n        console.log('JupyterLab extension jupyter-simple-extension is activated!');\n        // Initialize global references\n        (0, globals_1.initGlobals)(jupyterApp, tracker);\n        // Initialize cell context tracker\n        globals_1.globals.cellContextTracker = new cell_context_tracker_1.CellContextTracker(jupyterApp, tracker);\n        // Create and add sidebar widget\n        const sidebarWidget = new sidebar_widget_1.SimpleSidebarWidget(docManager);\n        jupyterApp.shell.add(sidebarWidget, 'left', { rank: 9999 });\n        // Register commands\n        (0, commands_1.registerCommands)(jupyterApp, palette, launcher, sidebarWidget);\n    }\n};\nexports.default = plugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configureMarked = configureMarked;\nexports.preprocessMarkdown = preprocessMarkdown;\nconst marked_1 = require(\"marked\");\n/**\n * Configure marked with better rendering options for code blocks\n */\nfunction configureMarked() {\n    // Configure marked options\n    marked_1.marked.setOptions({\n        gfm: true, // Enable GitHub Flavored Markdown\n        breaks: true, // Add <br> on single line breaks\n        pedantic: false, // Conform to original markdown spec\n        async: false, // Disable async rendering\n        silent: false // Enable error reporting\n    });\n}\n/**\n * Pre-process markdown text to fix common issues with streaming content\n */\nfunction preprocessMarkdown(text) {\n    // Handle code blocks first\n    let inCodeBlock = false;\n    const lines = text.split('\\n');\n    const processedLines = lines.map((line, i) => {\n        // Check for code block markers\n        if (line.trim().startsWith('```')) {\n            inCodeBlock = !inCodeBlock;\n            // Preserve language specification\n            return line.trim();\n        }\n        // If we're in a code block, preserve the line as is\n        if (inCodeBlock) {\n            return line;\n        }\n        // Outside code blocks, handle list items\n        return line.replace(/([^\\n\\s])-\\s/g, '$1\\n- ');\n    });\n    return processedLines.join('\\n');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PopupMenuManager = void 0;\nconst globals_1 = require(\"./globals\");\n/**\n * Manages the state and interactions of the multi-level popup menu.\n */\nclass PopupMenuManager {\n    constructor(docManager, widgetNode, callbacks) {\n        this.currentMenuLevel = 'top';\n        this.currentMenuPath = '';\n        this.menuHistory = [];\n        this.currentNotebook = null;\n        this.docManager = docManager;\n        this.widgetNode = widgetNode;\n        this.callbacks = callbacks;\n        this.popupMenuContainer = document.createElement('div');\n        this.popupMenuContainer.className = 'jp-llm-ext-popup-menu-container';\n        this.popupMenuContainer.style.display = 'none';\n        // Attach to the widget node instead of the body\n        this.widgetNode.appendChild(this.popupMenuContainer);\n        document.addEventListener('click', this.handleDocumentClick.bind(this), true);\n        if (globals_1.globals.notebookTracker) {\n            this.currentNotebook = globals_1.globals.notebookTracker.currentWidget;\n            globals_1.globals.notebookTracker.currentChanged.connect((_, notebook) => {\n                this.currentNotebook = notebook;\n            });\n        }\n    }\n    dispose() {\n        document.removeEventListener('click', this.handleDocumentClick.bind(this), true);\n        // Remove from widgetNode if attached\n        if (this.popupMenuContainer.parentNode === this.widgetNode) {\n            this.popupMenuContainer.parentNode.removeChild(this.popupMenuContainer);\n        }\n    }\n    handleDocumentClick(event) {\n        if (this.popupMenuContainer.style.display !== 'none' && !this.popupMenuContainer.contains(event.target)) {\n            const atButton = this.widgetNode.querySelector('#jp-llm-ext-at-button');\n            if (atButton && atButton.contains(event.target)) {\n                console.log('POPUP: Click was on the @ button, not hiding.');\n                return;\n            }\n            console.log('POPUP: Click detected outside the menu.');\n            this.hidePopupMenu();\n        }\n    }\n    async showPopupMenu(x, y) {\n        console.log(`POPUP: Showing menu at (${x}, ${y})`);\n        if (this.popupMenuContainer.style.display === 'none') {\n            this.currentMenuLevel = 'top';\n            this.currentMenuPath = '';\n            this.menuHistory = [];\n            await this.setCurrentDirectoryPath();\n        }\n        await this.renderMenuContent();\n        // Ensure it's attached to the widget node if somehow detached\n        this.widgetNode.appendChild(this.popupMenuContainer);\n        // Positioning might need adjustment relative to the widgetNode now\n        this.popupMenuContainer.style.position = 'absolute';\n        this.popupMenuContainer.style.left = `${x}px`;\n        this.popupMenuContainer.style.top = `${y}px`;\n        this.popupMenuContainer.style.display = 'block';\n    }\n    hidePopupMenu() {\n        if (this.popupMenuContainer.style.display !== 'none') {\n            console.log('POPUP: Hiding menu.');\n            this.popupMenuContainer.style.display = 'none';\n            // No need to explicitly remove from widgetNode unless causing issues\n            // If performance becomes an issue with many menus, consider removing/re-adding\n            // if (this.popupMenuContainer.parentNode === this.widgetNode) {\n            //     this.widgetNode.removeChild(this.popupMenuContainer);\n            // }\n        }\n    }\n    async renderMenuContent() {\n        console.log(`POPUP: Rendering content for level: ${this.currentMenuLevel}, path: ${this.currentMenuPath}`);\n        this.popupMenuContainer.innerHTML = '';\n        if (this.menuHistory.length > 0) {\n            const backButton = this.createMenuItem('← Back', 'navigate-back', '', 'Return to previous menu');\n            this.popupMenuContainer.appendChild(backButton);\n        }\n        if (this.currentMenuLevel === 'files' || this.currentMenuLevel === 'directories') {\n            const pathIndicator = document.createElement('div');\n            pathIndicator.className = 'jp-llm-ext-popup-menu-path';\n            pathIndicator.textContent = `Path: ${this.currentMenuPath || '/'}`;\n            this.popupMenuContainer.appendChild(pathIndicator);\n        }\n        if (this.currentMenuLevel === 'top') {\n            this.renderTopLevelItems();\n        }\n        else if (this.currentMenuLevel === 'files' || this.currentMenuLevel === 'directories') {\n            await this.renderDirectoryBrowserItems();\n        }\n    }\n    renderTopLevelItems() {\n        const topLevelCommands = [\n            { label: 'Code', description: 'Insert selected code', actionId: 'insert-code' },\n            { label: 'Cell', description: 'Insert entire cell content', actionId: 'insert-cell' },\n            { label: 'File', description: 'Browse and select a file', actionId: 'browse-files' },\n            { label: 'Directory', description: 'Browse and select a directory', actionId: 'browse-directories' }\n        ];\n        topLevelCommands.forEach(cmd => {\n            const item = this.createMenuItem(cmd.label, cmd.actionId, '', cmd.description);\n            this.popupMenuContainer.appendChild(item);\n        });\n    }\n    async renderDirectoryBrowserItems() {\n        const loadingItem = this.createMenuItem('Loading...', 'loading', '', '');\n        loadingItem.style.pointerEvents = 'none';\n        this.popupMenuContainer.appendChild(loadingItem);\n        try {\n            const filterType = this.currentMenuLevel === 'files' ? 'file' : 'directory';\n            const contents = await this.listCurrentDirectoryContents(this.currentMenuPath, filterType);\n            this.popupMenuContainer.removeChild(loadingItem);\n            if (contents && contents.length > 0) {\n                contents.forEach(item => {\n                    const itemName = item.name;\n                    const itemType = item.type;\n                    const itemPath = item.path;\n                    const icon = itemType === 'directory' ? '📁' : '📄';\n                    const actionId = itemType === 'directory' ? 'select-directory' : 'select-file';\n                    const menuItem = this.createMenuItem(`${icon} ${itemName}`, actionId, itemPath);\n                    this.popupMenuContainer.appendChild(menuItem);\n                });\n            }\n            else {\n                const emptyItem = this.createMenuItem(`No ${filterType}s found`, 'empty', '', '');\n                emptyItem.style.pointerEvents = 'none';\n                this.popupMenuContainer.appendChild(emptyItem);\n            }\n        }\n        catch (error) {\n            if (this.popupMenuContainer.contains(loadingItem)) {\n                this.popupMenuContainer.removeChild(loadingItem);\n            }\n            const errorItem = this.createMenuItem(`Error: ${error}`, 'error', '', '');\n            errorItem.style.color = 'red';\n            errorItem.style.pointerEvents = 'none';\n            this.popupMenuContainer.appendChild(errorItem);\n            console.error('POPUP: Error loading directory contents:', error);\n        }\n    }\n    createMenuItem(text, actionId, path = '', description = '') {\n        const item = document.createElement('div');\n        item.className = 'jp-llm-ext-popup-menu-item';\n        item.dataset.actionId = actionId;\n        if (path) {\n            item.dataset.path = path;\n        }\n        item.onclick = (event) => this.handleMenuClick(event);\n        const labelSpan = document.createElement('span');\n        labelSpan.textContent = text;\n        item.appendChild(labelSpan);\n        if (description) {\n            labelSpan.style.fontWeight = 'bold';\n            const descSpan = document.createElement('span');\n            descSpan.textContent = description;\n            descSpan.style.display = 'block';\n            descSpan.style.fontSize = '0.8em';\n            descSpan.style.color = 'var(--jp-ui-font-color2)';\n            item.appendChild(descSpan);\n        }\n        return item;\n    }\n    async handleMenuClick(event) {\n        const target = event.currentTarget;\n        const actionId = target.dataset.actionId;\n        const path = target.dataset.path || '';\n        console.log(`POPUP: Menu item clicked. Action: ${actionId}, Path: ${path}`);\n        switch (actionId) {\n            case 'navigate-back':\n                this.navigateBackMenu();\n                break;\n            case 'insert-code': {\n                const selectedText = this.callbacks.getSelectedText ? this.callbacks.getSelectedText() : null;\n                if (selectedText) {\n                    this.callbacks.insertCode(selectedText);\n                }\n                else {\n                    const cellContent = this.callbacks.getCurrentCellContent ? this.callbacks.getCurrentCellContent() : null;\n                    if (cellContent) {\n                        this.callbacks.insertCode(cellContent);\n                    }\n                }\n                this.hidePopupMenu();\n                break;\n            }\n            case 'insert-cell': {\n                const cellContent = this.callbacks.getCurrentCellContent ? this.callbacks.getCurrentCellContent() : null;\n                if (cellContent) {\n                    this.callbacks.insertCell(cellContent);\n                }\n                this.hidePopupMenu();\n                break;\n            }\n            case 'browse-files':\n                await this.navigateMenu('files', this.currentMenuPath || '');\n                break;\n            case 'browse-directories':\n                await this.navigateMenu('directories', this.currentMenuPath || '');\n                break;\n            case 'select-file':\n                if (path) {\n                    this.callbacks.insertFilePath(path);\n                    this.hidePopupMenu();\n                }\n                else {\n                    console.error('POPUP: File selected but path is missing.');\n                }\n                break;\n            case 'select-directory':\n                if (path) {\n                    await this.navigateMenu('files', path);\n                }\n                else {\n                    console.error('POPUP: Directory selected but path is missing.');\n                }\n                break;\n            case 'placeholder-action':\n                console.log('Placeholder action triggered.');\n                this.hidePopupMenu();\n                break;\n            case 'loading':\n            case 'empty':\n            case 'error':\n                break;\n            default:\n                console.warn('Unknown menu action:', actionId);\n                this.hidePopupMenu();\n                break;\n        }\n        event.stopPropagation();\n    }\n    async navigateMenu(level, path) {\n        console.log(`POPUP: Navigating to level: ${level}, path: ${path}`);\n        this.menuHistory.push({ level: this.currentMenuLevel, path: this.currentMenuPath });\n        this.currentMenuLevel = level;\n        this.currentMenuPath = path;\n        await this.renderMenuContent();\n    }\n    navigateBackMenu() {\n        const previousState = this.menuHistory.pop();\n        if (previousState) {\n            console.log(`POPUP: Navigating back to level: ${previousState.level}, path: ${previousState.path}`);\n            this.currentMenuLevel = previousState.level;\n            this.currentMenuPath = previousState.path;\n            this.renderMenuContent();\n        }\n        else {\n            console.log('POPUP: Already at the top level.');\n            this.hidePopupMenu();\n        }\n    }\n    async listCurrentDirectoryContents(basePath, filterType) {\n        console.log(`POPUP: Listing directory contents for path: '${basePath}', filter: ${filterType || 'all'}`);\n        try {\n            const effectivePath = basePath === '/' ? '' : basePath;\n            const contents = await this.docManager.services.contents.get(effectivePath);\n            if (contents.type === 'directory') {\n                let items = contents.content.map((item) => ({\n                    name: item.name,\n                    path: item.path,\n                    type: item.type\n                }));\n                items = items.filter((item) => item.type === 'file' || item.type === 'directory');\n                if (filterType) {\n                    items = items.filter((item) => item.type === filterType);\n                }\n                console.log('Directory items:', items);\n                return items.sort((a, b) => a.name.localeCompare(b.name));\n            }\n            else {\n                console.error('Path is not a directory:', basePath);\n                return null;\n            }\n        }\n        catch (error) {\n            console.error('Error listing directory contents:', error);\n            return null;\n        }\n    }\n    async setCurrentDirectoryPath() {\n        var _a;\n        let dirPath = null;\n        const app = globals_1.globals.app;\n        if (!app) {\n            console.error('POPUP: Application reference not available');\n            this.currentMenuPath = '';\n            return;\n        }\n        const currentShellWidget = app.shell.currentWidget;\n        if (currentShellWidget) {\n            const widgetContext = this.docManager.contextForWidget(currentShellWidget);\n            if (widgetContext) {\n                const path = widgetContext.path;\n                dirPath = this.getParentDirectory(path);\n                console.log(`POPUP: Path from current widget context: ${path} -> ${dirPath}`);\n            }\n        }\n        if (dirPath === null && this.currentNotebook && this.currentNotebook.context) {\n            const notebookPath = this.currentNotebook.context.path;\n            if (typeof notebookPath === 'string') {\n                dirPath = this.getParentDirectory(notebookPath);\n                console.log(`POPUP: Path from active notebook: ${notebookPath} -> ${dirPath}`);\n            }\n        }\n        if (dirPath === null) {\n            try {\n                const leftWidgets = Array.from(app.shell.widgets('left'));\n                const fileBrowserWidget = leftWidgets.find(widget => widget.id === 'filebrowser');\n                if (fileBrowserWidget && ((_a = fileBrowserWidget.model) === null || _a === void 0 ? void 0 : _a.path)) {\n                    dirPath = fileBrowserWidget.model.path;\n                    console.log(`POPUP: Path from file browser widget model: ${dirPath}`);\n                }\n                else {\n                    console.log('POPUP: File browser widget path not directly accessible.');\n                }\n            }\n            catch (e) {\n                console.warn('POPUP: Could not get path from file browser.', e);\n            }\n        }\n        if (dirPath === null) {\n            dirPath = '';\n            console.log('POPUP: Falling back to server root path.');\n        }\n        this.currentMenuPath = dirPath;\n        console.log(`POPUP: Initial current menu path set to: '${this.currentMenuPath}'`);\n    }\n    getParentDirectory(path) {\n        if (!path)\n            return '';\n        const lastSlash = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\\\\\\\'));\n        if (lastSlash === -1)\n            return ''; // No directory part, likely root or just a filename\n        return path.substring(0, lastSlash);\n    }\n}\nexports.PopupMenuManager = PopupMenuManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleSidebarWidget = void 0;\nconst widgets_1 = require(\"@lumino/widgets\");\nconst marked_1 = require(\"marked\");\nconst dompurify_1 = __importDefault(require(\"dompurify\"));\nconst icons_1 = require(\"./icons\");\nconst globals_1 = require(\"./globals\");\nconst api_client_1 = require(\"./api-client\");\nconst markdown_config_1 = require(\"./markdown-config\");\nconst popup_menu_manager_1 = require(\"./popup-menu-manager\");\n// Configure marked with our settings\n(0, markdown_config_1.configureMarked)();\n/**\n * Main sidebar widget for the AI chat interface\n */\nclass SimpleSidebarWidget extends widgets_1.Widget {\n    constructor(docManager) {\n        super();\n        this.isMarkdownMode = false;\n        this.isInputExpanded = false;\n        this.chatHistory = [];\n        this.currentChatId = '';\n        this.isHistoryViewActive = false;\n        /**\n         * Handles keyboard shortcuts\n         */\n        this.handleKeyDown = (event) => {\n            var _a, _b;\n            // Check for Ctrl+L (for selected code)\n            if (event.ctrlKey && event.key.toLowerCase() === 'l') {\n                // Prevent default browser behavior\n                event.preventDefault();\n                event.stopPropagation();\n                // Get the current active cell\n                const cell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n                if (!cell || !cell.editor) {\n                    return;\n                }\n                try {\n                    // Get the CodeMirror editor instance\n                    const editor = cell.editor;\n                    const view = editor.editor;\n                    if (!view) {\n                        return;\n                    }\n                    // Check if there's a selection\n                    const state = view.state;\n                    const selection = state.selection;\n                    if (!selection.main.empty) {\n                        // If there's a selection, use @code\n                        const from = selection.main.from;\n                        const to = selection.main.to;\n                        const selectedText = state.doc.sliceString(from, to);\n                        this.appendToInput(`@code\\n${selectedText}`);\n                        this.showKeyboardShortcutIndicator('Selected code inserted');\n                    }\n                    else {\n                        // If no selection, use @cell\n                        const cellContext = (_b = globals_1.globals.cellContextTracker) === null || _b === void 0 ? void 0 : _b.getCurrentCellContext();\n                        if (cellContext) {\n                            this.appendToInput(`@cell\\n${cellContext.text}`);\n                            this.showKeyboardShortcutIndicator('Cell content inserted');\n                        }\n                    }\n                    // Ensure the sidebar is visible and focused\n                    if (this.isHidden) {\n                        this.show();\n                    }\n                    this.inputField.focus();\n                }\n                catch (error) {\n                    console.error('Error handling keyboard shortcut:', error);\n                }\n            }\n        };\n        this.docManager = docManager;\n        this.id = 'simple-sidebar';\n        this.title.label = '';\n        this.title.caption = 'AI Chat Interface';\n        this.title.icon = icons_1.extensionIcon;\n        this.title.closable = true;\n        // Add the main CSS class for styling\n        this.addClass('jp-llm-ext-sidebar');\n        // Initialize API client\n        this.apiClient = new api_client_1.ApiClient();\n        // Initialize container elements before creating layout\n        this.messageContainer = document.createElement('div');\n        this.inputContainer = document.createElement('div');\n        this.inputField = document.createElement('textarea');\n        this.titleInput = document.createElement('input');\n        this.historyContainer = document.createElement('div');\n        this.keyboardShortcutIndicator = document.createElement('div');\n        this.keyboardShortcutIndicator.className = 'jp-llm-ext-keyboard-shortcut-indicator';\n        this.node.appendChild(this.keyboardShortcutIndicator);\n        // Create settings modal\n        this.settingsModalContainer = this.createSettingsModal();\n        this.node.appendChild(this.settingsModalContainer);\n        // Instantiate the PopupMenuManager with callbacks\n        this.popupMenuManager = new popup_menu_manager_1.PopupMenuManager(this.docManager, this.node, {\n            insertCode: (code) => this.appendToInput(`@code\\n${code}`),\n            insertCell: (content) => this.appendToInput(`@cell\\n${content}`),\n            insertFilePath: (path) => this.appendToInput(`@file\\n${path}`),\n            insertDirectoryPath: (path) => this.appendToInput(`@directory\\n${path}`), // If needed\n            getSelectedText: () => this.getSelectedText(),\n            getCurrentCellContent: () => this.getCurrentCellContent(),\n        });\n        // Create a new chat on start\n        this.createNewChat();\n        this.node.appendChild(this.createLayout());\n        // Pop-up menu will be attached to document.body when shown\n        // Add keyboard shortcut listener\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n    /**\n     * Shows a visual indicator for keyboard shortcuts\n     */\n    showKeyboardShortcutIndicator(text) {\n        this.keyboardShortcutIndicator.textContent = text;\n        this.keyboardShortcutIndicator.classList.add('visible');\n        // Hide after 1 second\n        setTimeout(() => {\n            this.keyboardShortcutIndicator.classList.remove('visible');\n        }, 1000);\n    }\n    /**\n     * Disposes all resources\n     */\n    dispose() {\n        // Remove keyboard shortcut listener\n        document.removeEventListener('keydown', this.handleKeyDown);\n        // Remove keyboard shortcut indicator\n        if (this.keyboardShortcutIndicator.parentNode) {\n            this.keyboardShortcutIndicator.parentNode.removeChild(this.keyboardShortcutIndicator);\n        }\n        // Dispose the popup menu manager\n        if (this.popupMenuManager) {\n            this.popupMenuManager.dispose();\n        }\n        super.dispose();\n    }\n    /**\n     * Creates the main layout for the sidebar\n     */\n    createLayout() {\n        // Create the main container\n        const mainContent = document.createElement('div');\n        // The main class 'jp-llm-ext-sidebar' is added to this.node in the constructor\n        // This container can have its own class if needed for further nesting/styling\n        mainContent.className = 'jp-llm-ext-content-wrapper';\n        // Create title input container\n        const titleContainer = document.createElement('div');\n        titleContainer.className = 'jp-llm-ext-title-container';\n        // Set up title input\n        this.titleInput.className = 'chat-title-input'; // Assuming this is styled correctly in CSS\n        this.titleInput.type = 'text';\n        this.titleInput.placeholder = 'Chat title';\n        this.titleInput.value = 'New Chat';\n        this.titleInput.addEventListener('change', () => this.updateCurrentChatTitle());\n        titleContainer.appendChild(this.titleInput);\n        // Create New Chat & History buttons (but don't add them to a top container yet)\n        const newChatButton = document.createElement('button');\n        newChatButton.className = 'jp-Button jp-llm-ext-action-button'; // Re-use existing button style\n        newChatButton.textContent = '+ New Chat';\n        newChatButton.title = 'Start a new chat';\n        newChatButton.addEventListener('click', () => this.createNewChat());\n        const historyButton = document.createElement('button');\n        historyButton.className = 'jp-Button jp-llm-ext-action-button'; // Re-use existing button style\n        historyButton.textContent = 'History';\n        historyButton.title = 'View chat history';\n        historyButton.addEventListener('click', () => this.toggleHistoryView());\n        // Configure message container\n        this.messageContainer.className = 'jp-llm-ext-message-container';\n        // Configure history container\n        this.historyContainer.className = 'jp-llm-ext-history-container';\n        this.historyContainer.style.display = 'none'; // Initially hidden\n        // Configure input container (holds input field, send button, and other controls)\n        this.inputContainer.className = 'jp-llm-ext-input-area-container'; // Renamed class for clarity\n        // Configure input field\n        this.inputField.placeholder = 'Ask me anything...';\n        // Removed inline styles, should be handled by CSS\n        this.inputField.rows = 1; // Start with 1 row\n        // Add keypress listener to input field\n        this.inputField.addEventListener('keypress', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                this.handleSendMessage();\n            }\n        });\n        // Create send button container (now part of inputContainer structure)\n        const inputActionsContainer = document.createElement('div');\n        inputActionsContainer.className = 'jp-llm-ext-input-actions-container';\n        // Create send button\n        const sendButton = document.createElement('button');\n        sendButton.className = 'jp-Button jp-llm-ext-send-button';\n        sendButton.textContent = 'Send';\n        sendButton.addEventListener('click', () => this.handleSendMessage());\n        inputActionsContainer.appendChild(sendButton);\n        // Create controls container (Markdown toggle, @, etc.)\n        const controlsContainer = this.createControlsContainer(); // Contains toggle and action buttons\n        // Assemble the input container's children: controls, input field, send button\n        this.inputContainer.appendChild(controlsContainer); // Controls (markdown, @, etc.)\n        this.inputContainer.appendChild(this.inputField); // Text area\n        this.inputContainer.appendChild(inputActionsContainer); // Send button container\n        // Create the new bottom bar container\n        const bottomBarContainer = document.createElement('div');\n        bottomBarContainer.className = 'jp-llm-ext-bottom-bar-container';\n        // Add the input container (with all its contents) to the bottom bar\n        bottomBarContainer.appendChild(this.inputContainer);\n        // Add New Chat and History buttons to the bottom bar\n        bottomBarContainer.appendChild(newChatButton);\n        bottomBarContainer.appendChild(historyButton);\n        // Assemble all main components\n        // Note: No more topActionsContainer\n        mainContent.appendChild(titleContainer);\n        mainContent.appendChild(this.messageContainer);\n        mainContent.appendChild(this.historyContainer);\n        mainContent.appendChild(bottomBarContainer); // Add the new bottom bar here\n        return mainContent;\n    }\n    /**\n     * Creates a new chat session\n     */\n    createNewChat() {\n        // Generate a unique ID for the chat\n        const chatId = `chat-${Date.now()}`;\n        // Create a new chat item\n        const newChat = {\n            id: chatId,\n            title: 'New Chat',\n            messages: []\n        };\n        // Add to history\n        this.chatHistory.push(newChat);\n        // Set as current chat\n        this.currentChatId = chatId;\n        // Update title input\n        this.titleInput.value = newChat.title;\n        // Clear message container\n        if (this.messageContainer) {\n            this.messageContainer.innerHTML = '';\n        }\n        // Hide history if it's visible\n        if (this.isHistoryViewActive) {\n            this.toggleHistoryView();\n        }\n    }\n    /**\n     * Toggles between chat view and history view\n     */\n    toggleHistoryView() {\n        this.isHistoryViewActive = !this.isHistoryViewActive;\n        if (this.isHistoryViewActive) {\n            // Show history view, hide message view\n            this.messageContainer.style.display = 'none';\n            this.historyContainer.style.display = 'block';\n            this.inputContainer.style.display = 'none';\n            this.titleInput.style.display = 'none';\n            // Populate history\n            this.renderChatHistory();\n        }\n        else {\n            // Show message view, hide history view\n            this.messageContainer.style.display = 'block';\n            this.historyContainer.style.display = 'none';\n            this.inputContainer.style.display = 'flex';\n            this.titleInput.style.display = 'block';\n        }\n    }\n    /**\n     * Renders the chat history in the history container\n     */\n    renderChatHistory() {\n        this.historyContainer.innerHTML = '';\n        if (this.chatHistory.length === 0) {\n            const emptyMessage = document.createElement('div');\n            emptyMessage.className = 'jp-llm-ext-empty-history-message';\n            emptyMessage.textContent = 'No chat history yet';\n            this.historyContainer.appendChild(emptyMessage);\n            return;\n        }\n        // Create a list of chat history items\n        this.chatHistory.forEach(chat => {\n            const historyItem = document.createElement('div');\n            historyItem.className = 'jp-llm-ext-history-item';\n            if (chat.id === this.currentChatId) {\n                historyItem.classList.add('jp-llm-ext-active');\n            }\n            // Add title\n            const title = document.createElement('div');\n            title.className = 'jp-llm-ext-history-title';\n            title.textContent = chat.title;\n            // Add message preview\n            const preview = document.createElement('div');\n            preview.className = 'jp-llm-ext-history-preview';\n            const lastMessage = chat.messages[chat.messages.length - 1];\n            preview.textContent = lastMessage\n                ? `${lastMessage.text.substring(0, 40)}${lastMessage.text.length > 40 ? '...' : ''}`\n                : 'Empty chat';\n            // Add click event\n            historyItem.addEventListener('click', () => this.loadChat(chat.id));\n            historyItem.appendChild(title);\n            historyItem.appendChild(preview);\n            this.historyContainer.appendChild(historyItem);\n        });\n    }\n    /**\n     * Loads a chat from history\n     */\n    loadChat(chatId) {\n        const chat = this.chatHistory.find(c => c.id === chatId);\n        if (!chat)\n            return;\n        // Set as current chat\n        this.currentChatId = chatId;\n        // Update title\n        this.titleInput.value = chat.title;\n        // Clear and re-populate message container\n        this.messageContainer.innerHTML = '';\n        chat.messages.forEach(msg => {\n            this.addMessage(msg.text, msg.sender, msg.isMarkdown, false);\n        });\n        // Switch back to chat view\n        if (this.isHistoryViewActive) {\n            this.toggleHistoryView();\n        }\n    }\n    /**\n     * Updates the title of the current chat\n     */\n    updateCurrentChatTitle() {\n        const chat = this.chatHistory.find(c => c.id === this.currentChatId);\n        if (chat) {\n            chat.title = this.titleInput.value;\n        }\n    }\n    /**\n     * Creates the controls container with toggles and action buttons\n     */\n    createControlsContainer() {\n        const controlsContainer = document.createElement('div');\n        controlsContainer.className = 'jp-llm-ext-controls-container';\n        // Create markdown toggle container\n        const toggleContainer = document.createElement('div');\n        toggleContainer.className = 'jp-llm-ext-toggle-container';\n        // Create markdown toggle\n        const markdownToggle = document.createElement('input');\n        markdownToggle.type = 'checkbox';\n        markdownToggle.id = 'markdown-toggle';\n        // markdownToggle.style.marginRight = '5px'; // Style via CSS\n        markdownToggle.addEventListener('change', (e) => {\n            const target = e.target;\n            this.isMarkdownMode = target.checked;\n            this.inputField.placeholder = this.isMarkdownMode ?\n                'Write markdown here...\\n\\n# Example heading\\n- List item\\n\\n```code block```' :\n                'Ask me anything...';\n        });\n        // Create toggle label\n        const toggleLabel = document.createElement('label');\n        toggleLabel.htmlFor = 'markdown-toggle';\n        toggleLabel.textContent = 'Markdown mode';\n        // toggleLabel.style.fontSize = '12px'; // Style via CSS\n        // Add toggle elements to container\n        toggleContainer.appendChild(markdownToggle);\n        toggleContainer.appendChild(toggleLabel);\n        // Create action buttons container (@, expand, settings)\n        const actionButtonsContainer = document.createElement('div');\n        actionButtonsContainer.className = 'jp-llm-ext-action-buttons-container';\n        // Create all action buttons\n        const buttons = [\n            {\n                text: '@',\n                title: 'Insert context (@)',\n                action: (event) => {\n                    // Get the button's position\n                    const targetButton = event.currentTarget;\n                    const rect = targetButton.getBoundingClientRect();\n                    // Show the popup menu using the manager (now async)\n                    this.popupMenuManager.showPopupMenu(rect.left, rect.bottom);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            },\n            { text: '⤢', title: 'Expand input', action: () => this.toggleInputExpansion(actionButtonsContainer.children[3]) },\n            { text: '⚙️', title: 'Settings', action: (event) => { event.preventDefault(); event.stopPropagation(); this.showSettingsModal(); } },\n        ];\n        // Add all buttons to the container\n        buttons.forEach(button => {\n            const btn = this.createButton(button.text, button.title);\n            btn.addEventListener('click', (e) => button.action(e));\n            actionButtonsContainer.appendChild(btn);\n        });\n        // Add toggle and action buttons to the controls container\n        // controlsContainer is now just for these inline controls, above the input field\n        controlsContainer.appendChild(toggleContainer);\n        controlsContainer.appendChild(actionButtonsContainer);\n        return controlsContainer;\n    }\n    /**\n     * Toggles the expansion state of the input field\n     */\n    toggleInputExpansion(button) {\n        this.isInputExpanded = !this.isInputExpanded;\n        if (this.isInputExpanded) {\n            // Adjust height based on a class or CSS variable instead of fixed pixels if possible\n            this.inputField.style.height = '100px';\n            this.inputField.style.resize = 'vertical';\n            button.textContent = '⤡';\n            button.title = 'Collapse input';\n        }\n        else {\n            this.inputField.style.height = ''; // Reset height\n            this.inputField.style.resize = 'none';\n            this.inputField.rows = 1; // Ensure it collapses back to 1 row height\n            button.textContent = '⤢';\n            button.title = 'Expand input';\n        }\n    }\n    /**\n     * Helper function to create a button with given text and tooltip\n     */\n    createButton(text, tooltip) {\n        const button = document.createElement('button');\n        button.textContent = text;\n        button.title = tooltip;\n        button.className = 'jp-Button jp-llm-ext-action-button';\n        return button;\n    }\n    /**\n     * Handles sending a message from the input field\n     */\n    handleSendMessage() {\n        const message = this.inputField.value.trim();\n        if (message) {\n            // Add user message to UI\n            this.addMessage(message, 'user', this.isMarkdownMode);\n            this.inputField.value = '';\n            this.inputField.rows = 1; // Reset rows after sending\n            this.inputField.style.height = ''; // Reset height after sending\n            // Reset expanded state if needed after sending\n            if (this.isInputExpanded) {\n                // Find the expand button to reset its state if needed (this might need adjustment based on final structure)\n                const expandButton = this.node.querySelector('.jp-llm-ext-action-buttons-container button[title*=\"Collapse\"]');\n                if (expandButton) {\n                    this.toggleInputExpansion(expandButton); // Collapse after sending\n                }\n                else {\n                    this.inputField.style.height = ''; // Fallback reset\n                    this.inputField.rows = 1;\n                }\n            }\n            // Create a temporary message container for the bot's streaming response\n            const botMessageDiv = document.createElement('div');\n            botMessageDiv.className = 'jp-llm-ext-bot-message';\n            const markdownIndicator = document.createElement('div');\n            markdownIndicator.textContent = \"MD\";\n            markdownIndicator.className = 'markdown-indicator';\n            botMessageDiv.appendChild(markdownIndicator);\n            // Create separate divs for streaming text and final markdown\n            const streamingDiv = document.createElement('div');\n            streamingDiv.className = 'streaming-content';\n            streamingDiv.style.whiteSpace = 'pre-wrap';\n            streamingDiv.style.fontFamily = 'monospace';\n            streamingDiv.style.fontSize = '0.9em';\n            botMessageDiv.appendChild(streamingDiv);\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'markdown-content';\n            contentDiv.style.display = 'none'; // Initially hidden\n            botMessageDiv.appendChild(contentDiv);\n            this.messageContainer.appendChild(botMessageDiv);\n            // Variable to collect the complete response\n            let completeResponse = '';\n            // Get cell context if available\n            const cellContext = globals_1.globals.cellContextTracker ?\n                globals_1.globals.cellContextTracker.getCurrentCellContext() : null;\n            // Stream response from API\n            this.apiClient.streamChat(message, { cellContext }, \n            // On each chunk received\n            (chunk) => {\n                completeResponse += chunk;\n                streamingDiv.textContent = completeResponse;\n                this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n            }, \n            // On complete\n            () => {\n                // Hide streaming div, show markdown div\n                streamingDiv.style.display = 'none';\n                contentDiv.style.display = 'block';\n                // Pre-process and render markdown\n                try {\n                    // Pre-process the markdown to fix any issues with code blocks\n                    const processedMarkdown = (0, markdown_config_1.preprocessMarkdown)(completeResponse);\n                    // Parse and sanitize\n                    const rawHtml = marked_1.marked.parse(processedMarkdown);\n                    const sanitizedHtml = dompurify_1.default.sanitize(rawHtml);\n                    // Apply the HTML with proper code block styling\n                    contentDiv.innerHTML = sanitizedHtml;\n                    // Add syntax highlighting classes to code blocks\n                    const codeBlocks = contentDiv.querySelectorAll('pre code');\n                    codeBlocks.forEach(block => {\n                        var _a;\n                        block.classList.add('jp-RenderedText');\n                        (_a = block.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add('jp-RenderedHTMLCommon');\n                    });\n                    // Add action buttons to the bot message\n                    console.log('Adding action buttons to streamed bot message');\n                    const actionsDiv = document.createElement('div');\n                    actionsDiv.className = 'jp-llm-ext-message-actions';\n                    actionsDiv.style.display = 'flex'; // Ensure display is set\n                    // Copy button with icon\n                    const copyButton = document.createElement('button');\n                    copyButton.className = 'jp-llm-ext-message-action-button';\n                    copyButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg>';\n                    copyButton.title = 'Copy message to clipboard';\n                    copyButton.addEventListener('click', (event) => {\n                        event.stopPropagation();\n                        this.copyMessageToClipboard(completeResponse);\n                    });\n                    actionsDiv.appendChild(copyButton);\n                    // Add to button with icon\n                    const addToButton = document.createElement('button');\n                    addToButton.className = 'jp-llm-ext-message-action-button';\n                    addToButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect><path d=\"M12 11v6\"></path><path d=\"M9 14h6\"></path></svg>';\n                    addToButton.title = 'Add message to current cell';\n                    addToButton.addEventListener('click', (event) => {\n                        event.stopPropagation();\n                        this.addMessageToCell(completeResponse);\n                    });\n                    actionsDiv.appendChild(addToButton);\n                    // Add buttons to message\n                    botMessageDiv.appendChild(actionsDiv);\n                    console.log('Action buttons added to bot message:', actionsDiv);\n                }\n                catch (error) {\n                    contentDiv.textContent = completeResponse;\n                    console.error('Failed to render markdown:', error);\n                }\n                // Save to chat history\n                const chat = this.chatHistory.find(c => c.id === this.currentChatId);\n                if (chat) {\n                    chat.messages.push({\n                        text: completeResponse,\n                        sender: 'bot',\n                        isMarkdown: true\n                    });\n                }\n                this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n            }, \n            // On error\n            (error) => {\n                streamingDiv.style.display = 'none';\n                contentDiv.style.display = 'block';\n                contentDiv.innerHTML = `<div class=\"error-message\">Error: ${error.message}</div>`;\n                console.error('API Error:', error);\n            });\n        }\n    }\n    /**\n     * Adds a message to the chat interface\n     */\n    addMessage(text, sender, isMarkdown = false, saveToHistory = true) {\n        console.log('Adding message:', { sender, isMarkdown }); // Debug log\n        const messageDiv = document.createElement('div');\n        messageDiv.className = sender === 'user' ? 'jp-llm-ext-user-message' : 'jp-llm-ext-bot-message';\n        // Add message content\n        if (isMarkdown || sender === 'bot') {\n            // Bot messages are always rendered as markdown\n            const markdownIndicator = document.createElement('div');\n            markdownIndicator.textContent = \"MD\";\n            markdownIndicator.className = 'markdown-indicator';\n            messageDiv.appendChild(markdownIndicator);\n            // Create a container for the rendered markdown\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'markdown-content';\n            try {\n                // Pre-process the markdown text\n                const processedText = (0, markdown_config_1.preprocessMarkdown)(text);\n                // Parse and render markdown\n                const rawHtml = marked_1.marked.parse(processedText);\n                const sanitizedHtml = dompurify_1.default.sanitize(rawHtml);\n                contentDiv.innerHTML = sanitizedHtml;\n                // Add syntax highlighting classes to code blocks\n                const codeBlocks = contentDiv.querySelectorAll('pre code');\n                codeBlocks.forEach(block => {\n                    var _a;\n                    block.classList.add('jp-RenderedText');\n                    (_a = block.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add('jp-RenderedHTMLCommon');\n                });\n            }\n            catch (error) {\n                contentDiv.textContent = text;\n                console.error('Failed to render markdown:', error);\n            }\n            messageDiv.appendChild(contentDiv);\n            // Add action buttons for bot messages\n            if (sender === 'bot') {\n                console.log('Adding action buttons to bot message'); // Debug log\n                const actionsDiv = document.createElement('div');\n                actionsDiv.className = 'jp-llm-ext-message-actions';\n                // Copy button with icon\n                const copyButton = document.createElement('button');\n                copyButton.className = 'jp-llm-ext-message-action-button';\n                copyButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg>';\n                copyButton.title = 'Copy message to clipboard';\n                copyButton.addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    this.copyMessageToClipboard(text);\n                });\n                actionsDiv.appendChild(copyButton);\n                // Add to button with icon\n                const addToButton = document.createElement('button');\n                addToButton.className = 'jp-llm-ext-message-action-button';\n                addToButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect><path d=\"M12 11v6\"></path><path d=\"M9 14h6\"></path></svg>';\n                addToButton.title = 'Add message to current cell';\n                addToButton.addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    this.addMessageToCell(text);\n                });\n                actionsDiv.appendChild(addToButton);\n                // Add buttons to message\n                messageDiv.appendChild(actionsDiv);\n                console.log('Action buttons added to message:', actionsDiv); // Debug log\n            }\n        }\n        else {\n            messageDiv.textContent = text;\n        }\n        this.messageContainer.appendChild(messageDiv);\n        this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n        // Save to chat history\n        if (saveToHistory) {\n            const chat = this.chatHistory.find(c => c.id === this.currentChatId);\n            if (chat) {\n                chat.messages.push({\n                    text,\n                    sender,\n                    isMarkdown: isMarkdown || sender === 'bot'\n                });\n            }\n        }\n    }\n    /**\n     * Copies message content to clipboard\n     */\n    copyMessageToClipboard(text) {\n        try {\n            navigator.clipboard.writeText(text).then(() => {\n                console.log('Content copied to clipboard');\n                // Find the button element that was clicked\n                const buttons = document.querySelectorAll('.jp-llm-ext-message-action-button');\n                let clickedButton = null;\n                for (let i = 0; i < buttons.length; i++) {\n                    const button = buttons[i];\n                    if (button.title === 'Copy message to clipboard' && button === document.activeElement) {\n                        clickedButton = button;\n                        break;\n                    }\n                }\n                // Show visual feedback if we found the button\n                if (clickedButton) {\n                    const originalHTML = clickedButton.innerHTML;\n                    clickedButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 6L9 17l-5-5\"></path></svg>';\n                    setTimeout(() => {\n                        clickedButton.innerHTML = originalHTML;\n                    }, 2000);\n                }\n            }).catch(err => {\n                console.error('Failed to copy text: ', err);\n            });\n        }\n        catch (error) {\n            console.error('Error copying to clipboard:', error);\n        }\n    }\n    /**\n     * Adds message content to the current cell\n     */\n    addMessageToCell(text) {\n        var _a;\n        const cell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (!cell || !cell.editor) {\n            return;\n        }\n        try {\n            const editor = cell.editor;\n            const view = editor.editor;\n            if (!view) {\n                return;\n            }\n            // Get current cursor position\n            const state = view.state;\n            const selection = state.selection;\n            const cursorPos = selection.main.head;\n            // Insert newline and message content at cursor position\n            const transaction = state.update({\n                changes: {\n                    from: cursorPos,\n                    insert: `\\n${text}`\n                },\n                selection: { anchor: cursorPos + text.length + 1 }\n            });\n            view.dispatch(transaction);\n        }\n        catch (error) {\n            console.error('Error adding message to cell:', error);\n        }\n    }\n    /**\n     * Gets the currently selected text from the active notebook cell.\n     * (Helper for PopupMenuManager callback)\n     */\n    getSelectedText() {\n        var _a, _b, _c;\n        const cell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell === null || cell === void 0 ? void 0 : cell.editor) {\n            const editor = cell.editor; // IEditor\n            // Access CodeMirror editor instance if possible\n            const cmEditor = editor.editor;\n            if (cmEditor && cmEditor.state) {\n                const state = cmEditor.state;\n                const selection = state.selection.main; // Get the main selection\n                if (selection.empty) {\n                    return null; // No text selected\n                }\n                return state.doc.sliceString(selection.from, selection.to);\n            }\n            console.warn(\"Could not access CodeMirror state to get selection.\");\n            // Avoid using getRange as it's confirmed not to exist on IEditor\n            return null;\n        }\n        else {\n            // Attempt to get selection from document if no notebook active (e.g., text editor)\n            const activeWidget = (_c = (_b = globals_1.globals.app) === null || _b === void 0 ? void 0 : _b.shell) === null || _c === void 0 ? void 0 : _c.currentWidget;\n            if (activeWidget && 'content' in activeWidget && activeWidget.content.editor) {\n                const editor = activeWidget.content.editor;\n                const cmEditor = editor.editor;\n                if (cmEditor && cmEditor.state) {\n                    const state = cmEditor.state;\n                    const selection = state.selection.main;\n                    if (selection.empty) {\n                        return null;\n                    }\n                    return state.doc.sliceString(selection.from, selection.to);\n                }\n                console.warn(\"Could not access CodeMirror state for non-notebook editor selection.\");\n                return null; // Avoid getRange\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets the content of the currently active notebook cell.\n     * (Helper for PopupMenuManager callback)\n     */\n    getCurrentCellContent() {\n        var _a, _b, _c;\n        const activeCell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (activeCell === null || activeCell === void 0 ? void 0 : activeCell.model) {\n            // Try using sharedModel first (more robust)\n            if (activeCell.model.sharedModel && typeof activeCell.model.sharedModel.getSource === 'function') {\n                return activeCell.model.sharedModel.getSource();\n            }\n            // Fallback: Try using toJSON().source\n            const cellJson = activeCell.model.toJSON();\n            if (typeof (cellJson === null || cellJson === void 0 ? void 0 : cellJson.source) === 'string') {\n                return cellJson.source;\n            }\n            else if (Array.isArray(cellJson === null || cellJson === void 0 ? void 0 : cellJson.source)) {\n                // If source is an array of strings, join them\n                return cellJson.source.join('\\n');\n            }\n            console.warn(\"Could not get cell content via model.value.text or toJSON().source\");\n            return null;\n        }\n        // Fallback for non-notebook editors if needed\n        const activeWidget = (_c = (_b = globals_1.globals.app) === null || _b === void 0 ? void 0 : _b.shell) === null || _c === void 0 ? void 0 : _c.currentWidget;\n        if (activeWidget && 'content' in activeWidget && activeWidget.content.model) {\n            return activeWidget.content.model.value.text;\n        }\n        return null;\n    }\n    /**\n     * Appends text to the input field with proper spacing\n     */\n    appendToInput(text) {\n        try {\n            const currentValue = this.inputField.value;\n            if (currentValue) {\n                // If there's existing content, add a newline before appending\n                this.inputField.value = `${currentValue}\\n\\n${text}`;\n            }\n            else {\n                this.inputField.value = text;\n            }\n            // Focus the input field and move cursor to end\n            this.inputField.focus();\n            this.inputField.setSelectionRange(this.inputField.value.length, this.inputField.value.length);\n        }\n        catch (error) {\n            console.error('Error appending to input:', error);\n        }\n    }\n    // Settings modal methods\n    createSettingsModal() {\n        const modal = document.createElement('div');\n        modal.className = 'jp-llm-ext-settings-modal';\n        modal.style.display = 'none'; // Keep this inline style for toggling visibility\n        const content = document.createElement('div');\n        content.className = 'jp-llm-ext-settings-content';\n        const title = document.createElement('h2');\n        title.className = 'jp-llm-ext-settings-title';\n        title.textContent = 'Settings';\n        content.appendChild(title);\n        const form = document.createElement('form');\n        form.className = 'jp-llm-ext-settings-form';\n        // Provider selection\n        const providerLabel = document.createElement('label');\n        providerLabel.className = 'jp-llm-ext-settings-label';\n        providerLabel.textContent = 'API Provider:';\n        form.appendChild(providerLabel);\n        const providerSelect = document.createElement('select');\n        providerSelect.className = 'jp-llm-ext-settings-select';\n        providerSelect.id = 'settings-provider';\n        ['OpenAI', 'HuggingFace', 'Local'].forEach(opt => {\n            const option = document.createElement('option');\n            option.value = opt;\n            option.textContent = opt;\n            providerSelect.appendChild(option);\n        });\n        form.appendChild(providerSelect);\n        // API Key input\n        const apiKeyLabel = document.createElement('label');\n        apiKeyLabel.className = 'jp-llm-ext-settings-label';\n        apiKeyLabel.textContent = 'API Key:';\n        form.appendChild(apiKeyLabel);\n        const apiKeyInput = document.createElement('input');\n        apiKeyInput.className = 'jp-llm-ext-settings-input';\n        apiKeyInput.type = 'password';\n        apiKeyInput.id = 'settings-api-key';\n        form.appendChild(apiKeyInput);\n        // API URL input\n        const apiUrlLabel = document.createElement('label');\n        apiUrlLabel.className = 'jp-llm-ext-settings-label';\n        apiUrlLabel.textContent = 'API URL (optional):';\n        form.appendChild(apiUrlLabel);\n        const apiUrlInput = document.createElement('input');\n        apiUrlInput.className = 'jp-llm-ext-settings-input';\n        apiUrlInput.type = 'text';\n        apiUrlInput.id = 'settings-api-url';\n        form.appendChild(apiUrlInput);\n        // Rules input\n        const rulesLabel = document.createElement('label');\n        rulesLabel.className = 'jp-llm-ext-settings-label';\n        rulesLabel.textContent = 'Custom Rules (optional):';\n        form.appendChild(rulesLabel);\n        const rulesInput = document.createElement('textarea');\n        rulesInput.className = 'jp-llm-ext-settings-textarea';\n        rulesInput.id = 'settings-rules';\n        form.appendChild(rulesInput);\n        // Buttons container\n        const btnContainer = document.createElement('div');\n        btnContainer.className = 'jp-llm-ext-settings-buttons';\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'jp-llm-ext-settings-button jp-llm-ext-settings-save-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            const provider = document.getElementById('settings-provider').value;\n            const key = document.getElementById('settings-api-key').value;\n            const url = document.getElementById('settings-api-url').value;\n            const rules = document.getElementById('settings-rules').value;\n            console.log('Settings saved:', { provider, key, url, rules });\n            this.hideSettingsModal();\n        });\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'jp-llm-ext-settings-button jp-llm-ext-settings-cancel-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.addEventListener('click', () => this.hideSettingsModal());\n        btnContainer.appendChild(saveBtn);\n        btnContainer.appendChild(cancelBtn);\n        form.appendChild(btnContainer);\n        content.appendChild(form);\n        modal.appendChild(content);\n        return modal;\n    }\n    showSettingsModal() {\n        this.settingsModalContainer.style.display = 'flex';\n    }\n    hideSettingsModal() {\n        this.settingsModalContainer.style.display = 'none';\n    }\n}\nexports.SimpleSidebarWidget = SimpleSidebarWidget;\n"],"names":["Object","defineProperty","exports","value","ApiClient","constructor","baseUrl","this","streamChat","message","context","onChunk","onComplete","onError","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","reader","getReader","decoder","TextDecoder","done","readerDone","read","chunk","decode","stream","error","String","healthCheck","console","CellContextTracker","app","notebookTracker","activeCellEditorNode","lastCellContext","_isDisposed","handleEditorEvent","event","cell","activeCell","editor","view","getCmContext","setupTrackers","isDisposed","activeCellChanged","connect","setupCellListeners","currentChanged","handleNotebookChange","tracker","panel","cleanupPreviousListeners","content","_tracker","cellNode","node","editorNode","querySelector","addEventListener","removeEventListener","state","offset","selection","main","head","fullText","doc","toString","line","lineAt","position","number","column","from","contextRadius","start","Math","max","end","min","length","text","contextBefore","substring","contextAfter","getCurrentCellContext","dispose","disconnect","registerCommands","icons_1","palette","launcher","sidebarWidget","commands","addCommand","label","icon","extensionIcon","execute","isAttached","parent","shell","add","rank","addItem","command","category","globals","initGlobals","ui_components_1","iconSvgStr","LabIcon","name","svgstr","launcher_1","apputils_1","notebook_1","docmanager_1","sidebar_widget_1","globals_1","commands_1","cell_context_tracker_1","api_client_1","enumerable","get","plugin","id","autoStart","requires","ILauncher","ICommandPalette","INotebookTracker","IDocumentManager","activate","jupyterApp","docManager","log","cellContextTracker","SimpleSidebarWidget","configureMarked","preprocessMarkdown","marked_1","marked","setOptions","gfm","breaks","pedantic","async","silent","inCodeBlock","lines","split","processedLines","map","i","trim","startsWith","replace","join","PopupMenuManager","widgetNode","callbacks","currentMenuLevel","currentMenuPath","menuHistory","currentNotebook","popupMenuContainer","document","createElement","className","style","display","appendChild","handleDocumentClick","bind","currentWidget","_","notebook","parentNode","removeChild","contains","target","atButton","hidePopupMenu","showPopupMenu","x","y","setCurrentDirectoryPath","renderMenuContent","left","top","innerHTML","backButton","createMenuItem","pathIndicator","textContent","renderTopLevelItems","renderDirectoryBrowserItems","topLevelCommands","description","actionId","forEach","cmd","item","loadingItem","pointerEvents","filterType","contents","listCurrentDirectoryContents","itemName","itemType","type","itemPath","path","menuItem","emptyItem","errorItem","color","dataset","onclick","handleMenuClick","labelSpan","fontWeight","descSpan","fontSize","currentTarget","navigateBackMenu","selectedText","getSelectedText","insertCode","cellContent","getCurrentCellContent","insertCell","navigateMenu","insertFilePath","warn","stopPropagation","level","push","previousState","pop","basePath","effectivePath","services","items","filter","sort","a","b","localeCompare","_a","dirPath","currentShellWidget","widgetContext","contextForWidget","getParentDirectory","notebookPath","leftWidgets","Array","widgets","fileBrowserWidget","find","widget","model","e","lastSlash","lastIndexOf","__importDefault","mod","__esModule","widgets_1","dompurify_1","markdown_config_1","popup_menu_manager_1","Widget","super","isMarkdownMode","isInputExpanded","chatHistory","currentChatId","isHistoryViewActive","handleKeyDown","_b","ctrlKey","key","toLowerCase","preventDefault","empty","to","sliceString","appendToInput","showKeyboardShortcutIndicator","cellContext","isHidden","show","inputField","focus","title","caption","closable","addClass","apiClient","messageContainer","inputContainer","titleInput","historyContainer","keyboardShortcutIndicator","settingsModalContainer","createSettingsModal","popupMenuManager","code","insertDirectoryPath","createNewChat","createLayout","classList","setTimeout","remove","mainContent","titleContainer","placeholder","updateCurrentChatTitle","newChatButton","historyButton","toggleHistoryView","rows","shiftKey","handleSendMessage","inputActionsContainer","sendButton","controlsContainer","createControlsContainer","bottomBarContainer","chatId","Date","now","newChat","messages","renderChatHistory","emptyMessage","chat","historyItem","preview","lastMessage","loadChat","c","msg","addMessage","sender","isMarkdown","toggleContainer","markdownToggle","checked","toggleLabel","htmlFor","actionButtonsContainer","buttons","action","targetButton","rect","getBoundingClientRect","bottom","toggleInputExpansion","children","showSettingsModal","button","btn","createButton","height","resize","tooltip","expandButton","botMessageDiv","markdownIndicator","streamingDiv","whiteSpace","fontFamily","contentDiv","completeResponse","scrollTop","scrollHeight","processedMarkdown","rawHtml","parse","sanitizedHtml","default","sanitize","codeBlocks","querySelectorAll","block","parentElement","actionsDiv","copyButton","copyMessageToClipboard","addToButton","addMessageToCell","saveToHistory","messageDiv","processedText","navigator","clipboard","writeText","then","clickedButton","activeElement","originalHTML","catch","err","cursorPos","transaction","update","changes","insert","anchor","dispatch","_c","cmEditor","activeWidget","sharedModel","getSource","cellJson","toJSON","source","isArray","currentValue","setSelectionRange","modal","form","providerLabel","providerSelect","opt","option","apiKeyLabel","apiKeyInput","apiUrlLabel","apiUrlInput","rulesLabel","rulesInput","btnContainer","saveBtn","provider","getElementById","url","rules","hideSettingsModal","cancelBtn"],"sourceRoot":""}