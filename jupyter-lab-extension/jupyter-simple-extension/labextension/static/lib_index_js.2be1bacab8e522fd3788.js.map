{"version":3,"file":"lib_index_js.2be1bacab8e522fd3788.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAiD;AACG;AACX;AACc;AACgB;AACvC;AACE;AACwB;AAC1D,YAAY,cAAc;AAC1B,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAO;AACjC;AACA;AACA,CAAC;AACD;AACA,kCAAkC,mDAAM;AACxC;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAAM;AACtC;AACA,sCAAsC,yDAAkB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,+DAAa;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,eAAe,UAAU,OAAO;AAC5F;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW,GAAG,UAAU;AACjE,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,QAAQ;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,iEAAe,EAAE,kEAAgB,EAAE,oEAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA,+CAA+C,YAAY;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qDAAqD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,MAAM;AACN,GAAG;AACH,iEAAe,MAAM,EAAC","sources":["webpack://jupyter-simple-extension/./lib/index.js"],"sourcesContent":["import { ILauncher } from '@jupyterlab/launcher';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\nimport { marked } from 'marked';\nimport DOMPurify from 'dompurify';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n// import { Transaction } from '@codemirror/state';\n// import { IDisposable } from '@lumino/disposable';\n// Example icon string (base64-encoded SVG)\nconst iconSvgStr = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chat-left-text\" viewBox=\"0 0 16 16\">' +\n    '<path d=\"M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>' +\n    '<path d=\"M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>' +\n    '</svg>';\n// Create a custom icon\nconst extensionIcon = new LabIcon({\n    name: 'simple:icon',\n    svgstr: iconSvgStr\n});\n// Create a widget for the sidebar\nclass SimpleSidebarWidget extends Widget {\n    constructor(docManager) {\n        console.log('[SimpleSidebarWidget] Constructor start'); // Log 1\n        super();\n        this.isMarkdownMode = false;\n        this.isInputExpanded = false;\n        this.docManager = docManager;\n        this.id = 'simple-sidebar';\n        this.title.label = '';\n        this.title.caption = 'AI Chat Interface';\n        this.title.icon = extensionIcon;\n        this.title.closable = true;\n        // Create the main container\n        const content = document.createElement('div');\n        content.className = 'simple-sidebar-content';\n        content.style.display = 'flex';\n        content.style.flexDirection = 'column';\n        content.style.height = '100%';\n        // Create message container\n        this.messageContainer = document.createElement('div');\n        this.messageContainer.className = 'message-container';\n        this.messageContainer.style.flexGrow = '1';\n        this.messageContainer.style.overflowY = 'auto';\n        this.messageContainer.style.padding = '10px';\n        this.messageContainer.style.borderBottom = '1px solid #e0e0e0';\n        // Create input container (will hold controls, input field, and send button)\n        this.inputContainer = document.createElement('div');\n        this.inputContainer.style.display = 'flex';\n        this.inputContainer.style.flexDirection = 'column';\n        this.inputContainer.style.padding = '10px';\n        this.inputContainer.style.gap = '5px';\n        // Create controls container (for toggle and action buttons on one line)\n        const controlsContainer = document.createElement('div');\n        controlsContainer.style.display = 'flex';\n        controlsContainer.style.justifyContent = 'space-between';\n        controlsContainer.style.alignItems = 'center';\n        controlsContainer.style.marginBottom = '5px';\n        // Create markdown toggle container (left side of controls)\n        const toggleContainer = document.createElement('div');\n        toggleContainer.style.display = 'flex';\n        toggleContainer.style.alignItems = 'center';\n        // Create markdown toggle\n        const markdownToggle = document.createElement('input');\n        markdownToggle.type = 'checkbox';\n        markdownToggle.id = 'markdown-toggle';\n        markdownToggle.style.marginRight = '5px';\n        // Create toggle label\n        const toggleLabel = document.createElement('label');\n        toggleLabel.htmlFor = 'markdown-toggle';\n        toggleLabel.textContent = 'Markdown mode';\n        toggleLabel.style.fontSize = '12px';\n        // Add toggle event\n        markdownToggle.addEventListener('change', (e) => {\n            const target = e.target;\n            this.isMarkdownMode = target.checked;\n            this.inputField.placeholder = this.isMarkdownMode ?\n                'Write markdown here...\\\\n\\\\n# Example heading\\\\n- List item\\\\n\\\\n```code block```' :\n                'Ask me anything...';\n        });\n        // Add toggle elements to container\n        toggleContainer.appendChild(markdownToggle);\n        toggleContainer.appendChild(toggleLabel);\n        // Create action buttons container (right side of controls)\n        console.log('[SimpleSidebarWidget] Creating action buttons container'); // Log 2\n        const actionButtonsContainer = document.createElement('div');\n        actionButtonsContainer.style.display = 'flex';\n        actionButtonsContainer.style.gap = '2px';\n        // Create command button\n        const commandButton = this.createButton('@', 'Command list');\n        commandButton.addEventListener('click', () => {\n            // Command list logic will be implemented later\n        });\n        // Create attachment button\n        const attachmentButton = this.createButton('📎', 'Upload file');\n        attachmentButton.addEventListener('click', () => {\n            // File upload logic will be implemented later\n        });\n        // Create file search button\n        const fileSearchButton = this.createButton('🔍', 'Browse files');\n        fileSearchButton.addEventListener('click', () => {\n            // File browse logic will be implemented later\n        });\n        // Create expand input button\n        const expandButton = this.createButton('⤢', 'Expand input');\n        expandButton.addEventListener('click', () => {\n            this.isInputExpanded = !this.isInputExpanded;\n            if (this.isInputExpanded) {\n                this.inputField.style.height = '100px';\n                this.inputField.style.resize = 'vertical';\n                expandButton.textContent = '⤡';\n                expandButton.title = 'Collapse input';\n            }\n            else {\n                this.inputField.style.height = 'auto';\n                this.inputField.style.resize = 'none';\n                expandButton.textContent = '⤢';\n                expandButton.title = 'Expand input';\n            }\n        });\n        // Create settings button\n        const settingsButton = this.createButton('⚙️', 'Settings');\n        settingsButton.addEventListener('click', () => {\n            // Settings logic will be implemented later\n        });\n        // Create List Contents button\n        const listDirButton = this.createButton('📁', 'List Directory Contents');\n        listDirButton.addEventListener('click', () => this.listCurrentDirectoryContents());\n        // Add buttons to container\n        actionButtonsContainer.appendChild(commandButton);\n        actionButtonsContainer.appendChild(attachmentButton);\n        actionButtonsContainer.appendChild(fileSearchButton);\n        actionButtonsContainer.appendChild(expandButton);\n        actionButtonsContainer.appendChild(settingsButton);\n        actionButtonsContainer.appendChild(listDirButton);\n        // Add toggle and action buttons to the controls container\n        controlsContainer.appendChild(toggleContainer);\n        controlsContainer.appendChild(actionButtonsContainer);\n        // Create input field (changed to textarea)\n        this.inputField = document.createElement('textarea');\n        this.inputField.placeholder = 'Ask me anything...';\n        this.inputField.style.flexGrow = '1';\n        this.inputField.style.padding = '5px';\n        this.inputField.style.border = '1px solid #ccc';\n        this.inputField.style.borderRadius = '3px';\n        this.inputField.style.resize = 'none';\n        this.inputField.rows = 1;\n        this.inputField.style.overflowY = 'auto';\n        // Create input actions container (for send button)\n        const inputActionsContainer = document.createElement('div');\n        inputActionsContainer.style.display = 'flex';\n        inputActionsContainer.style.justifyContent = 'flex-end';\n        inputActionsContainer.style.marginTop = '5px';\n        // Create send button\n        const sendButton = document.createElement('button');\n        sendButton.className = 'jp-Button';\n        sendButton.textContent = 'Send';\n        sendButton.style.padding = '5px 10px';\n        // Add event listeners\n        sendButton.addEventListener('click', () => this.handleSendMessage());\n        this.inputField.addEventListener('keypress', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                this.handleSendMessage();\n            }\n        });\n        // Add button to actions container\n        inputActionsContainer.appendChild(sendButton);\n        // Assemble the input components\n        this.inputContainer.appendChild(controlsContainer);\n        console.log('[SimpleSidebarWidget] Controls container appended to input container'); // Log 6\n        this.inputContainer.appendChild(this.inputField);\n        this.inputContainer.appendChild(inputActionsContainer);\n        // Assemble all components\n        content.appendChild(this.messageContainer);\n        content.appendChild(this.inputContainer);\n        this.node.appendChild(content);\n        console.log('[SimpleSidebarWidget] Constructor end'); // Log 7\n    }\n    createButton(text, tooltip) {\n        const button = document.createElement('button');\n        button.textContent = text;\n        button.title = tooltip;\n        button.className = 'jp-Button';\n        button.style.margin = '0 2px';\n        button.style.padding = '2px 8px';\n        return button;\n    }\n    handleSendMessage() {\n        const message = this.inputField.value.trim();\n        if (message) {\n            // Add metadata about markdown mode to the message\n            this.addMessage(message, 'user', this.isMarkdownMode);\n            this.inputField.value = '';\n            // Reset expanded state if needed after sending\n            if (this.isInputExpanded) {\n                this.inputField.style.height = '100px';\n            }\n            else {\n                this.inputField.style.height = 'auto';\n                this.inputField.rows = 1;\n            }\n            // Echo response for demonstration\n            setTimeout(() => {\n                this.addMessage(`Echo: ${message}`, 'bot', false);\n            }, 500);\n        }\n    }\n    addMessage(text, sender, isMarkdown = false) {\n        const messageDiv = document.createElement('div');\n        messageDiv.style.marginBottom = '10px';\n        messageDiv.style.padding = '8px';\n        messageDiv.style.borderRadius = '5px';\n        messageDiv.style.maxWidth = '80%';\n        messageDiv.style.wordWrap = 'break-word';\n        if (sender === 'user') {\n            messageDiv.style.backgroundColor = '#e3f2fd';\n            messageDiv.style.marginLeft = 'auto';\n        }\n        else {\n            messageDiv.style.backgroundColor = '#f5f5f5';\n            messageDiv.style.marginRight = 'auto';\n        }\n        // Add message content\n        if (isMarkdown) {\n            const markdownIndicator = document.createElement('div');\n            markdownIndicator.textContent = \"MD\";\n            markdownIndicator.style.fontSize = '9px';\n            markdownIndicator.style.color = '#666';\n            markdownIndicator.style.textAlign = 'right';\n            messageDiv.appendChild(markdownIndicator);\n            // Create a container for the rendered markdown\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'markdown-content';\n            // Convert markdown to HTML and sanitize it\n            try {\n                // Parse markdown to HTML\n                const rawHtml = marked.parse(text);\n                // Sanitize the HTML to prevent XSS attacks\n                const sanitizedHtml = DOMPurify.sanitize(rawHtml);\n                // Set the sanitized HTML\n                contentDiv.innerHTML = sanitizedHtml;\n            }\n            catch (error) {\n                // Fallback if markdown parsing fails\n                contentDiv.textContent = text;\n                console.error('Failed to render markdown:', error);\n            }\n            messageDiv.appendChild(contentDiv);\n        }\n        else {\n            messageDiv.textContent = text;\n        }\n        this.messageContainer.appendChild(messageDiv);\n        this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n    }\n    async listCurrentDirectoryContents() {\n        let dirPath = null;\n        let source = null;\n        // 1. Determine the directory path\n        const currentShellWidget = app.shell.currentWidget;\n        if (currentShellWidget) {\n            const widgetContext = this.docManager.contextForWidget(currentShellWidget);\n            if (widgetContext) {\n                const path = widgetContext.path;\n                const lastSlash = path.lastIndexOf('/');\n                dirPath = lastSlash === -1 ? '' : path.substring(0, lastSlash); // Use '' for root\n                source = 'widget context';\n            }\n        }\n        // Fallback to notebook tracker if no context from widget\n        if (dirPath === null) {\n            const currentNotebookPanel = notebookTracker === null || notebookTracker === void 0 ? void 0 : notebookTracker.currentWidget;\n            if (currentNotebookPanel instanceof NotebookPanel) {\n                const nbPath = currentNotebookPanel.context.path;\n                const lastSlash = nbPath.lastIndexOf('/');\n                dirPath = lastSlash === -1 ? '' : nbPath.substring(0, lastSlash);\n                source = 'active notebook';\n            }\n        }\n        // 2. List contents if path was found\n        if (dirPath !== null) {\n            console.log(`Listing contents for directory: \"${dirPath || '/'}\" (from ${source})`);\n            try {\n                const contents = await this.docManager.services.contents.get(dirPath);\n                console.log('Directory Contents:');\n                if (contents.content && contents.content.length > 0) {\n                    contents.content.forEach((item) => {\n                        console.log(`- ${item.name} (${item.type})`);\n                    });\n                }\n                else {\n                    console.log('(Directory is empty)');\n                }\n            }\n            catch (error) {\n                console.error(`Error listing directory contents for \"${dirPath}\":`, error);\n            }\n        }\n        else {\n            console.log('Could not determine current directory context to list.');\n        }\n    }\n}\n// --- Need app and notebookTracker accessible globally or passed differently ---\nlet app;\nlet notebookTracker;\n// --- Track active cell DOM elements with listeners ---\nlet activeCellEditorNode = null;\n/**\n * Initialization data for the jupyter-simple-extension extension.\n */\nconst plugin = {\n    id: 'jupyter-simple-extension:plugin',\n    autoStart: true,\n    requires: [ILauncher, ICommandPalette, INotebookTracker, IDocumentManager],\n    activate: (_app, launcher, palette, _notebookTracker, docManager) => {\n        console.log('JupyterLab extension jupyter-simple-extension is activated!');\n        app = _app;\n        notebookTracker = _notebookTracker;\n        const sidebarWidget = new SimpleSidebarWidget(docManager);\n        app.shell.add(sidebarWidget, 'left', { rank: 9999 });\n        // Add a command to toggle the sidebar\n        app.commands.addCommand('simple-extension:toggle-sidebar', {\n            label: 'Toggle Simple Sidebar',\n            icon: extensionIcon,\n            execute: () => {\n                if (sidebarWidget.isAttached) {\n                    sidebarWidget.parent = null;\n                }\n                else {\n                    app.shell.add(sidebarWidget, 'left', { rank: 9999 });\n                }\n            }\n        });\n        // Add the command to the command palette\n        palette.addItem({\n            command: 'simple-extension:toggle-sidebar',\n            category: 'Extension'\n        });\n        // Add a launcher item\n        launcher.add({\n            command: 'simple-extension:toggle-sidebar',\n            category: 'Other',\n            rank: 9999\n        });\n        // --- Function to log cursor context from CodeMirror EditorView ---\n        const logCmContext = (view) => {\n            try {\n                const state = view.state;\n                const offset = state.selection.main.head;\n                const fullText = state.doc.toString();\n                const line = state.doc.lineAt(offset);\n                const position = { line: line.number - 1, column: offset - line.from }; // Calculate approx line/col\n                const contextRadius = 100;\n                const start = Math.max(0, offset - contextRadius);\n                const end = Math.min(fullText.length, offset + contextRadius);\n                const contextBefore = fullText.substring(start, offset);\n                const contextAfter = fullText.substring(offset, end);\n                console.log('--- CM Cursor Context ---');\n                console.log('Position (approx):', position);\n                console.log('Offset:', offset);\n                console.log('Before:', contextBefore);\n                console.log('After:', contextAfter);\n                console.log('-----------------------');\n            }\n            catch (error) {\n                console.error(\"Error in logCmContext:\", error);\n                console.log(\"EditorView object during error:\", view);\n            }\n        };\n        // --- Function to remove event listeners from previous active cell ---\n        const cleanupPreviousListeners = () => {\n            if (activeCellEditorNode) {\n                console.log(\"Removing event listeners from previous cell editor node.\");\n                // Remove both keydown and mouseup listeners\n                activeCellEditorNode.removeEventListener('keydown', handleEditorEvent);\n                activeCellEditorNode.removeEventListener('mouseup', handleEditorEvent);\n                activeCellEditorNode = null;\n            }\n        };\n        // --- Event handler for keypresses and mouse events ---\n        const handleEditorEvent = (event) => {\n            try {\n                console.log(`Editor ${event.type} event detected`);\n                // Get the current active cell from the tracker\n                const cell = notebookTracker.activeCell;\n                if (!cell || !cell.editor)\n                    return;\n                // Find the inner EditorView instance\n                const editor = cell.editor;\n                const view = editor.editor;\n                if (!view) {\n                    console.warn(\"Could not access inner EditorView in event handler\");\n                    return;\n                }\n                // Log the cursor context\n                logCmContext(view);\n            }\n            catch (error) {\n                console.error(\"Error in editor event handler:\", error);\n            }\n        };\n        // --- Setup event listeners on active cell ---\n        const setupCellListeners = (cell) => {\n            if (!cell)\n                return;\n            // Clean up previous listeners\n            cleanupPreviousListeners();\n            if (cell.editor) {\n                try {\n                    // Find editor DOM node - typically has class jp-Editor or CodeMirrorEditor\n                    const cellNode = cell.node;\n                    const editorNode = cellNode.querySelector('.jp-Editor') ||\n                        cellNode.querySelector('.jp-InputArea-editor');\n                    if (editorNode) {\n                        console.log(\"Found editor DOM node, attaching event listeners\");\n                        // Store reference to active editor node\n                        activeCellEditorNode = editorNode;\n                        // Add event listeners for key and mouse events\n                        editorNode.addEventListener('keydown', handleEditorEvent);\n                        editorNode.addEventListener('mouseup', handleEditorEvent);\n                        // Try to log immediate context if EditorView available\n                        const view = cell.editor.editor;\n                        if (view) {\n                            console.log(\"Logging initial context after setting up listeners:\");\n                            logCmContext(view);\n                        }\n                    }\n                    else {\n                        console.warn(\"Could not find editor DOM node in cell\");\n                    }\n                }\n                catch (error) {\n                    console.error(\"Error setting up cell listeners:\", error);\n                }\n            }\n        };\n        // --- Minimal listener for active cell changes (to attach DOM listeners) ---\n        notebookTracker.activeCellChanged.connect((tracker, cell) => {\n            console.log(`Active cell changed, setting up event listeners...`);\n            setupCellListeners(cell);\n        });\n        // --- Wait for app to start, then handle current notebook changes ---\n        app.started.then(() => {\n            console.log(\"App started, connecting notebookTracker.currentChanged listener.\");\n            notebookTracker.currentChanged.connect((tracker, panel) => {\n                console.log(\"Notebook current widget changed.\");\n                // Clean up previous listeners\n                cleanupPreviousListeners();\n                if (panel && panel.content) {\n                    const cell = panel.content.activeCell;\n                    console.log(\"Setting up listeners for initial active cell in new notebook\");\n                    setupCellListeners(cell);\n                }\n            });\n        });\n    } // End activate function\n}; // End plugin object definition\nexport default plugin;\n"],"names":[],"sourceRoot":""}