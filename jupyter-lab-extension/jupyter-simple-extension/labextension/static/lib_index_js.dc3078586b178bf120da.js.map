{"version":3,"file":"lib_index_js.dc3078586b178bf120da.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA,8CAA8C,oBAAoB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA,0DAA0D,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;;;;ACrEJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;;;;AC7Ib;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,+BAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,YAAY;AACnE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;AChCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf,mBAAmB;AACnB;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,IAAI,mBAAmB;AACvB,IAAI,+BAA+B;AACnC;;;;;;;;;;;ACda;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,wBAAwB,mBAAO,CAAC,4FAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,CAAC;;;;;;;;;;;ACjBY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,mBAAmB,mBAAO,CAAC,kFAAsB;AACjD,qBAAqB,mBAAO,CAAC,sFAAwB;AACrD,yBAAyB,mBAAO,CAAC,iDAAkB;AACnD,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,mBAAmB,mBAAO,CAAC,qCAAY;AACvC,+BAA+B,mBAAO,CAAC,6DAAwB;AAC/D,YAAY,YAAY;AACxB;AACA,mBAAO,CAAC,6CAAoB;AAC5B;AACA,mBAAmB,mBAAO,CAAC,yCAAc;AACzC,6CAA4C,EAAE,qCAAqC,kCAAkC,EAAC;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA,kBAAe;;;;;;;;;;;ACrCF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,0BAA0B;AAC1B,iBAAiB,mBAAO,CAAC,6DAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;ACxCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,IAAI,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,EAAE;AAClD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,sBAAsB,UAAU,qBAAqB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,6EAA6E;AAC3F,cAAc,mFAAmF;AACjG,cAAc,kFAAkF;AAChG,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,MAAM,EAAE,SAAS;AAC7E;AACA,iBAAiB;AACjB;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS,UAAU,KAAK;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM,UAAU,KAAK;AACxE,gCAAgC,0DAA0D;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oBAAoB,UAAU,mBAAmB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,SAAS,aAAa,oBAAoB;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,MAAM,KAAK,QAAQ;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,cAAc,KAAK,QAAQ;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,QAAQ;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,qBAAqB;AACtF;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA,wBAAwB;;;;;;;;;;;ACnVX;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,kBAAkB,mBAAO,CAAC,wEAAiB;AAC3C,iBAAiB,mBAAO,CAAC,6DAAQ;AACjC,oCAAoC,mBAAO,CAAC,sEAAW;AACvD,gBAAgB,mBAAO,CAAC,+BAAS;AACjC,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,qBAAqB,mBAAO,CAAC,yCAAc;AAC3C,0BAA0B,mBAAO,CAAC,mDAAmB;AACrD,6BAA6B,mBAAO,CAAC,yDAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,aAAa;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iBAAiB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,KAAK;AACpE,kEAAkE,QAAQ;AAC1E,mEAAmE,KAAK;AACxE,6EAA6E,KAAK;AAClF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kCAAkC,EAAE,0CAA0C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,cAAc,+GAA+G;AAC7H,cAAc,oDAAoD,wBAAwB,yBAAyB,6BAA6B;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4EAA4E,cAAc;AAC1F;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oBAAoB,GAAG;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC,iBAAiB;AACjB,6BAA6B;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa,MAAM,KAAK;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B","sources":["webpack://jupyter-simple-extension/./lib/api-client.js","webpack://jupyter-simple-extension/./lib/cell-context-tracker.js","webpack://jupyter-simple-extension/./lib/commands.js","webpack://jupyter-simple-extension/./lib/globals.js","webpack://jupyter-simple-extension/./lib/icons.js","webpack://jupyter-simple-extension/./lib/index.js","webpack://jupyter-simple-extension/./lib/markdown-config.js","webpack://jupyter-simple-extension/./lib/popup-menu-manager.js","webpack://jupyter-simple-extension/./lib/sidebar-widget.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiClient = void 0;\n/**\n * API client for interacting with the backend LLM service\n */\nclass ApiClient {\n    constructor(baseUrl = 'http://localhost:8000') {\n        this.baseUrl = baseUrl;\n    }\n    /**\n     * Stream a chat response from the mock LLM\n     * @param message The user message to send\n     * @param context Optional context information\n     * @param onChunk Callback for each text chunk received\n     * @param onComplete Callback when streaming is complete\n     * @param onError Callback for errors\n     */\n    async streamChat(message, context = null, onChunk, onComplete, onError) {\n        try {\n            const response = await fetch(`${this.baseUrl}/chat`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    message,\n                    context\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`API error: ${response.statusText}`);\n            }\n            if (!response.body) {\n                throw new Error('ReadableStream not supported in this browser.');\n            }\n            // Set up stream reading\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let done = false;\n            while (!done) {\n                const { value, done: readerDone } = await reader.read();\n                done = readerDone;\n                if (value) {\n                    const chunk = decoder.decode(value, { stream: !done });\n                    onChunk(chunk);\n                }\n            }\n            onComplete();\n        }\n        catch (error) {\n            onError(error instanceof Error ? error : new Error(String(error)));\n        }\n    }\n    /**\n     * Simple health check for the API\n     * @returns A promise that resolves to true if the API is healthy\n     */\n    async healthCheck() {\n        try {\n            const response = await fetch(`${this.baseUrl}/health`);\n            return response.ok;\n        }\n        catch (error) {\n            console.error('API health check failed:', error);\n            return false;\n        }\n    }\n}\nexports.ApiClient = ApiClient;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CellContextTracker = void 0;\n/**\n * Tracks cell context and cursor position within Jupyter notebooks\n */\nclass CellContextTracker {\n    constructor(app, notebookTracker) {\n        this.activeCellEditorNode = null;\n        this.lastCellContext = null;\n        this._isDisposed = false;\n        /**\n         * Handles editor events (keydown, mouseup)\n         */\n        this.handleEditorEvent = (event) => {\n            try {\n                // Get the current active cell from the tracker\n                const cell = this.notebookTracker.activeCell;\n                if (!cell || !cell.editor)\n                    return;\n                // Find the inner EditorView instance\n                const editor = cell.editor;\n                const view = editor.editor;\n                if (!view)\n                    return;\n                // Get and store the cursor context\n                this.lastCellContext = this.getCmContext(view);\n            }\n            catch (error) {\n                console.error(\"Error in editor event handler:\", error);\n            }\n        };\n        this.notebookTracker = notebookTracker;\n        this.setupTrackers();\n    }\n    /**\n     * Whether this object has been disposed\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Sets up all the necessary event trackers\n     */\n    setupTrackers() {\n        // Handle active cell changes\n        this.notebookTracker.activeCellChanged.connect(this.setupCellListeners, this);\n        // Handle notebook changes\n        this.notebookTracker.currentChanged.connect(this.handleNotebookChange, this);\n    }\n    /**\n     * Handles notebook changes\n     */\n    handleNotebookChange(tracker, panel) {\n        this.cleanupPreviousListeners();\n        if (panel && panel.content) {\n            const cell = panel.content.activeCell;\n            this.setupCellListeners(tracker, cell);\n        }\n    }\n    /**\n     * Sets up event listeners on the active cell\n     */\n    setupCellListeners(_tracker, cell) {\n        if (!cell)\n            return;\n        this.cleanupPreviousListeners();\n        if (cell.editor) {\n            try {\n                const cellNode = cell.node;\n                const editorNode = cellNode.querySelector('.jp-Editor') ||\n                    cellNode.querySelector('.jp-InputArea-editor');\n                if (editorNode) {\n                    this.activeCellEditorNode = editorNode;\n                    // Add event listeners for key and mouse events\n                    editorNode.addEventListener('keydown', this.handleEditorEvent);\n                    editorNode.addEventListener('mouseup', this.handleEditorEvent);\n                    // Try to capture immediate context if EditorView available\n                    const view = cell.editor.editor;\n                    if (view) {\n                        this.lastCellContext = this.getCmContext(view);\n                    }\n                }\n            }\n            catch (error) {\n                console.error(\"Error setting up cell listeners:\", error);\n            }\n        }\n    }\n    /**\n     * Cleans up event listeners from the previous active cell\n     */\n    cleanupPreviousListeners() {\n        if (this.activeCellEditorNode) {\n            this.activeCellEditorNode.removeEventListener('keydown', this.handleEditorEvent);\n            this.activeCellEditorNode.removeEventListener('mouseup', this.handleEditorEvent);\n            this.activeCellEditorNode = null;\n        }\n    }\n    /**\n     * Gets context information from CodeMirror EditorView\n     */\n    getCmContext(view) {\n        const state = view.state;\n        const offset = state.selection.main.head;\n        const fullText = state.doc.toString();\n        const line = state.doc.lineAt(offset);\n        const position = {\n            line: line.number - 1,\n            column: offset - line.from,\n            offset: offset\n        };\n        const contextRadius = 100;\n        const start = Math.max(0, offset - contextRadius);\n        const end = Math.min(fullText.length, offset + contextRadius);\n        return {\n            text: fullText,\n            position: position,\n            contextBefore: fullText.substring(start, offset),\n            contextAfter: fullText.substring(offset, end)\n        };\n    }\n    /**\n     * Gets the current cell context\n     */\n    getCurrentCellContext() {\n        return this.lastCellContext;\n    }\n    /**\n     * Disposes all resources\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.cleanupPreviousListeners();\n        this.notebookTracker.activeCellChanged.disconnect(this.setupCellListeners, this);\n        this.notebookTracker.currentChanged.disconnect(this.handleNotebookChange, this);\n    }\n}\nexports.CellContextTracker = CellContextTracker;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerCommands = registerCommands;\nconst icons_1 = require(\"./icons\");\n/**\n * Registers commands for the extension\n */\nfunction registerCommands(app, palette, launcher, sidebarWidget) {\n    // Add command to toggle the sidebar\n    app.commands.addCommand('simple-extension:toggle-sidebar', {\n        label: 'Toggle AI Assistant Sidebar',\n        icon: icons_1.extensionIcon,\n        execute: () => {\n            if (sidebarWidget.isAttached) {\n                sidebarWidget.parent = null;\n            }\n            else {\n                app.shell.add(sidebarWidget, 'left', { rank: 9999 });\n            }\n        }\n    });\n    // Add the command to the command palette\n    palette.addItem({\n        command: 'simple-extension:toggle-sidebar',\n        category: 'Extension'\n    });\n    // Add a launcher item\n    launcher.add({\n        command: 'simple-extension:toggle-sidebar',\n        category: 'Other',\n        rank: 9999\n    });\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.globals = void 0;\nexports.initGlobals = initGlobals;\n/**\n * Global references to key components in the application\n */\nexports.globals = {};\n/**\n * Initialize global references\n */\nfunction initGlobals(app, notebookTracker) {\n    exports.globals.app = app;\n    exports.globals.notebookTracker = notebookTracker;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extensionIcon = void 0;\nconst ui_components_1 = require(\"@jupyterlab/ui-components\");\n// ===============================\n// Icon Definition\n// ===============================\nconst iconSvgStr = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chat-left-text\" viewBox=\"0 0 16 16\">' +\n    '<path d=\"M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>' +\n    '<path d=\"M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>' +\n    '</svg>';\n/**\n * Icon for the AI Assistant extension\n */\nexports.extensionIcon = new ui_components_1.LabIcon({\n    name: 'simple:icon',\n    svgstr: iconSvgStr\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiClient = void 0;\nconst launcher_1 = require(\"@jupyterlab/launcher\");\nconst apputils_1 = require(\"@jupyterlab/apputils\");\nconst notebook_1 = require(\"@jupyterlab/notebook\");\nconst docmanager_1 = require(\"@jupyterlab/docmanager\");\nconst sidebar_widget_1 = require(\"./sidebar-widget\");\nconst globals_1 = require(\"./globals\");\nconst commands_1 = require(\"./commands\");\nconst cell_context_tracker_1 = require(\"./cell-context-tracker\");\n// import { ApiClient } from './api-client';\n// Import the main CSS file\nrequire(\"../style/index.css\");\n// Export ApiClient for use by other components\nvar api_client_1 = require(\"./api-client\");\nObject.defineProperty(exports, \"ApiClient\", { enumerable: true, get: function () { return api_client_1.ApiClient; } });\n/**\n * Initialization data for the jupyter-simple-extension extension.\n */\nconst plugin = {\n    id: 'jupyter-simple-extension:plugin',\n    autoStart: true,\n    requires: [launcher_1.ILauncher, apputils_1.ICommandPalette, notebook_1.INotebookTracker, docmanager_1.IDocumentManager],\n    activate: (jupyterApp, launcher, palette, tracker, docManager) => {\n        console.log('JupyterLab extension jupyter-simple-extension is activated!');\n        // Initialize global references\n        (0, globals_1.initGlobals)(jupyterApp, tracker);\n        // Initialize cell context tracker\n        globals_1.globals.cellContextTracker = new cell_context_tracker_1.CellContextTracker(jupyterApp, tracker);\n        // Create and add sidebar widget\n        const sidebarWidget = new sidebar_widget_1.SimpleSidebarWidget(docManager);\n        jupyterApp.shell.add(sidebarWidget, 'left', { rank: 9999 });\n        // Register commands\n        (0, commands_1.registerCommands)(jupyterApp, palette, launcher, sidebarWidget);\n    }\n};\nexports.default = plugin;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configureMarked = configureMarked;\nexports.preprocessMarkdown = preprocessMarkdown;\nconst marked_1 = require(\"marked\");\n/**\n * Configure marked with better rendering options for code blocks\n */\nfunction configureMarked() {\n    // Configure marked options\n    marked_1.marked.setOptions({\n        gfm: true, // Enable GitHub Flavored Markdown\n        breaks: true, // Add <br> on single line breaks\n        pedantic: false, // Conform to original markdown spec\n        async: false, // Disable async rendering\n        silent: false // Enable error reporting\n    });\n}\n/**\n * Pre-process markdown text to fix common issues with streaming content\n */\nfunction preprocessMarkdown(text) {\n    // Handle code blocks first\n    let inCodeBlock = false;\n    const lines = text.split('\\n');\n    const processedLines = lines.map((line, i) => {\n        // Check for code block markers\n        if (line.trim().startsWith('```')) {\n            inCodeBlock = !inCodeBlock;\n            // Preserve language specification\n            return line.trim();\n        }\n        // If we're in a code block, preserve the line as is\n        if (inCodeBlock) {\n            return line;\n        }\n        // Outside code blocks, handle list items\n        return line.replace(/([^\\n\\s])-\\s/g, '$1\\n- ');\n    });\n    return processedLines.join('\\n');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PopupMenuManager = void 0;\nconst globals_1 = require(\"./globals\");\n/**\n * Manages the state and interactions of the multi-level popup menu.\n */\nclass PopupMenuManager {\n    constructor(docManager, widgetNode, callbacks) {\n        this.currentMenuLevel = 'top';\n        this.currentMenuPath = '';\n        this.menuHistory = [];\n        this.currentNotebook = null;\n        this.docManager = docManager;\n        this.widgetNode = widgetNode;\n        this.callbacks = callbacks;\n        this.popupMenuContainer = document.createElement('div');\n        this.popupMenuContainer.className = 'jp-llm-ext-popup-menu-container';\n        this.popupMenuContainer.style.display = 'none';\n        // Attach to the widget node instead of the body\n        this.widgetNode.appendChild(this.popupMenuContainer);\n        document.addEventListener('click', this.handleDocumentClick.bind(this), true);\n        if (globals_1.globals.notebookTracker) {\n            this.currentNotebook = globals_1.globals.notebookTracker.currentWidget;\n            globals_1.globals.notebookTracker.currentChanged.connect((_, notebook) => {\n                this.currentNotebook = notebook;\n            });\n        }\n    }\n    dispose() {\n        document.removeEventListener('click', this.handleDocumentClick.bind(this), true);\n        // Remove from widgetNode if attached\n        if (this.popupMenuContainer.parentNode === this.widgetNode) {\n            this.popupMenuContainer.parentNode.removeChild(this.popupMenuContainer);\n        }\n    }\n    handleDocumentClick(event) {\n        if (this.popupMenuContainer.style.display !== 'none' && !this.popupMenuContainer.contains(event.target)) {\n            const atButton = this.widgetNode.querySelector('#jp-llm-ext-at-button');\n            if (atButton && atButton.contains(event.target)) {\n                console.log('POPUP: Click was on the @ button, not hiding.');\n                return;\n            }\n            console.log('POPUP: Click detected outside the menu.');\n            this.hidePopupMenu();\n        }\n    }\n    async showPopupMenu(x, y) {\n        console.log(`POPUP: Showing menu at (${x}, ${y})`);\n        if (this.popupMenuContainer.style.display === 'none') {\n            this.currentMenuLevel = 'top';\n            this.currentMenuPath = '';\n            this.menuHistory = [];\n            await this.setCurrentDirectoryPath();\n        }\n        await this.renderMenuContent();\n        // Ensure it's attached to the widget node if somehow detached\n        this.widgetNode.appendChild(this.popupMenuContainer);\n        // Positioning might need adjustment relative to the widgetNode now\n        this.popupMenuContainer.style.position = 'absolute';\n        this.popupMenuContainer.style.left = `${x}px`;\n        this.popupMenuContainer.style.top = `${y}px`;\n        this.popupMenuContainer.style.display = 'block';\n    }\n    hidePopupMenu() {\n        if (this.popupMenuContainer.style.display !== 'none') {\n            console.log('POPUP: Hiding menu.');\n            this.popupMenuContainer.style.display = 'none';\n            // No need to explicitly remove from widgetNode unless causing issues\n            // If performance becomes an issue with many menus, consider removing/re-adding\n            // if (this.popupMenuContainer.parentNode === this.widgetNode) {\n            //     this.widgetNode.removeChild(this.popupMenuContainer);\n            // }\n        }\n    }\n    async renderMenuContent() {\n        console.log(`POPUP: Rendering content for level: ${this.currentMenuLevel}, path: ${this.currentMenuPath}`);\n        this.popupMenuContainer.innerHTML = '';\n        if (this.menuHistory.length > 0) {\n            const backButton = this.createMenuItem('← Back', 'navigate-back', '', 'Return to previous menu');\n            this.popupMenuContainer.appendChild(backButton);\n        }\n        if (this.currentMenuLevel === 'files' || this.currentMenuLevel === 'directories') {\n            const pathIndicator = document.createElement('div');\n            pathIndicator.className = 'jp-llm-ext-popup-menu-path';\n            pathIndicator.textContent = `Path: ${this.currentMenuPath || '/'}`;\n            this.popupMenuContainer.appendChild(pathIndicator);\n        }\n        if (this.currentMenuLevel === 'top') {\n            this.renderTopLevelItems();\n        }\n        else if (this.currentMenuLevel === 'files' || this.currentMenuLevel === 'directories') {\n            await this.renderDirectoryBrowserItems();\n        }\n    }\n    renderTopLevelItems() {\n        const topLevelCommands = [\n            { label: 'Code', description: 'Insert selected code', actionId: 'insert-code' },\n            { label: 'Cell', description: 'Insert entire cell content', actionId: 'insert-cell' },\n            { label: 'File', description: 'Browse and select a file', actionId: 'browse-files' },\n            { label: 'Directory', description: 'Browse and select a directory', actionId: 'browse-directories' }\n        ];\n        topLevelCommands.forEach(cmd => {\n            const item = this.createMenuItem(cmd.label, cmd.actionId, '', cmd.description);\n            this.popupMenuContainer.appendChild(item);\n        });\n    }\n    async renderDirectoryBrowserItems() {\n        const loadingItem = this.createMenuItem('Loading...', 'loading', '', '');\n        loadingItem.style.pointerEvents = 'none';\n        this.popupMenuContainer.appendChild(loadingItem);\n        try {\n            const filterType = this.currentMenuLevel === 'files' ? 'file' : 'directory';\n            const contents = await this.listCurrentDirectoryContents(this.currentMenuPath, filterType);\n            this.popupMenuContainer.removeChild(loadingItem);\n            if (contents && contents.length > 0) {\n                contents.forEach(item => {\n                    const itemName = item.name;\n                    const itemType = item.type;\n                    const itemPath = item.path;\n                    const icon = itemType === 'directory' ? '📁' : '📄';\n                    const actionId = itemType === 'directory' ? 'select-directory' : 'select-file';\n                    const menuItem = this.createMenuItem(`${icon} ${itemName}`, actionId, itemPath);\n                    this.popupMenuContainer.appendChild(menuItem);\n                });\n            }\n            else {\n                const emptyItem = this.createMenuItem(`No ${filterType}s found`, 'empty', '', '');\n                emptyItem.style.pointerEvents = 'none';\n                this.popupMenuContainer.appendChild(emptyItem);\n            }\n        }\n        catch (error) {\n            if (this.popupMenuContainer.contains(loadingItem)) {\n                this.popupMenuContainer.removeChild(loadingItem);\n            }\n            const errorItem = this.createMenuItem(`Error: ${error}`, 'error', '', '');\n            errorItem.style.color = 'red';\n            errorItem.style.pointerEvents = 'none';\n            this.popupMenuContainer.appendChild(errorItem);\n            console.error('POPUP: Error loading directory contents:', error);\n        }\n    }\n    createMenuItem(text, actionId, path = '', description = '') {\n        const item = document.createElement('div');\n        item.className = 'jp-llm-ext-popup-menu-item';\n        item.dataset.actionId = actionId;\n        if (path) {\n            item.dataset.path = path;\n        }\n        item.onclick = (event) => this.handleMenuClick(event);\n        const labelSpan = document.createElement('span');\n        labelSpan.textContent = text;\n        item.appendChild(labelSpan);\n        if (description) {\n            labelSpan.style.fontWeight = 'bold';\n            const descSpan = document.createElement('span');\n            descSpan.textContent = description;\n            descSpan.style.display = 'block';\n            descSpan.style.fontSize = '0.8em';\n            descSpan.style.color = 'var(--jp-ui-font-color2)';\n            item.appendChild(descSpan);\n        }\n        return item;\n    }\n    async handleMenuClick(event) {\n        const target = event.currentTarget;\n        const actionId = target.dataset.actionId;\n        const path = target.dataset.path || '';\n        console.log(`POPUP: Menu item clicked. Action: ${actionId}, Path: ${path}`);\n        switch (actionId) {\n            case 'navigate-back':\n                this.navigateBackMenu();\n                break;\n            case 'insert-code': {\n                const selectedText = this.callbacks.getSelectedText ? this.callbacks.getSelectedText() : null;\n                if (selectedText) {\n                    this.callbacks.insertCode(selectedText);\n                }\n                else {\n                    const cellContent = this.callbacks.getCurrentCellContent ? this.callbacks.getCurrentCellContent() : null;\n                    if (cellContent) {\n                        this.callbacks.insertCode(cellContent);\n                    }\n                }\n                this.hidePopupMenu();\n                break;\n            }\n            case 'insert-cell': {\n                const cellContent = this.callbacks.getCurrentCellContent ? this.callbacks.getCurrentCellContent() : null;\n                if (cellContent) {\n                    this.callbacks.insertCell(cellContent);\n                }\n                this.hidePopupMenu();\n                break;\n            }\n            case 'browse-files':\n                await this.navigateMenu('files', this.currentMenuPath || '');\n                break;\n            case 'browse-directories':\n                await this.navigateMenu('directories', this.currentMenuPath || '');\n                break;\n            case 'select-file':\n                if (path) {\n                    this.callbacks.insertFilePath(path);\n                    this.hidePopupMenu();\n                }\n                else {\n                    console.error('POPUP: File selected but path is missing.');\n                }\n                break;\n            case 'select-directory':\n                if (path) {\n                    await this.navigateMenu('files', path);\n                }\n                else {\n                    console.error('POPUP: Directory selected but path is missing.');\n                }\n                break;\n            case 'placeholder-action':\n                console.log('Placeholder action triggered.');\n                this.hidePopupMenu();\n                break;\n            case 'loading':\n            case 'empty':\n            case 'error':\n                break;\n            default:\n                console.warn('Unknown menu action:', actionId);\n                this.hidePopupMenu();\n                break;\n        }\n        event.stopPropagation();\n    }\n    async navigateMenu(level, path) {\n        console.log(`POPUP: Navigating to level: ${level}, path: ${path}`);\n        this.menuHistory.push({ level: this.currentMenuLevel, path: this.currentMenuPath });\n        this.currentMenuLevel = level;\n        this.currentMenuPath = path;\n        await this.renderMenuContent();\n    }\n    navigateBackMenu() {\n        const previousState = this.menuHistory.pop();\n        if (previousState) {\n            console.log(`POPUP: Navigating back to level: ${previousState.level}, path: ${previousState.path}`);\n            this.currentMenuLevel = previousState.level;\n            this.currentMenuPath = previousState.path;\n            this.renderMenuContent();\n        }\n        else {\n            console.log('POPUP: Already at the top level.');\n            this.hidePopupMenu();\n        }\n    }\n    async listCurrentDirectoryContents(basePath, filterType) {\n        console.log(`POPUP: Listing directory contents for path: '${basePath}', filter: ${filterType || 'all'}`);\n        try {\n            const effectivePath = basePath === '/' ? '' : basePath;\n            const contents = await this.docManager.services.contents.get(effectivePath);\n            if (contents.type === 'directory') {\n                let items = contents.content.map((item) => ({\n                    name: item.name,\n                    path: item.path,\n                    type: item.type\n                }));\n                items = items.filter((item) => item.type === 'file' || item.type === 'directory');\n                if (filterType) {\n                    items = items.filter((item) => item.type === filterType);\n                }\n                console.log('Directory items:', items);\n                return items.sort((a, b) => a.name.localeCompare(b.name));\n            }\n            else {\n                console.error('Path is not a directory:', basePath);\n                return null;\n            }\n        }\n        catch (error) {\n            console.error('Error listing directory contents:', error);\n            return null;\n        }\n    }\n    async setCurrentDirectoryPath() {\n        var _a;\n        let dirPath = null;\n        const app = globals_1.globals.app;\n        if (!app) {\n            console.error('POPUP: Application reference not available');\n            this.currentMenuPath = '';\n            return;\n        }\n        const currentShellWidget = app.shell.currentWidget;\n        if (currentShellWidget) {\n            const widgetContext = this.docManager.contextForWidget(currentShellWidget);\n            if (widgetContext) {\n                const path = widgetContext.path;\n                dirPath = this.getParentDirectory(path);\n                console.log(`POPUP: Path from current widget context: ${path} -> ${dirPath}`);\n            }\n        }\n        if (dirPath === null && this.currentNotebook && this.currentNotebook.context) {\n            const notebookPath = this.currentNotebook.context.path;\n            if (typeof notebookPath === 'string') {\n                dirPath = this.getParentDirectory(notebookPath);\n                console.log(`POPUP: Path from active notebook: ${notebookPath} -> ${dirPath}`);\n            }\n        }\n        if (dirPath === null) {\n            try {\n                const leftWidgets = Array.from(app.shell.widgets('left'));\n                const fileBrowserWidget = leftWidgets.find(widget => widget.id === 'filebrowser');\n                if (fileBrowserWidget && ((_a = fileBrowserWidget.model) === null || _a === void 0 ? void 0 : _a.path)) {\n                    dirPath = fileBrowserWidget.model.path;\n                    console.log(`POPUP: Path from file browser widget model: ${dirPath}`);\n                }\n                else {\n                    console.log('POPUP: File browser widget path not directly accessible.');\n                }\n            }\n            catch (e) {\n                console.warn('POPUP: Could not get path from file browser.', e);\n            }\n        }\n        if (dirPath === null) {\n            dirPath = '';\n            console.log('POPUP: Falling back to server root path.');\n        }\n        this.currentMenuPath = dirPath;\n        console.log(`POPUP: Initial current menu path set to: '${this.currentMenuPath}'`);\n    }\n    getParentDirectory(path) {\n        if (!path)\n            return '';\n        const lastSlash = Math.max(path.lastIndexOf('/'), path.lastIndexOf('\\\\\\\\'));\n        if (lastSlash === -1)\n            return ''; // No directory part, likely root or just a filename\n        return path.substring(0, lastSlash);\n    }\n}\nexports.PopupMenuManager = PopupMenuManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleSidebarWidget = void 0;\nconst widgets_1 = require(\"@lumino/widgets\");\nconst marked_1 = require(\"marked\");\nconst dompurify_1 = __importDefault(require(\"dompurify\"));\nconst icons_1 = require(\"./icons\");\nconst globals_1 = require(\"./globals\");\nconst api_client_1 = require(\"./api-client\");\nconst markdown_config_1 = require(\"./markdown-config\");\nconst popup_menu_manager_1 = require(\"./popup-menu-manager\");\n// Configure marked with our settings\n(0, markdown_config_1.configureMarked)();\n/**\n * Main sidebar widget for the AI chat interface\n */\nclass SimpleSidebarWidget extends widgets_1.Widget {\n    constructor(docManager) {\n        super();\n        this.isMarkdownMode = false;\n        this.isInputExpanded = false;\n        this.chatHistory = [];\n        this.currentChatId = '';\n        this.isHistoryViewActive = false;\n        /**\n         * Handles keyboard shortcuts\n         */\n        this.handleKeyDown = (event) => {\n            var _a, _b;\n            // Check for Ctrl+L (for selected code)\n            if (event.ctrlKey && event.key.toLowerCase() === 'l') {\n                // Prevent default browser behavior\n                event.preventDefault();\n                event.stopPropagation();\n                // Get the current active cell\n                const cell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n                if (!cell || !cell.editor) {\n                    return;\n                }\n                try {\n                    // Get the CodeMirror editor instance\n                    const editor = cell.editor;\n                    const view = editor.editor;\n                    if (!view) {\n                        return;\n                    }\n                    // Check if there's a selection\n                    const state = view.state;\n                    const selection = state.selection;\n                    if (!selection.main.empty) {\n                        // If there's a selection, use @code\n                        const from = selection.main.from;\n                        const to = selection.main.to;\n                        const selectedText = state.doc.sliceString(from, to);\n                        this.appendToInput(`@code\\n${selectedText}`);\n                        this.showKeyboardShortcutIndicator('Selected code inserted');\n                    }\n                    else {\n                        // If no selection, use @cell\n                        const cellContext = (_b = globals_1.globals.cellContextTracker) === null || _b === void 0 ? void 0 : _b.getCurrentCellContext();\n                        if (cellContext) {\n                            this.appendToInput(`@cell\\n${cellContext.text}`);\n                            this.showKeyboardShortcutIndicator('Cell content inserted');\n                        }\n                    }\n                    // Ensure the sidebar is visible and focused\n                    if (this.isHidden) {\n                        this.show();\n                    }\n                    this.inputField.focus();\n                }\n                catch (error) {\n                    console.error('Error handling keyboard shortcut:', error);\n                }\n            }\n        };\n        this.docManager = docManager;\n        this.id = 'simple-sidebar';\n        this.title.label = '';\n        this.title.caption = 'AI Chat Interface';\n        this.title.icon = icons_1.extensionIcon;\n        this.title.closable = true;\n        // Add the main CSS class for styling\n        this.addClass('jp-llm-ext-sidebar');\n        // Initialize API client\n        this.apiClient = new api_client_1.ApiClient();\n        // Initialize container elements before creating layout\n        this.messageContainer = document.createElement('div');\n        this.inputContainer = document.createElement('div');\n        this.inputField = document.createElement('textarea');\n        this.titleInput = document.createElement('input');\n        this.historyContainer = document.createElement('div');\n        this.keyboardShortcutIndicator = document.createElement('div');\n        this.keyboardShortcutIndicator.className = 'jp-llm-ext-keyboard-shortcut-indicator';\n        this.node.appendChild(this.keyboardShortcutIndicator);\n        // Create settings modal\n        this.settingsModalContainer = this.createSettingsModal();\n        this.node.appendChild(this.settingsModalContainer);\n        // Instantiate the PopupMenuManager with callbacks\n        this.popupMenuManager = new popup_menu_manager_1.PopupMenuManager(this.docManager, this.node, {\n            insertCode: (code) => this.appendToInput(`@code\\n${code}`),\n            insertCell: (content) => this.appendToInput(`@cell\\n${content}`),\n            insertFilePath: (path) => this.appendToInput(`@file\\n${path}`),\n            insertDirectoryPath: (path) => this.appendToInput(`@directory\\n${path}`), // If needed\n            getSelectedText: () => this.getSelectedText(),\n            getCurrentCellContent: () => this.getCurrentCellContent(),\n        });\n        // Create a new chat on start\n        this.createNewChat();\n        this.node.appendChild(this.createLayout());\n        // Pop-up menu will be attached to document.body when shown\n        // Add keyboard shortcut listener\n        document.addEventListener('keydown', this.handleKeyDown);\n    }\n    /**\n     * Shows a visual indicator for keyboard shortcuts\n     */\n    showKeyboardShortcutIndicator(text) {\n        this.keyboardShortcutIndicator.textContent = text;\n        this.keyboardShortcutIndicator.classList.add('visible');\n        // Hide after 1 second\n        setTimeout(() => {\n            this.keyboardShortcutIndicator.classList.remove('visible');\n        }, 1000);\n    }\n    /**\n     * Disposes all resources\n     */\n    dispose() {\n        // Remove keyboard shortcut listener\n        document.removeEventListener('keydown', this.handleKeyDown);\n        // Remove keyboard shortcut indicator\n        if (this.keyboardShortcutIndicator.parentNode) {\n            this.keyboardShortcutIndicator.parentNode.removeChild(this.keyboardShortcutIndicator);\n        }\n        // Dispose the popup menu manager\n        if (this.popupMenuManager) {\n            this.popupMenuManager.dispose();\n        }\n        super.dispose();\n    }\n    /**\n     * Creates the main layout for the sidebar\n     */\n    createLayout() {\n        // Create the main container\n        const mainContent = document.createElement('div');\n        // The main class 'jp-llm-ext-sidebar' is added to this.node in the constructor\n        // This container can have its own class if needed for further nesting/styling\n        mainContent.className = 'jp-llm-ext-content-wrapper';\n        // Create title input container\n        const titleContainer = document.createElement('div');\n        titleContainer.className = 'jp-llm-ext-title-container';\n        // Set up title input\n        this.titleInput.className = 'chat-title-input'; // Assuming this is styled correctly in CSS\n        this.titleInput.type = 'text';\n        this.titleInput.placeholder = 'Chat title';\n        this.titleInput.value = 'New Chat';\n        this.titleInput.addEventListener('change', () => this.updateCurrentChatTitle());\n        titleContainer.appendChild(this.titleInput);\n        // Configure top action buttons (New Chat & History)\n        const topActionsContainer = document.createElement('div');\n        topActionsContainer.className = 'jp-llm-ext-top-actions-container';\n        const newChatButton = document.createElement('button');\n        newChatButton.className = 'jp-Button jp-llm-ext-action-button';\n        newChatButton.textContent = '+ New Chat';\n        newChatButton.title = 'Start a new chat';\n        newChatButton.addEventListener('click', () => this.createNewChat());\n        const historyButton = document.createElement('button');\n        historyButton.className = 'jp-Button jp-llm-ext-action-button';\n        historyButton.textContent = 'History';\n        historyButton.title = 'View chat history';\n        historyButton.addEventListener('click', () => this.toggleHistoryView());\n        topActionsContainer.appendChild(newChatButton);\n        topActionsContainer.appendChild(historyButton);\n        // Configure message container\n        this.messageContainer.className = 'jp-llm-ext-message-container';\n        // Configure history container\n        this.historyContainer.className = 'jp-llm-ext-history-container';\n        this.historyContainer.style.display = 'none'; // Initially hidden\n        // Configure input container\n        this.inputContainer.className = 'jp-llm-ext-input-container';\n        // Create controls container\n        const controlsContainer = this.createControlsContainer();\n        // Configure input field\n        this.inputField.placeholder = 'Ask me anything...';\n        this.inputField.style.flexGrow = '1';\n        this.inputField.style.padding = '5px';\n        this.inputField.style.border = '1px solid #ccc';\n        this.inputField.style.borderRadius = '3px';\n        this.inputField.style.resize = 'none';\n        this.inputField.rows = 1;\n        this.inputField.style.overflowY = 'auto';\n        // Add keypress listener to input field\n        this.inputField.addEventListener('keypress', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                this.handleSendMessage();\n            }\n        });\n        // Create send button container\n        const inputActionsContainer = document.createElement('div');\n        inputActionsContainer.className = 'jp-llm-ext-input-actions-container';\n        // Create send button\n        const sendButton = document.createElement('button');\n        sendButton.className = 'jp-Button jp-llm-ext-send-button';\n        sendButton.textContent = 'Send';\n        sendButton.addEventListener('click', () => this.handleSendMessage());\n        // Add button to actions container\n        inputActionsContainer.appendChild(sendButton);\n        // Assemble the input components\n        this.inputContainer.appendChild(controlsContainer);\n        this.inputContainer.appendChild(this.inputField);\n        this.inputContainer.appendChild(inputActionsContainer);\n        // Assemble all components\n        mainContent.appendChild(topActionsContainer);\n        mainContent.appendChild(titleContainer);\n        mainContent.appendChild(this.messageContainer);\n        mainContent.appendChild(this.historyContainer);\n        mainContent.appendChild(this.inputContainer);\n        return mainContent;\n    }\n    /**\n     * Creates a new chat session\n     */\n    createNewChat() {\n        // Generate a unique ID for the chat\n        const chatId = `chat-${Date.now()}`;\n        // Create a new chat item\n        const newChat = {\n            id: chatId,\n            title: 'New Chat',\n            messages: []\n        };\n        // Add to history\n        this.chatHistory.push(newChat);\n        // Set as current chat\n        this.currentChatId = chatId;\n        // Update title input\n        this.titleInput.value = newChat.title;\n        // Clear message container\n        if (this.messageContainer) {\n            this.messageContainer.innerHTML = '';\n        }\n        // Hide history if it's visible\n        if (this.isHistoryViewActive) {\n            this.toggleHistoryView();\n        }\n    }\n    /**\n     * Toggles between chat view and history view\n     */\n    toggleHistoryView() {\n        this.isHistoryViewActive = !this.isHistoryViewActive;\n        if (this.isHistoryViewActive) {\n            // Show history view, hide message view\n            this.messageContainer.style.display = 'none';\n            this.historyContainer.style.display = 'block';\n            this.inputContainer.style.display = 'none';\n            this.titleInput.style.display = 'none';\n            // Populate history\n            this.renderChatHistory();\n        }\n        else {\n            // Show message view, hide history view\n            this.messageContainer.style.display = 'block';\n            this.historyContainer.style.display = 'none';\n            this.inputContainer.style.display = 'flex';\n            this.titleInput.style.display = 'block';\n        }\n    }\n    /**\n     * Renders the chat history in the history container\n     */\n    renderChatHistory() {\n        this.historyContainer.innerHTML = '';\n        if (this.chatHistory.length === 0) {\n            const emptyMessage = document.createElement('div');\n            emptyMessage.className = 'jp-llm-ext-empty-history-message';\n            emptyMessage.textContent = 'No chat history yet';\n            this.historyContainer.appendChild(emptyMessage);\n            return;\n        }\n        // Create a list of chat history items\n        this.chatHistory.forEach(chat => {\n            const historyItem = document.createElement('div');\n            historyItem.className = 'jp-llm-ext-history-item';\n            if (chat.id === this.currentChatId) {\n                historyItem.classList.add('jp-llm-ext-active');\n            }\n            // Add title\n            const title = document.createElement('div');\n            title.className = 'jp-llm-ext-history-title';\n            title.textContent = chat.title;\n            // Add message preview\n            const preview = document.createElement('div');\n            preview.className = 'jp-llm-ext-history-preview';\n            const lastMessage = chat.messages[chat.messages.length - 1];\n            preview.textContent = lastMessage\n                ? `${lastMessage.text.substring(0, 40)}${lastMessage.text.length > 40 ? '...' : ''}`\n                : 'Empty chat';\n            // Add click event\n            historyItem.addEventListener('click', () => this.loadChat(chat.id));\n            historyItem.appendChild(title);\n            historyItem.appendChild(preview);\n            this.historyContainer.appendChild(historyItem);\n        });\n    }\n    /**\n     * Loads a chat from history\n     */\n    loadChat(chatId) {\n        const chat = this.chatHistory.find(c => c.id === chatId);\n        if (!chat)\n            return;\n        // Set as current chat\n        this.currentChatId = chatId;\n        // Update title\n        this.titleInput.value = chat.title;\n        // Clear and re-populate message container\n        this.messageContainer.innerHTML = '';\n        chat.messages.forEach(msg => {\n            this.addMessage(msg.text, msg.sender, msg.isMarkdown, false);\n        });\n        // Switch back to chat view\n        if (this.isHistoryViewActive) {\n            this.toggleHistoryView();\n        }\n    }\n    /**\n     * Updates the title of the current chat\n     */\n    updateCurrentChatTitle() {\n        const chat = this.chatHistory.find(c => c.id === this.currentChatId);\n        if (chat) {\n            chat.title = this.titleInput.value;\n        }\n    }\n    /**\n     * Creates the controls container with toggles and action buttons\n     */\n    createControlsContainer() {\n        const controlsContainer = document.createElement('div');\n        controlsContainer.className = 'jp-llm-ext-controls-container';\n        // Create markdown toggle container\n        const toggleContainer = document.createElement('div');\n        toggleContainer.className = 'jp-llm-ext-toggle-container';\n        // Create markdown toggle\n        const markdownToggle = document.createElement('input');\n        markdownToggle.type = 'checkbox';\n        markdownToggle.id = 'markdown-toggle';\n        markdownToggle.style.marginRight = '5px';\n        markdownToggle.addEventListener('change', (e) => {\n            const target = e.target;\n            this.isMarkdownMode = target.checked;\n            this.inputField.placeholder = this.isMarkdownMode ?\n                'Write markdown here...\\n\\n# Example heading\\n- List item\\n\\n```code block```' :\n                'Ask me anything...';\n        });\n        // Create toggle label\n        const toggleLabel = document.createElement('label');\n        toggleLabel.htmlFor = 'markdown-toggle';\n        toggleLabel.textContent = 'Markdown mode';\n        toggleLabel.style.fontSize = '12px';\n        // Add toggle elements to container\n        toggleContainer.appendChild(markdownToggle);\n        toggleContainer.appendChild(toggleLabel);\n        // Create action buttons container\n        const actionButtonsContainer = document.createElement('div');\n        actionButtonsContainer.className = 'jp-llm-ext-action-buttons-container';\n        // Create all action buttons\n        const buttons = [\n            {\n                text: '@',\n                title: 'Insert context (@)',\n                action: (event) => {\n                    // Get the button's position\n                    const targetButton = event.currentTarget;\n                    const rect = targetButton.getBoundingClientRect();\n                    // Show the popup menu using the manager (now async)\n                    this.popupMenuManager.showPopupMenu(rect.left, rect.bottom);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            },\n            { text: '⤢', title: 'Expand input', action: () => this.toggleInputExpansion(actionButtonsContainer.children[3]) },\n            { text: '⚙️', title: 'Settings', action: (event) => { event.preventDefault(); event.stopPropagation(); this.showSettingsModal(); } },\n        ];\n        // Add all buttons to the container\n        buttons.forEach(button => {\n            const btn = this.createButton(button.text, button.title);\n            btn.addEventListener('click', (e) => button.action(e));\n            actionButtonsContainer.appendChild(btn);\n        });\n        // Add toggle and action buttons to the controls container\n        controlsContainer.appendChild(toggleContainer);\n        controlsContainer.appendChild(actionButtonsContainer);\n        return controlsContainer;\n    }\n    /**\n     * Toggles the expansion state of the input field\n     */\n    toggleInputExpansion(button) {\n        this.isInputExpanded = !this.isInputExpanded;\n        if (this.isInputExpanded) {\n            this.inputField.style.height = '100px';\n            this.inputField.style.resize = 'vertical';\n            button.textContent = '⤡';\n            button.title = 'Collapse input';\n        }\n        else {\n            this.inputField.style.height = 'auto';\n            this.inputField.style.resize = 'none';\n            button.textContent = '⤢';\n            button.title = 'Expand input';\n        }\n    }\n    /**\n     * Helper function to create a button with given text and tooltip\n     */\n    createButton(text, tooltip) {\n        const button = document.createElement('button');\n        button.textContent = text;\n        button.title = tooltip;\n        button.className = 'jp-Button jp-llm-ext-action-button';\n        return button;\n    }\n    /**\n     * Handles sending a message from the input field\n     */\n    handleSendMessage() {\n        const message = this.inputField.value.trim();\n        if (message) {\n            // Add user message to UI\n            this.addMessage(message, 'user', this.isMarkdownMode);\n            this.inputField.value = '';\n            // Reset expanded state if needed after sending\n            if (this.isInputExpanded) {\n                this.inputField.style.height = '100px';\n            }\n            else {\n                this.inputField.style.height = 'auto';\n                this.inputField.rows = 1;\n            }\n            // Create a temporary message container for the bot's streaming response\n            const botMessageDiv = document.createElement('div');\n            botMessageDiv.className = 'jp-llm-ext-bot-message';\n            const markdownIndicator = document.createElement('div');\n            markdownIndicator.textContent = \"MD\";\n            markdownIndicator.className = 'markdown-indicator';\n            botMessageDiv.appendChild(markdownIndicator);\n            // Create separate divs for streaming text and final markdown\n            const streamingDiv = document.createElement('div');\n            streamingDiv.className = 'streaming-content';\n            streamingDiv.style.whiteSpace = 'pre-wrap';\n            streamingDiv.style.fontFamily = 'monospace';\n            streamingDiv.style.fontSize = '0.9em';\n            botMessageDiv.appendChild(streamingDiv);\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'markdown-content';\n            contentDiv.style.display = 'none'; // Initially hidden\n            botMessageDiv.appendChild(contentDiv);\n            this.messageContainer.appendChild(botMessageDiv);\n            // Variable to collect the complete response\n            let completeResponse = '';\n            // Get cell context if available\n            const cellContext = globals_1.globals.cellContextTracker ?\n                globals_1.globals.cellContextTracker.getCurrentCellContext() : null;\n            // Stream response from API\n            this.apiClient.streamChat(message, { cellContext }, \n            // On each chunk received\n            (chunk) => {\n                completeResponse += chunk;\n                streamingDiv.textContent = completeResponse;\n                this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n            }, \n            // On complete\n            () => {\n                // Hide streaming div, show markdown div\n                streamingDiv.style.display = 'none';\n                contentDiv.style.display = 'block';\n                // Pre-process and render markdown\n                try {\n                    // Pre-process the markdown to fix any issues with code blocks\n                    const processedMarkdown = (0, markdown_config_1.preprocessMarkdown)(completeResponse);\n                    // Parse and sanitize\n                    const rawHtml = marked_1.marked.parse(processedMarkdown);\n                    const sanitizedHtml = dompurify_1.default.sanitize(rawHtml);\n                    // Apply the HTML with proper code block styling\n                    contentDiv.innerHTML = sanitizedHtml;\n                    // Add syntax highlighting classes to code blocks\n                    const codeBlocks = contentDiv.querySelectorAll('pre code');\n                    codeBlocks.forEach(block => {\n                        var _a;\n                        block.classList.add('jp-RenderedText');\n                        (_a = block.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add('jp-RenderedHTMLCommon');\n                    });\n                    // Add action buttons to the bot message\n                    console.log('Adding action buttons to streamed bot message');\n                    const actionsDiv = document.createElement('div');\n                    actionsDiv.className = 'jp-llm-ext-message-actions';\n                    actionsDiv.style.display = 'flex'; // Ensure display is set\n                    // Copy button with icon\n                    const copyButton = document.createElement('button');\n                    copyButton.className = 'jp-llm-ext-message-action-button';\n                    copyButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg>';\n                    copyButton.title = 'Copy message to clipboard';\n                    copyButton.addEventListener('click', (event) => {\n                        event.stopPropagation();\n                        this.copyMessageToClipboard(completeResponse);\n                    });\n                    actionsDiv.appendChild(copyButton);\n                    // Add to button with icon\n                    const addToButton = document.createElement('button');\n                    addToButton.className = 'jp-llm-ext-message-action-button';\n                    addToButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect><path d=\"M12 11v6\"></path><path d=\"M9 14h6\"></path></svg>';\n                    addToButton.title = 'Add message to current cell';\n                    addToButton.addEventListener('click', (event) => {\n                        event.stopPropagation();\n                        this.addMessageToCell(completeResponse);\n                    });\n                    actionsDiv.appendChild(addToButton);\n                    // Add buttons to message\n                    botMessageDiv.appendChild(actionsDiv);\n                    console.log('Action buttons added to bot message:', actionsDiv);\n                }\n                catch (error) {\n                    contentDiv.textContent = completeResponse;\n                    console.error('Failed to render markdown:', error);\n                }\n                // Save to chat history\n                const chat = this.chatHistory.find(c => c.id === this.currentChatId);\n                if (chat) {\n                    chat.messages.push({\n                        text: completeResponse,\n                        sender: 'bot',\n                        isMarkdown: true\n                    });\n                }\n                this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n            }, \n            // On error\n            (error) => {\n                streamingDiv.style.display = 'none';\n                contentDiv.style.display = 'block';\n                contentDiv.innerHTML = `<div class=\"error-message\">Error: ${error.message}</div>`;\n                console.error('API Error:', error);\n            });\n        }\n    }\n    /**\n     * Adds a message to the chat interface\n     */\n    addMessage(text, sender, isMarkdown = false, saveToHistory = true) {\n        console.log('Adding message:', { sender, isMarkdown }); // Debug log\n        const messageDiv = document.createElement('div');\n        messageDiv.className = sender === 'user' ? 'jp-llm-ext-user-message' : 'jp-llm-ext-bot-message';\n        // Add message content\n        if (isMarkdown || sender === 'bot') {\n            // Bot messages are always rendered as markdown\n            const markdownIndicator = document.createElement('div');\n            markdownIndicator.textContent = \"MD\";\n            markdownIndicator.className = 'markdown-indicator';\n            messageDiv.appendChild(markdownIndicator);\n            // Create a container for the rendered markdown\n            const contentDiv = document.createElement('div');\n            contentDiv.className = 'markdown-content';\n            try {\n                // Pre-process the markdown text\n                const processedText = (0, markdown_config_1.preprocessMarkdown)(text);\n                // Parse and render markdown\n                const rawHtml = marked_1.marked.parse(processedText);\n                const sanitizedHtml = dompurify_1.default.sanitize(rawHtml);\n                contentDiv.innerHTML = sanitizedHtml;\n                // Add syntax highlighting classes to code blocks\n                const codeBlocks = contentDiv.querySelectorAll('pre code');\n                codeBlocks.forEach(block => {\n                    var _a;\n                    block.classList.add('jp-RenderedText');\n                    (_a = block.parentElement) === null || _a === void 0 ? void 0 : _a.classList.add('jp-RenderedHTMLCommon');\n                });\n            }\n            catch (error) {\n                contentDiv.textContent = text;\n                console.error('Failed to render markdown:', error);\n            }\n            messageDiv.appendChild(contentDiv);\n            // Add action buttons for bot messages\n            if (sender === 'bot') {\n                console.log('Adding action buttons to bot message'); // Debug log\n                const actionsDiv = document.createElement('div');\n                actionsDiv.className = 'jp-llm-ext-message-actions';\n                // Copy button with icon\n                const copyButton = document.createElement('button');\n                copyButton.className = 'jp-llm-ext-message-action-button';\n                copyButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path></svg>';\n                copyButton.title = 'Copy message to clipboard';\n                copyButton.addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    this.copyMessageToClipboard(text);\n                });\n                actionsDiv.appendChild(copyButton);\n                // Add to button with icon\n                const addToButton = document.createElement('button');\n                addToButton.className = 'jp-llm-ext-message-action-button';\n                addToButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect><path d=\"M12 11v6\"></path><path d=\"M9 14h6\"></path></svg>';\n                addToButton.title = 'Add message to current cell';\n                addToButton.addEventListener('click', (event) => {\n                    event.stopPropagation();\n                    this.addMessageToCell(text);\n                });\n                actionsDiv.appendChild(addToButton);\n                // Add buttons to message\n                messageDiv.appendChild(actionsDiv);\n                console.log('Action buttons added to message:', actionsDiv); // Debug log\n            }\n        }\n        else {\n            messageDiv.textContent = text;\n        }\n        this.messageContainer.appendChild(messageDiv);\n        this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n        // Save to chat history\n        if (saveToHistory) {\n            const chat = this.chatHistory.find(c => c.id === this.currentChatId);\n            if (chat) {\n                chat.messages.push({\n                    text,\n                    sender,\n                    isMarkdown: isMarkdown || sender === 'bot'\n                });\n            }\n        }\n    }\n    /**\n     * Copies message content to clipboard\n     */\n    copyMessageToClipboard(text) {\n        try {\n            navigator.clipboard.writeText(text).then(() => {\n                console.log('Content copied to clipboard');\n                // Find the button element that was clicked\n                const buttons = document.querySelectorAll('.jp-llm-ext-message-action-button');\n                let clickedButton = null;\n                for (let i = 0; i < buttons.length; i++) {\n                    const button = buttons[i];\n                    if (button.title === 'Copy message to clipboard' && button === document.activeElement) {\n                        clickedButton = button;\n                        break;\n                    }\n                }\n                // Show visual feedback if we found the button\n                if (clickedButton) {\n                    const originalHTML = clickedButton.innerHTML;\n                    clickedButton.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 6L9 17l-5-5\"></path></svg>';\n                    setTimeout(() => {\n                        clickedButton.innerHTML = originalHTML;\n                    }, 2000);\n                }\n            }).catch(err => {\n                console.error('Failed to copy text: ', err);\n            });\n        }\n        catch (error) {\n            console.error('Error copying to clipboard:', error);\n        }\n    }\n    /**\n     * Adds message content to the current cell\n     */\n    addMessageToCell(text) {\n        var _a;\n        const cell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (!cell || !cell.editor) {\n            return;\n        }\n        try {\n            const editor = cell.editor;\n            const view = editor.editor;\n            if (!view) {\n                return;\n            }\n            // Get current cursor position\n            const state = view.state;\n            const selection = state.selection;\n            const cursorPos = selection.main.head;\n            // Insert newline and message content at cursor position\n            const transaction = state.update({\n                changes: {\n                    from: cursorPos,\n                    insert: `\\n${text}`\n                },\n                selection: { anchor: cursorPos + text.length + 1 }\n            });\n            view.dispatch(transaction);\n        }\n        catch (error) {\n            console.error('Error adding message to cell:', error);\n        }\n    }\n    /**\n     * Gets the currently selected text from the active notebook cell.\n     * (Helper for PopupMenuManager callback)\n     */\n    getSelectedText() {\n        var _a, _b, _c;\n        const cell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (cell === null || cell === void 0 ? void 0 : cell.editor) {\n            const editor = cell.editor; // IEditor\n            // Access CodeMirror editor instance if possible\n            const cmEditor = editor.editor;\n            if (cmEditor && cmEditor.state) {\n                const state = cmEditor.state;\n                const selection = state.selection.main; // Get the main selection\n                if (selection.empty) {\n                    return null; // No text selected\n                }\n                return state.doc.sliceString(selection.from, selection.to);\n            }\n            console.warn(\"Could not access CodeMirror state to get selection.\");\n            // Avoid using getRange as it's confirmed not to exist on IEditor\n            return null;\n        }\n        else {\n            // Attempt to get selection from document if no notebook active (e.g., text editor)\n            const activeWidget = (_c = (_b = globals_1.globals.app) === null || _b === void 0 ? void 0 : _b.shell) === null || _c === void 0 ? void 0 : _c.currentWidget;\n            if (activeWidget && 'content' in activeWidget && activeWidget.content.editor) {\n                const editor = activeWidget.content.editor;\n                const cmEditor = editor.editor;\n                if (cmEditor && cmEditor.state) {\n                    const state = cmEditor.state;\n                    const selection = state.selection.main;\n                    if (selection.empty) {\n                        return null;\n                    }\n                    return state.doc.sliceString(selection.from, selection.to);\n                }\n                console.warn(\"Could not access CodeMirror state for non-notebook editor selection.\");\n                return null; // Avoid getRange\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets the content of the currently active notebook cell.\n     * (Helper for PopupMenuManager callback)\n     */\n    getCurrentCellContent() {\n        var _a, _b, _c;\n        const activeCell = (_a = globals_1.globals.notebookTracker) === null || _a === void 0 ? void 0 : _a.activeCell;\n        if (activeCell === null || activeCell === void 0 ? void 0 : activeCell.model) {\n            // Try using sharedModel first (more robust)\n            if (activeCell.model.sharedModel && typeof activeCell.model.sharedModel.getSource === 'function') {\n                return activeCell.model.sharedModel.getSource();\n            }\n            // Fallback: Try using toJSON().source\n            const cellJson = activeCell.model.toJSON();\n            if (typeof (cellJson === null || cellJson === void 0 ? void 0 : cellJson.source) === 'string') {\n                return cellJson.source;\n            }\n            else if (Array.isArray(cellJson === null || cellJson === void 0 ? void 0 : cellJson.source)) {\n                // If source is an array of strings, join them\n                return cellJson.source.join('\\n');\n            }\n            console.warn(\"Could not get cell content via model.value.text or toJSON().source\");\n            return null;\n        }\n        // Fallback for non-notebook editors if needed\n        const activeWidget = (_c = (_b = globals_1.globals.app) === null || _b === void 0 ? void 0 : _b.shell) === null || _c === void 0 ? void 0 : _c.currentWidget;\n        if (activeWidget && 'content' in activeWidget && activeWidget.content.model) {\n            return activeWidget.content.model.value.text;\n        }\n        return null;\n    }\n    /**\n     * Appends text to the input field with proper spacing\n     */\n    appendToInput(text) {\n        try {\n            const currentValue = this.inputField.value;\n            if (currentValue) {\n                // If there's existing content, add a newline before appending\n                this.inputField.value = `${currentValue}\\n\\n${text}`;\n            }\n            else {\n                this.inputField.value = text;\n            }\n            // Focus the input field and move cursor to end\n            this.inputField.focus();\n            this.inputField.setSelectionRange(this.inputField.value.length, this.inputField.value.length);\n        }\n        catch (error) {\n            console.error('Error appending to input:', error);\n        }\n    }\n    // Settings modal methods\n    createSettingsModal() {\n        const modal = document.createElement('div');\n        modal.className = 'jp-llm-ext-settings-modal';\n        modal.style.display = 'none'; // Keep this inline style for toggling visibility\n        const content = document.createElement('div');\n        content.className = 'jp-llm-ext-settings-content';\n        const title = document.createElement('h2');\n        title.className = 'jp-llm-ext-settings-title';\n        title.textContent = 'Settings';\n        content.appendChild(title);\n        const form = document.createElement('form');\n        form.className = 'jp-llm-ext-settings-form';\n        // Provider selection\n        const providerLabel = document.createElement('label');\n        providerLabel.className = 'jp-llm-ext-settings-label';\n        providerLabel.textContent = 'API Provider:';\n        form.appendChild(providerLabel);\n        const providerSelect = document.createElement('select');\n        providerSelect.className = 'jp-llm-ext-settings-select';\n        providerSelect.id = 'settings-provider';\n        ['OpenAI', 'HuggingFace', 'Local'].forEach(opt => {\n            const option = document.createElement('option');\n            option.value = opt;\n            option.textContent = opt;\n            providerSelect.appendChild(option);\n        });\n        form.appendChild(providerSelect);\n        // API Key input\n        const apiKeyLabel = document.createElement('label');\n        apiKeyLabel.className = 'jp-llm-ext-settings-label';\n        apiKeyLabel.textContent = 'API Key:';\n        form.appendChild(apiKeyLabel);\n        const apiKeyInput = document.createElement('input');\n        apiKeyInput.className = 'jp-llm-ext-settings-input';\n        apiKeyInput.type = 'password';\n        apiKeyInput.id = 'settings-api-key';\n        form.appendChild(apiKeyInput);\n        // API URL input\n        const apiUrlLabel = document.createElement('label');\n        apiUrlLabel.className = 'jp-llm-ext-settings-label';\n        apiUrlLabel.textContent = 'API URL (optional):';\n        form.appendChild(apiUrlLabel);\n        const apiUrlInput = document.createElement('input');\n        apiUrlInput.className = 'jp-llm-ext-settings-input';\n        apiUrlInput.type = 'text';\n        apiUrlInput.id = 'settings-api-url';\n        form.appendChild(apiUrlInput);\n        // Rules input\n        const rulesLabel = document.createElement('label');\n        rulesLabel.className = 'jp-llm-ext-settings-label';\n        rulesLabel.textContent = 'Custom Rules (optional):';\n        form.appendChild(rulesLabel);\n        const rulesInput = document.createElement('textarea');\n        rulesInput.className = 'jp-llm-ext-settings-textarea';\n        rulesInput.id = 'settings-rules';\n        form.appendChild(rulesInput);\n        // Buttons container\n        const btnContainer = document.createElement('div');\n        btnContainer.className = 'jp-llm-ext-settings-buttons';\n        const saveBtn = document.createElement('button');\n        saveBtn.className = 'jp-llm-ext-settings-button jp-llm-ext-settings-save-button';\n        saveBtn.textContent = 'Save';\n        saveBtn.addEventListener('click', () => {\n            const provider = document.getElementById('settings-provider').value;\n            const key = document.getElementById('settings-api-key').value;\n            const url = document.getElementById('settings-api-url').value;\n            const rules = document.getElementById('settings-rules').value;\n            console.log('Settings saved:', { provider, key, url, rules });\n            this.hideSettingsModal();\n        });\n        const cancelBtn = document.createElement('button');\n        cancelBtn.className = 'jp-llm-ext-settings-button jp-llm-ext-settings-cancel-button';\n        cancelBtn.textContent = 'Cancel';\n        cancelBtn.addEventListener('click', () => this.hideSettingsModal());\n        btnContainer.appendChild(saveBtn);\n        btnContainer.appendChild(cancelBtn);\n        form.appendChild(btnContainer);\n        content.appendChild(form);\n        modal.appendChild(content);\n        return modal;\n    }\n    showSettingsModal() {\n        this.settingsModalContainer.style.display = 'flex';\n    }\n    hideSettingsModal() {\n        this.settingsModalContainer.style.display = 'none';\n    }\n}\nexports.SimpleSidebarWidget = SimpleSidebarWidget;\n"],"names":[],"sourceRoot":""}