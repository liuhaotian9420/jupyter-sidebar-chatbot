{"version":3,"file":"lib_index_js.59958de6cefeb24b6852.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAiD;AACG;AACX;AACc;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAO;AACjC;AACA;AACA,CAAC;AACD;AACA,kCAAkC,mDAAM;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,iEAAe;AACzC;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyter-simple-extension/./lib/index.js"],"sourcesContent":["import { ILauncher } from '@jupyterlab/launcher';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\nimport { ICommandPalette } from '@jupyterlab/apputils';\n// Example icon string (base64-encoded SVG)\nconst iconSvgStr = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chat-left-text\" viewBox=\"0 0 16 16\">' +\n    '<path d=\"M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H4.414A2 2 0 0 0 3 11.586l-2 2V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12.793a.5.5 0 0 0 .854.353l2.853-2.853A1 1 0 0 1 4.414 12H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\"/>' +\n    '<path d=\"M3 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM3 6a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9A.5.5 0 0 1 3 6zm0 2.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>' +\n    '</svg>';\n// Create a custom icon\nconst extensionIcon = new LabIcon({\n    name: 'simple:icon',\n    svgstr: iconSvgStr\n});\n// Create a widget for the sidebar\nclass SimpleSidebarWidget extends Widget {\n    constructor() {\n        super();\n        this.id = 'simple-sidebar';\n        this.title.label = 'Chat Interface';\n        this.title.caption = 'Chat Interface';\n        this.title.icon = extensionIcon;\n        this.title.closable = true;\n        // Create the main container\n        const content = document.createElement('div');\n        content.className = 'simple-sidebar-content';\n        content.style.display = 'flex';\n        content.style.flexDirection = 'column';\n        content.style.height = '100%';\n        // Create message container\n        this.messageContainer = document.createElement('div');\n        this.messageContainer.className = 'message-container';\n        this.messageContainer.style.flexGrow = '1';\n        this.messageContainer.style.overflowY = 'auto';\n        this.messageContainer.style.padding = '10px';\n        this.messageContainer.style.borderBottom = '1px solid #e0e0e0';\n        // Create input container\n        const inputContainer = document.createElement('div');\n        inputContainer.style.display = 'flex';\n        inputContainer.style.padding = '10px';\n        inputContainer.style.gap = '5px';\n        // Create input field\n        this.inputField = document.createElement('input');\n        this.inputField.type = 'text';\n        this.inputField.placeholder = 'Type your message...';\n        this.inputField.style.flexGrow = '1';\n        this.inputField.style.padding = '5px';\n        this.inputField.style.border = '1px solid #ccc';\n        this.inputField.style.borderRadius = '3px';\n        // Create send button\n        const sendButton = document.createElement('button');\n        sendButton.className = 'jp-Button';\n        sendButton.textContent = 'Send';\n        sendButton.style.padding = '5px 10px';\n        // Add event listeners\n        sendButton.addEventListener('click', () => this.handleSendMessage());\n        this.inputField.addEventListener('keypress', (event) => {\n            if (event.key === 'Enter') {\n                this.handleSendMessage();\n            }\n        });\n        // Assemble the components\n        inputContainer.appendChild(this.inputField);\n        inputContainer.appendChild(sendButton);\n        content.appendChild(this.messageContainer);\n        content.appendChild(inputContainer);\n        this.node.appendChild(content);\n    }\n    handleSendMessage() {\n        const message = this.inputField.value.trim();\n        if (message) {\n            this.addMessage(message, 'user');\n            this.inputField.value = '';\n            // Here you can add logic to handle the message and get a response\n            // For now, we'll just echo the message\n            setTimeout(() => {\n                this.addMessage(`Echo: ${message}`, 'bot');\n            }, 500);\n        }\n    }\n    addMessage(text, sender) {\n        const messageDiv = document.createElement('div');\n        messageDiv.style.marginBottom = '10px';\n        messageDiv.style.padding = '8px';\n        messageDiv.style.borderRadius = '5px';\n        messageDiv.style.maxWidth = '80%';\n        messageDiv.style.wordWrap = 'break-word';\n        if (sender === 'user') {\n            messageDiv.style.backgroundColor = '#e3f2fd';\n            messageDiv.style.marginLeft = 'auto';\n        }\n        else {\n            messageDiv.style.backgroundColor = '#f5f5f5';\n            messageDiv.style.marginRight = 'auto';\n        }\n        messageDiv.textContent = text;\n        this.messageContainer.appendChild(messageDiv);\n        this.messageContainer.scrollTop = this.messageContainer.scrollHeight;\n    }\n}\n/**\n * Initialization data for the jupyter-simple-extension extension.\n */\nconst plugin = {\n    id: 'jupyter-simple-extension:plugin',\n    autoStart: true,\n    requires: [ILauncher, ICommandPalette],\n    activate: (app, launcher, palette) => {\n        console.log('JupyterLab extension jupyter-simple-extension is activated!');\n        // Create the sidebar widget\n        const sidebarWidget = new SimpleSidebarWidget();\n        // Add the sidebar widget to the left area on startup\n        app.shell.add(sidebarWidget, 'left', { rank: 100 });\n        // Add a command to toggle the sidebar\n        app.commands.addCommand('simple-extension:toggle-sidebar', {\n            label: 'Toggle Simple Sidebar',\n            icon: extensionIcon,\n            execute: () => {\n                if (sidebarWidget.isAttached) {\n                    sidebarWidget.parent = null;\n                }\n                else {\n                    app.shell.add(sidebarWidget, 'left', { rank: 100 });\n                }\n            }\n        });\n        // Add the command to the command palette\n        palette.addItem({\n            command: 'simple-extension:toggle-sidebar',\n            category: 'Extension'\n        });\n        // Add a launcher item\n        launcher.add({\n            command: 'simple-extension:toggle-sidebar',\n            category: 'Other',\n            rank: 1\n        });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}